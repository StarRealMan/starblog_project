{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/system/alipay.jpg","path":"images/system/alipay.jpg","modified":0,"renderable":0},{"_id":"source/images/system/avatar.png","path":"images/system/avatar.png","modified":0,"renderable":0},{"_id":"source/images/system/ico3232.ico","path":"images/system/ico3232.ico","modified":0,"renderable":0},{"_id":"source/images/system/self.jpg","path":"images/system/self.jpg","modified":0,"renderable":0},{"_id":"source/images/system/wechatpay.jpg","path":"images/system/wechatpay.jpg","modified":0,"renderable":0},{"_id":"source/images/2020/开启新的旅程/thanku.png","path":"images/2020/开启新的旅程/thanku.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/1004013066.png","path":"old_images/2020/02/1004013066.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/1013716568.png","path":"old_images/2020/02/1013716568.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/1055054676.png","path":"old_images/2020/02/1055054676.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/1060876639.png","path":"old_images/2020/02/1060876639.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/1298152153.png","path":"old_images/2020/02/1298152153.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/1328380167.png","path":"old_images/2020/02/1328380167.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/1356342890.jpg","path":"old_images/2020/02/1356342890.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/1451004919.jpg","path":"old_images/2020/02/1451004919.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/1473089206.jpg","path":"old_images/2020/02/1473089206.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/1475506760.png","path":"old_images/2020/02/1475506760.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/1502540671.png","path":"old_images/2020/02/1502540671.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/1605118435.jpg","path":"old_images/2020/02/1605118435.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/17198532.png","path":"old_images/2020/02/17198532.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/1782312365.png","path":"old_images/2020/02/1782312365.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/1919880935.png","path":"old_images/2020/02/1919880935.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/192949300.png","path":"old_images/2020/02/192949300.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/2260242333.jpg","path":"old_images/2020/02/2260242333.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/2322548764.png","path":"old_images/2020/02/2322548764.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/2324103181.png","path":"old_images/2020/02/2324103181.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/242777591.jpg","path":"old_images/2020/02/242777591.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/2461771289.jpg","path":"old_images/2020/02/2461771289.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/2495871206.png","path":"old_images/2020/02/2495871206.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/2575250596.png","path":"old_images/2020/02/2575250596.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/2664873141.png","path":"old_images/2020/02/2664873141.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/2670368623.png","path":"old_images/2020/02/2670368623.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/2677382250.png","path":"old_images/2020/02/2677382250.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/2697564545.png","path":"old_images/2020/02/2697564545.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/2865477902.png","path":"old_images/2020/02/2865477902.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/3056175988.png","path":"old_images/2020/02/3056175988.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/3086867647.png","path":"old_images/2020/02/3086867647.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/3108166881.png","path":"old_images/2020/02/3108166881.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/3215796440.png","path":"old_images/2020/02/3215796440.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/3230677208.jpg","path":"old_images/2020/02/3230677208.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/3523885477.png","path":"old_images/2020/02/3523885477.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/3576370167.png","path":"old_images/2020/02/3576370167.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/3577136343.png","path":"old_images/2020/02/3577136343.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/3647791761.png","path":"old_images/2020/02/3647791761.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/3694597941.png","path":"old_images/2020/02/3694597941.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/3787159546.png","path":"old_images/2020/02/3787159546.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/3798843184.jpg","path":"old_images/2020/02/3798843184.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/4018005133.png","path":"old_images/2020/02/4018005133.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/4023551690.png","path":"old_images/2020/02/4023551690.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/4039222537.png","path":"old_images/2020/02/4039222537.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/4095688085.png","path":"old_images/2020/02/4095688085.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/423865379.png","path":"old_images/2020/02/423865379.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/4250702223.png","path":"old_images/2020/02/4250702223.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/42703606.jpg","path":"old_images/2020/02/42703606.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/4279915631.jpg","path":"old_images/2020/02/4279915631.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/462653967.png","path":"old_images/2020/02/462653967.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/506917544.png","path":"old_images/2020/02/506917544.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/698813314.png","path":"old_images/2020/02/698813314.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/701335943.png","path":"old_images/2020/02/701335943.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/817300143.jpg","path":"old_images/2020/02/817300143.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/855161026.jpg","path":"old_images/2020/02/855161026.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/915343109.jpg","path":"old_images/2020/02/915343109.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/02/923726181.png","path":"old_images/2020/02/923726181.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/1201115831.png","path":"old_images/2020/03/1201115831.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/1272507004.png","path":"old_images/2020/03/1272507004.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/133748069.png","path":"old_images/2020/03/133748069.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/1392671162.png","path":"old_images/2020/03/1392671162.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/1451641391.png","path":"old_images/2020/03/1451641391.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/1453260522.png","path":"old_images/2020/03/1453260522.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/1580985861.png","path":"old_images/2020/03/1580985861.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/1630131877.png","path":"old_images/2020/03/1630131877.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/1666061624.png","path":"old_images/2020/03/1666061624.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/1699646663.png","path":"old_images/2020/03/1699646663.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/1765616617.png","path":"old_images/2020/03/1765616617.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/1797764618.png","path":"old_images/2020/03/1797764618.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/1837004197.png","path":"old_images/2020/03/1837004197.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/1878500351.png","path":"old_images/2020/03/1878500351.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/1892066829.png","path":"old_images/2020/03/1892066829.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/2072343370.png","path":"old_images/2020/03/2072343370.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/2233313056.png","path":"old_images/2020/03/2233313056.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/2313483864.png","path":"old_images/2020/03/2313483864.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/2487254389.png","path":"old_images/2020/03/2487254389.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/2566011118.png","path":"old_images/2020/03/2566011118.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/2569806803.png","path":"old_images/2020/03/2569806803.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/2629826971.png","path":"old_images/2020/03/2629826971.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/2715500984.gif","path":"old_images/2020/03/2715500984.gif","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/2845666079.png","path":"old_images/2020/03/2845666079.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/2861910617.png","path":"old_images/2020/03/2861910617.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/2875168475.gif","path":"old_images/2020/03/2875168475.gif","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/2883180973.png","path":"old_images/2020/03/2883180973.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/3099420731.png","path":"old_images/2020/03/3099420731.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/3142260807.jpg","path":"old_images/2020/03/3142260807.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/3384316763.png","path":"old_images/2020/03/3384316763.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/340887529.png","path":"old_images/2020/03/340887529.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/3703168680.png","path":"old_images/2020/03/3703168680.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/3781678227.png","path":"old_images/2020/03/3781678227.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/3846485483.png","path":"old_images/2020/03/3846485483.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/417397721.png","path":"old_images/2020/03/417397721.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/4226968886.png","path":"old_images/2020/03/4226968886.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/691907800.png","path":"old_images/2020/03/691907800.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/9722286.png","path":"old_images/2020/03/9722286.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/03/999894680.png","path":"old_images/2020/03/999894680.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/1010242782.png","path":"old_images/2020/04/1010242782.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/1058342956.png","path":"old_images/2020/04/1058342956.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/1299645001.png","path":"old_images/2020/04/1299645001.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/1463504003.png","path":"old_images/2020/04/1463504003.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/1469852139.png","path":"old_images/2020/04/1469852139.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/1549708112.png","path":"old_images/2020/04/1549708112.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/1621410449.png","path":"old_images/2020/04/1621410449.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/1650604475.png","path":"old_images/2020/04/1650604475.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/1882562433.png","path":"old_images/2020/04/1882562433.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/1901336664.png","path":"old_images/2020/04/1901336664.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/1922648166.png","path":"old_images/2020/04/1922648166.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/193187891.pdf","path":"old_images/2020/04/193187891.pdf","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/2063384682.png","path":"old_images/2020/04/2063384682.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/2133134256.jpg","path":"old_images/2020/04/2133134256.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/2295689788.png","path":"old_images/2020/04/2295689788.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/2297105551.png","path":"old_images/2020/04/2297105551.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/2303562078.png","path":"old_images/2020/04/2303562078.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/2449902183.png","path":"old_images/2020/04/2449902183.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/2554124242.png","path":"old_images/2020/04/2554124242.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/2586712878.png","path":"old_images/2020/04/2586712878.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/2618287092.png","path":"old_images/2020/04/2618287092.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/2682758795.png","path":"old_images/2020/04/2682758795.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/2789109287.png","path":"old_images/2020/04/2789109287.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/2794891800.png","path":"old_images/2020/04/2794891800.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/2906032673.png","path":"old_images/2020/04/2906032673.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/3074183323.jpg","path":"old_images/2020/04/3074183323.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/3084410468.png","path":"old_images/2020/04/3084410468.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/3106529428.png","path":"old_images/2020/04/3106529428.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/3257021255.jpg","path":"old_images/2020/04/3257021255.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/3271978332.png","path":"old_images/2020/04/3271978332.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/3285543330.png","path":"old_images/2020/04/3285543330.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/3432493824.png","path":"old_images/2020/04/3432493824.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/359761650.png","path":"old_images/2020/04/359761650.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/3960144680.png","path":"old_images/2020/04/3960144680.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/4102771430.png","path":"old_images/2020/04/4102771430.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/4165605798.jpeg","path":"old_images/2020/04/4165605798.jpeg","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/536799533.png","path":"old_images/2020/04/536799533.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/604554278.png","path":"old_images/2020/04/604554278.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/691379040.png","path":"old_images/2020/04/691379040.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/781569241.jpg","path":"old_images/2020/04/781569241.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/04/880508434.png","path":"old_images/2020/04/880508434.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/10186376.jpg","path":"old_images/2020/05/10186376.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/1088359098.jpg","path":"old_images/2020/05/1088359098.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/1113348697.jpg","path":"old_images/2020/05/1113348697.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/1170183205.png","path":"old_images/2020/05/1170183205.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/1187310326.jpg","path":"old_images/2020/05/1187310326.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/133193778.jpg","path":"old_images/2020/05/133193778.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/1353804718.jpg","path":"old_images/2020/05/1353804718.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/1424232658.jpg","path":"old_images/2020/05/1424232658.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/1571959298.jpg","path":"old_images/2020/05/1571959298.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/1596536276.jpg","path":"old_images/2020/05/1596536276.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/1760421220.jpg","path":"old_images/2020/05/1760421220.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/1820938573.jpg","path":"old_images/2020/05/1820938573.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/1880372148.jpg","path":"old_images/2020/05/1880372148.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/2016954707.jpg","path":"old_images/2020/05/2016954707.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/2166186195.jpg","path":"old_images/2020/05/2166186195.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/2294227069.jpg","path":"old_images/2020/05/2294227069.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/2541652972.jpg","path":"old_images/2020/05/2541652972.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/2576890486.jpg","path":"old_images/2020/05/2576890486.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/2761601438.jpg","path":"old_images/2020/05/2761601438.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/2978689860.jpg","path":"old_images/2020/05/2978689860.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/3062393400.jpg","path":"old_images/2020/05/3062393400.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/3068723404.jpg","path":"old_images/2020/05/3068723404.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/3174243626.jpg","path":"old_images/2020/05/3174243626.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/330527918.jpg","path":"old_images/2020/05/330527918.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/3310307667.jpg","path":"old_images/2020/05/3310307667.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/3326287196.jpg","path":"old_images/2020/05/3326287196.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/3433924516.png","path":"old_images/2020/05/3433924516.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/3462557488.png","path":"old_images/2020/05/3462557488.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/3518464858.jpg","path":"old_images/2020/05/3518464858.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/3913045297.jpg","path":"old_images/2020/05/3913045297.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/4002000137.jpg","path":"old_images/2020/05/4002000137.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/4174507093.gif","path":"old_images/2020/05/4174507093.gif","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/4249439680.jpg","path":"old_images/2020/05/4249439680.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/4289012251.jpg","path":"old_images/2020/05/4289012251.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/557249455.jpg","path":"old_images/2020/05/557249455.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/651860426.jpg","path":"old_images/2020/05/651860426.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/664969895.png","path":"old_images/2020/05/664969895.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/805442062.jpg","path":"old_images/2020/05/805442062.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/904172395.jpg","path":"old_images/2020/05/904172395.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/910319602.jpg","path":"old_images/2020/05/910319602.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/963849757.jpg","path":"old_images/2020/05/963849757.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/05/999634898.jpg","path":"old_images/2020/05/999634898.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/1075180362.jpg","path":"old_images/2020/06/1075180362.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/1085139085.jpg","path":"old_images/2020/06/1085139085.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/1099674099.jpg","path":"old_images/2020/06/1099674099.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/1235922839.jpg","path":"old_images/2020/06/1235922839.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/142298572.png","path":"old_images/2020/06/142298572.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/1460216437.png","path":"old_images/2020/06/1460216437.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/1785132415.jpg","path":"old_images/2020/06/1785132415.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/1821389100.jpg","path":"old_images/2020/06/1821389100.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/1829637362.jpg","path":"old_images/2020/06/1829637362.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/1911627333.jpg","path":"old_images/2020/06/1911627333.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/1930281352.jpg","path":"old_images/2020/06/1930281352.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/1955986387.jpg","path":"old_images/2020/06/1955986387.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/2065354894.jpg","path":"old_images/2020/06/2065354894.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/2236493176.png","path":"old_images/2020/06/2236493176.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/2270251422.png","path":"old_images/2020/06/2270251422.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/2328185984.jpg","path":"old_images/2020/06/2328185984.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/2730705132.jpg","path":"old_images/2020/06/2730705132.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/2743383745.jpg","path":"old_images/2020/06/2743383745.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/275706257.jpg","path":"old_images/2020/06/275706257.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/2780367333.jpg","path":"old_images/2020/06/2780367333.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/2792304263.jpg","path":"old_images/2020/06/2792304263.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/2855613712.jpg","path":"old_images/2020/06/2855613712.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/2875422330.jpg","path":"old_images/2020/06/2875422330.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/2947829010.jpg","path":"old_images/2020/06/2947829010.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/3043677073.png","path":"old_images/2020/06/3043677073.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/3183017928.png","path":"old_images/2020/06/3183017928.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/3236832836.jpg","path":"old_images/2020/06/3236832836.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/3332546483.jpg","path":"old_images/2020/06/3332546483.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/3333883292.jpg","path":"old_images/2020/06/3333883292.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/334535609.jpg","path":"old_images/2020/06/334535609.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/348952594.jpg","path":"old_images/2020/06/348952594.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/3567944637.jpg","path":"old_images/2020/06/3567944637.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/3579642186.jpg","path":"old_images/2020/06/3579642186.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/3640866494.jpg","path":"old_images/2020/06/3640866494.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/3795421197.jpg","path":"old_images/2020/06/3795421197.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/3831150800.jpg","path":"old_images/2020/06/3831150800.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/385346141.png","path":"old_images/2020/06/385346141.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/4074491988.png","path":"old_images/2020/06/4074491988.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/4103478537.jpg","path":"old_images/2020/06/4103478537.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/4143798911.jpg","path":"old_images/2020/06/4143798911.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/4288438894.jpg","path":"old_images/2020/06/4288438894.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/4291764818.png","path":"old_images/2020/06/4291764818.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/43534473.png","path":"old_images/2020/06/43534473.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/679760522.jpg","path":"old_images/2020/06/679760522.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/06/890806100.jpg","path":"old_images/2020/06/890806100.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/1028634298.png","path":"old_images/2020/07/1028634298.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/1225674126.png","path":"old_images/2020/07/1225674126.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/1260733011.png","path":"old_images/2020/07/1260733011.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/1264423062.png","path":"old_images/2020/07/1264423062.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/1405371260.gif","path":"old_images/2020/07/1405371260.gif","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/1501298663.png","path":"old_images/2020/07/1501298663.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/1559317015.png","path":"old_images/2020/07/1559317015.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/162826487.png","path":"old_images/2020/07/162826487.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/1700994165.png","path":"old_images/2020/07/1700994165.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/2048957230.png","path":"old_images/2020/07/2048957230.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/2066845163.png","path":"old_images/2020/07/2066845163.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/2140554824.png","path":"old_images/2020/07/2140554824.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/2308466294.png","path":"old_images/2020/07/2308466294.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/2310258600.png","path":"old_images/2020/07/2310258600.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/2422714402.png","path":"old_images/2020/07/2422714402.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/249903794.png","path":"old_images/2020/07/249903794.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/2541934723.png","path":"old_images/2020/07/2541934723.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/2612196784.png","path":"old_images/2020/07/2612196784.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/270229372.png","path":"old_images/2020/07/270229372.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/2817136246.png","path":"old_images/2020/07/2817136246.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/2822560807.jpg","path":"old_images/2020/07/2822560807.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/291067937.png","path":"old_images/2020/07/291067937.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/3001651570.png","path":"old_images/2020/07/3001651570.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/3074664648.jpg","path":"old_images/2020/07/3074664648.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/3087868713.png","path":"old_images/2020/07/3087868713.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/3134056928.png","path":"old_images/2020/07/3134056928.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/3240034142.png","path":"old_images/2020/07/3240034142.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/3351283967.png","path":"old_images/2020/07/3351283967.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/3520035333.gif","path":"old_images/2020/07/3520035333.gif","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/3548240241.png","path":"old_images/2020/07/3548240241.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/3570375741.jpg","path":"old_images/2020/07/3570375741.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/3794064227.png","path":"old_images/2020/07/3794064227.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/3819593002.png","path":"old_images/2020/07/3819593002.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/3860621436.png","path":"old_images/2020/07/3860621436.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/3888322204.png","path":"old_images/2020/07/3888322204.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/3991564688.png","path":"old_images/2020/07/3991564688.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/4097717059.png","path":"old_images/2020/07/4097717059.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/4181754296.png","path":"old_images/2020/07/4181754296.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/4243678235.png","path":"old_images/2020/07/4243678235.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/489071846.png","path":"old_images/2020/07/489071846.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/51341367.png","path":"old_images/2020/07/51341367.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/551017501.png","path":"old_images/2020/07/551017501.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/623017393.jpg","path":"old_images/2020/07/623017393.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/723480778.png","path":"old_images/2020/07/723480778.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/755844939.png","path":"old_images/2020/07/755844939.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/81368647.png","path":"old_images/2020/07/81368647.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/962343059.png","path":"old_images/2020/07/962343059.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/07/995794732.png","path":"old_images/2020/07/995794732.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/08/1049549032.jpg","path":"old_images/2020/08/1049549032.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/08/1060845710.png","path":"old_images/2020/08/1060845710.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/08/1083781610.png","path":"old_images/2020/08/1083781610.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/08/1639294894.png","path":"old_images/2020/08/1639294894.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/08/1791974604.png","path":"old_images/2020/08/1791974604.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/08/2072954433.png","path":"old_images/2020/08/2072954433.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/08/2373904712.png","path":"old_images/2020/08/2373904712.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/08/3016259840.png","path":"old_images/2020/08/3016259840.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/08/350215919.png","path":"old_images/2020/08/350215919.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/08/3614482147.png","path":"old_images/2020/08/3614482147.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/08/3976439614.png","path":"old_images/2020/08/3976439614.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/08/4046785801.png","path":"old_images/2020/08/4046785801.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/08/4228770977.png","path":"old_images/2020/08/4228770977.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/08/437577698.png","path":"old_images/2020/08/437577698.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/08/482966380.png","path":"old_images/2020/08/482966380.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/08/502004202.png","path":"old_images/2020/08/502004202.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/08/615084051.png","path":"old_images/2020/08/615084051.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/08/75184131.jpg","path":"old_images/2020/08/75184131.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/09/1356202506.jpg","path":"old_images/2020/09/1356202506.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/09/1988211125.jpg","path":"old_images/2020/09/1988211125.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/09/2082677778.png","path":"old_images/2020/09/2082677778.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/09/2234319971.jpg","path":"old_images/2020/09/2234319971.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/09/2369037501.jpg","path":"old_images/2020/09/2369037501.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/09/2393108645.jpg","path":"old_images/2020/09/2393108645.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/09/2522050574.jpg","path":"old_images/2020/09/2522050574.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/09/2995037215.jpg","path":"old_images/2020/09/2995037215.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/09/3319805378.png","path":"old_images/2020/09/3319805378.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/10/1161417211.jpg","path":"old_images/2020/10/1161417211.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/10/1506103335.jpg","path":"old_images/2020/10/1506103335.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/10/1768418527.jpg","path":"old_images/2020/10/1768418527.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/10/1816268613.jpg","path":"old_images/2020/10/1816268613.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/10/2013533644.jpg","path":"old_images/2020/10/2013533644.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/10/2296969013.jpg","path":"old_images/2020/10/2296969013.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/10/2420399875.jpg","path":"old_images/2020/10/2420399875.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/10/2447629851.jpg","path":"old_images/2020/10/2447629851.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/10/2604642185.jpg","path":"old_images/2020/10/2604642185.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/10/2634073253.jpg","path":"old_images/2020/10/2634073253.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/10/270394888.jpg","path":"old_images/2020/10/270394888.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/10/2773680925.jpg","path":"old_images/2020/10/2773680925.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/10/3031661130.png","path":"old_images/2020/10/3031661130.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/10/3032572949.png","path":"old_images/2020/10/3032572949.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/10/3422282407.jpg","path":"old_images/2020/10/3422282407.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/10/3898272400.jpg","path":"old_images/2020/10/3898272400.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/10/4055019828.png","path":"old_images/2020/10/4055019828.png","modified":0,"renderable":0},{"_id":"source/old_images/2020/10/513067831.jpg","path":"old_images/2020/10/513067831.jpg","modified":0,"renderable":0},{"_id":"source/old_images/2020/11/1735837242.png","path":"old_images/2020/11/1735837242.png","modified":0,"renderable":0},{"_id":"themes/my-Kratos-Rebirth/source/css/highlight.min.css","path":"css/highlight.min.css","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/css/kr-dark.min.css","path":"css/kr-dark.min.css","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/css/kratosr.min.css","path":"css/kratosr.min.css","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/css/prismjs.min.css","path":"css/prismjs.min.css","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/images/404.webp","path":"images/404.webp","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/images/about.webp","path":"images/about.webp","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/images/alipay.webp","path":"images/alipay.webp","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/images/avatar.webp","path":"images/avatar.webp","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/images/banner.webp","path":"images/banner.webp","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/images/banner_dark.webp","path":"images/banner_dark.webp","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/images/bg.webp","path":"images/bg.webp","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/images/failure.ico","path":"images/failure.ico","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/images/psr.webp","path":"images/psr.webp","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/images/sticky.webp","path":"images/sticky.webp","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/images/wechat.webp","path":"images/wechat.webp","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/js/candy.min.js","path":"js/candy.min.js","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/js/kr-dark.min.js","path":"js/kr-dark.min.js","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/js/kratosr.min.js","path":"js/kratosr.min.js","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/js/local-search.min.js","path":"js/local-search.min.js","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/js/pjax.min.js","path":"js/pjax.min.js","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/js/snow.min.js","path":"js/snow.min.js","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_1.webp","path":"images/thumb/thumb_1.webp","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_10.webp","path":"images/thumb/thumb_10.webp","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_11.webp","path":"images/thumb/thumb_11.webp","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_12.webp","path":"images/thumb/thumb_12.webp","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_13.webp","path":"images/thumb/thumb_13.webp","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_14.webp","path":"images/thumb/thumb_14.webp","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_15.webp","path":"images/thumb/thumb_15.webp","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_16.webp","path":"images/thumb/thumb_16.webp","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_17.webp","path":"images/thumb/thumb_17.webp","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_18.webp","path":"images/thumb/thumb_18.webp","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_19.webp","path":"images/thumb/thumb_19.webp","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_2.webp","path":"images/thumb/thumb_2.webp","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_20.webp","path":"images/thumb/thumb_20.webp","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_3.webp","path":"images/thumb/thumb_3.webp","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_4.webp","path":"images/thumb/thumb_4.webp","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_5.webp","path":"images/thumb/thumb_5.webp","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_6.webp","path":"images/thumb/thumb_6.webp","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_7.webp","path":"images/thumb/thumb_7.webp","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_8.webp","path":"images/thumb/thumb_8.webp","modified":0,"renderable":1},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_9.webp","path":"images/thumb/thumb_9.webp","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"fe5819cceae78c457ff9e38c892fef9429a23a4e","modified":1607936674232},{"_id":"source/_posts/11月3日东北大学交流感想.md","hash":"17b2fb11c56eed23b586a32bb34b7999dd7fe517","modified":1607948412451},{"_id":"source/_posts/3D物体是如何旋转滴1.md","hash":"cf64d065e30774d1d15541ba20dc3df33bf5152b","modified":1607948391555},{"_id":"source/_posts/FIR和IIR之间的故事.md","hash":"2366b270f34ed6c0602625b1b0050750c4490ffb","modified":1607948419167},{"_id":"source/_posts/LCD vs OLED.md","hash":"6164cf1d9960456a178da8ab76cb39081ed379ee","modified":1607948425831},{"_id":"source/_posts/3D物体是如何旋转滴2.md","hash":"3ce93522b70272dfe4410f0ff95311babaee253c","modified":1607948404347},{"_id":"source/_posts/HTTP协议最常见的两种请求方法.md","hash":"dc250b8d1077ba44272a8882d6938ddd0818e899","modified":1607948423283},{"_id":"source/_posts/ARM裸机开发实战1.md","hash":"e4c7a9c5d64c28549ebfb410be6a85c6f8769b9d","modified":1607948416771},{"_id":"source/_posts/中国加油！武汉加油！.md","hash":"fe0f9e3dc0c46ec24756b2afc70337b4419a28ff","modified":1607948551680},{"_id":"source/_posts/一个并不无聊的人的加入和调研.md","hash":"80659c36f73ba29a9f3e81c1be99d6c9a6ddb989","modified":1607948547300},{"_id":"source/_posts/ROS入门.md","hash":"7021c915e39709a9e281d2300e29d8affa378fe9","modified":1607948430530},{"_id":"source/_posts/Python爬虫实战！.md","hash":"19f59eb17e6c21e871fdfaeab6bc99dfbc0693f1","modified":1607948428107},{"_id":"source/_posts/从 最小二乘 到 最优化算法.md","hash":"ea532621f3099b8fc2734fb5456c36d922980ba2","modified":1607948455158},{"_id":"source/_posts/从双网卡——到路由表.md","hash":"a8b8505fa21ff6ebcc829658d71a33772b566570","modified":1607948448906},{"_id":"source/_posts/俺滴课表.md","hash":"244c649ff0e7d2f05a13d173ffde21e960567085","modified":1607948433214},{"_id":"source/_posts/傅里叶变换的两种变形——L&amp;Z.md","hash":"5a24ffb8d9f3c4b271d6d1a682746d806022544b","modified":1607948464550},{"_id":"source/_posts/出息啦！.md","hash":"45f4b19477055610b914995b3b94be5749fefdd7","modified":1607948442814},{"_id":"source/_posts/俺对卷积的粗鄙理解.md","hash":"8c8047f069b465c14ba8981f3f30152da679b9a7","modified":1607948436246},{"_id":"source/_posts/从支持向量机到拉格朗日乘子对偶问题.md","hash":"ca12f2897ef472b7514f11680fd733fe0bd19d6b","modified":1607949546365},{"_id":"source/_posts/初探自抗扰控制（ADRC）.md","hash":"f0e51f128844ff564f3fd14c5b1db955e5912d51","modified":1607948445098},{"_id":"source/_posts/利用ANSYS进行叶轮动态流场仿真分析实例.md","hash":"8fb4779243cc246693dd46e9c70579959c09290b","modified":1607948506549},{"_id":"source/_posts/双系统？虚拟机？Docker？.md","hash":"15ef1a156abed742a68f73ed3a133be7f56f39fa","modified":1607948529756},{"_id":"source/_posts/嗯，新的页面！.md","hash":"c4043547bf32bdb3a51bc663c74241ae9de9ab4e","modified":1607948513660},{"_id":"source/_posts/卡尔曼滤波器家族与观测器.md","hash":"942254fc55d9e542e9f98e923ec85b5bebad271f","modified":1607948490917},{"_id":"source/_posts/对比ARM与x86的boot过程.md","hash":"9989d544e44930e4980488b9a1fc1bff758fffc6","modified":1607948462342},{"_id":"source/_posts/技术传承——永磁同步电机驱动1.md","hash":"8a171d17781e14d74be0edcff211f01b9f630678","modified":1607948473157},{"_id":"source/_posts/开启新的旅程！.md","hash":"aa0227b4c48c53b4f5e5003c1f5e29819c9e966d","modified":1607948498765},{"_id":"source/_posts/技术传承——永磁同步电机驱动3.md","hash":"7d8114d9541ded7db829201116dc4f9177d6eb13","modified":1607948479641},{"_id":"source/_posts/技术传承——永磁同步电机驱动2.md","hash":"92d7f623949fc110f7341a35e6c6e6c73b3c2cdb","modified":1607948475337},{"_id":"source/_posts/揭开积分变换的面纱.md","hash":"6a57e061627ff73eabca7e3c4e06a3b2213016cb","modified":1607948486389},{"_id":"source/_posts/毕设开坑，欢迎大家关注.md","hash":"7f409306cecbbbfc60bf94950a590a5e7fe869aa","modified":1607948439386},{"_id":"source/_posts/欢迎新的小伙伴加入Star Blog，这里有注册方法哦！.md","hash":"ee58649863a17069d129c533051bcdc6336f5b95","modified":1607948470549},{"_id":"source/_posts/数字图像处理-课程设计.md","hash":"700e655d899f470c960af45cb54781239e6091a9","modified":1607948525992},{"_id":"source/_posts/浅浅浅浅浅谈计算机求数值解的方法.md","hash":"24490ef149aa4dd122161e136739fee2fa0d66b8","modified":1607948519848},{"_id":"source/_posts/现代控制理论总结1——Linear部分.md","hash":"884e2b5de643d2cabe5fb95145020e123f90a899","modified":1607948539244},{"_id":"source/_posts/现代控制理论总结2——NonLinear部分.md","hash":"56d601b1aba1d2f8638086639f51f151ba4b1097","modified":1607948541476},{"_id":"source/_posts/浅尝OpenGL.md","hash":"bbdbe040bb868fcf3ddf6de4db162bfb5c0fb745","modified":1607948516600},{"_id":"source/_posts/由LIT MOTORS平衡车获得的理力知识.md","hash":"564b83db607387b3371f6c55a84b14ca7ed1e0fc","modified":1607948549556},{"_id":"source/_posts/留数。。。也太难了吧.md","hash":"3f49b4433a3f384acb2301633b241185d5ddd0db","modified":1607948511209},{"_id":"source/_posts/立FLAG专用帖！.md","hash":"30c9ab212bb6759c0bf312d801a7a2acea4e6356","modified":1607948508617},{"_id":"source/_posts/第二次硬件尝试之开关电源.md","hash":"071555d0718fc5ed8f0898e5d643a9754aadc65b","modified":1607948457326},{"_id":"source/_posts/电磁学中的物理量.md","hash":"f508e1f942105de8e08e01eb84d35a6705573acb","modified":1607948460102},{"_id":"source/_posts/新人报到！虚拟样机在机器人领域的应用（入门篇）.md","hash":"c111d7b359636a89c14ff1adc489e9b92290c83d","modified":1607948545068},{"_id":"source/_posts/简简单单锁相环PLL.md","hash":"7a997052cbfb91f2ce7bdc8d006e9c0bd0143e77","modified":1607948484333},{"_id":"source/_posts/计算机网络基础.md","hash":"226e8cc1467a6f59fe90bf60de24dd5f21711eef","modified":1607948482237},{"_id":"source/_posts/网络是个什么东西？.md","hash":"eaad6a8c0907feb863fd63e456aeff82f3fab490","modified":1607948533284},{"_id":"source/_posts/重修线代的知识点总结.md","hash":"ded6cebea20675957e1191b502649cfe1a4004d4","modified":1607948553919},{"_id":"source/_posts/让编译不再麻烦——CMake使用.md","hash":"3edd02774856814fc3c741d37525e0f248c43e27","modified":1607948522484},{"_id":"source/about/index.md","hash":"5fa2f682c9a0090c262b29f2ffa943fb541e2a8e","modified":1607949835864},{"_id":"source/_posts/轨道交通领域的差速问题&amp;我与轨交.md","hash":"93f9063fffaa968257e97eecc72de90f502bba18","modified":1607948466706},{"_id":"source/_posts/轨道交通领域的牛顿特斯拉之战和你坐地铁听到的“防空警报声”.md","hash":"00b48a28fc8ad2909eba73f20f0b0f85d39c274b","modified":1607948468818},{"_id":"source/friends/index.md","hash":"6bba3450ff9ca25cdcc18823c9f5d890b9e9c2b8","modified":1607948987198},{"_id":"source/开发/index.md","hash":"16736ee75faebb0426f0941aabb44db82b5223fa","modified":1607694057913},{"_id":"source/控制/index.md","hash":"4b1bf260f6f767e1a4502165fce7ece69a937c54","modified":1607693992375},{"_id":"source/comment-policy/index.md","hash":"bd9fb1766ebb7cc8aad5e5252409f2be734be278","modified":1608015170928},{"_id":"source/工具/index.md","hash":"47493576f6176c4901fff4481593e0e7a0c673c8","modified":1607697031780},{"_id":"source/日常/index.md","hash":"7ec7e868a05bdd0f7f341d4e5a6bd78a7469b5a7","modified":1607693964187},{"_id":"source/物数/index.md","hash":"0eb00abe624bd1d596910cc966b3ec7dc0027408","modified":1607694029742},{"_id":"source/网络/index.md","hash":"144765bb80621221d2b576651f22f1ff0063a3e2","modified":1607694078025},{"_id":"source/images/system/ico3232.ico","hash":"2636f5bfb34290a0d25892bbfaea8f96835c386f","modified":1607852146209},{"_id":"source/images/system/self.jpg","hash":"a2891eadeb998715995e119c19d556d8510ac595","modified":1607949320684},{"_id":"source/images/2020/开启新的旅程/thanku.png","hash":"bcfeb524bbebe57a23b968351f8eab44e6079d28","modified":1607939085374},{"_id":"source/old_images/2020/02/1004013066.png","hash":"e06420c5ce7e22a9b9181f1aca51a7ccb2bfa8e3","modified":1607691766853},{"_id":"source/old_images/2020/02/1013716568.png","hash":"f84b0e5c3f9ccb3cbd5ba2999dbd3a4b1a60f4bb","modified":1607691786480},{"_id":"source/old_images/2020/02/1298152153.png","hash":"b60d3d0b41707819c5b55e9bfd5c9da663da71c8","modified":1607691784148},{"_id":"source/old_images/2020/02/1328380167.png","hash":"7a1551d8900946f767e79dd85a9afe3403b06325","modified":1607691766909},{"_id":"source/old_images/2020/02/1356342890.jpg","hash":"93866c12e5e83882228d9dfe408e944d1b9ff93f","modified":1607691801548},{"_id":"source/old_images/2020/02/1055054676.png","hash":"573cd5eee34aa62d06fb0f83232191e05cdc5358","modified":1607691787416},{"_id":"source/old_images/2020/02/1475506760.png","hash":"22efa438e12b5162439f076e431e9c213be9f73a","modified":1607691803404},{"_id":"source/old_images/2020/02/1473089206.jpg","hash":"819245b343b6b7b38450a928924c5f63167fc12e","modified":1607691766981},{"_id":"source/old_images/2020/02/1502540671.png","hash":"10fafd78b2d8facbc8aed58b7e886c5190c3ade2","modified":1607691786428},{"_id":"source/old_images/2020/02/17198532.png","hash":"e105d1658e8689e3aa510d68d2d27c7d5951c40c","modified":1607691785728},{"_id":"source/old_images/2020/02/1782312365.png","hash":"256d73114dea2f1d00d89a30214681e9688afb0e","modified":1607691787036},{"_id":"source/old_images/2020/02/1919880935.png","hash":"ad1642046dc4611e1d8d80462de5b1f14db30f1d","modified":1607691784076},{"_id":"source/old_images/2020/02/192949300.png","hash":"066ff81d6d7ab15008ad5ca112524eee9e3d4f48","modified":1607691802872},{"_id":"source/old_images/2020/02/2322548764.png","hash":"0034805391cb69d640026118ad8974031ed58e1b","modified":1607691784200},{"_id":"source/old_images/2020/02/2324103181.png","hash":"c94c6b99cb3457726841d76a9765b4ecee287a30","modified":1607691787168},{"_id":"source/old_images/2020/02/242777591.jpg","hash":"83a6ce371528c09afacff155ed30195d902e0b72","modified":1607691766789},{"_id":"source/old_images/2020/02/2260242333.jpg","hash":"9861b12fb7cc55729cf32fb0fdc6b0b2669c2ac6","modified":1607691786056},{"_id":"source/old_images/2020/02/1605118435.jpg","hash":"b19099b32c085f4ad0e98d344dcf52560c9887c5","modified":1607691783976},{"_id":"source/old_images/2020/02/2670368623.png","hash":"ad4fee29404d12d696ac39ebc57ce58519a790e2","modified":1607691802472},{"_id":"source/old_images/2020/02/2677382250.png","hash":"5aaaa8788b43d68e6a65d2ffe14cae88ce1fa133","modified":1607691783056},{"_id":"source/old_images/2020/02/2664873141.png","hash":"34f8b9ac40e9f531e81424fade745ba7781b47bb","modified":1607691766717},{"_id":"source/old_images/2020/02/2495871206.png","hash":"834e4d7ae93cecfdf4bcf42e8d2e25c327325228","modified":1607691766313},{"_id":"source/old_images/2020/02/2865477902.png","hash":"459473549553f48968553909eb522e00dd988d00","modified":1607691763609},{"_id":"source/old_images/2020/02/3056175988.png","hash":"13b3252807910c472d295e66ecf4c2f2844faf55","modified":1607691802820},{"_id":"source/old_images/2020/02/3215796440.png","hash":"7fccaeda8fa10b8fa2238a4eec5d9c4436411abc","modified":1607691764229},{"_id":"source/old_images/2020/02/3108166881.png","hash":"2dd0c37650a27298f0c06ba76d4db884eb1cfe10","modified":1607691785804},{"_id":"source/old_images/2020/02/3086867647.png","hash":"9de89e5de94b4ea9b9df79eb0b9bc18dc6983b9f","modified":1607691762401},{"_id":"source/old_images/2020/02/3576370167.png","hash":"4b2d5ac25758c09c1b40b3f765254e897a67a8ef","modified":1607691764381},{"_id":"source/old_images/2020/02/3230677208.jpg","hash":"b654eea93b3175495265af61f06a0a905b9cb516","modified":1607691785676},{"_id":"source/old_images/2020/02/3577136343.png","hash":"e26a30efcb8979f0572e3ad6c0c2800f37168ea1","modified":1607691784028},{"_id":"source/old_images/2020/02/3523885477.png","hash":"528692d61807c245c5673d37ba59484b68f899db","modified":1607691764329},{"_id":"source/old_images/2020/02/3694597941.png","hash":"42c83fe141f493d7dcb1a4704a7941ca8b8ded0b","modified":1607691784248},{"_id":"source/old_images/2020/02/4018005133.png","hash":"c61ead141e0962b4eb1fea65c9c6ec870e95474f","modified":1607691762637},{"_id":"source/old_images/2020/02/3647791761.png","hash":"5a9b432df5e5d28698654692817152606835abe9","modified":1607691783484},{"_id":"source/old_images/2020/02/4039222537.png","hash":"396d3e9b0a9bf8e5e0a6cf12c2393c961c96322b","modified":1607691767057},{"_id":"source/old_images/2020/02/4250702223.png","hash":"525572651d2e8ed341cff542734bc58ba3f93980","modified":1607691786376},{"_id":"source/old_images/2020/02/462653967.png","hash":"d0d3b523d8160ee95e755b42423be116b687ab1f","modified":1607691763557},{"_id":"source/old_images/2020/02/4279915631.jpg","hash":"97da87d27977af11b8c6edd4ad5a425179814ded","modified":1607691766413},{"_id":"source/old_images/2020/02/698813314.png","hash":"6c83ec5af862adbeb05f6de68455ac5717311d12","modified":1607691763485},{"_id":"source/old_images/2020/02/701335943.png","hash":"66407b7b26632c0ea5e2a0d5eab0863522a0b481","modified":1607691802420},{"_id":"source/old_images/2020/02/855161026.jpg","hash":"785d726bac96812e816941f166354b685646e8fa","modified":1607691764277},{"_id":"source/old_images/2020/02/506917544.png","hash":"174e9b005ca6234465d773230f114a8067795fe6","modified":1607691762513},{"_id":"source/old_images/2020/03/1201115831.png","hash":"d67993eb9ee9510519caf3f42070259ae21b1f6f","modified":1607692026681},{"_id":"source/old_images/2020/02/923726181.png","hash":"d4a979b10bc898cc0c4c58300beae9514d23cf96","modified":1607691802772},{"_id":"source/old_images/2020/02/915343109.jpg","hash":"490dbd9ce1eff4cf3f024c38a11f5ce53a105deb","modified":1607691764173},{"_id":"source/old_images/2020/03/1392671162.png","hash":"3052788860a2236163f6409a15091928289b16ff","modified":1607692005698},{"_id":"source/old_images/2020/03/1451641391.png","hash":"b3fe1ee959008fc91be5964e8282405373469f8c","modified":1607692015422},{"_id":"source/old_images/2020/03/1272507004.png","hash":"84fda39ff4a709402c45568cdc5e5525e2802d3a","modified":1607692017170},{"_id":"source/old_images/2020/03/133748069.png","hash":"942f873e96b615d37a96ba6f991585c2344487a4","modified":1607692029057},{"_id":"source/old_images/2020/03/1580985861.png","hash":"319f808643c5700fdef7c805c9495a16e40f89e1","modified":1607692032073},{"_id":"source/old_images/2020/03/1630131877.png","hash":"fd5d735d425ac2d04ce7f73114714ce34467e69e","modified":1607692006886},{"_id":"source/old_images/2020/03/1699646663.png","hash":"db1dd17fcfd8f5f5737cb44295d58522db13880a","modified":1607692015574},{"_id":"source/old_images/2020/03/1797764618.png","hash":"b32bad93eb601223e681064d31ba05f0db26517f","modified":1607692027637},{"_id":"source/old_images/2020/03/1837004197.png","hash":"b9117c5b5ce49cc6daa564351d3b85b9e056e860","modified":1607692005914},{"_id":"source/old_images/2020/03/1878500351.png","hash":"3e634257e5f8edd0cab959fe2287bd71a043e6ac","modified":1607692025457},{"_id":"source/old_images/2020/03/2233313056.png","hash":"878e17e0bde0124993e04d706833627ab0ef978d","modified":1607692016818},{"_id":"source/old_images/2020/03/1892066829.png","hash":"6d9e53b5de4095e09ec70bcdfbfe63f7159d8ee4","modified":1607692023485},{"_id":"source/old_images/2020/03/2566011118.png","hash":"0769e77c19241350db1b77f1683248068030cd70","modified":1607692005558},{"_id":"source/old_images/2020/03/2487254389.png","hash":"4f88efb4fa667ba5f35e42f5c75478da3fe4f6aa","modified":1607692015750},{"_id":"source/old_images/2020/03/2629826971.png","hash":"a7a8d336394fb9d829088a3dc9bad3f7a311ec9c","modified":1607692022153},{"_id":"source/old_images/2020/03/2845666079.png","hash":"9915d18b5db1bbe1f7b0f9350af9cf184156fb3f","modified":1607692005858},{"_id":"source/old_images/2020/03/2883180973.png","hash":"f9e8453203223a12b08ee0afa6f057fa1600ab68","modified":1607692007002},{"_id":"source/old_images/2020/03/3384316763.png","hash":"e152a3459f8d78a6be67398d568c62601eedb83a","modified":1607692005638},{"_id":"source/old_images/2020/03/3703168680.png","hash":"dc52a32111027312969e2c5dffa11266a34115fb","modified":1607692023401},{"_id":"source/old_images/2020/03/3781678227.png","hash":"49feeab207d861d318cef33858f754cda9e251db","modified":1607692008930},{"_id":"source/old_images/2020/03/417397721.png","hash":"0e170c679347ca1bb3b63f4d69ec14875b61f039","modified":1607692022429},{"_id":"source/old_images/2020/03/9722286.png","hash":"94c48c4a191f32ef553a22de38f5469d8ef6f3a7","modified":1607692026325},{"_id":"source/old_images/2020/03/4226968886.png","hash":"38818e1fbdee6c979d7b02984e8912df3b40ae4c","modified":1607692025881},{"_id":"source/old_images/2020/04/1299645001.png","hash":"7e04a684753e6f53e0c668854b30a9eeced088e1","modified":1607691936944},{"_id":"source/old_images/2020/04/1058342956.png","hash":"9e21856a3f2abb235e2508c0110a61dfcf8d10da","modified":1607691938148},{"_id":"source/old_images/2020/04/1463504003.png","hash":"2e917fae684c7a52970afd1abc54e8ee0ade7f33","modified":1607691938568},{"_id":"source/old_images/2020/04/1469852139.png","hash":"5af2b35d7c888a71503bc36b91432fde1c3f3844","modified":1607691948860},{"_id":"source/old_images/2020/04/1621410449.png","hash":"ccb7d21aa175c95d2f81ea78fc11ce9591153f91","modified":1607691953195},{"_id":"source/old_images/2020/04/1549708112.png","hash":"be2843bfbaf9edd29608d697b1cf96947cca58ac","modified":1607691936440},{"_id":"source/old_images/2020/04/1882562433.png","hash":"4a4ad2c5929397de7f2fd49140ee8022c9c796b4","modified":1607691950807},{"_id":"source/old_images/2020/04/1010242782.png","hash":"93d9b79f2f5338c72e1d537f1c5775cbe23f6511","modified":1607691952411},{"_id":"source/old_images/2020/04/1901336664.png","hash":"7ba5f65a1f95301be7afa587f69a4ef57991c8a5","modified":1607691936552},{"_id":"source/old_images/2020/04/1922648166.png","hash":"7ba5f65a1f95301be7afa587f69a4ef57991c8a5","modified":1607691936080},{"_id":"source/old_images/2020/04/1650604475.png","hash":"4fbf3ee77fee019cf19510e5cd7e5b9e58e5cb77","modified":1607691951235},{"_id":"source/old_images/2020/04/2063384682.png","hash":"b2d66341820e3669c36b601a5dca9e2996b33fb6","modified":1607691952487},{"_id":"source/old_images/2020/04/2297105551.png","hash":"917776a62baa270e22910db46170479e8617ab74","modified":1607691950747},{"_id":"source/old_images/2020/04/2449902183.png","hash":"cc3961ed2546b348eac7bb3198dda12085c6f27c","modified":1607691948988},{"_id":"source/old_images/2020/04/2133134256.jpg","hash":"382414898e78a028643e979e9be1eaa6645d5746","modified":1607691944020},{"_id":"source/old_images/2020/04/2554124242.png","hash":"e047bec0f2e223048d169f6f64c5462adc74d815","modified":1607691943592},{"_id":"source/old_images/2020/04/2618287092.png","hash":"759a830c55da359c8bd83252e5e1322e01ee8e89","modified":1607691938620},{"_id":"source/old_images/2020/04/2586712878.png","hash":"5f4cc9d766b6a0c0145bc7fa95cbf18a6ee2e455","modified":1607691949135},{"_id":"source/old_images/2020/04/2789109287.png","hash":"ea8f0128cc887639f7aa37612b9cac92a1c258fc","modified":1607691948936},{"_id":"source/old_images/2020/04/2794891800.png","hash":"60c6848713a1a975b4f9bff83336ca0a1284afaa","modified":1607691938332},{"_id":"source/old_images/2020/04/2682758795.png","hash":"5ad42f5c0ff5186e109e1f8e3ec245bbcf1422f7","modified":1607691938860},{"_id":"source/old_images/2020/04/3106529428.png","hash":"3fe0983629ae2a5a86a2f6ed8867720d4bbb52af","modified":1607691943516},{"_id":"source/old_images/2020/04/2906032673.png","hash":"8b7681f2bf4370e2d91e47b300d98d8ca88a9470","modified":1607691938960},{"_id":"source/old_images/2020/04/3084410468.png","hash":"da2171be223553195b2b632e2d6a011283fe93ee","modified":1607691951931},{"_id":"source/old_images/2020/04/3074183323.jpg","hash":"41e8b455a9e0da38cb7d632234059990dc4d0ec0","modified":1607691950907},{"_id":"source/old_images/2020/04/3285543330.png","hash":"c0e7b76e82545abf6d984818815ba8b37b096846","modified":1607691938516},{"_id":"source/old_images/2020/04/3432493824.png","hash":"ab37655f9517f533c44cd183a749f6bb016d6088","modified":1607691952587},{"_id":"source/old_images/2020/04/3257021255.jpg","hash":"d3d5f372a72ea425e3d712b5adc15a3b29c12426","modified":1607691952879},{"_id":"source/old_images/2020/04/359761650.png","hash":"7c7ef0ef5d5b35ca8f99dab059fd8c462275f0e0","modified":1607691953143},{"_id":"source/old_images/2020/04/3271978332.png","hash":"fd855a85b5c71b9fa96626c29126d75eb48573a2","modified":1607691936340},{"_id":"source/old_images/2020/04/3960144680.png","hash":"4d88dfbcf94e773345f463959f971532f59bd0a4","modified":1607691938444},{"_id":"source/old_images/2020/04/536799533.png","hash":"3fa4ff15a4ca1b644cf9941003917bc44e5d95b8","modified":1607691949064},{"_id":"source/old_images/2020/04/691379040.png","hash":"1ae8618559fbdf604e7077f9fe594a9017dbcbd4","modified":1607691936628},{"_id":"source/old_images/2020/04/604554278.png","hash":"2a3bb449651c2cf0ac3ab82290befd0dc69b2293","modified":1607691936872},{"_id":"source/old_images/2020/04/880508434.png","hash":"510e1bfa2f4049041cbbb5ac67a252018354d4f8","modified":1607691936392},{"_id":"source/old_images/2020/05/10186376.jpg","hash":"7e4c3db92d8374f8f11268080849f9c8120e3253","modified":1607691956747},{"_id":"source/old_images/2020/05/1088359098.jpg","hash":"5423ca740a5ffe3ee00feb4f06f91264d1fd459d","modified":1607691968791},{"_id":"source/old_images/2020/05/1353804718.jpg","hash":"7d8fb47a84933d057ea38d0f52261b0542381487","modified":1607691968419},{"_id":"source/old_images/2020/05/1424232658.jpg","hash":"127b3aafecf6cb167fab4dd5786fd1668e5d3fbe","modified":1607691987954},{"_id":"source/old_images/2020/05/1571959298.jpg","hash":"c76fa8f12170cccb4f5284311ebe68724af8d12f","modified":1607692004094},{"_id":"source/old_images/2020/05/1760421220.jpg","hash":"35fdbfaf181d87002238f22fea3f981479771658","modified":1607691991698},{"_id":"source/old_images/2020/05/1820938573.jpg","hash":"723e3e4026590a9c9325de9b3b571d822916383b","modified":1607691968295},{"_id":"source/old_images/2020/05/1880372148.jpg","hash":"e3b0ed2df40124fba0126a6ea1521b3536c11188","modified":1607691965367},{"_id":"source/old_images/2020/05/2166186195.jpg","hash":"853a5fa8d39f0490074e4ef8564126079e02d8f6","modified":1607692000002},{"_id":"source/old_images/2020/05/2016954707.jpg","hash":"6df924e9d8bb9bdc0038fa685f847e54adba605e","modified":1607691983999},{"_id":"source/old_images/2020/05/2576890486.jpg","hash":"a5ed50e11fc54e184c65662d94b1ab15e921f614","modified":1607692005130},{"_id":"source/old_images/2020/05/2761601438.jpg","hash":"69b708a21b5d63fbde3d474aae921a5b19b65d3c","modified":1607691967683},{"_id":"source/old_images/2020/05/3062393400.jpg","hash":"67fe7ebb07bd3ce99fe278c87a16c60da98d6da8","modified":1607691961843},{"_id":"source/old_images/2020/05/330527918.jpg","hash":"2e12f3a82437425f83fa596b291aacaa43bb55a1","modified":1607691961523},{"_id":"source/old_images/2020/05/3174243626.jpg","hash":"6c1650cf2c00bd9aa3681620368196b80db25d4f","modified":1607691958099},{"_id":"source/old_images/2020/05/3326287196.jpg","hash":"bae78b0c8f93e9110220cb1cd1935f5c59d0ff24","modified":1607691965543},{"_id":"source/old_images/2020/05/3433924516.png","hash":"31fb7213f20504003d8e305bb97ebe22b35b0bee","modified":1607691961915},{"_id":"source/old_images/2020/05/3462557488.png","hash":"34bfe5ca7065196c01a6148ed865662f30fa852f","modified":1607691957087},{"_id":"source/old_images/2020/05/3310307667.jpg","hash":"3d5ab282d85f88dbef614134d8c0f3777310f63b","modified":1607691967507},{"_id":"source/old_images/2020/05/3518464858.jpg","hash":"26e8b202c336b430ef3c2bffedebeb8d52a58510","modified":1607691957003},{"_id":"source/old_images/2020/05/4002000137.jpg","hash":"ec39ed6fbf6d3bb901ee5f6b68cf94742b094179","modified":1607692005394},{"_id":"source/old_images/2020/05/4289012251.jpg","hash":"71a4729f252f3f008d61ffbc6db3bc319c9b4860","modified":1607691968895},{"_id":"source/old_images/2020/05/557249455.jpg","hash":"89fb3e5ba9e25e24af47f0ff78ceacbdd67f3b74","modified":1607691957907},{"_id":"source/old_images/2020/05/910319602.jpg","hash":"eb2477e63bba49322d6b6793c63699bbc35cafbf","modified":1607692004346},{"_id":"source/old_images/2020/05/904172395.jpg","hash":"9c4f157bdf6736df956ad34d4725a109d358be96","modified":1607691991994},{"_id":"source/old_images/2020/05/805442062.jpg","hash":"5c4d3877f09bc1701f979492f6049a89869a1e41","modified":1607691983883},{"_id":"source/old_images/2020/05/963849757.jpg","hash":"30c5dd6825199a5becc8e52d03c982fda441bc2c","modified":1607691965491},{"_id":"source/old_images/2020/06/1085139085.jpg","hash":"962d2ae884e7c9fa4a65dd5d8ea32278b0a3bbec","modified":1607691814871},{"_id":"source/old_images/2020/06/1075180362.jpg","hash":"b9cabf9446eb47eaf27e82ebcc9e4000966b99db","modified":1607691806252},{"_id":"source/old_images/2020/06/1460216437.png","hash":"2bdffc104b5fe78b2e8bfeedac010a3a69fafecc","modified":1607691808420},{"_id":"source/old_images/2020/06/1099674099.jpg","hash":"f1336e4766e0d02909248ffce1337cd26efba542","modified":1607691823563},{"_id":"source/old_images/2020/06/1785132415.jpg","hash":"be6c61d764ca72a3e47fba97d1cb894abd50491e","modified":1607691822715},{"_id":"source/old_images/2020/06/1829637362.jpg","hash":"530a3f40e585677b8f5e3a752524457826132598","modified":1607691814971},{"_id":"source/old_images/2020/06/1821389100.jpg","hash":"140e1e8046f535ec2562fe5d361022992154ca67","modified":1607691823263},{"_id":"source/old_images/2020/06/1911627333.jpg","hash":"4483a8039a25e731a9c8ce73f6740079d894205c","modified":1607691804684},{"_id":"source/old_images/2020/06/1955986387.jpg","hash":"58c9376307ee8a470ae2c4b03d44b021515056bd","modified":1607691823187},{"_id":"source/old_images/2020/06/1930281352.jpg","hash":"95960fd271ea2b8905818f8f172a0a0d64f980ce","modified":1607691805772},{"_id":"source/old_images/2020/06/2730705132.jpg","hash":"2d4aa87a23ee116988ddb17445d8313d49987eec","modified":1607691823611},{"_id":"source/old_images/2020/06/2328185984.jpg","hash":"acda39fdbb1c3417ef24ad80c4f802dac18c631c","modified":1607691822599},{"_id":"source/old_images/2020/06/2270251422.png","hash":"342ee934f4c660beda1aa21732b8fa361aebead7","modified":1607691807284},{"_id":"source/old_images/2020/06/2743383745.jpg","hash":"f1ca0345a275ac06ba1b2982491d2ca80f9bd0eb","modified":1607691814323},{"_id":"source/old_images/2020/06/275706257.jpg","hash":"32732b3f6445b91b81c82e416c894474f109dae5","modified":1607691806104},{"_id":"source/old_images/2020/06/2855613712.jpg","hash":"ee526936ebc66a16625a158e074c2275f5f659f9","modified":1607691806204},{"_id":"source/old_images/2020/06/2792304263.jpg","hash":"f68beaca120609865dbf64a04a6116087b1cbbec","modified":1607691835795},{"_id":"source/old_images/2020/06/3043677073.png","hash":"b744f4959c7ccb31036cb90be00de2f094026be8","modified":1607691806620},{"_id":"source/old_images/2020/06/2947829010.jpg","hash":"fa44e79452872ff8cad05875ef5a52f7c219a66c","modified":1607691822823},{"_id":"source/old_images/2020/06/2875422330.jpg","hash":"64b9decd2acc0ae6d8d61c1676f1b97772a64251","modified":1607691804508},{"_id":"source/old_images/2020/06/3236832836.jpg","hash":"ff11b2042dfe403b8fc288f7f7b02e37608f842d","modified":1607691804880},{"_id":"source/old_images/2020/06/3332546483.jpg","hash":"cf805f852779367d162834a079d7aced4ac4b20b","modified":1607691822311},{"_id":"source/old_images/2020/06/334535609.jpg","hash":"e553747dd88d5c8cec6e80e10e654336a4179fcb","modified":1607691823111},{"_id":"source/old_images/2020/06/3183017928.png","hash":"139db96f46618a8a6aec7b4515584566c8ff71c5","modified":1607691814219},{"_id":"source/old_images/2020/06/348952594.jpg","hash":"685e3f78334728b50c206de75baf07fcdccab853","modified":1607691806304},{"_id":"source/old_images/2020/06/3333883292.jpg","hash":"4dadeed9d4f2399d993dae55b0edddde7bd67a85","modified":1607691806540},{"_id":"source/old_images/2020/06/3579642186.jpg","hash":"d7b941a0b5843b87ef290e90640ef2321796e833","modified":1607691835511},{"_id":"source/old_images/2020/06/3795421197.jpg","hash":"342ab51fdb045df57d2b13a6a61e3d3384e6ee0a","modified":1607691822991},{"_id":"source/old_images/2020/06/3831150800.jpg","hash":"2568a53fa6efbb0f28f42ee57b029c18d069607f","modified":1607691804752},{"_id":"source/old_images/2020/06/3640866494.jpg","hash":"94bf1c8f588792b6289832f0ff7cb30e0dd2d965","modified":1607691813847},{"_id":"source/old_images/2020/06/385346141.png","hash":"e4b70b6d0375c4c1d4c2278d4040d13a0eae7ff1","modified":1607691806844},{"_id":"source/old_images/2020/06/4143798911.jpg","hash":"fd751e72f337643d0f46de1c12561d7bf039a648","modified":1607691815039},{"_id":"source/old_images/2020/06/4103478537.jpg","hash":"fdd410e21200eca9ec7a4a98df905814412b3609","modified":1607691806720},{"_id":"source/old_images/2020/06/43534473.png","hash":"b9266e6c991466086d24eb4bfdd5bf39bd58eb86","modified":1607691822927},{"_id":"source/old_images/2020/06/679760522.jpg","hash":"d1d98e21222faf016650575992eab290a0ec4079","modified":1607691806036},{"_id":"source/old_images/2020/06/890806100.jpg","hash":"151a2dd10b5a151692caf6611fe48caf42eff3f0","modified":1607691813599},{"_id":"source/old_images/2020/07/1260733011.png","hash":"6ae0c62b06e9893eab788d2b73e732dd2bb624e0","modified":1607691904365},{"_id":"source/old_images/2020/07/1264423062.png","hash":"c510ff543a89bc6bfdb118a726561d13478a1311","modified":1607691897869},{"_id":"source/old_images/2020/07/162826487.png","hash":"352b0c3817b71a0a879ab99ab715ba7980b20fad","modified":1607691909409},{"_id":"source/old_images/2020/07/1559317015.png","hash":"f7f19d2dc4bd08dba46ee1634d9ad2933d208019","modified":1607691913493},{"_id":"source/old_images/2020/07/2048957230.png","hash":"4ef816c2cd2352807d94d427ceb507571a1cfd4c","modified":1607691913073},{"_id":"source/old_images/2020/07/1700994165.png","hash":"69e33372d0f6182e1bd83d1b8cc188317988ca0e","modified":1607691916740},{"_id":"source/old_images/2020/07/2140554824.png","hash":"65a2a07de621545d8b666036f1e129e5df178d92","modified":1607691903425},{"_id":"source/old_images/2020/07/2422714402.png","hash":"e7ab966d6a65a16dc9559149ba5e8e1511645278","modified":1607691933960},{"_id":"source/old_images/2020/07/2612196784.png","hash":"bb378b684d064c1289c3402f0acf61d38e0bef60","modified":1607691912669},{"_id":"source/old_images/2020/07/3074664648.jpg","hash":"686043cfe905b31bf0b41322d7c34cdd67b3f2e6","modified":1607691912165},{"_id":"source/old_images/2020/07/3087868713.png","hash":"f12a930210d7c6e0449cb6a197782e42f786f656","modified":1607691935912},{"_id":"source/old_images/2020/07/3570375741.jpg","hash":"d0a361cbd765dca8bb437c657dfe0422cfe8d044","modified":1607691899861},{"_id":"source/old_images/2020/07/3819593002.png","hash":"a24bfe1d6df429e829760036e1f8fb470eb96456","modified":1607691910533},{"_id":"source/old_images/2020/07/3860621436.png","hash":"b84c1feadcedee0b810131d1cbc3aa0dad8518f3","modified":1607691900185},{"_id":"source/old_images/2020/07/623017393.jpg","hash":"3a26efeaef3da820ad4f93d55e73d6aa6d1d198d","modified":1607691930828},{"_id":"source/old_images/2020/07/81368647.png","hash":"63fab0f6a05d32425d92b5405622b2ca262be5a7","modified":1607691868366},{"_id":"source/old_images/2020/07/755844939.png","hash":"8afc61f37f5534315625e98bd4f8448b0f144ec2","modified":1607691893961},{"_id":"source/old_images/2020/08/1639294894.png","hash":"822cbd4194885daec0f7f0d5e73174cfd01f3332","modified":1607691867534},{"_id":"source/old_images/2020/08/2373904712.png","hash":"b0a9ba3f64f9c53bbcca5db7bb54ae3979d82a86","modified":1607691860334},{"_id":"source/old_images/2020/08/2072954433.png","hash":"d08c836682cf6285ec194771dddff6d688383132","modified":1607691860158},{"_id":"source/old_images/2020/08/3016259840.png","hash":"1dae2dff10157ab11bdb84ac613d0df44903ecd4","modified":1607691859078},{"_id":"source/old_images/2020/08/350215919.png","hash":"485586ac91fca7e0206835cb853d283645c55d31","modified":1607691861814},{"_id":"source/old_images/2020/08/3614482147.png","hash":"03607ded4e3a1e98321e67d1d90b74f4a05f0989","modified":1607691859278},{"_id":"source/old_images/2020/08/3976439614.png","hash":"1d2eab38caa98123ac7ae019e74599c5d3050bcb","modified":1607691857486},{"_id":"source/old_images/2020/08/4046785801.png","hash":"311606024051a3a088cac407e27fded09e9f5830","modified":1607691859506},{"_id":"source/old_images/2020/08/4228770977.png","hash":"b5183fe2005fc8365bd74808bfd36f31f9b29976","modified":1607691860410},{"_id":"source/old_images/2020/08/437577698.png","hash":"339e6cf4a8ad1bc7410c685aff228db52f60b3b5","modified":1607691858802},{"_id":"source/old_images/2020/08/482966380.png","hash":"3fc5757368607509d9a45ae26c4c73e5aa33041a","modified":1607691862538},{"_id":"source/old_images/2020/08/502004202.png","hash":"07245ddc4152b402d409fb7285805df053dd7d32","modified":1607691859706},{"_id":"source/old_images/2020/08/75184131.jpg","hash":"46f04b27b0c7077e9805d585ef2b2fc02c09a4f6","modified":1607691861390},{"_id":"source/old_images/2020/09/1356202506.jpg","hash":"db86ecc1d19c19fb8fa9cf5eff8ba9d1ccd7c6ea","modified":1607691841083},{"_id":"source/old_images/2020/09/2234319971.jpg","hash":"18b7fa862a0a0d513e0ab1e41eae18e1942686f1","modified":1607691841379},{"_id":"source/old_images/2020/09/2393108645.jpg","hash":"061148aec3f7d8e610d8e4a147264e9b3de45472","modified":1607691855694},{"_id":"source/old_images/2020/09/2995037215.jpg","hash":"cd7a99a9916f8d8cb91c923f0dca9d265d2841bf","modified":1607691853134},{"_id":"source/old_images/2020/10/1161417211.jpg","hash":"36e369c9f862ea7ebeb599e5696b43fd7a7192f1","modified":1607691953343},{"_id":"source/old_images/2020/10/1506103335.jpg","hash":"97674aca0b618dcb1e8d953b61597b9e2f887d35","modified":1607691955663},{"_id":"source/old_images/2020/10/1816268613.jpg","hash":"c30b868232795c9ded607bee62af9e71e298cf51","modified":1607691955715},{"_id":"source/old_images/2020/10/2013533644.jpg","hash":"de23c2dfe0730948be350767d8154340ba65c478","modified":1607691955211},{"_id":"source/old_images/2020/10/2420399875.jpg","hash":"33c047fa348b8378b346ae4f0a37237a55327ecd","modified":1607691953659},{"_id":"source/old_images/2020/10/2296969013.jpg","hash":"6901e5238a526823ee1c02363063a7016aa7da77","modified":1607691955287},{"_id":"source/old_images/2020/10/2447629851.jpg","hash":"cdffeb3d536e870754927c43c1f34f5ae91ccfef","modified":1607691955387},{"_id":"source/old_images/2020/10/2634073253.jpg","hash":"e3d545286aaf778755c2cd068bf9de9fb4eb2a95","modified":1607691955435},{"_id":"source/old_images/2020/10/2604642185.jpg","hash":"97674aca0b618dcb1e8d953b61597b9e2f887d35","modified":1607691955587},{"_id":"source/old_images/2020/10/270394888.jpg","hash":"01e51ed821fa91857f4c9328ab829202e2c5ca85","modified":1607691953295},{"_id":"source/old_images/2020/10/2773680925.jpg","hash":"363f1fb6460fdad05372b9b62b985b5902ff05ae","modified":1607691953607},{"_id":"source/old_images/2020/10/3031661130.png","hash":"2ab2f8455ab151d0905ef202598dabf5a6488ae4","modified":1607691955487},{"_id":"source/old_images/2020/10/3422282407.jpg","hash":"45bf105a55bf900d05f7ad3df2f7679ef9d8fdf3","modified":1607691953731},{"_id":"source/old_images/2020/10/3032572949.png","hash":"a4fc9f809b1341cbee518b756401fdc964930a12","modified":1607691953471},{"_id":"source/old_images/2020/10/3898272400.jpg","hash":"620d789bbab91666491fef871e9346994c28fb36","modified":1607691953523},{"_id":"source/old_images/2020/10/513067831.jpg","hash":"173d7312646f07bb201b36aa7fd137f3cbfa9e3c","modified":1607691955763},{"_id":"themes/Kratos-Rebirth/LICENSE","hash":"31a3d460bb3c7d98845187c716a30db81c44b615","modified":1607666422751},{"_id":"themes/Kratos-Rebirth/ReadMe.md","hash":"c15c2f0010f62baa95a3fdd46a2f455f95fb694f","modified":1607666422751},{"_id":"themes/Kratos-Rebirth/_config.yml","hash":"7c7c890414935db170566bb7f89ac628852a113d","modified":1608015232007},{"_id":"themes/Kratos-Rebirth/gulpfile.js","hash":"64f1fe1de8d38deca7f6c4c6514331b5a660a89c","modified":1607666422751},{"_id":"themes/Kratos-Rebirth/_config.yml.example","hash":"f20825ef314fe981590786d7bf9d9d5fc0a89722","modified":1607666422751},{"_id":"themes/Kratos-Rebirth/package.json","hash":"22e6cc10d8c12f5fc37588bd5d48fe5082f6dbfd","modified":1607666422751},{"_id":"themes/Kratos-Rebirth/languages/zh-CN.yml","hash":"ab6cd034db455c1c9cca92d62bcde856a8fcf1b3","modified":1607666422751},{"_id":"themes/Kratos-Rebirth/layout/archive.ejs","hash":"9344eed764332edb8880467011ca3a569091f553","modified":1607666422751},{"_id":"themes/Kratos-Rebirth/layout/category.ejs","hash":"5677b70953e6a33038a0e03eaa06e45c10ec7d73","modified":1607666422751},{"_id":"themes/Kratos-Rebirth/layout/index.ejs","hash":"ba8f181f9e88fd4e205abdf88bb7ecc7b36cd7fd","modified":1607666422751},{"_id":"themes/Kratos-Rebirth/layout/layout.ejs","hash":"41ac0c3b94e7eef3ae86a8569c917dd9a50dc602","modified":1607666422751},{"_id":"themes/Kratos-Rebirth/layout/post.ejs","hash":"13d24192ec5e649384314e1ac818975a0a53fdd8","modified":1607666422751},{"_id":"themes/Kratos-Rebirth/layout/page.ejs","hash":"766629bed63cc342c626746af93604cc8e7f66d3","modified":1607666422751},{"_id":"themes/Kratos-Rebirth/layout/tag.ejs","hash":"5677b70953e6a33038a0e03eaa06e45c10ec7d73","modified":1607666422751},{"_id":"themes/Kratos-Rebirth/scripts/search.js","hash":"df4d3d396527680699df26627f1c46ee6e304a05","modified":1607666422751},{"_id":"themes/Kratos-Rebirth/scripts/genconfig.js","hash":"440054e08cec7dcd69223f6b0758362f6f860a35","modified":1607666422751},{"_id":"themes/Kratos-Rebirth/scripts/tag-widgets.js","hash":"173f76d085fbf0f6931a6d91f5841f748ab4e6d1","modified":1607666422751},{"_id":"themes/Kratos-Rebirth/layout/_comments/disqus.ejs","hash":"3a6bb4badb902ab0bd2eea6553865bcb7d52ef89","modified":1607666422751},{"_id":"themes/Kratos-Rebirth/layout/_comments/disqusjs.ejs","hash":"7dabdf526bbc4706a7eb1a06433bf545a2b350db","modified":1607666422751},{"_id":"themes/Kratos-Rebirth/layout/_comments/twikoo.ejs","hash":"9895c8e1003bdd850ce07bb038d52afbe9d146cf","modified":1607666422751},{"_id":"themes/Kratos-Rebirth/layout/_comments/valine.ejs","hash":"40e1b4e1ee55d41c97c71eafe4f75afa7c5f158c","modified":1607666422751},{"_id":"themes/Kratos-Rebirth/layout/_pages/search-page.ejs","hash":"38f97e185a924aef406aaf41b9e596db170783c9","modified":1607666422751},{"_id":"themes/Kratos-Rebirth/layout/_partial/after-footer.ejs","hash":"74f4890e27c4e10ed122078c97fc0faf37638ce1","modified":1607666422751},{"_id":"themes/Kratos-Rebirth/layout/_partial/head.ejs","hash":"63a7daae4a3bf43077ac601ed3cffdd7d7d7169e","modified":1607666422751},{"_id":"themes/Kratos-Rebirth/layout/_partial/footer.ejs","hash":"28b2da3198673c725af514a721a0080e05d844e1","modified":1607666422751},{"_id":"themes/Kratos-Rebirth/layout/_partial/header.ejs","hash":"08d4219a4e4c75e9c85515d7a42ded2636ab5146","modified":1607666422751},{"_id":"themes/Kratos-Rebirth/layout/_tools/share.ejs","hash":"1fbb59cc07b9152e0c5b7ecf969af579c3b34c0a","modified":1607666422751},{"_id":"themes/Kratos-Rebirth/layout/_tools/player.ejs","hash":"6bc31c09041b8a28abe15d19856fa3b1b84589af","modified":1607666422751},{"_id":"themes/Kratos-Rebirth/layout/_widget/about.ejs","hash":"99356c24c757cb3dbac7a37cdced79b79d05e49c","modified":1608014905168},{"_id":"themes/Kratos-Rebirth/layout/_widget/category.ejs","hash":"6a67608bda8501649c48f6eee8e91fe083cbf8a7","modified":1607666422751},{"_id":"themes/Kratos-Rebirth/layout/_widget/posts.ejs","hash":"d55a85a531b716df93be742c70dc6dadb9bd1813","modified":1607666422751},{"_id":"themes/Kratos-Rebirth/layout/_widget/tagcloud.ejs","hash":"223730bfe007f26d5279cb66f1da9222c7d64c62","modified":1607666422751},{"_id":"themes/Kratos-Rebirth/layout/_widget/toc.ejs","hash":"5a42cb1dc0673ae12472ea822d03d7beed7b0749","modified":1607666422751},{"_id":"themes/Kratos-Rebirth/source/css/kr-dark.min.css","hash":"dc646f78d5efd2068f44cb2e5231cdbe0b227f8f","modified":1607666422751},{"_id":"themes/Kratos-Rebirth/source/css/highlight.min.css","hash":"cc1acaf76207c4699af851b782782698baa64127","modified":1607666422751},{"_id":"themes/Kratos-Rebirth/source/css/kratosr.min.css","hash":"dd2358fdaa9a57cee3e319463122b83bbdacec72","modified":1607666422751},{"_id":"themes/Kratos-Rebirth/source/css/prismjs.min.css","hash":"05cdce8a803b676526df9bd35cd1bdb46748cb1a","modified":1607666422751},{"_id":"themes/Kratos-Rebirth/source/images/about.webp","hash":"4ad9cc34645a249728644e093c3cf461345f1bbf","modified":1607953754799},{"_id":"themes/Kratos-Rebirth/source/images/alipay.webp","hash":"01fa6151d2122f0470ee6f38ac8e4ced6c81912e","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/source/images/avatar.webp","hash":"3ed6e4e1e08e9c2700aa149d1f9e068fb02947cd","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/source/images/bg.webp","hash":"f232b442b64eaa90f45a48ff04d8e7d352caf212","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/source/images/failure.ico","hash":"5eec5c163400d8ece74286da49130da1ead3f6f6","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/source/images/sticky.webp","hash":"0e9bcc89faa0a5e6112ba29e0dcf68e33681db02","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/source/images/psr.webp","hash":"bf457bf84bca767bac1bd2b960d91c53ba3fbdee","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/source/images/wechat.webp","hash":"06f3997bf554768c04cb588198c7b3d68c21b8e9","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/source/js/candy.min.js","hash":"f047499c25170f1f5fac2471141d439b6330198f","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/source/js/kr-dark.min.js","hash":"469da5c1768c50d2324e458f196e2fa2ce036d8f","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/source/js/kratosr.min.js","hash":"cccb4ba552d1a570cce185b76b2ff24b8828d8ac","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/source/js/pjax.min.js","hash":"61b26f5f4848e7fbed99780a64948ab44bd09e9b","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/source/js/local-search.min.js","hash":"4978657d8ab1b7f26c09300c538680c90019c94f","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/source/js/snow.min.js","hash":"74b8138840be139836cf9a0e6b8d3d41d0c2902b","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/src/css/highlight.css","hash":"07057bd4a0ea57f485e33385beda12a4892e5549","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/src/css/kr-dark.css","hash":"416e2364647356d73ac39ca32ab3014c5fba96b3","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/src/css/prismjs.css","hash":"8274e1584b4065e32a6444a5f8737e033102b81f","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/src/css/kratosr.css","hash":"a84e0ccd24b0c95cca06331bcff99bcef4f73464","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/src/js/kr-dark.js","hash":"4076a6f552453d8212ef98ac1fe7391006c61903","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/src/js/candy.js","hash":"95b61e65d186b3a8571198557b150420c337be4b","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/src/js/kratosr.js","hash":"cafb598d96183b25a6b732758d67d5d92c5a8efc","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/src/js/local-search.js","hash":"fe79206f66b0f1bd5279e7356127bdbe31f3540a","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/src/js/pjax.js","hash":"10c1a8d9d34b22d3f499f15a12255ce259a2d001","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/source/images/thumb/thumb_1.webp","hash":"a818f050112ceb75e3a60dc1673a10783b254595","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/src/js/snow.js","hash":"91621fd1632a0de9cd7cea61e9fababd63c23278","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/source/images/thumb/thumb_10.webp","hash":"4983eeca7886bbe7c09b0c79f4774302fdfa1315","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/source/images/thumb/thumb_12.webp","hash":"b6b8e1281f9146925e45e937cb4d5b28bcabe957","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/source/images/thumb/thumb_11.webp","hash":"08d8d91e2b01768842abb47cd48a0f07d22d070c","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/source/images/thumb/thumb_13.webp","hash":"c4c9050637f4ffa3cb7d782f59dadc993ac3a6de","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/source/images/thumb/thumb_14.webp","hash":"f9300e2b45c1f061ec8cc21527142dafc558a9e6","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/source/images/thumb/thumb_15.webp","hash":"8629f2a7d3b0192549f809e6b7479159af0222da","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/source/images/thumb/thumb_17.webp","hash":"b5a036ec234a23c820a89d1c640b1f2e8dd3dfa4","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/source/images/thumb/thumb_16.webp","hash":"61714ccffd55d6fa74cf94bcdd5a464da04ce891","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/source/images/thumb/thumb_18.webp","hash":"5bc78b9d6cb0a0cf6daa3a35b93e575777a49ddd","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/source/images/thumb/thumb_19.webp","hash":"15e0cd0cbe5c7166915a4b68680681beccc2afef","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/source/images/thumb/thumb_2.webp","hash":"1bcf7461c2b9408b8a893013fa425eb46701faf6","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/source/images/thumb/thumb_3.webp","hash":"3faffd2575e0751526249c5c56a2a5045a21363b","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/source/images/thumb/thumb_20.webp","hash":"4ab961d94a0d3abbefc7f6d9188a889ec2225e7a","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/source/images/thumb/thumb_4.webp","hash":"1d0f136590632e7ba31f5510d24891ba443f1f33","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/source/images/thumb/thumb_5.webp","hash":"ba384ada1c2a17b67036addd68ffa1f604ab5a41","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/source/images/thumb/thumb_6.webp","hash":"c2d8b68971dacd111566526f64d94932f5c6f076","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/source/images/thumb/thumb_8.webp","hash":"9e6d74786d8459440d68c409eb654364dd279f8a","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/source/images/thumb/thumb_7.webp","hash":"4be8fe8ea1b3563b78924062e3aa013cd5c4e82b","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/source/images/thumb/thumb_9.webp","hash":"bca69e7d56982b43c52e9ffa17c8d5bb268834d8","modified":1607666422755},{"_id":"source/images/system/wechatpay.jpg","hash":"56a89d89fc6f503ed70b28762fe2bce8e0e18177","modified":1607854098825},{"_id":"source/images/system/avatar.png","hash":"f5cfa394d8a4cade2419fb7fa1474b11b437ccf6","modified":1607853410180},{"_id":"source/images/system/alipay.jpg","hash":"97ae1ec471c9904046af35ab6dc87eedfa66fa7d","modified":1607854099617},{"_id":"source/old_images/2020/02/1451004919.jpg","hash":"5f6756c24096d413dd0969f4512603d1e76039a4","modified":1607691784752},{"_id":"source/old_images/2020/02/1060876639.png","hash":"9f6eb2f8f57e137072f5d7958332da63ffbaaa9b","modified":1607691804240},{"_id":"source/old_images/2020/02/2575250596.png","hash":"8ce8acdc4e52500cfc3d42bada653575e82c99b8","modified":1607691785600},{"_id":"source/old_images/2020/02/3787159546.png","hash":"a5951205f98e8c2e56c756355ced1874a0f75114","modified":1607691786960},{"_id":"source/old_images/2020/02/4023551690.png","hash":"e1292573518a94c9b141b2813b4903eba854110f","modified":1607691767433},{"_id":"source/old_images/2020/02/3798843184.jpg","hash":"4963ad51a3083deb6daad24d4e943ff3c57722e6","modified":1607691803356},{"_id":"source/old_images/2020/02/4095688085.png","hash":"f7bcedc493cc2179768dc1892a8ead618f886288","modified":1607691762589},{"_id":"source/old_images/2020/02/423865379.png","hash":"8ed6f4b8d0decf5e1734d1cdbae5d74fab2309c0","modified":1607691763433},{"_id":"source/old_images/2020/02/817300143.jpg","hash":"90853c7f6b9d1d5b01497d3407e35cd03f7a92a5","modified":1607691802356},{"_id":"source/old_images/2020/03/1453260522.png","hash":"6a5f520a4256af0e3402c4ce5179b77863a7dd69","modified":1607692025381},{"_id":"source/old_images/2020/03/1666061624.png","hash":"3964c53a2bce05e8e3531ff13924cacf9c2ace1e","modified":1607692023273},{"_id":"source/old_images/2020/03/1765616617.png","hash":"16a94ee9bd9c262208d7d1f1c8722d44b2dcba0c","modified":1607692006686},{"_id":"source/old_images/2020/03/2072343370.png","hash":"36ca055d337ae5fadfe7330f7cc943f0bda2b98d","modified":1607692028197},{"_id":"source/old_images/2020/03/2569806803.png","hash":"a17aefb2be43de5034a096e3ccfafd6f6eaaaf3b","modified":1607692007822},{"_id":"source/old_images/2020/03/2715500984.gif","hash":"4e7d2f6c7db172baeaf77f2024d44badc4170dcc","modified":1607692016730},{"_id":"source/old_images/2020/03/2875168475.gif","hash":"c08ff841c8efafe33a1a47082c45aad5275795d3","modified":1607692027561},{"_id":"source/old_images/2020/03/3099420731.png","hash":"734ab1dc7ebc269838e8521d18dde9d8590ebb20","modified":1607692021945},{"_id":"source/old_images/2020/03/691907800.png","hash":"fc2faf69f336cbb65918940a66d123e11c15f930","modified":1607692028953},{"_id":"source/old_images/2020/04/2303562078.png","hash":"a1ffc5a39efd723f96837ad5ed0c84a976adebd3","modified":1607691948808},{"_id":"source/old_images/2020/04/4102771430.png","hash":"6259cca54a43a94e49918f4831f971f60e5569c2","modified":1607691951807},{"_id":"source/old_images/2020/05/133193778.jpg","hash":"d4d3b27efb0e6ef8087d19a6e248ef065b415da7","modified":1607692004902},{"_id":"source/old_images/2020/05/1596536276.jpg","hash":"cbcacec03b67c509f0d58fc4913fff559ea0b0a4","modified":1607691983759},{"_id":"source/old_images/2020/05/2541652972.jpg","hash":"587cac7150666fc9b11c5b4980e3df35cf48c312","modified":1607691968231},{"_id":"source/old_images/2020/05/2978689860.jpg","hash":"1916eee29a64dc757a47707b737401325623f83f","modified":1607691957831},{"_id":"source/old_images/2020/05/3068723404.jpg","hash":"82aec83d6553fe104ea0a8efb09aa95deedf44e7","modified":1607691966095},{"_id":"source/old_images/2020/05/4249439680.jpg","hash":"81a610f5de4a1141b179fc2bd913b21c5b1ca077","modified":1607691991646},{"_id":"source/old_images/2020/06/1235922839.jpg","hash":"13f1194c5a278cca980a4fc2970cd5657f0bf8f0","modified":1607691814819},{"_id":"source/old_images/2020/06/3567944637.jpg","hash":"7e084af239f62b6f2e48c60c86f9f9236ce82684","modified":1607691824347},{"_id":"source/old_images/2020/06/4288438894.jpg","hash":"c6397502df72f2a87687f7014451dde38abf362e","modified":1607691815587},{"_id":"source/old_images/2020/07/1501298663.png","hash":"cf918380b18b9d8d56f2f4d1730ba477885433e3","modified":1607691910233},{"_id":"source/old_images/2020/07/2066845163.png","hash":"283f79c88e3e6703df3a3707a41fc74f2692a2c6","modified":1607691872966},{"_id":"source/old_images/2020/07/2308466294.png","hash":"c89a4c6d09e77f6c8241841ddcca714bf95ffba2","modified":1607691909209},{"_id":"source/old_images/2020/07/249903794.png","hash":"47b22dfc1b229e48766936599941240528619eeb","modified":1607691904145},{"_id":"source/old_images/2020/07/270229372.png","hash":"fbe09478b37e492b1374cb6aa616c861af21943d","modified":1607691870210},{"_id":"source/old_images/2020/07/2817136246.png","hash":"e527648d025da41325d044f85e20bbc38d59504f","modified":1607691901113},{"_id":"source/old_images/2020/07/3548240241.png","hash":"f8357268c32579a8eadfa7319e73484e78bb86c7","modified":1607691930432},{"_id":"source/old_images/2020/07/3888322204.png","hash":"3c9cb80cde23b7390af6a2f6b1546ceeb55d7e03","modified":1607691916344},{"_id":"source/old_images/2020/07/3991564688.png","hash":"741eade9813bf3f071484bf17fe8ad78b2b0940b","modified":1607691929932},{"_id":"source/old_images/2020/07/489071846.png","hash":"91ed9e20aef68a2fce6873c7a64b04eb2aebb296","modified":1607691877410},{"_id":"source/old_images/2020/07/723480778.png","hash":"2c08dcbfdf7dae625f3662556d19ed363b6d5aa2","modified":1607691931748},{"_id":"source/old_images/2020/07/962343059.png","hash":"a80f43f367ec6b7fd588e1a077c9a2bdb51c2e6e","modified":1607691868286},{"_id":"source/old_images/2020/08/1049549032.jpg","hash":"892032ebde6a3880d2c2b5bb3ef378f08a87e6a1","modified":1607691862462},{"_id":"source/old_images/2020/08/1083781610.png","hash":"11531f77ff3d97378eff9515747e200c5212118d","modified":1607691861138},{"_id":"source/old_images/2020/09/1988211125.jpg","hash":"90d9e50fa61d9eb5212faae20d19fa02fcfd0a00","modified":1607691855422},{"_id":"source/old_images/2020/10/1768418527.jpg","hash":"cb35315039b3b04eb480e3fb842343ecc61b1ce6","modified":1607691956471},{"_id":"themes/Kratos-Rebirth/source/images/404.webp","hash":"cfedc3a315522b07305b802522c1a5b342d68dec","modified":1607666422755},{"_id":"themes/Kratos-Rebirth/source/images/banner.webp","hash":"8541190b0755d7dea9296b95254c7c1ab7a5f36e","modified":1607953800505},{"_id":"source/old_images/2020/03/2861910617.png","hash":"18b4c3a3e4aec303ccd4f1ee200e23721741b5e5","modified":1607692008810},{"_id":"source/old_images/2020/04/2295689788.png","hash":"00b53c61f36b454156be91a858c949bbe1e3070a","modified":1607691938020},{"_id":"source/old_images/2020/05/999634898.jpg","hash":"9194e7ae741fe46d9969547c98464453b6afcdf1","modified":1607691967159},{"_id":"source/old_images/2020/06/2065354894.jpg","hash":"3fbf3ace07eaa8c45c5e0945a950b8285e7a2cbe","modified":1607691808116},{"_id":"source/old_images/2020/06/2780367333.jpg","hash":"b71a6537b43a3ea2323a0c186af074f708453081","modified":1607691805720},{"_id":"source/old_images/2020/07/1225674126.png","hash":"d1d5e969719060493a80c9848df25af9ebded9e6","modified":1607691911789},{"_id":"source/old_images/2020/07/291067937.png","hash":"5b9b8ecf14e8c3d55690012591d4b8914bacb692","modified":1607691907313},{"_id":"source/old_images/2020/07/3794064227.png","hash":"7660e4121a1318b8de49f4bcaa3dfd696b908863","modified":1607691871326},{"_id":"source/old_images/2020/07/4243678235.png","hash":"e373c097135509eb97caffa393e1776405331d6c","modified":1607691872358},{"_id":"source/old_images/2020/08/1060845710.png","hash":"36334b5484d64c21545114f648769bade8c7ca26","modified":1607691858630},{"_id":"source/old_images/2020/09/2369037501.jpg","hash":"a6499bd70efd571c39bbec2f5a338265bf89d52e","modified":1607691854266},{"_id":"source/old_images/2020/09/2522050574.jpg","hash":"0702ab2274dab386c3847483559708a513cae941","modified":1607691852882},{"_id":"source/old_images/2020/10/4055019828.png","hash":"b411acebb7738ccc01366a1c1b66f46680aa1ae8","modified":1607691955083},{"_id":"source/old_images/2020/02/2697564545.png","hash":"226cc45a3095f35a4626337cd89175e67f546f6e","modified":1607691765829},{"_id":"source/old_images/2020/03/2313483864.png","hash":"05bcb5e82421e72cbfd05e8f050e203b5047b893","modified":1607692024809},{"_id":"source/old_images/2020/04/4165605798.jpeg","hash":"e49b546e6d049e4e84a14e2eb1315c9effda02ae","modified":1607691950635},{"_id":"source/old_images/2020/05/1187310326.jpg","hash":"652ed38c974cf4c20c7f9f5350152fe6ff10de88","modified":1607691999902},{"_id":"source/old_images/2020/07/2541934723.png","hash":"30894391bd165a33ed92cb40bf17cf54fbb6e4cf","modified":1607691876838},{"_id":"source/old_images/2020/07/3351283967.png","hash":"4958061b59d67821ee04433e97d9d2d1e36ed0bf","modified":1607691908601},{"_id":"source/old_images/2020/07/551017501.png","hash":"cbfa4216ac318995a72bc1d939dfe2c05fcaa634","modified":1607691878782},{"_id":"source/old_images/2020/07/995794732.png","hash":"d4b49eda09c21b6671201b0647a34868c7797614","modified":1607691869594},{"_id":"source/old_images/2020/07/2310258600.png","hash":"626f2fed4f2fde15569a96d355e15226b861a210","modified":1607691935480},{"_id":"source/old_images/2020/07/4097717059.png","hash":"740605d6dfeb8149d0fd0c68fd1167d752c11a12","modified":1607691895609},{"_id":"source/old_images/2020/08/615084051.png","hash":"5432051345e81e8fc584c9deab47df31ab0a5a1c","modified":1607691867358},{"_id":"themes/Kratos-Rebirth/source/images/banner_dark.webp","hash":"acd43af0e9352b5f8f09b53970f0131b8bdccae8","modified":1607953834452},{"_id":"source/old_images/2020/03/999894680.png","hash":"e90d6bf2c1c24336367ef391e1ba7c715e700b1b","modified":1607692021393},{"_id":"source/old_images/2020/07/3134056928.png","hash":"63dd41aa7a2726f44314f203e63e5b492a9e0831","modified":1607691902949},{"_id":"source/old_images/2020/07/3240034142.png","hash":"55f05e87cb99206aeec9c04fe72859cf7136eb5c","modified":1607691933604},{"_id":"source/old_images/2020/07/51341367.png","hash":"5841492967654913e29a855b5475aa1319603eb2","modified":1607691915472},{"_id":"source/old_images/2020/11/1735837242.png","hash":"889f4749aee409c9bf22b9e1051bc093ee67b996","modified":1607691857362},{"_id":"source/old_images/2020/07/1028634298.png","hash":"6e9128f83a6a0095f8b4d659df43e49c6b3890c7","modified":1607691897641},{"_id":"source/old_images/2020/07/3001651570.png","hash":"b26b24663adc42395b11abcec1bf3c534402c548","modified":1607691899793},{"_id":"source/old_images/2020/03/340887529.png","hash":"1742402ea77f5d649ca12f174998007ebbe43f0a","modified":1607692019433},{"_id":"source/old_images/2020/05/1113348697.jpg","hash":"36800310ed4bcad06ec8ce749ccc0562d57bc112","modified":1607691991110},{"_id":"source/old_images/2020/05/651860426.jpg","hash":"3ae7dfff6e911f3aaf4c57166b5cf392a2f48058","modified":1607691961375},{"_id":"source/old_images/2020/05/664969895.png","hash":"f2c3d521c1ba351c55bfbdb51c5337fa9fc15b38","modified":1607691965295},{"_id":"source/old_images/2020/07/4181754296.png","hash":"da119d79e79a3a19511c627fe3e16d66ac532882","modified":1607691906185},{"_id":"source/old_images/2020/03/3846485483.png","hash":"0ec61fa185f80d5f3c56a60967c39f1dbec189e8","modified":1607692031945},{"_id":"source/old_images/2020/04/193187891.pdf","hash":"d03e5ccffcf693605adad92c8e9164e09d2003c4","modified":1607691948136},{"_id":"source/old_images/2020/07/2822560807.jpg","hash":"93c26f44128769b255f90793d2fec6df39f5e107","modified":1607691875670},{"_id":"source/old_images/2020/05/2294227069.jpg","hash":"dd890403eb86e78ef1b513321149108662055dfb","modified":1607692003782},{"_id":"source/old_images/2020/05/3913045297.jpg","hash":"22290d9987d534c1a37feb9d3b1dbd9e17d118c3","modified":1607691987810},{"_id":"source/old_images/2020/08/1791974604.png","hash":"b9e26b27744a6f09257588bc9dad054a8f1676ff","modified":1607691865742},{"_id":"source/old_images/2020/06/2236493176.png","hash":"c9c0f9b02960295dd61aacba8a239bdd6b8fddcb","modified":1607691835439},{"_id":"source/old_images/2020/06/4074491988.png","hash":"1367e0eb7bd8278400dd5f736d3a2c72c4288a8b","modified":1607691813447},{"_id":"source/old_images/2020/04/781569241.jpg","hash":"9cff4c3094a7821809c5f5b4b4fe1921947a70c9","modified":1607691943444},{"_id":"source/old_images/2020/09/3319805378.png","hash":"e0799d8c1be43de8a8d7b0a8699ef7f60c6c2ffa","modified":1607691840883},{"_id":"source/old_images/2020/03/3142260807.jpg","hash":"799ead1c8cdb1ead7b7e99a0e555560d3f08c7f0","modified":1607692015346},{"_id":"source/old_images/2020/06/4291764818.png","hash":"ec16bd88970c9ccbab5c75eb7b4578902dd1fe79","modified":1607691830219},{"_id":"source/old_images/2020/06/142298572.png","hash":"031e17e4b8fb78926fc2bffa53e8e83b312d3b9e","modified":1607691821831},{"_id":"source/old_images/2020/05/1170183205.png","hash":"cfcd6671dbbd0bf8ae6d44b4cd216ec7dfc5adf0","modified":1607691998590},{"_id":"source/old_images/2020/09/2082677778.png","hash":"ab29866a4a3e94739c9ddaa9f12761531af87898","modified":1607691851742},{"_id":"source/old_images/2020/07/3520035333.gif","hash":"52a2342a40a10b0004b95abe5c54610718fab74e","modified":1607691929464},{"_id":"source/old_images/2020/02/42703606.jpg","hash":"d5fcffcbdb9e91ba51ee3c46da4d296925fe6952","modified":1607691801448},{"_id":"source/old_images/2020/05/4174507093.gif","hash":"d55166f6fc50e5b2aefc5175a29744fcaf06502b","modified":1607691982987},{"_id":"source/old_images/2020/07/1405371260.gif","hash":"8e8378c08376fe97c6aa62222ddc02cbdff01a0c","modified":1607691893477},{"_id":"source/old_images/2020/02/2461771289.jpg","hash":"5f5a8608909924c225296d9c4ede155b593bac5e","modified":1607691782992},{"_id":"public/atom.xml","hash":"97b3b6f29c11beef605cffce926cd62b9fbdb1d2","modified":1608018394971},{"_id":"public/config/main.json","hash":"4c66a8cc2cecd3c9169e7f0c8ab5b9fcc61e1c4e","modified":1608015462815},{"_id":"public/search.json","hash":"08bf2cc0002e87870083bc05436d635460423922","modified":1608018394971},{"_id":"public/about/index.html","hash":"24adfa9442510235eebf3d681a7e3c6f9e37a7fe","modified":1608015579329},{"_id":"public/comment-policy/index.html","hash":"d17f15f98a5269de5bd24dd44314cb6d25111926","modified":1608015579329},{"_id":"public/friends/index.html","hash":"2a78ec4dc735066bb8527645d8e1b5bcc410f652","modified":1608015579329},{"_id":"public/工具/index.html","hash":"46bea4171c630f6dd5ef95aeb0ae86300f44982b","modified":1608015579329},{"_id":"public/开发/index.html","hash":"f910560cd0b79df2198b2c20fee734177bb940b8","modified":1608015579329},{"_id":"public/控制/index.html","hash":"2387dd3eb7fcfe7f60bbdf89edfce7efdb35ddd4","modified":1608015579329},{"_id":"public/日常/index.html","hash":"89f06118397dde23c59a4ad623db3bacc27a2440","modified":1608015579329},{"_id":"public/物数/index.html","hash":"92add37a9a0204d00f14ad693d0e097306be90d3","modified":1608015579329},{"_id":"public/网络/index.html","hash":"c7f4b5850ec3258d1f9d3675df45adb53fb692ba","modified":1608015579329},{"_id":"public/2020/12/14/开启新的旅程！/index.html","hash":"8e6ff7a865176c278019b2ed8cb50245b1867d70","modified":1608015579329},{"_id":"public/2020/11/29/毕设开坑，欢迎大家关注/index.html","hash":"d3bb40d2abeea7982961a359aa4b5786d1ab3d4a","modified":1608015579329},{"_id":"public/2020/09/18/从支持向量机到拉格朗日乘子对偶问题/index.html","hash":"53ab2e7151dd6a665e59aef8eb817b12694b14e2","modified":1608015579329},{"_id":"public/2020/08/28/ROS入门/index.html","hash":"3b8b480205ada6c1a79a957e712f8f0a4627ade4","modified":1608015579329},{"_id":"public/2020/09/13/第二次硬件尝试之开关电源/index.html","hash":"deb99343d17f5555d0caa83a808f19ddd721cdb6","modified":1608015579329},{"_id":"public/2020/08/15/利用ANSYS进行叶轮动态流场仿真分析实例/index.html","hash":"5e1843810de030950b1920d8054bdcd183fadaa0","modified":1608015579329},{"_id":"public/2020/08/13/从双网卡——到路由表/index.html","hash":"9135f0629abd1437c0b3a06827a57114dc6312df","modified":1608018394971},{"_id":"public/2020/07/16/轨道交通领域的差速问题&amp;我与轨交/index.html","hash":"649698c214d429822fb5216542b7ab1638b8e08d","modified":1608015579329},{"_id":"public/2020/07/13/新人报到！虚拟样机在机器人领域的应用（入门篇）/index.html","hash":"a53a0492e43c004bb2bdeb48c438fe60d1471b5d","modified":1608018394971},{"_id":"public/2020/07/11/LCD vs OLED/index.html","hash":"f0dea1d79ae3b52498b6fa5029d68e086b9f1b5f","modified":1608015579329},{"_id":"public/2020/06/30/轨道交通领域的牛顿特斯拉之战和你坐地铁听到的“防空警报声”/index.html","hash":"1df8fd75e42818238c64f9e40ddc735d38129003","modified":1608015579329},{"_id":"public/2020/06/24/数字图像处理-课程设计/index.html","hash":"dcfba39e9e73bd5bd3f7f7fa119ec03290b000c2","modified":1608015579329},{"_id":"public/2020/06/18/由LIT MOTORS平衡车获得的理力知识/index.html","hash":"3ffa2c22430c07b1a8a71bbbdb6cb435b5d9db1f","modified":1608015579329},{"_id":"public/2020/06/11/欢迎新的小伙伴加入Star Blog，这里有注册方法哦！/index.html","hash":"6565d35a08a590209b99446c674a002fd1180aee","modified":1608015579329},{"_id":"public/2020/06/11/一个并不无聊的人的加入和调研/index.html","hash":"5838d9d0035a311f2d979932805fb5f6efb412c7","modified":1608015579329},{"_id":"public/2020/06/11/电磁学中的物理量/index.html","hash":"91faf1a17430a37ea91bd9f1be151f47ea236a42","modified":1608015579329},{"_id":"public/2020/06/10/让编译不再麻烦——CMake使用/index.html","hash":"bbd6511bfd7c0dab67d5dc08f3085dd9f3980d2e","modified":1608015579329},{"_id":"public/2020/06/05/浅尝OpenGL/index.html","hash":"2cc18390b73a0c7b58f8f777204aeddf5d1c89c9","modified":1608015579329},{"_id":"public/2020/05/14/HTTP协议最常见的两种请求方法/index.html","hash":"c19e8067da6cbe057f718c417b0db0238e76a187","modified":1608015579329},{"_id":"public/2020/05/10/双系统？虚拟机？Docker？/index.html","hash":"83ea6b42e272f6ec1181774e2e1d9667e478d767","modified":1608015579329},{"_id":"public/2020/05/09/浅浅浅浅浅谈计算机求数值解的方法/index.html","hash":"eeb792506a4c51d25dd43a3a8517d27bcefca9ee","modified":1608015579329},{"_id":"public/2020/05/08/FIR和IIR之间的故事/index.html","hash":"7e63403f7619633a0a29bafc349f13e1e0792ab9","modified":1608015579329},{"_id":"public/2020/05/07/从 最小二乘 到 最优化算法/index.html","hash":"27677d7ec21dd0fde5e55493059e1995fbd59da7","modified":1608015579329},{"_id":"public/2020/05/06/留数。。。也太难了吧/index.html","hash":"42b8a5fcd4bec2cdbb1ce0065e2bae4247dbc890","modified":1608015579329},{"_id":"public/2020/04/24/傅里叶变换的两种变形——L&amp;Z/index.html","hash":"538c47e0a60cd4dea0f9167b266ed55f17b3ce8a","modified":1608015579329},{"_id":"public/2020/04/23/简简单单锁相环PLL/index.html","hash":"ebb70228632c3189e8276e7f676c57bba64b6edd","modified":1608015579329},{"_id":"public/2020/04/18/出息啦！/index.html","hash":"fb3ed5f33a9327e9d04af67d35f3ab2b99339979","modified":1608015579329},{"_id":"public/2020/04/16/卡尔曼滤波器家族与观测器/index.html","hash":"c7f9c6934f5c64c52ca8535f88962414aa35cd20","modified":1608015579329},{"_id":"public/2020/04/15/初探自抗扰控制（ADRC）/index.html","hash":"c45de10c8d9cfa3045176f4cd96e940fc01f69f0","modified":1608015579329},{"_id":"public/2020/04/04/中国加油！武汉加油！/index.html","hash":"2d513da683d9676a24e5efccffad9c1897c068e8","modified":1608015579329},{"_id":"public/2020/03/30/揭开积分变换的面纱/index.html","hash":"a5817b2ad6369a6665a20bb00e323ff48451c63a","modified":1608015579329},{"_id":"public/2020/03/26/重修线代的知识点总结/index.html","hash":"9873a8efb01d3d5850fd9331e694916aaaf336d2","modified":1608015579329},{"_id":"public/2020/03/23/俺对卷积的粗鄙理解/index.html","hash":"7b874fba1595ed6c4cb9095d3eba109e5dd75e57","modified":1608015579329},{"_id":"public/2020/03/14/Python爬虫实战！/index.html","hash":"b0f058a697e3e99d81c1525465b8529ae5202af0","modified":1608015579329},{"_id":"public/2020/03/08/现代控制理论总结2——NonLinear部分/index.html","hash":"244b63ef095621c77596c334e00d8c1156606f08","modified":1608015579329},{"_id":"public/2020/03/07/现代控制理论总结1——Linear部分/index.html","hash":"2602092565249544f6978ad6205da5ceebd8130e","modified":1608015579329},{"_id":"public/2020/03/03/立FLAG专用帖！/index.html","hash":"4d633937ba31fec11cc21984a83e52fef2cfc8de","modified":1608015579329},{"_id":"public/2020/02/29/网络是个什么东西？/index.html","hash":"d79b1e352388f1d9b74ecac9c8e231c4fb23e69f","modified":1608015579329},{"_id":"public/2020/02/29/3D物体是如何旋转滴2/index.html","hash":"182d8b5fcde613ba5f1958f962e0000987182f33","modified":1608015579329},{"_id":"public/2020/02/28/3D物体是如何旋转滴1/index.html","hash":"ac3afd53303f187e0f620d5000129d5527fd6116","modified":1608015579329},{"_id":"public/2020/02/26/技术传承——永磁同步电机驱动3/index.html","hash":"ed0b211c0ea92b127640846c8657c09f38a34508","modified":1608015579329},{"_id":"public/2020/02/25/俺滴课表/index.html","hash":"d3be78007db86bf0cdf5144e4a4f031872f654f2","modified":1608015579329},{"_id":"public/2020/02/24/技术传承——永磁同步电机驱动2/index.html","hash":"f7e9a09a184150544083421f617c1d015ae98ee9","modified":1608015579329},{"_id":"public/2020/02/21/技术传承——永磁同步电机驱动1/index.html","hash":"5220abe7d9e42b206c0f8142b6546d1ba0a6a555","modified":1608015579329},{"_id":"public/2020/02/21/计算机网络基础/index.html","hash":"153b877b21a772d0d329f17928ce9b3d14f02b52","modified":1608015579329},{"_id":"public/2020/02/20/对比ARM与x86的boot过程/index.html","hash":"0d6a00c963ad6da9fff5307cc91613d721150ef1","modified":1608015579329},{"_id":"public/2020/02/19/11月3日东北大学交流感想/index.html","hash":"01802759a9c6e22df0dda1e366e24b98a807645f","modified":1608015579329},{"_id":"public/2020/02/19/ARM裸机开发实战1/index.html","hash":"eaed95cd4daece1da26d4af4227f190920bb478d","modified":1608015579329},{"_id":"public/2020/02/19/嗯，新的页面！/index.html","hash":"c27bade4b88fe72389639dc4a63585c3c12b7c32","modified":1608015579329},{"_id":"public/archives/index.html","hash":"412849833a663433f60d4f82c1bcce1d442843de","modified":1608015579329},{"_id":"public/archives/page/2/index.html","hash":"ee1db955505f8f3a00b81979d4a27e94eb642581","modified":1608018394971},{"_id":"public/archives/page/3/index.html","hash":"45b647fb6af17aee89fc4bea7a232e8027c406af","modified":1608015579329},{"_id":"public/archives/page/4/index.html","hash":"8287c83425e17197a507c8984ca584b5c764c1bc","modified":1608015579329},{"_id":"public/archives/page/5/index.html","hash":"4b5a6c5eb9a1ab47435190b0d3e5667bbd0fbabf","modified":1608015579329},{"_id":"public/archives/page/6/index.html","hash":"db349ecdd03119f2228fc0bea4f53072556f79cd","modified":1608015579329},{"_id":"public/archives/page/7/index.html","hash":"8614aa168e5f117f5be7ff2fcd03dae80598e692","modified":1608015579329},{"_id":"public/archives/2020/index.html","hash":"3287800303ecd0165ed4521cbc0d23297eb4cd68","modified":1608015579329},{"_id":"public/archives/2020/page/2/index.html","hash":"0146a4f524b08a3efa0af8270de85f00011d7386","modified":1608018394971},{"_id":"public/archives/2020/page/3/index.html","hash":"6e35ac81780473d4480530769fd856e03f16fbb7","modified":1608015579329},{"_id":"public/archives/2020/page/4/index.html","hash":"19461f966bca82f02906b4721b8f2a24d11427f8","modified":1608015579329},{"_id":"public/archives/2020/page/5/index.html","hash":"d3012cab5be4d3dfa875bc00fed6021c4e53d072","modified":1608015579329},{"_id":"public/archives/2020/page/6/index.html","hash":"a06a6291fad1d1d9186ecabb686bea2569baecee","modified":1608015579329},{"_id":"public/archives/2020/page/7/index.html","hash":"bd69cea49fa0cc3cbd799dfbdf6823489083fa63","modified":1608015579329},{"_id":"public/archives/2020/02/index.html","hash":"7df6d4c72a8024fb65fa5d90782450ac0d9c0c20","modified":1608015579329},{"_id":"public/archives/2020/02/page/2/index.html","hash":"ab495277cce8550afe0be1da61ddfa87740053b8","modified":1608015579329},{"_id":"public/archives/2020/03/index.html","hash":"7de1c59f66626b05b636d95004dda22fc6173f0a","modified":1608015579329},{"_id":"public/archives/2020/04/index.html","hash":"ab8e3197d93c7986b24e41024a155ceefcbd2a25","modified":1608015579329},{"_id":"public/archives/2020/05/index.html","hash":"f712a305947af685d46692700e44a1c6d0ad5c55","modified":1608015579329},{"_id":"public/archives/2020/06/index.html","hash":"e892e8d89cd0cd493b629d6023a050ae0f55d8c3","modified":1608015579329},{"_id":"public/archives/2020/06/page/2/index.html","hash":"3794ee7c767c463d98bd6bd314338c05a529b627","modified":1608015579329},{"_id":"public/archives/2020/07/index.html","hash":"2955e3b44f9bdbe042980ed60f112812db54182b","modified":1608018394971},{"_id":"public/archives/2020/08/index.html","hash":"924b8abe60eda9aa77e881567be33bac735722e6","modified":1608015579329},{"_id":"public/archives/2020/09/index.html","hash":"7fb16998eefb128e2f9dd1717037e1139dc7d54f","modified":1608015579329},{"_id":"public/archives/2020/11/index.html","hash":"924f2ee43f64ee57b2e9b834449350764610a3ba","modified":1608015579329},{"_id":"public/archives/2020/12/index.html","hash":"57a8fdd7c96ba709f953fd1539e79214e8ec230d","modified":1608015579329},{"_id":"public/categories/日常/index.html","hash":"d6fd04268be89fa8841db256987dd9b627a88142","modified":1608018394971},{"_id":"public/categories/日常/page/2/index.html","hash":"13a99e2e46f9b7500abed9f9c18afac226f5f3cc","modified":1608015579329},{"_id":"public/categories/物数/index.html","hash":"937906fec501eb95f3e9e6030bc3e5617b73d648","modified":1608015579329},{"_id":"public/categories/物数/page/2/index.html","hash":"97c35abf767ce1a2b112df452fcd51eaefc626c3","modified":1608015579329},{"_id":"public/categories/开发/index.html","hash":"8bffc67cba24ea6c9eeb5f4fd94cc59bc3963a76","modified":1608015579329},{"_id":"public/categories/控制/index.html","hash":"a87a078105936275459f7430adf390bf85dbf6f9","modified":1608015579329},{"_id":"public/categories/控制/page/2/index.html","hash":"26c0fd06c9d39a446e835c2cd9ce208a11d56ee0","modified":1608015579329},{"_id":"public/categories/网络/index.html","hash":"04881959a3d28c933325cad2d9a1403c697908bf","modified":1608015579329},{"_id":"public/categories/工具/index.html","hash":"5b4f95c6c20eb76a1fffe12af536f43578d00b4b","modified":1608015579329},{"_id":"public/index.html","hash":"e5bbd9e8387bc3fd362d0d4e9506dc66e9c15e2a","modified":1608015579329},{"_id":"public/page/2/index.html","hash":"be2b720b25223f65a1e86161706ac6915f23e79a","modified":1608018394971},{"_id":"public/page/3/index.html","hash":"e47640a78d367c6abd3597e0f7da537f4a8105cb","modified":1608015579329},{"_id":"public/page/4/index.html","hash":"b221820bd4da259cf886828a523efc5da65ce477","modified":1608015579329},{"_id":"public/page/5/index.html","hash":"94a5d002863359ab774cd9613ca49741d61294ea","modified":1608015579329},{"_id":"public/page/6/index.html","hash":"4b2f3b575ce7fc19c6f47c06d9f150c93bf666fc","modified":1608015579329},{"_id":"public/page/7/index.html","hash":"d29e7247f68c363f96fc66093c2a44b7403baa93","modified":1608015579329},{"_id":"public/search/index.html","hash":"38e290a1a7ae2beaec3cac02f099c2e5474f74b8","modified":1608015579329},{"_id":"public/images/about.webp","hash":"4ad9cc34645a249728644e093c3cf461345f1bbf","modified":1608015462815},{"_id":"public/images/alipay.webp","hash":"01fa6151d2122f0470ee6f38ac8e4ced6c81912e","modified":1608015462815},{"_id":"public/images/avatar.webp","hash":"3ed6e4e1e08e9c2700aa149d1f9e068fb02947cd","modified":1608015462815},{"_id":"public/images/bg.webp","hash":"f232b442b64eaa90f45a48ff04d8e7d352caf212","modified":1608015462815},{"_id":"public/images/failure.ico","hash":"5eec5c163400d8ece74286da49130da1ead3f6f6","modified":1608015462815},{"_id":"public/images/psr.webp","hash":"bf457bf84bca767bac1bd2b960d91c53ba3fbdee","modified":1608015462815},{"_id":"public/images/sticky.webp","hash":"0e9bcc89faa0a5e6112ba29e0dcf68e33681db02","modified":1608015462815},{"_id":"public/images/wechat.webp","hash":"06f3997bf554768c04cb588198c7b3d68c21b8e9","modified":1608015462815},{"_id":"public/images/thumb/thumb_1.webp","hash":"a818f050112ceb75e3a60dc1673a10783b254595","modified":1608015462815},{"_id":"public/images/thumb/thumb_10.webp","hash":"4983eeca7886bbe7c09b0c79f4774302fdfa1315","modified":1608015462815},{"_id":"public/images/thumb/thumb_11.webp","hash":"08d8d91e2b01768842abb47cd48a0f07d22d070c","modified":1608015462815},{"_id":"public/images/thumb/thumb_12.webp","hash":"b6b8e1281f9146925e45e937cb4d5b28bcabe957","modified":1608015462815},{"_id":"public/images/thumb/thumb_13.webp","hash":"c4c9050637f4ffa3cb7d782f59dadc993ac3a6de","modified":1608015462815},{"_id":"public/images/thumb/thumb_14.webp","hash":"f9300e2b45c1f061ec8cc21527142dafc558a9e6","modified":1608015462815},{"_id":"public/images/thumb/thumb_15.webp","hash":"8629f2a7d3b0192549f809e6b7479159af0222da","modified":1608015462815},{"_id":"public/images/thumb/thumb_16.webp","hash":"61714ccffd55d6fa74cf94bcdd5a464da04ce891","modified":1608015462815},{"_id":"public/images/thumb/thumb_17.webp","hash":"b5a036ec234a23c820a89d1c640b1f2e8dd3dfa4","modified":1608015462815},{"_id":"public/images/thumb/thumb_18.webp","hash":"5bc78b9d6cb0a0cf6daa3a35b93e575777a49ddd","modified":1608015462815},{"_id":"public/images/thumb/thumb_19.webp","hash":"15e0cd0cbe5c7166915a4b68680681beccc2afef","modified":1608015462815},{"_id":"public/images/thumb/thumb_2.webp","hash":"1bcf7461c2b9408b8a893013fa425eb46701faf6","modified":1608015462815},{"_id":"public/images/thumb/thumb_20.webp","hash":"4ab961d94a0d3abbefc7f6d9188a889ec2225e7a","modified":1608015462815},{"_id":"public/images/thumb/thumb_3.webp","hash":"3faffd2575e0751526249c5c56a2a5045a21363b","modified":1608015462815},{"_id":"public/images/thumb/thumb_4.webp","hash":"1d0f136590632e7ba31f5510d24891ba443f1f33","modified":1608015462815},{"_id":"public/images/thumb/thumb_5.webp","hash":"ba384ada1c2a17b67036addd68ffa1f604ab5a41","modified":1608015462815},{"_id":"public/images/thumb/thumb_6.webp","hash":"c2d8b68971dacd111566526f64d94932f5c6f076","modified":1608015462815},{"_id":"public/images/thumb/thumb_7.webp","hash":"4be8fe8ea1b3563b78924062e3aa013cd5c4e82b","modified":1608015462815},{"_id":"public/images/thumb/thumb_8.webp","hash":"9e6d74786d8459440d68c409eb654364dd279f8a","modified":1608015462815},{"_id":"public/images/thumb/thumb_9.webp","hash":"bca69e7d56982b43c52e9ffa17c8d5bb268834d8","modified":1608015462815},{"_id":"public/CNAME","hash":"fe5819cceae78c457ff9e38c892fef9429a23a4e","modified":1608015462815},{"_id":"public/images/system/ico3232.ico","hash":"2636f5bfb34290a0d25892bbfaea8f96835c386f","modified":1608015462815},{"_id":"public/images/system/self.jpg","hash":"a2891eadeb998715995e119c19d556d8510ac595","modified":1608015462815},{"_id":"public/images/2020/开启新的旅程/thanku.png","hash":"bcfeb524bbebe57a23b968351f8eab44e6079d28","modified":1608015462815},{"_id":"public/old_images/2020/02/1004013066.png","hash":"e06420c5ce7e22a9b9181f1aca51a7ccb2bfa8e3","modified":1608015462815},{"_id":"public/old_images/2020/02/1013716568.png","hash":"f84b0e5c3f9ccb3cbd5ba2999dbd3a4b1a60f4bb","modified":1608015462815},{"_id":"public/old_images/2020/02/1055054676.png","hash":"573cd5eee34aa62d06fb0f83232191e05cdc5358","modified":1608015462815},{"_id":"public/old_images/2020/02/1298152153.png","hash":"b60d3d0b41707819c5b55e9bfd5c9da663da71c8","modified":1608015462815},{"_id":"public/old_images/2020/02/1328380167.png","hash":"7a1551d8900946f767e79dd85a9afe3403b06325","modified":1608015462815},{"_id":"public/old_images/2020/02/1356342890.jpg","hash":"93866c12e5e83882228d9dfe408e944d1b9ff93f","modified":1608015462815},{"_id":"public/old_images/2020/02/1473089206.jpg","hash":"819245b343b6b7b38450a928924c5f63167fc12e","modified":1608015462815},{"_id":"public/old_images/2020/02/1475506760.png","hash":"22efa438e12b5162439f076e431e9c213be9f73a","modified":1608015462815},{"_id":"public/old_images/2020/02/1502540671.png","hash":"10fafd78b2d8facbc8aed58b7e886c5190c3ade2","modified":1608015462815},{"_id":"public/old_images/2020/02/17198532.png","hash":"e105d1658e8689e3aa510d68d2d27c7d5951c40c","modified":1608015462815},{"_id":"public/old_images/2020/02/1605118435.jpg","hash":"b19099b32c085f4ad0e98d344dcf52560c9887c5","modified":1608015462815},{"_id":"public/old_images/2020/02/1782312365.png","hash":"256d73114dea2f1d00d89a30214681e9688afb0e","modified":1608015462815},{"_id":"public/old_images/2020/02/1919880935.png","hash":"ad1642046dc4611e1d8d80462de5b1f14db30f1d","modified":1608015462815},{"_id":"public/old_images/2020/02/192949300.png","hash":"066ff81d6d7ab15008ad5ca112524eee9e3d4f48","modified":1608015462815},{"_id":"public/old_images/2020/02/2322548764.png","hash":"0034805391cb69d640026118ad8974031ed58e1b","modified":1608015462815},{"_id":"public/old_images/2020/02/2260242333.jpg","hash":"9861b12fb7cc55729cf32fb0fdc6b0b2669c2ac6","modified":1608015462815},{"_id":"public/old_images/2020/02/2324103181.png","hash":"c94c6b99cb3457726841d76a9765b4ecee287a30","modified":1608015462815},{"_id":"public/old_images/2020/02/242777591.jpg","hash":"83a6ce371528c09afacff155ed30195d902e0b72","modified":1608015462815},{"_id":"public/old_images/2020/02/2495871206.png","hash":"834e4d7ae93cecfdf4bcf42e8d2e25c327325228","modified":1608015462815},{"_id":"public/old_images/2020/02/2670368623.png","hash":"ad4fee29404d12d696ac39ebc57ce58519a790e2","modified":1608015462815},{"_id":"public/old_images/2020/02/2664873141.png","hash":"34f8b9ac40e9f531e81424fade745ba7781b47bb","modified":1608015462815},{"_id":"public/old_images/2020/02/2677382250.png","hash":"5aaaa8788b43d68e6a65d2ffe14cae88ce1fa133","modified":1608015462815},{"_id":"public/old_images/2020/02/2865477902.png","hash":"459473549553f48968553909eb522e00dd988d00","modified":1608015462815},{"_id":"public/old_images/2020/02/3056175988.png","hash":"13b3252807910c472d295e66ecf4c2f2844faf55","modified":1608015462815},{"_id":"public/old_images/2020/02/3086867647.png","hash":"9de89e5de94b4ea9b9df79eb0b9bc18dc6983b9f","modified":1608015462815},{"_id":"public/old_images/2020/02/3108166881.png","hash":"2dd0c37650a27298f0c06ba76d4db884eb1cfe10","modified":1608015462815},{"_id":"public/old_images/2020/02/3215796440.png","hash":"7fccaeda8fa10b8fa2238a4eec5d9c4436411abc","modified":1608015462815},{"_id":"public/old_images/2020/02/3230677208.jpg","hash":"b654eea93b3175495265af61f06a0a905b9cb516","modified":1608015462815},{"_id":"public/old_images/2020/02/3523885477.png","hash":"528692d61807c245c5673d37ba59484b68f899db","modified":1608015462815},{"_id":"public/old_images/2020/02/3576370167.png","hash":"4b2d5ac25758c09c1b40b3f765254e897a67a8ef","modified":1608015462815},{"_id":"public/old_images/2020/02/3577136343.png","hash":"e26a30efcb8979f0572e3ad6c0c2800f37168ea1","modified":1608015462815},{"_id":"public/old_images/2020/02/3647791761.png","hash":"5a9b432df5e5d28698654692817152606835abe9","modified":1608015462815},{"_id":"public/old_images/2020/02/3694597941.png","hash":"42c83fe141f493d7dcb1a4704a7941ca8b8ded0b","modified":1608015462815},{"_id":"public/old_images/2020/02/4018005133.png","hash":"c61ead141e0962b4eb1fea65c9c6ec870e95474f","modified":1608015462815},{"_id":"public/old_images/2020/02/4039222537.png","hash":"396d3e9b0a9bf8e5e0a6cf12c2393c961c96322b","modified":1608015462815},{"_id":"public/old_images/2020/02/4250702223.png","hash":"525572651d2e8ed341cff542734bc58ba3f93980","modified":1608015462815},{"_id":"public/old_images/2020/02/4279915631.jpg","hash":"97da87d27977af11b8c6edd4ad5a425179814ded","modified":1608015462815},{"_id":"public/old_images/2020/02/462653967.png","hash":"d0d3b523d8160ee95e755b42423be116b687ab1f","modified":1608015462815},{"_id":"public/old_images/2020/02/698813314.png","hash":"6c83ec5af862adbeb05f6de68455ac5717311d12","modified":1608015462815},{"_id":"public/old_images/2020/02/506917544.png","hash":"174e9b005ca6234465d773230f114a8067795fe6","modified":1608015462815},{"_id":"public/old_images/2020/02/701335943.png","hash":"66407b7b26632c0ea5e2a0d5eab0863522a0b481","modified":1608015462815},{"_id":"public/old_images/2020/02/855161026.jpg","hash":"785d726bac96812e816941f166354b685646e8fa","modified":1608015462815},{"_id":"public/old_images/2020/02/915343109.jpg","hash":"490dbd9ce1eff4cf3f024c38a11f5ce53a105deb","modified":1608015462815},{"_id":"public/old_images/2020/02/923726181.png","hash":"d4a979b10bc898cc0c4c58300beae9514d23cf96","modified":1608015462815},{"_id":"public/old_images/2020/03/1201115831.png","hash":"d67993eb9ee9510519caf3f42070259ae21b1f6f","modified":1608015462815},{"_id":"public/old_images/2020/03/1272507004.png","hash":"84fda39ff4a709402c45568cdc5e5525e2802d3a","modified":1608015462815},{"_id":"public/old_images/2020/03/133748069.png","hash":"942f873e96b615d37a96ba6f991585c2344487a4","modified":1608015462815},{"_id":"public/old_images/2020/03/1392671162.png","hash":"3052788860a2236163f6409a15091928289b16ff","modified":1608015462815},{"_id":"public/old_images/2020/03/1451641391.png","hash":"b3fe1ee959008fc91be5964e8282405373469f8c","modified":1608015462815},{"_id":"public/old_images/2020/03/1580985861.png","hash":"319f808643c5700fdef7c805c9495a16e40f89e1","modified":1608015462815},{"_id":"public/old_images/2020/03/1630131877.png","hash":"fd5d735d425ac2d04ce7f73114714ce34467e69e","modified":1608015462815},{"_id":"public/old_images/2020/03/1699646663.png","hash":"db1dd17fcfd8f5f5737cb44295d58522db13880a","modified":1608015462815},{"_id":"public/old_images/2020/03/1797764618.png","hash":"b32bad93eb601223e681064d31ba05f0db26517f","modified":1608015462815},{"_id":"public/old_images/2020/03/1837004197.png","hash":"b9117c5b5ce49cc6daa564351d3b85b9e056e860","modified":1608015462815},{"_id":"public/old_images/2020/03/1878500351.png","hash":"3e634257e5f8edd0cab959fe2287bd71a043e6ac","modified":1608015462815},{"_id":"public/old_images/2020/03/1892066829.png","hash":"6d9e53b5de4095e09ec70bcdfbfe63f7159d8ee4","modified":1608015462815},{"_id":"public/old_images/2020/03/2233313056.png","hash":"878e17e0bde0124993e04d706833627ab0ef978d","modified":1608015462815},{"_id":"public/old_images/2020/03/2487254389.png","hash":"4f88efb4fa667ba5f35e42f5c75478da3fe4f6aa","modified":1608015462815},{"_id":"public/old_images/2020/03/2566011118.png","hash":"0769e77c19241350db1b77f1683248068030cd70","modified":1608015462815},{"_id":"public/old_images/2020/03/2629826971.png","hash":"a7a8d336394fb9d829088a3dc9bad3f7a311ec9c","modified":1608015462815},{"_id":"public/old_images/2020/03/2845666079.png","hash":"9915d18b5db1bbe1f7b0f9350af9cf184156fb3f","modified":1608015462815},{"_id":"public/old_images/2020/03/2883180973.png","hash":"f9e8453203223a12b08ee0afa6f057fa1600ab68","modified":1608015462815},{"_id":"public/old_images/2020/03/3384316763.png","hash":"e152a3459f8d78a6be67398d568c62601eedb83a","modified":1608015462815},{"_id":"public/old_images/2020/03/3703168680.png","hash":"dc52a32111027312969e2c5dffa11266a34115fb","modified":1608015462815},{"_id":"public/old_images/2020/03/3781678227.png","hash":"49feeab207d861d318cef33858f754cda9e251db","modified":1608015462815},{"_id":"public/old_images/2020/03/417397721.png","hash":"0e170c679347ca1bb3b63f4d69ec14875b61f039","modified":1608015462815},{"_id":"public/old_images/2020/03/4226968886.png","hash":"38818e1fbdee6c979d7b02984e8912df3b40ae4c","modified":1608015462815},{"_id":"public/old_images/2020/03/9722286.png","hash":"94c48c4a191f32ef553a22de38f5469d8ef6f3a7","modified":1608015462815},{"_id":"public/old_images/2020/04/1010242782.png","hash":"93d9b79f2f5338c72e1d537f1c5775cbe23f6511","modified":1608015462815},{"_id":"public/old_images/2020/04/1058342956.png","hash":"9e21856a3f2abb235e2508c0110a61dfcf8d10da","modified":1608015462815},{"_id":"public/old_images/2020/04/1299645001.png","hash":"7e04a684753e6f53e0c668854b30a9eeced088e1","modified":1608015462815},{"_id":"public/old_images/2020/04/1463504003.png","hash":"2e917fae684c7a52970afd1abc54e8ee0ade7f33","modified":1608015462815},{"_id":"public/old_images/2020/04/1469852139.png","hash":"5af2b35d7c888a71503bc36b91432fde1c3f3844","modified":1608015462815},{"_id":"public/old_images/2020/04/1549708112.png","hash":"be2843bfbaf9edd29608d697b1cf96947cca58ac","modified":1608015462815},{"_id":"public/old_images/2020/04/1621410449.png","hash":"ccb7d21aa175c95d2f81ea78fc11ce9591153f91","modified":1608015462815},{"_id":"public/old_images/2020/04/1882562433.png","hash":"4a4ad2c5929397de7f2fd49140ee8022c9c796b4","modified":1608015462815},{"_id":"public/old_images/2020/04/1650604475.png","hash":"4fbf3ee77fee019cf19510e5cd7e5b9e58e5cb77","modified":1608015462815},{"_id":"public/old_images/2020/04/1901336664.png","hash":"7ba5f65a1f95301be7afa587f69a4ef57991c8a5","modified":1608015462815},{"_id":"public/old_images/2020/04/1922648166.png","hash":"7ba5f65a1f95301be7afa587f69a4ef57991c8a5","modified":1608015462815},{"_id":"public/old_images/2020/04/2063384682.png","hash":"b2d66341820e3669c36b601a5dca9e2996b33fb6","modified":1608015462815},{"_id":"public/old_images/2020/04/2133134256.jpg","hash":"382414898e78a028643e979e9be1eaa6645d5746","modified":1608015462815},{"_id":"public/old_images/2020/04/2297105551.png","hash":"917776a62baa270e22910db46170479e8617ab74","modified":1608015462815},{"_id":"public/old_images/2020/04/2449902183.png","hash":"cc3961ed2546b348eac7bb3198dda12085c6f27c","modified":1608015462815},{"_id":"public/old_images/2020/04/2554124242.png","hash":"e047bec0f2e223048d169f6f64c5462adc74d815","modified":1608015462815},{"_id":"public/old_images/2020/04/2586712878.png","hash":"5f4cc9d766b6a0c0145bc7fa95cbf18a6ee2e455","modified":1608015462815},{"_id":"public/old_images/2020/04/2618287092.png","hash":"759a830c55da359c8bd83252e5e1322e01ee8e89","modified":1608015462815},{"_id":"public/old_images/2020/04/2682758795.png","hash":"5ad42f5c0ff5186e109e1f8e3ec245bbcf1422f7","modified":1608015462815},{"_id":"public/old_images/2020/04/2789109287.png","hash":"ea8f0128cc887639f7aa37612b9cac92a1c258fc","modified":1608015462815},{"_id":"public/old_images/2020/04/2794891800.png","hash":"60c6848713a1a975b4f9bff83336ca0a1284afaa","modified":1608015462815},{"_id":"public/old_images/2020/04/2906032673.png","hash":"8b7681f2bf4370e2d91e47b300d98d8ca88a9470","modified":1608015462815},{"_id":"public/old_images/2020/04/3074183323.jpg","hash":"41e8b455a9e0da38cb7d632234059990dc4d0ec0","modified":1608015462815},{"_id":"public/old_images/2020/04/3106529428.png","hash":"3fe0983629ae2a5a86a2f6ed8867720d4bbb52af","modified":1608015462815},{"_id":"public/old_images/2020/04/3084410468.png","hash":"da2171be223553195b2b632e2d6a011283fe93ee","modified":1608015462815},{"_id":"public/old_images/2020/04/3257021255.jpg","hash":"d3d5f372a72ea425e3d712b5adc15a3b29c12426","modified":1608015462815},{"_id":"public/old_images/2020/04/3285543330.png","hash":"c0e7b76e82545abf6d984818815ba8b37b096846","modified":1608015462815},{"_id":"public/old_images/2020/04/3271978332.png","hash":"fd855a85b5c71b9fa96626c29126d75eb48573a2","modified":1608015462815},{"_id":"public/old_images/2020/04/3432493824.png","hash":"ab37655f9517f533c44cd183a749f6bb016d6088","modified":1608015462815},{"_id":"public/old_images/2020/04/359761650.png","hash":"7c7ef0ef5d5b35ca8f99dab059fd8c462275f0e0","modified":1608015462815},{"_id":"public/old_images/2020/04/3960144680.png","hash":"4d88dfbcf94e773345f463959f971532f59bd0a4","modified":1608015462815},{"_id":"public/old_images/2020/04/536799533.png","hash":"3fa4ff15a4ca1b644cf9941003917bc44e5d95b8","modified":1608015462815},{"_id":"public/old_images/2020/04/604554278.png","hash":"2a3bb449651c2cf0ac3ab82290befd0dc69b2293","modified":1608015462815},{"_id":"public/old_images/2020/04/691379040.png","hash":"1ae8618559fbdf604e7077f9fe594a9017dbcbd4","modified":1608015462815},{"_id":"public/old_images/2020/04/880508434.png","hash":"510e1bfa2f4049041cbbb5ac67a252018354d4f8","modified":1608015462815},{"_id":"public/old_images/2020/05/10186376.jpg","hash":"7e4c3db92d8374f8f11268080849f9c8120e3253","modified":1608015462815},{"_id":"public/old_images/2020/05/1088359098.jpg","hash":"5423ca740a5ffe3ee00feb4f06f91264d1fd459d","modified":1608015462815},{"_id":"public/old_images/2020/05/1353804718.jpg","hash":"7d8fb47a84933d057ea38d0f52261b0542381487","modified":1608015462815},{"_id":"public/old_images/2020/05/1424232658.jpg","hash":"127b3aafecf6cb167fab4dd5786fd1668e5d3fbe","modified":1608015462815},{"_id":"public/old_images/2020/05/1571959298.jpg","hash":"c76fa8f12170cccb4f5284311ebe68724af8d12f","modified":1608015462815},{"_id":"public/old_images/2020/05/1760421220.jpg","hash":"35fdbfaf181d87002238f22fea3f981479771658","modified":1608015462815},{"_id":"public/old_images/2020/05/1820938573.jpg","hash":"723e3e4026590a9c9325de9b3b571d822916383b","modified":1608015462815},{"_id":"public/old_images/2020/05/1880372148.jpg","hash":"e3b0ed2df40124fba0126a6ea1521b3536c11188","modified":1608015462815},{"_id":"public/old_images/2020/05/2016954707.jpg","hash":"6df924e9d8bb9bdc0038fa685f847e54adba605e","modified":1608015462815},{"_id":"public/old_images/2020/05/2166186195.jpg","hash":"853a5fa8d39f0490074e4ef8564126079e02d8f6","modified":1608015462815},{"_id":"public/old_images/2020/05/2576890486.jpg","hash":"a5ed50e11fc54e184c65662d94b1ab15e921f614","modified":1608015462815},{"_id":"public/old_images/2020/05/2761601438.jpg","hash":"69b708a21b5d63fbde3d474aae921a5b19b65d3c","modified":1608015462815},{"_id":"public/old_images/2020/05/3062393400.jpg","hash":"67fe7ebb07bd3ce99fe278c87a16c60da98d6da8","modified":1608015462815},{"_id":"public/old_images/2020/05/3174243626.jpg","hash":"6c1650cf2c00bd9aa3681620368196b80db25d4f","modified":1608015462815},{"_id":"public/old_images/2020/05/330527918.jpg","hash":"2e12f3a82437425f83fa596b291aacaa43bb55a1","modified":1608015462815},{"_id":"public/old_images/2020/05/3326287196.jpg","hash":"bae78b0c8f93e9110220cb1cd1935f5c59d0ff24","modified":1608015462815},{"_id":"public/old_images/2020/05/3310307667.jpg","hash":"3d5ab282d85f88dbef614134d8c0f3777310f63b","modified":1608015462815},{"_id":"public/old_images/2020/05/3433924516.png","hash":"31fb7213f20504003d8e305bb97ebe22b35b0bee","modified":1608015462815},{"_id":"public/old_images/2020/05/3462557488.png","hash":"34bfe5ca7065196c01a6148ed865662f30fa852f","modified":1608015462815},{"_id":"public/old_images/2020/05/3518464858.jpg","hash":"26e8b202c336b430ef3c2bffedebeb8d52a58510","modified":1608015462815},{"_id":"public/old_images/2020/05/4002000137.jpg","hash":"ec39ed6fbf6d3bb901ee5f6b68cf94742b094179","modified":1608015462815},{"_id":"public/old_images/2020/05/4289012251.jpg","hash":"71a4729f252f3f008d61ffbc6db3bc319c9b4860","modified":1608015462815},{"_id":"public/old_images/2020/05/557249455.jpg","hash":"89fb3e5ba9e25e24af47f0ff78ceacbdd67f3b74","modified":1608015462815},{"_id":"public/old_images/2020/05/805442062.jpg","hash":"5c4d3877f09bc1701f979492f6049a89869a1e41","modified":1608015462815},{"_id":"public/old_images/2020/05/904172395.jpg","hash":"9c4f157bdf6736df956ad34d4725a109d358be96","modified":1608015462815},{"_id":"public/old_images/2020/05/910319602.jpg","hash":"eb2477e63bba49322d6b6793c63699bbc35cafbf","modified":1608015462815},{"_id":"public/old_images/2020/05/963849757.jpg","hash":"30c5dd6825199a5becc8e52d03c982fda441bc2c","modified":1608015462815},{"_id":"public/old_images/2020/06/1075180362.jpg","hash":"b9cabf9446eb47eaf27e82ebcc9e4000966b99db","modified":1608015462815},{"_id":"public/old_images/2020/06/1085139085.jpg","hash":"962d2ae884e7c9fa4a65dd5d8ea32278b0a3bbec","modified":1608015462815},{"_id":"public/old_images/2020/06/1099674099.jpg","hash":"f1336e4766e0d02909248ffce1337cd26efba542","modified":1608015462815},{"_id":"public/old_images/2020/06/1460216437.png","hash":"2bdffc104b5fe78b2e8bfeedac010a3a69fafecc","modified":1608015462815},{"_id":"public/old_images/2020/06/1785132415.jpg","hash":"be6c61d764ca72a3e47fba97d1cb894abd50491e","modified":1608015462815},{"_id":"public/old_images/2020/06/1821389100.jpg","hash":"140e1e8046f535ec2562fe5d361022992154ca67","modified":1608015462815},{"_id":"public/old_images/2020/06/1829637362.jpg","hash":"530a3f40e585677b8f5e3a752524457826132598","modified":1608015462815},{"_id":"public/old_images/2020/06/1930281352.jpg","hash":"95960fd271ea2b8905818f8f172a0a0d64f980ce","modified":1608015462815},{"_id":"public/old_images/2020/06/1911627333.jpg","hash":"4483a8039a25e731a9c8ce73f6740079d894205c","modified":1608015462815},{"_id":"public/old_images/2020/06/1955986387.jpg","hash":"58c9376307ee8a470ae2c4b03d44b021515056bd","modified":1608015462815},{"_id":"public/old_images/2020/06/2270251422.png","hash":"342ee934f4c660beda1aa21732b8fa361aebead7","modified":1608015462815},{"_id":"public/old_images/2020/06/2328185984.jpg","hash":"acda39fdbb1c3417ef24ad80c4f802dac18c631c","modified":1608015462815},{"_id":"public/old_images/2020/06/2730705132.jpg","hash":"2d4aa87a23ee116988ddb17445d8313d49987eec","modified":1608015462815},{"_id":"public/old_images/2020/06/2743383745.jpg","hash":"f1ca0345a275ac06ba1b2982491d2ca80f9bd0eb","modified":1608015462815},{"_id":"public/old_images/2020/06/275706257.jpg","hash":"32732b3f6445b91b81c82e416c894474f109dae5","modified":1608015462815},{"_id":"public/old_images/2020/06/2792304263.jpg","hash":"f68beaca120609865dbf64a04a6116087b1cbbec","modified":1608015462815},{"_id":"public/old_images/2020/06/2855613712.jpg","hash":"ee526936ebc66a16625a158e074c2275f5f659f9","modified":1608015462815},{"_id":"public/old_images/2020/06/2875422330.jpg","hash":"64b9decd2acc0ae6d8d61c1676f1b97772a64251","modified":1608015462815},{"_id":"public/old_images/2020/06/2947829010.jpg","hash":"fa44e79452872ff8cad05875ef5a52f7c219a66c","modified":1608015462815},{"_id":"public/old_images/2020/06/3043677073.png","hash":"b744f4959c7ccb31036cb90be00de2f094026be8","modified":1608015462815},{"_id":"public/old_images/2020/06/3183017928.png","hash":"139db96f46618a8a6aec7b4515584566c8ff71c5","modified":1608015462815},{"_id":"public/old_images/2020/06/3236832836.jpg","hash":"ff11b2042dfe403b8fc288f7f7b02e37608f842d","modified":1608015462815},{"_id":"public/old_images/2020/06/3332546483.jpg","hash":"cf805f852779367d162834a079d7aced4ac4b20b","modified":1608015462815},{"_id":"public/old_images/2020/06/3333883292.jpg","hash":"4dadeed9d4f2399d993dae55b0edddde7bd67a85","modified":1608015462815},{"_id":"public/old_images/2020/06/334535609.jpg","hash":"e553747dd88d5c8cec6e80e10e654336a4179fcb","modified":1608015462815},{"_id":"public/old_images/2020/06/348952594.jpg","hash":"685e3f78334728b50c206de75baf07fcdccab853","modified":1608015462815},{"_id":"public/old_images/2020/06/3579642186.jpg","hash":"d7b941a0b5843b87ef290e90640ef2321796e833","modified":1608015462815},{"_id":"public/old_images/2020/06/3640866494.jpg","hash":"94bf1c8f588792b6289832f0ff7cb30e0dd2d965","modified":1608015462815},{"_id":"public/old_images/2020/06/3795421197.jpg","hash":"342ab51fdb045df57d2b13a6a61e3d3384e6ee0a","modified":1608015462815},{"_id":"public/old_images/2020/06/3831150800.jpg","hash":"2568a53fa6efbb0f28f42ee57b029c18d069607f","modified":1608015462815},{"_id":"public/old_images/2020/06/385346141.png","hash":"e4b70b6d0375c4c1d4c2278d4040d13a0eae7ff1","modified":1608015462815},{"_id":"public/old_images/2020/06/4103478537.jpg","hash":"fdd410e21200eca9ec7a4a98df905814412b3609","modified":1608015462815},{"_id":"public/old_images/2020/06/4143798911.jpg","hash":"fd751e72f337643d0f46de1c12561d7bf039a648","modified":1608015462815},{"_id":"public/old_images/2020/06/43534473.png","hash":"b9266e6c991466086d24eb4bfdd5bf39bd58eb86","modified":1608015462815},{"_id":"public/old_images/2020/06/679760522.jpg","hash":"d1d98e21222faf016650575992eab290a0ec4079","modified":1608015462815},{"_id":"public/old_images/2020/06/890806100.jpg","hash":"151a2dd10b5a151692caf6611fe48caf42eff3f0","modified":1608015462815},{"_id":"public/old_images/2020/07/1260733011.png","hash":"6ae0c62b06e9893eab788d2b73e732dd2bb624e0","modified":1608015462815},{"_id":"public/old_images/2020/07/1264423062.png","hash":"c510ff543a89bc6bfdb118a726561d13478a1311","modified":1608015462815},{"_id":"public/old_images/2020/07/162826487.png","hash":"352b0c3817b71a0a879ab99ab715ba7980b20fad","modified":1608015462815},{"_id":"public/old_images/2020/07/1559317015.png","hash":"f7f19d2dc4bd08dba46ee1634d9ad2933d208019","modified":1608015462815},{"_id":"public/old_images/2020/07/1700994165.png","hash":"69e33372d0f6182e1bd83d1b8cc188317988ca0e","modified":1608015462815},{"_id":"public/old_images/2020/07/2048957230.png","hash":"4ef816c2cd2352807d94d427ceb507571a1cfd4c","modified":1608015462815},{"_id":"public/old_images/2020/07/2140554824.png","hash":"65a2a07de621545d8b666036f1e129e5df178d92","modified":1608015462815},{"_id":"public/old_images/2020/07/2422714402.png","hash":"e7ab966d6a65a16dc9559149ba5e8e1511645278","modified":1608015462815},{"_id":"public/old_images/2020/07/2612196784.png","hash":"bb378b684d064c1289c3402f0acf61d38e0bef60","modified":1608015462815},{"_id":"public/old_images/2020/07/3074664648.jpg","hash":"686043cfe905b31bf0b41322d7c34cdd67b3f2e6","modified":1608015462815},{"_id":"public/old_images/2020/07/3087868713.png","hash":"f12a930210d7c6e0449cb6a197782e42f786f656","modified":1608015462815},{"_id":"public/old_images/2020/07/3570375741.jpg","hash":"d0a361cbd765dca8bb437c657dfe0422cfe8d044","modified":1608015462815},{"_id":"public/old_images/2020/07/3819593002.png","hash":"a24bfe1d6df429e829760036e1f8fb470eb96456","modified":1608015462815},{"_id":"public/old_images/2020/07/3860621436.png","hash":"b84c1feadcedee0b810131d1cbc3aa0dad8518f3","modified":1608015462815},{"_id":"public/old_images/2020/07/623017393.jpg","hash":"3a26efeaef3da820ad4f93d55e73d6aa6d1d198d","modified":1608015462815},{"_id":"public/old_images/2020/07/81368647.png","hash":"63fab0f6a05d32425d92b5405622b2ca262be5a7","modified":1608015462815},{"_id":"public/old_images/2020/07/755844939.png","hash":"8afc61f37f5534315625e98bd4f8448b0f144ec2","modified":1608015462815},{"_id":"public/old_images/2020/08/1639294894.png","hash":"822cbd4194885daec0f7f0d5e73174cfd01f3332","modified":1608015462815},{"_id":"public/old_images/2020/08/2373904712.png","hash":"b0a9ba3f64f9c53bbcca5db7bb54ae3979d82a86","modified":1608015462815},{"_id":"public/old_images/2020/08/2072954433.png","hash":"d08c836682cf6285ec194771dddff6d688383132","modified":1608015462815},{"_id":"public/old_images/2020/08/3016259840.png","hash":"1dae2dff10157ab11bdb84ac613d0df44903ecd4","modified":1608015462815},{"_id":"public/old_images/2020/08/350215919.png","hash":"485586ac91fca7e0206835cb853d283645c55d31","modified":1608015462815},{"_id":"public/old_images/2020/08/3614482147.png","hash":"03607ded4e3a1e98321e67d1d90b74f4a05f0989","modified":1608015462815},{"_id":"public/old_images/2020/08/3976439614.png","hash":"1d2eab38caa98123ac7ae019e74599c5d3050bcb","modified":1608015462815},{"_id":"public/old_images/2020/08/4046785801.png","hash":"311606024051a3a088cac407e27fded09e9f5830","modified":1608015462815},{"_id":"public/old_images/2020/08/4228770977.png","hash":"b5183fe2005fc8365bd74808bfd36f31f9b29976","modified":1608015462815},{"_id":"public/old_images/2020/08/437577698.png","hash":"339e6cf4a8ad1bc7410c685aff228db52f60b3b5","modified":1608015462815},{"_id":"public/old_images/2020/08/482966380.png","hash":"3fc5757368607509d9a45ae26c4c73e5aa33041a","modified":1608015462815},{"_id":"public/old_images/2020/08/502004202.png","hash":"07245ddc4152b402d409fb7285805df053dd7d32","modified":1608015462815},{"_id":"public/old_images/2020/08/75184131.jpg","hash":"46f04b27b0c7077e9805d585ef2b2fc02c09a4f6","modified":1608015462815},{"_id":"public/old_images/2020/09/1356202506.jpg","hash":"db86ecc1d19c19fb8fa9cf5eff8ba9d1ccd7c6ea","modified":1608015462815},{"_id":"public/old_images/2020/09/2234319971.jpg","hash":"18b7fa862a0a0d513e0ab1e41eae18e1942686f1","modified":1608015462815},{"_id":"public/old_images/2020/09/2393108645.jpg","hash":"061148aec3f7d8e610d8e4a147264e9b3de45472","modified":1608015462815},{"_id":"public/old_images/2020/09/2995037215.jpg","hash":"cd7a99a9916f8d8cb91c923f0dca9d265d2841bf","modified":1608015462815},{"_id":"public/old_images/2020/10/1161417211.jpg","hash":"36e369c9f862ea7ebeb599e5696b43fd7a7192f1","modified":1608015462815},{"_id":"public/old_images/2020/10/1506103335.jpg","hash":"97674aca0b618dcb1e8d953b61597b9e2f887d35","modified":1608015462815},{"_id":"public/old_images/2020/10/1816268613.jpg","hash":"c30b868232795c9ded607bee62af9e71e298cf51","modified":1608015462815},{"_id":"public/old_images/2020/10/2013533644.jpg","hash":"de23c2dfe0730948be350767d8154340ba65c478","modified":1608015462815},{"_id":"public/old_images/2020/10/2296969013.jpg","hash":"6901e5238a526823ee1c02363063a7016aa7da77","modified":1608015462815},{"_id":"public/old_images/2020/10/2420399875.jpg","hash":"33c047fa348b8378b346ae4f0a37237a55327ecd","modified":1608015462815},{"_id":"public/old_images/2020/10/2447629851.jpg","hash":"cdffeb3d536e870754927c43c1f34f5ae91ccfef","modified":1608015462815},{"_id":"public/old_images/2020/10/2604642185.jpg","hash":"97674aca0b618dcb1e8d953b61597b9e2f887d35","modified":1608015462815},{"_id":"public/old_images/2020/10/2634073253.jpg","hash":"e3d545286aaf778755c2cd068bf9de9fb4eb2a95","modified":1608015462815},{"_id":"public/old_images/2020/10/270394888.jpg","hash":"01e51ed821fa91857f4c9328ab829202e2c5ca85","modified":1608015462815},{"_id":"public/old_images/2020/10/2773680925.jpg","hash":"363f1fb6460fdad05372b9b62b985b5902ff05ae","modified":1608015462815},{"_id":"public/old_images/2020/10/3031661130.png","hash":"2ab2f8455ab151d0905ef202598dabf5a6488ae4","modified":1608015462815},{"_id":"public/old_images/2020/10/3032572949.png","hash":"a4fc9f809b1341cbee518b756401fdc964930a12","modified":1608015462815},{"_id":"public/old_images/2020/10/3422282407.jpg","hash":"45bf105a55bf900d05f7ad3df2f7679ef9d8fdf3","modified":1608015462815},{"_id":"public/old_images/2020/10/3898272400.jpg","hash":"620d789bbab91666491fef871e9346994c28fb36","modified":1608015462815},{"_id":"public/old_images/2020/10/513067831.jpg","hash":"173d7312646f07bb201b36aa7fd137f3cbfa9e3c","modified":1608015462815},{"_id":"public/live2dw/assets/mtn/idle_01.mtn","hash":"908abce18f6cf7fd4bc1486f048c25a517f4a34a","modified":1608015462815},{"_id":"public/live2dw/assets/mtn/idle_02.mtn","hash":"865874c50848fbc9a55011391531e2ec171c9b91","modified":1608015462815},{"_id":"public/live2dw/assets/mtn/idle_03.mtn","hash":"84684914ebf5dc5b2df160338bb97dcc0a978476","modified":1608015462815},{"_id":"public/live2dw/assets/mtn/idle_04.mtn","hash":"78e22091792abb0600f724a5dfd60371257954e8","modified":1608015462815},{"_id":"public/live2dw/assets/mtn/shake_01.mtn","hash":"dffc54733127832f8f5e91aced55a83da58fa215","modified":1608015462815},{"_id":"public/live2dw/assets/mtn/shake_02.mtn","hash":"7b6c914f6c33450eda2e53d9b638fd7045c0f683","modified":1608015462815},{"_id":"public/live2dw/assets/mtn/touch_01.mtn","hash":"99270ea8fe1f8f5d88eadb94f36bd0810009d1e6","modified":1608015462815},{"_id":"public/live2dw/assets/mtn/touch_02.mtn","hash":"4d1f099fbd18d15c598a644227ed5bf942a2ba71","modified":1608015462815},{"_id":"public/live2dw/assets/mtn/touch_03.mtn","hash":"9c394975083915f0f3786caff1762381348b041e","modified":1608015462815},{"_id":"public/live2dw/assets/mtn/touch_04.mtn","hash":"8d2302cfdaec698e575048797ff4f30ae4d202de","modified":1608015462815},{"_id":"public/live2dw/assets/mtn/touch_05.mtn","hash":"9610bb8a937ba9b11445a3894d8cc0733a2b67e5","modified":1608015462815},{"_id":"public/live2dw/assets/mtn/touch_06.mtn","hash":"feb9237c73f2045ed1704c01b5362c9a54ee5a18","modified":1608015462815},{"_id":"public/live2dw/assets/wanko.model.json","hash":"b98a8ce54fbcf1606a489f1bc5f26b1a18c82d79","modified":1608015462815},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1608015462815},{"_id":"public/images/banner.webp","hash":"8541190b0755d7dea9296b95254c7c1ab7a5f36e","modified":1608015462815},{"_id":"public/images/system/alipay.jpg","hash":"97ae1ec471c9904046af35ab6dc87eedfa66fa7d","modified":1608015462815},{"_id":"public/images/system/avatar.png","hash":"f5cfa394d8a4cade2419fb7fa1474b11b437ccf6","modified":1608015462815},{"_id":"public/images/system/wechatpay.jpg","hash":"56a89d89fc6f503ed70b28762fe2bce8e0e18177","modified":1608015462815},{"_id":"public/old_images/2020/02/1060876639.png","hash":"9f6eb2f8f57e137072f5d7958332da63ffbaaa9b","modified":1608015462815},{"_id":"public/old_images/2020/02/1451004919.jpg","hash":"5f6756c24096d413dd0969f4512603d1e76039a4","modified":1608015462815},{"_id":"public/old_images/2020/02/2575250596.png","hash":"8ce8acdc4e52500cfc3d42bada653575e82c99b8","modified":1608015462815},{"_id":"public/old_images/2020/02/3787159546.png","hash":"a5951205f98e8c2e56c756355ced1874a0f75114","modified":1608015462815},{"_id":"public/old_images/2020/02/3798843184.jpg","hash":"4963ad51a3083deb6daad24d4e943ff3c57722e6","modified":1608015462815},{"_id":"public/old_images/2020/02/4023551690.png","hash":"e1292573518a94c9b141b2813b4903eba854110f","modified":1608015462815},{"_id":"public/old_images/2020/02/4095688085.png","hash":"f7bcedc493cc2179768dc1892a8ead618f886288","modified":1608015462815},{"_id":"public/old_images/2020/02/423865379.png","hash":"8ed6f4b8d0decf5e1734d1cdbae5d74fab2309c0","modified":1608015462815},{"_id":"public/old_images/2020/02/817300143.jpg","hash":"90853c7f6b9d1d5b01497d3407e35cd03f7a92a5","modified":1608015462815},{"_id":"public/old_images/2020/03/1453260522.png","hash":"6a5f520a4256af0e3402c4ce5179b77863a7dd69","modified":1608015462815},{"_id":"public/old_images/2020/03/1666061624.png","hash":"3964c53a2bce05e8e3531ff13924cacf9c2ace1e","modified":1608015462815},{"_id":"public/old_images/2020/03/1765616617.png","hash":"16a94ee9bd9c262208d7d1f1c8722d44b2dcba0c","modified":1608015462815},{"_id":"public/old_images/2020/03/2072343370.png","hash":"36ca055d337ae5fadfe7330f7cc943f0bda2b98d","modified":1608015462815},{"_id":"public/old_images/2020/03/2569806803.png","hash":"a17aefb2be43de5034a096e3ccfafd6f6eaaaf3b","modified":1608015462815},{"_id":"public/old_images/2020/03/2715500984.gif","hash":"4e7d2f6c7db172baeaf77f2024d44badc4170dcc","modified":1608015462815},{"_id":"public/old_images/2020/03/2875168475.gif","hash":"c08ff841c8efafe33a1a47082c45aad5275795d3","modified":1608015462815},{"_id":"public/old_images/2020/03/3099420731.png","hash":"734ab1dc7ebc269838e8521d18dde9d8590ebb20","modified":1608015462815},{"_id":"public/old_images/2020/03/691907800.png","hash":"fc2faf69f336cbb65918940a66d123e11c15f930","modified":1608015462815},{"_id":"public/old_images/2020/04/2303562078.png","hash":"a1ffc5a39efd723f96837ad5ed0c84a976adebd3","modified":1608015462815},{"_id":"public/old_images/2020/04/4102771430.png","hash":"6259cca54a43a94e49918f4831f971f60e5569c2","modified":1608015462815},{"_id":"public/old_images/2020/05/133193778.jpg","hash":"d4d3b27efb0e6ef8087d19a6e248ef065b415da7","modified":1608015462815},{"_id":"public/old_images/2020/05/1596536276.jpg","hash":"cbcacec03b67c509f0d58fc4913fff559ea0b0a4","modified":1608015462815},{"_id":"public/old_images/2020/05/2541652972.jpg","hash":"587cac7150666fc9b11c5b4980e3df35cf48c312","modified":1608015462815},{"_id":"public/old_images/2020/05/2978689860.jpg","hash":"1916eee29a64dc757a47707b737401325623f83f","modified":1608015462815},{"_id":"public/old_images/2020/05/3068723404.jpg","hash":"82aec83d6553fe104ea0a8efb09aa95deedf44e7","modified":1608015462815},{"_id":"public/old_images/2020/05/4249439680.jpg","hash":"81a610f5de4a1141b179fc2bd913b21c5b1ca077","modified":1608015462815},{"_id":"public/old_images/2020/06/1235922839.jpg","hash":"13f1194c5a278cca980a4fc2970cd5657f0bf8f0","modified":1608015462815},{"_id":"public/old_images/2020/06/3567944637.jpg","hash":"7e084af239f62b6f2e48c60c86f9f9236ce82684","modified":1608015462815},{"_id":"public/old_images/2020/06/4288438894.jpg","hash":"c6397502df72f2a87687f7014451dde38abf362e","modified":1608015462815},{"_id":"public/old_images/2020/07/1501298663.png","hash":"cf918380b18b9d8d56f2f4d1730ba477885433e3","modified":1608015462815},{"_id":"public/old_images/2020/07/2066845163.png","hash":"283f79c88e3e6703df3a3707a41fc74f2692a2c6","modified":1608015462815},{"_id":"public/old_images/2020/07/2308466294.png","hash":"c89a4c6d09e77f6c8241841ddcca714bf95ffba2","modified":1608015462815},{"_id":"public/old_images/2020/07/249903794.png","hash":"47b22dfc1b229e48766936599941240528619eeb","modified":1608015462815},{"_id":"public/old_images/2020/07/270229372.png","hash":"fbe09478b37e492b1374cb6aa616c861af21943d","modified":1608015462815},{"_id":"public/old_images/2020/07/2817136246.png","hash":"e527648d025da41325d044f85e20bbc38d59504f","modified":1608015462815},{"_id":"public/old_images/2020/07/3548240241.png","hash":"f8357268c32579a8eadfa7319e73484e78bb86c7","modified":1608015462815},{"_id":"public/old_images/2020/07/3888322204.png","hash":"3c9cb80cde23b7390af6a2f6b1546ceeb55d7e03","modified":1608015462815},{"_id":"public/old_images/2020/07/3991564688.png","hash":"741eade9813bf3f071484bf17fe8ad78b2b0940b","modified":1608015462815},{"_id":"public/old_images/2020/07/489071846.png","hash":"91ed9e20aef68a2fce6873c7a64b04eb2aebb296","modified":1608015462815},{"_id":"public/old_images/2020/07/723480778.png","hash":"2c08dcbfdf7dae625f3662556d19ed363b6d5aa2","modified":1608015462815},{"_id":"public/old_images/2020/07/962343059.png","hash":"a80f43f367ec6b7fd588e1a077c9a2bdb51c2e6e","modified":1608015462815},{"_id":"public/old_images/2020/08/1049549032.jpg","hash":"892032ebde6a3880d2c2b5bb3ef378f08a87e6a1","modified":1608015462815},{"_id":"public/old_images/2020/08/1083781610.png","hash":"11531f77ff3d97378eff9515747e200c5212118d","modified":1608015462815},{"_id":"public/old_images/2020/09/1988211125.jpg","hash":"90d9e50fa61d9eb5212faae20d19fa02fcfd0a00","modified":1608015462815},{"_id":"public/old_images/2020/10/1768418527.jpg","hash":"cb35315039b3b04eb480e3fb842343ecc61b1ce6","modified":1608015462815},{"_id":"public/live2dw/assets/moc/wanko.1024/texture_00.png","hash":"c405c1eeb82bcced7aa7a20f04a76168f60ad561","modified":1608015462815},{"_id":"public/live2dw/assets/moc/wanko.moc","hash":"7b188cd4dcddfe5bdba8ec51a65cb1c21cd2e57a","modified":1608015462815},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1608015462815},{"_id":"public/images/404.webp","hash":"cfedc3a315522b07305b802522c1a5b342d68dec","modified":1608015462815},{"_id":"public/old_images/2020/03/2313483864.png","hash":"05bcb5e82421e72cbfd05e8f050e203b5047b893","modified":1608015462815},{"_id":"public/old_images/2020/03/2861910617.png","hash":"18b4c3a3e4aec303ccd4f1ee200e23721741b5e5","modified":1608015462815},{"_id":"public/old_images/2020/04/2295689788.png","hash":"00b53c61f36b454156be91a858c949bbe1e3070a","modified":1608015462815},{"_id":"public/old_images/2020/05/1187310326.jpg","hash":"652ed38c974cf4c20c7f9f5350152fe6ff10de88","modified":1608015462815},{"_id":"public/old_images/2020/05/999634898.jpg","hash":"9194e7ae741fe46d9969547c98464453b6afcdf1","modified":1608015462815},{"_id":"public/old_images/2020/06/2065354894.jpg","hash":"3fbf3ace07eaa8c45c5e0945a950b8285e7a2cbe","modified":1608015462815},{"_id":"public/old_images/2020/06/2780367333.jpg","hash":"b71a6537b43a3ea2323a0c186af074f708453081","modified":1608015462815},{"_id":"public/old_images/2020/07/1225674126.png","hash":"d1d5e969719060493a80c9848df25af9ebded9e6","modified":1608015462815},{"_id":"public/old_images/2020/07/3794064227.png","hash":"7660e4121a1318b8de49f4bcaa3dfd696b908863","modified":1608015462815},{"_id":"public/old_images/2020/07/4243678235.png","hash":"e373c097135509eb97caffa393e1776405331d6c","modified":1608015462815},{"_id":"public/old_images/2020/08/1060845710.png","hash":"36334b5484d64c21545114f648769bade8c7ca26","modified":1608015462815},{"_id":"public/old_images/2020/09/2369037501.jpg","hash":"a6499bd70efd571c39bbec2f5a338265bf89d52e","modified":1608015462815},{"_id":"public/old_images/2020/09/2522050574.jpg","hash":"0702ab2274dab386c3847483559708a513cae941","modified":1608015462815},{"_id":"public/old_images/2020/10/4055019828.png","hash":"b411acebb7738ccc01366a1c1b66f46680aa1ae8","modified":1608015462815},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1608015462815},{"_id":"public/css/highlight.min.css","hash":"cc1acaf76207c4699af851b782782698baa64127","modified":1608015462815},{"_id":"public/css/kr-dark.min.css","hash":"dc646f78d5efd2068f44cb2e5231cdbe0b227f8f","modified":1608015462815},{"_id":"public/css/prismjs.min.css","hash":"05cdce8a803b676526df9bd35cd1bdb46748cb1a","modified":1608015462815},{"_id":"public/js/candy.min.js","hash":"f047499c25170f1f5fac2471141d439b6330198f","modified":1608015462815},{"_id":"public/js/kr-dark.min.js","hash":"469da5c1768c50d2324e458f196e2fa2ce036d8f","modified":1608015462815},{"_id":"public/js/kratosr.min.js","hash":"cccb4ba552d1a570cce185b76b2ff24b8828d8ac","modified":1608015462815},{"_id":"public/js/pjax.min.js","hash":"61b26f5f4848e7fbed99780a64948ab44bd09e9b","modified":1608015462815},{"_id":"public/js/local-search.min.js","hash":"4978657d8ab1b7f26c09300c538680c90019c94f","modified":1608015462815},{"_id":"public/js/snow.min.js","hash":"74b8138840be139836cf9a0e6b8d3d41d0c2902b","modified":1608015462815},{"_id":"public/images/banner_dark.webp","hash":"acd43af0e9352b5f8f09b53970f0131b8bdccae8","modified":1608015462815},{"_id":"public/old_images/2020/04/4165605798.jpeg","hash":"e49b546e6d049e4e84a14e2eb1315c9effda02ae","modified":1608015462815},{"_id":"public/old_images/2020/07/2541934723.png","hash":"30894391bd165a33ed92cb40bf17cf54fbb6e4cf","modified":1608015462815},{"_id":"public/old_images/2020/07/291067937.png","hash":"5b9b8ecf14e8c3d55690012591d4b8914bacb692","modified":1608015462815},{"_id":"public/old_images/2020/07/551017501.png","hash":"cbfa4216ac318995a72bc1d939dfe2c05fcaa634","modified":1608015462815},{"_id":"public/old_images/2020/07/995794732.png","hash":"d4b49eda09c21b6671201b0647a34868c7797614","modified":1608015462815},{"_id":"public/old_images/2020/07/2310258600.png","hash":"626f2fed4f2fde15569a96d355e15226b861a210","modified":1608015462815},{"_id":"public/old_images/2020/07/3001651570.png","hash":"b26b24663adc42395b11abcec1bf3c534402c548","modified":1608015462815},{"_id":"public/old_images/2020/07/3351283967.png","hash":"4958061b59d67821ee04433e97d9d2d1e36ed0bf","modified":1608015462815},{"_id":"public/old_images/2020/07/4181754296.png","hash":"da119d79e79a3a19511c627fe3e16d66ac532882","modified":1608015462815},{"_id":"public/old_images/2020/07/51341367.png","hash":"5841492967654913e29a855b5475aa1319603eb2","modified":1608015462815},{"_id":"public/old_images/2020/08/615084051.png","hash":"5432051345e81e8fc584c9deab47df31ab0a5a1c","modified":1608015462815},{"_id":"public/css/kratosr.min.css","hash":"dd2358fdaa9a57cee3e319463122b83bbdacec72","modified":1608015462815},{"_id":"public/old_images/2020/03/999894680.png","hash":"e90d6bf2c1c24336367ef391e1ba7c715e700b1b","modified":1608015462815},{"_id":"public/old_images/2020/07/1028634298.png","hash":"6e9128f83a6a0095f8b4d659df43e49c6b3890c7","modified":1608015462815},{"_id":"public/old_images/2020/07/3134056928.png","hash":"63dd41aa7a2726f44314f203e63e5b492a9e0831","modified":1608015462815},{"_id":"public/old_images/2020/07/3240034142.png","hash":"55f05e87cb99206aeec9c04fe72859cf7136eb5c","modified":1608015462815},{"_id":"public/old_images/2020/07/4097717059.png","hash":"740605d6dfeb8149d0fd0c68fd1167d752c11a12","modified":1608015462815},{"_id":"public/old_images/2020/11/1735837242.png","hash":"889f4749aee409c9bf22b9e1051bc093ee67b996","modified":1608015462815},{"_id":"public/old_images/2020/02/2697564545.png","hash":"226cc45a3095f35a4626337cd89175e67f546f6e","modified":1608015462815},{"_id":"public/old_images/2020/03/340887529.png","hash":"1742402ea77f5d649ca12f174998007ebbe43f0a","modified":1608015462815},{"_id":"public/old_images/2020/05/651860426.jpg","hash":"3ae7dfff6e911f3aaf4c57166b5cf392a2f48058","modified":1608015462815},{"_id":"public/old_images/2020/03/3846485483.png","hash":"0ec61fa185f80d5f3c56a60967c39f1dbec189e8","modified":1608015462815},{"_id":"public/old_images/2020/05/1113348697.jpg","hash":"36800310ed4bcad06ec8ce749ccc0562d57bc112","modified":1608015462815},{"_id":"public/old_images/2020/05/664969895.png","hash":"f2c3d521c1ba351c55bfbdb51c5337fa9fc15b38","modified":1608015462815},{"_id":"public/old_images/2020/07/2822560807.jpg","hash":"93c26f44128769b255f90793d2fec6df39f5e107","modified":1608015462815},{"_id":"public/old_images/2020/05/2294227069.jpg","hash":"dd890403eb86e78ef1b513321149108662055dfb","modified":1608015462815},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1608015462815},{"_id":"public/old_images/2020/04/193187891.pdf","hash":"d03e5ccffcf693605adad92c8e9164e09d2003c4","modified":1608015462815},{"_id":"public/old_images/2020/05/3913045297.jpg","hash":"22290d9987d534c1a37feb9d3b1dbd9e17d118c3","modified":1608015462815},{"_id":"public/old_images/2020/08/1791974604.png","hash":"b9e26b27744a6f09257588bc9dad054a8f1676ff","modified":1608015462815},{"_id":"public/old_images/2020/06/4074491988.png","hash":"1367e0eb7bd8278400dd5f736d3a2c72c4288a8b","modified":1608015462815},{"_id":"public/old_images/2020/04/781569241.jpg","hash":"9cff4c3094a7821809c5f5b4b4fe1921947a70c9","modified":1608015462815},{"_id":"public/old_images/2020/06/2236493176.png","hash":"c9c0f9b02960295dd61aacba8a239bdd6b8fddcb","modified":1608015462815},{"_id":"public/old_images/2020/06/4291764818.png","hash":"ec16bd88970c9ccbab5c75eb7b4578902dd1fe79","modified":1608015462815},{"_id":"public/old_images/2020/09/3319805378.png","hash":"e0799d8c1be43de8a8d7b0a8699ef7f60c6c2ffa","modified":1608015462815},{"_id":"public/old_images/2020/03/3142260807.jpg","hash":"799ead1c8cdb1ead7b7e99a0e555560d3f08c7f0","modified":1608015462815},{"_id":"public/old_images/2020/05/1170183205.png","hash":"cfcd6671dbbd0bf8ae6d44b4cd216ec7dfc5adf0","modified":1608015462815},{"_id":"public/old_images/2020/06/142298572.png","hash":"031e17e4b8fb78926fc2bffa53e8e83b312d3b9e","modified":1608015462815},{"_id":"public/old_images/2020/09/2082677778.png","hash":"ab29866a4a3e94739c9ddaa9f12761531af87898","modified":1608015462815},{"_id":"public/old_images/2020/07/3520035333.gif","hash":"52a2342a40a10b0004b95abe5c54610718fab74e","modified":1608015462815},{"_id":"public/old_images/2020/02/42703606.jpg","hash":"d5fcffcbdb9e91ba51ee3c46da4d296925fe6952","modified":1608015462815},{"_id":"public/old_images/2020/05/4174507093.gif","hash":"d55166f6fc50e5b2aefc5175a29744fcaf06502b","modified":1608015462815},{"_id":"public/old_images/2020/02/2461771289.jpg","hash":"5f5a8608909924c225296d9c4ede155b593bac5e","modified":1608015462815},{"_id":"public/old_images/2020/07/1405371260.gif","hash":"8e8378c08376fe97c6aa62222ddc02cbdff01a0c","modified":1608015462815},{"_id":"themes/my-Kratos-Rebirth/LICENSE","hash":"31a3d460bb3c7d98845187c716a30db81c44b615","modified":1607666422751},{"_id":"themes/my-Kratos-Rebirth/ReadMe.md","hash":"c15c2f0010f62baa95a3fdd46a2f455f95fb694f","modified":1607666422751},{"_id":"themes/my-Kratos-Rebirth/_config.yml","hash":"7c7c890414935db170566bb7f89ac628852a113d","modified":1608015232007},{"_id":"themes/my-Kratos-Rebirth/_config.yml.example","hash":"f20825ef314fe981590786d7bf9d9d5fc0a89722","modified":1607666422751},{"_id":"themes/my-Kratos-Rebirth/gulpfile.js","hash":"64f1fe1de8d38deca7f6c4c6514331b5a660a89c","modified":1607666422751},{"_id":"themes/my-Kratos-Rebirth/package.json","hash":"22e6cc10d8c12f5fc37588bd5d48fe5082f6dbfd","modified":1607666422751},{"_id":"themes/my-Kratos-Rebirth/languages/zh-CN.yml","hash":"ab6cd034db455c1c9cca92d62bcde856a8fcf1b3","modified":1607666422751},{"_id":"themes/my-Kratos-Rebirth/layout/archive.ejs","hash":"9344eed764332edb8880467011ca3a569091f553","modified":1607666422751},{"_id":"themes/my-Kratos-Rebirth/layout/category.ejs","hash":"5677b70953e6a33038a0e03eaa06e45c10ec7d73","modified":1607666422751},{"_id":"themes/my-Kratos-Rebirth/layout/index.ejs","hash":"ba8f181f9e88fd4e205abdf88bb7ecc7b36cd7fd","modified":1607666422751},{"_id":"themes/my-Kratos-Rebirth/layout/layout.ejs","hash":"41ac0c3b94e7eef3ae86a8569c917dd9a50dc602","modified":1607666422751},{"_id":"themes/my-Kratos-Rebirth/layout/page.ejs","hash":"766629bed63cc342c626746af93604cc8e7f66d3","modified":1607666422751},{"_id":"themes/my-Kratos-Rebirth/layout/post.ejs","hash":"13d24192ec5e649384314e1ac818975a0a53fdd8","modified":1607666422751},{"_id":"themes/my-Kratos-Rebirth/layout/tag.ejs","hash":"5677b70953e6a33038a0e03eaa06e45c10ec7d73","modified":1607666422751},{"_id":"themes/my-Kratos-Rebirth/scripts/genconfig.js","hash":"440054e08cec7dcd69223f6b0758362f6f860a35","modified":1607666422751},{"_id":"themes/my-Kratos-Rebirth/scripts/search.js","hash":"df4d3d396527680699df26627f1c46ee6e304a05","modified":1607666422751},{"_id":"themes/my-Kratos-Rebirth/scripts/tag-widgets.js","hash":"173f76d085fbf0f6931a6d91f5841f748ab4e6d1","modified":1607666422751},{"_id":"themes/my-Kratos-Rebirth/layout/_comments/disqus.ejs","hash":"3a6bb4badb902ab0bd2eea6553865bcb7d52ef89","modified":1607666422751},{"_id":"themes/my-Kratos-Rebirth/layout/_comments/disqusjs.ejs","hash":"7dabdf526bbc4706a7eb1a06433bf545a2b350db","modified":1607666422751},{"_id":"themes/my-Kratos-Rebirth/layout/_comments/twikoo.ejs","hash":"9895c8e1003bdd850ce07bb038d52afbe9d146cf","modified":1607666422751},{"_id":"themes/my-Kratos-Rebirth/layout/_comments/valine.ejs","hash":"40e1b4e1ee55d41c97c71eafe4f75afa7c5f158c","modified":1607666422751},{"_id":"themes/my-Kratos-Rebirth/layout/_pages/search-page.ejs","hash":"38f97e185a924aef406aaf41b9e596db170783c9","modified":1607666422751},{"_id":"themes/my-Kratos-Rebirth/layout/_partial/after-footer.ejs","hash":"74f4890e27c4e10ed122078c97fc0faf37638ce1","modified":1607666422751},{"_id":"themes/my-Kratos-Rebirth/layout/_partial/footer.ejs","hash":"28b2da3198673c725af514a721a0080e05d844e1","modified":1607666422751},{"_id":"themes/my-Kratos-Rebirth/layout/_partial/head.ejs","hash":"63a7daae4a3bf43077ac601ed3cffdd7d7d7169e","modified":1607666422751},{"_id":"themes/my-Kratos-Rebirth/layout/_partial/header.ejs","hash":"08d4219a4e4c75e9c85515d7a42ded2636ab5146","modified":1607666422751},{"_id":"themes/my-Kratos-Rebirth/layout/_tools/player.ejs","hash":"6bc31c09041b8a28abe15d19856fa3b1b84589af","modified":1607666422751},{"_id":"themes/my-Kratos-Rebirth/layout/_tools/share.ejs","hash":"1fbb59cc07b9152e0c5b7ecf969af579c3b34c0a","modified":1607666422751},{"_id":"themes/my-Kratos-Rebirth/layout/_widget/about.ejs","hash":"99356c24c757cb3dbac7a37cdced79b79d05e49c","modified":1608014905168},{"_id":"themes/my-Kratos-Rebirth/layout/_widget/category.ejs","hash":"6a67608bda8501649c48f6eee8e91fe083cbf8a7","modified":1607666422751},{"_id":"themes/my-Kratos-Rebirth/layout/_widget/posts.ejs","hash":"d55a85a531b716df93be742c70dc6dadb9bd1813","modified":1607666422751},{"_id":"themes/my-Kratos-Rebirth/layout/_widget/tagcloud.ejs","hash":"223730bfe007f26d5279cb66f1da9222c7d64c62","modified":1607666422751},{"_id":"themes/my-Kratos-Rebirth/layout/_widget/toc.ejs","hash":"5a42cb1dc0673ae12472ea822d03d7beed7b0749","modified":1607666422751},{"_id":"themes/my-Kratos-Rebirth/source/css/highlight.min.css","hash":"cc1acaf76207c4699af851b782782698baa64127","modified":1607666422751},{"_id":"themes/my-Kratos-Rebirth/source/css/kr-dark.min.css","hash":"dc646f78d5efd2068f44cb2e5231cdbe0b227f8f","modified":1607666422751},{"_id":"themes/my-Kratos-Rebirth/source/css/kratosr.min.css","hash":"dd2358fdaa9a57cee3e319463122b83bbdacec72","modified":1607666422751},{"_id":"themes/my-Kratos-Rebirth/source/css/prismjs.min.css","hash":"05cdce8a803b676526df9bd35cd1bdb46748cb1a","modified":1607666422751},{"_id":"themes/my-Kratos-Rebirth/source/images/about.webp","hash":"4ad9cc34645a249728644e093c3cf461345f1bbf","modified":1607953754799},{"_id":"themes/my-Kratos-Rebirth/source/images/alipay.webp","hash":"01fa6151d2122f0470ee6f38ac8e4ced6c81912e","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/source/images/avatar.webp","hash":"3ed6e4e1e08e9c2700aa149d1f9e068fb02947cd","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/source/images/bg.webp","hash":"f232b442b64eaa90f45a48ff04d8e7d352caf212","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/source/images/failure.ico","hash":"5eec5c163400d8ece74286da49130da1ead3f6f6","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/source/images/sticky.webp","hash":"0e9bcc89faa0a5e6112ba29e0dcf68e33681db02","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/source/images/psr.webp","hash":"bf457bf84bca767bac1bd2b960d91c53ba3fbdee","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/source/images/wechat.webp","hash":"06f3997bf554768c04cb588198c7b3d68c21b8e9","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/source/js/candy.min.js","hash":"f047499c25170f1f5fac2471141d439b6330198f","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/source/js/kr-dark.min.js","hash":"469da5c1768c50d2324e458f196e2fa2ce036d8f","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/source/js/kratosr.min.js","hash":"cccb4ba552d1a570cce185b76b2ff24b8828d8ac","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/source/js/local-search.min.js","hash":"4978657d8ab1b7f26c09300c538680c90019c94f","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/source/js/pjax.min.js","hash":"61b26f5f4848e7fbed99780a64948ab44bd09e9b","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/source/js/snow.min.js","hash":"74b8138840be139836cf9a0e6b8d3d41d0c2902b","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/src/css/highlight.css","hash":"07057bd4a0ea57f485e33385beda12a4892e5549","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/src/css/kr-dark.css","hash":"416e2364647356d73ac39ca32ab3014c5fba96b3","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/src/css/kratosr.css","hash":"a84e0ccd24b0c95cca06331bcff99bcef4f73464","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/src/css/prismjs.css","hash":"8274e1584b4065e32a6444a5f8737e033102b81f","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/src/js/candy.js","hash":"95b61e65d186b3a8571198557b150420c337be4b","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/src/js/kr-dark.js","hash":"4076a6f552453d8212ef98ac1fe7391006c61903","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/src/js/kratosr.js","hash":"cafb598d96183b25a6b732758d67d5d92c5a8efc","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/src/js/local-search.js","hash":"fe79206f66b0f1bd5279e7356127bdbe31f3540a","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/src/js/pjax.js","hash":"10c1a8d9d34b22d3f499f15a12255ce259a2d001","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/src/js/snow.js","hash":"91621fd1632a0de9cd7cea61e9fababd63c23278","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_1.webp","hash":"a818f050112ceb75e3a60dc1673a10783b254595","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_10.webp","hash":"4983eeca7886bbe7c09b0c79f4774302fdfa1315","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_11.webp","hash":"08d8d91e2b01768842abb47cd48a0f07d22d070c","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_12.webp","hash":"b6b8e1281f9146925e45e937cb4d5b28bcabe957","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_13.webp","hash":"c4c9050637f4ffa3cb7d782f59dadc993ac3a6de","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_14.webp","hash":"f9300e2b45c1f061ec8cc21527142dafc558a9e6","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_15.webp","hash":"8629f2a7d3b0192549f809e6b7479159af0222da","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_16.webp","hash":"61714ccffd55d6fa74cf94bcdd5a464da04ce891","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_17.webp","hash":"b5a036ec234a23c820a89d1c640b1f2e8dd3dfa4","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_18.webp","hash":"5bc78b9d6cb0a0cf6daa3a35b93e575777a49ddd","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_19.webp","hash":"15e0cd0cbe5c7166915a4b68680681beccc2afef","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_2.webp","hash":"1bcf7461c2b9408b8a893013fa425eb46701faf6","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_20.webp","hash":"4ab961d94a0d3abbefc7f6d9188a889ec2225e7a","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_3.webp","hash":"3faffd2575e0751526249c5c56a2a5045a21363b","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_4.webp","hash":"1d0f136590632e7ba31f5510d24891ba443f1f33","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_5.webp","hash":"ba384ada1c2a17b67036addd68ffa1f604ab5a41","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_6.webp","hash":"c2d8b68971dacd111566526f64d94932f5c6f076","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_7.webp","hash":"4be8fe8ea1b3563b78924062e3aa013cd5c4e82b","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_8.webp","hash":"9e6d74786d8459440d68c409eb654364dd279f8a","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/source/images/thumb/thumb_9.webp","hash":"bca69e7d56982b43c52e9ffa17c8d5bb268834d8","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/source/images/404.webp","hash":"cfedc3a315522b07305b802522c1a5b342d68dec","modified":1607666422755},{"_id":"themes/my-Kratos-Rebirth/source/images/banner.webp","hash":"8541190b0755d7dea9296b95254c7c1ab7a5f36e","modified":1607953800505},{"_id":"themes/my-Kratos-Rebirth/source/images/banner_dark.webp","hash":"acd43af0e9352b5f8f09b53970f0131b8bdccae8","modified":1607953834452},{"_id":"source/_posts/轨道交通领域的差速问题and我与轨交.md","hash":"93f9063fffaa968257e97eecc72de90f502bba18","modified":1607948466706},{"_id":"public/2020/07/16/轨道交通领域的差速问题and我与轨交/index.html","hash":"be448d095dd7e5ba4b9f5a92dcaa512228868fb3","modified":1608018394971}],"Category":[{"name":"日常","_id":"ckipmw0bl00047p199bs74xz7"},{"name":"物数","_id":"ckipmw0bp000b7p19dpcj63pv"},{"name":"开发","_id":"ckipmw0bu000m7p199qfnfv61"},{"name":"控制","_id":"ckipmw0bw000s7p199u6j63df"},{"name":"网络","_id":"ckipmw0bx000w7p198ditf1f0"},{"name":"工具","_id":"ckipmw0c100187p19fzxy8da0"}],"Data":[],"Page":[{"title":"关于我","date":"2020-12-12T04:44:02.000Z","comments":1,"description":"我有许多小秘密~","_content":"\n# About Me\n\n* 沉迷某同性交友fps游戏\n* 重度脑溢血患者\n* 音游手残\n* Robomaster x Robocon队员\n* HITCRT后勤部员\n* HIT->HITSZ\n* 疯狂给老板打工中\n* SLAM\\ML初学入坑\n* 怎么学都不对\n\n![myself](/images/system/self.jpg)\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2020-12-12 12:44:02\ncomments: true\ndescription: 我有许多小秘密~\n---\n\n# About Me\n\n* 沉迷某同性交友fps游戏\n* 重度脑溢血患者\n* 音游手残\n* Robomaster x Robocon队员\n* HITCRT后勤部员\n* HIT->HITSZ\n* 疯狂给老板打工中\n* SLAM\\ML初学入坑\n* 怎么学都不对\n\n![myself](/images/system/self.jpg)\n","updated":"2020-12-14T12:43:55.864Z","path":"about/index.html","layout":"page","_id":"ckipmw0bf00007p19hjk808jh","content":"<h1 id=\"About-Me\"><a href=\"#About-Me\" class=\"headerlink\" title=\"About Me\"></a>About Me</h1><ul>\n<li>沉迷某同性交友fps游戏</li>\n<li>重度脑溢血患者</li>\n<li>音游手残</li>\n<li>Robomaster x Robocon队员</li>\n<li>HITCRT后勤部员</li>\n<li>HIT-&gt;HITSZ</li>\n<li>疯狂给老板打工中</li>\n<li>SLAM\\ML初学入坑</li>\n<li>怎么学都不对</li>\n</ul>\n<p><img src=\"/images/system/self.jpg\" alt=\"myself\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"About-Me\"><a href=\"#About-Me\" class=\"headerlink\" title=\"About Me\"></a>About Me</h1><ul>\n<li>沉迷某同性交友fps游戏</li>\n<li>重度脑溢血患者</li>\n<li>音游手残</li>\n<li>Robomaster x Robocon队员</li>\n<li>HITCRT后勤部员</li>\n<li>HIT-&gt;HITSZ</li>\n<li>疯狂给老板打工中</li>\n<li>SLAM\\ML初学入坑</li>\n<li>怎么学都不对</li>\n</ul>\n<p><img src=\"/images/system/self.jpg\" alt=\"myself\"></p>\n"},{"title":"评论政策","date":"2020-12-15T07:14:02.000Z","comments":1,"description":"评论政策","_content":"\n# 评论政策\n\n* **请发表与本帖内容相关的评论，无关内容会被清除**\n* **请自觉遵守互联网相关的政策法规，严禁发布色情、暴力、反动的言论**\n* **网友评论仅供网友表达个人看法，并不表明本站同意其观点或证实其描述**\n\n","source":"comment-policy/index.md","raw":"---\ntitle: 评论政策\ndate: 2020-12-15 15:14:02\ncomments: true\ndescription: 评论政策\n---\n\n# 评论政策\n\n* **请发表与本帖内容相关的评论，无关内容会被清除**\n* **请自觉遵守互联网相关的政策法规，严禁发布色情、暴力、反动的言论**\n* **网友评论仅供网友表达个人看法，并不表明本站同意其观点或证实其描述**\n\n","updated":"2020-12-15T06:52:50.928Z","path":"comment-policy/index.html","layout":"page","_id":"ckipmw0bk00027p19ekrz7kxe","content":"<h1 id=\"评论政策\"><a href=\"#评论政策\" class=\"headerlink\" title=\"评论政策\"></a>评论政策</h1><ul>\n<li><strong>请发表与本帖内容相关的评论，无关内容会被清除</strong></li>\n<li><strong>请自觉遵守互联网相关的政策法规，严禁发布色情、暴力、反动的言论</strong></li>\n<li><strong>网友评论仅供网友表达个人看法，并不表明本站同意其观点或证实其描述</strong></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"评论政策\"><a href=\"#评论政策\" class=\"headerlink\" title=\"评论政策\"></a>评论政策</h1><ul>\n<li><strong>请发表与本帖内容相关的评论，无关内容会被清除</strong></li>\n<li><strong>请自觉遵守互联网相关的政策法规，严禁发布色情、暴力、反动的言论</strong></li>\n<li><strong>网友评论仅供网友表达个人看法，并不表明本站同意其观点或证实其描述</strong></li>\n</ul>\n"},{"title":"好伙伴们","date":"2020-12-12T04:44:02.000Z","comments":1,"description":"好伙伴们在哪里~","_content":"<div class=\"linkpage\"><ul id=\"friendsList\"></ul></div>\n\n<script type=\"text/javascript\">\n{\n    const myFriends = [\n        [\"https://yochamzheng.github.io/\", \"https://avatars3.githubusercontent.com/u/39761153?s=64&v=4\", \"阿虎\", \"中国微电子行业栋梁之材\"],\n        [\"https://hit-zyc.github.io/\", \"https://avatars3.githubusercontent.com/u/56548980?s=64&v=4\", \"驰酱\", \"ZJU-BE\"]\n    ];\n\n    let friendNodes = '';\n    while (myFriends.length > 0) {\n        const rndNum = Math.floor(Math.random()*myFriends.length);\n        friendNodes += `<li><a target=\"_blank\" href=\"${myFriends[rndNum][0]}\"><img src=\"${myFriends[rndNum][1]}\"><h4>${myFriends[rndNum][2]}</h4><p>${myFriends[rndNum][3]}</p></a></li>`;\n        myFriends.splice(rndNum, 1);\n    }\n    document.getElementById(\"friendsList\").innerHTML = friendNodes;\n}\n</script>\n","source":"friends/index.md","raw":"---\ntitle: 好伙伴们\ndate: 2020-12-12 12:44:02\ncomments: true\ndescription: 好伙伴们在哪里~\n---\n<div class=\"linkpage\"><ul id=\"friendsList\"></ul></div>\n\n<script type=\"text/javascript\">\n{\n    const myFriends = [\n        [\"https://yochamzheng.github.io/\", \"https://avatars3.githubusercontent.com/u/39761153?s=64&v=4\", \"阿虎\", \"中国微电子行业栋梁之材\"],\n        [\"https://hit-zyc.github.io/\", \"https://avatars3.githubusercontent.com/u/56548980?s=64&v=4\", \"驰酱\", \"ZJU-BE\"]\n    ];\n\n    let friendNodes = '';\n    while (myFriends.length > 0) {\n        const rndNum = Math.floor(Math.random()*myFriends.length);\n        friendNodes += `<li><a target=\"_blank\" href=\"${myFriends[rndNum][0]}\"><img src=\"${myFriends[rndNum][1]}\"><h4>${myFriends[rndNum][2]}</h4><p>${myFriends[rndNum][3]}</p></a></li>`;\n        myFriends.splice(rndNum, 1);\n    }\n    document.getElementById(\"friendsList\").innerHTML = friendNodes;\n}\n</script>\n","updated":"2020-12-14T12:29:47.198Z","path":"friends/index.html","layout":"page","_id":"ckipmw0bm00057p190ykd987g","content":"<div class=\"linkpage\"><ul id=\"friendsList\"></ul></div>\n\n<script type=\"text/javascript\">\n{\n    const myFriends = [\n        [\"https://yochamzheng.github.io/\", \"https://avatars3.githubusercontent.com/u/39761153?s=64&v=4\", \"阿虎\", \"中国微电子行业栋梁之材\"],\n        [\"https://hit-zyc.github.io/\", \"https://avatars3.githubusercontent.com/u/56548980?s=64&v=4\", \"驰酱\", \"ZJU-BE\"]\n    ];\n\n    let friendNodes = '';\n    while (myFriends.length > 0) {\n        const rndNum = Math.floor(Math.random()*myFriends.length);\n        friendNodes += `<li><a target=\"_blank\" href=\"${myFriends[rndNum][0]}\"><img src=\"${myFriends[rndNum][1]}\"><h4>${myFriends[rndNum][2]}</h4><p>${myFriends[rndNum][3]}</p></a></li>`;\n        myFriends.splice(rndNum, 1);\n    }\n    document.getElementById(\"friendsList\").innerHTML = friendNodes;\n}\n</script>\n","site":{"data":{}},"excerpt":"","more":"<div class=\"linkpage\"><ul id=\"friendsList\"></ul></div>\n\n<script type=\"text/javascript\">\n{\n    const myFriends = [\n        [\"https://yochamzheng.github.io/\", \"https://avatars3.githubusercontent.com/u/39761153?s=64&v=4\", \"阿虎\", \"中国微电子行业栋梁之材\"],\n        [\"https://hit-zyc.github.io/\", \"https://avatars3.githubusercontent.com/u/56548980?s=64&v=4\", \"驰酱\", \"ZJU-BE\"]\n    ];\n\n    let friendNodes = '';\n    while (myFriends.length > 0) {\n        const rndNum = Math.floor(Math.random()*myFriends.length);\n        friendNodes += `<li><a target=\"_blank\" href=\"${myFriends[rndNum][0]}\"><img src=\"${myFriends[rndNum][1]}\"><h4>${myFriends[rndNum][2]}</h4><p>${myFriends[rndNum][3]}</p></a></li>`;\n        myFriends.splice(rndNum, 1);\n    }\n    document.getElementById(\"friendsList\").innerHTML = friendNodes;\n}\n</script>\n"},{"title":"工具","date":"2020-12-10T07:50:53.000Z","type":"categories","comments":0,"_content":"","source":"工具/index.md","raw":"title: 工具\ndate: 2020-12-10 15:50:53\ntype: \"categories\"\ncomments: false\n---\n","updated":"2020-12-11T14:30:31.780Z","path":"工具/index.html","layout":"page","_id":"ckipmw0bn00077p191e2c4ob8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"开发","date":"2020-12-10T07:50:53.000Z","type":"categories","comments":0,"_content":"","source":"开发/index.md","raw":"title: 开发\ndate: 2020-12-10 15:50:53\ntype: \"categories\"\ncomments: false\n---\n","updated":"2020-12-11T13:40:57.913Z","path":"开发/index.html","layout":"page","_id":"ckipmw0bo00097p199z5i638k","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"控制","date":"2020-12-10T07:50:53.000Z","type":"categories","comments":0,"_content":"","source":"控制/index.md","raw":"title: 控制\ndate: 2020-12-10 15:50:53\ntype: \"categories\"\ncomments: false\n---\n","updated":"2020-12-11T13:39:52.375Z","path":"控制/index.html","layout":"page","_id":"ckipmw0bp000c7p190eew49g6","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"日常","date":"2020-12-10T07:50:53.000Z","type":"categories","comments":0,"_content":"","source":"日常/index.md","raw":"title: 日常\ndate: 2020-12-10 15:50:53\ntype: \"categories\"\ncomments: false\n---\n","updated":"2020-12-11T13:39:24.187Z","path":"日常/index.html","layout":"page","_id":"ckipmw0bq000e7p19g6nvckjy","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"物数","date":"2020-12-10T07:50:53.000Z","type":"categories","comments":0,"_content":"","source":"物数/index.md","raw":"title: 物数\ndate: 2020-12-10 15:50:53\ntype: \"categories\"\ncomments: false\n---\n","updated":"2020-12-11T13:40:29.742Z","path":"物数/index.html","layout":"page","_id":"ckipmw0bs000i7p19b1b97ihy","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"网络","date":"2020-12-10T07:50:53.000Z","type":"categories","comments":0,"_content":"","source":"网络/index.md","raw":"title: 网络\ndate: 2020-12-10 15:50:53\ntype: \"categories\"\ncomments: false\n---\n","updated":"2020-12-11T13:41:18.025Z","path":"网络/index.html","layout":"page","_id":"ckipmw0bt000k7p19dts1eo6v","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"11月3日东北大学交流感想","date":"2020-02-19T01:46:08.000Z","toc":true,"_content":"第一天晚上在没有提前说明的情况下来到了东大校园，正巧走到了Action的实验室门口。来不及感叹周围环境多高大上，首先吸引我的就是实验室周围的展板。不得不说，宣传方面我们做的技不如人，更重要的是，看到东大实验室许多产品都已经在华为、京东等公司有了应用，不得不感叹一句，人家的东西，是产品化的，是可以直接拿来用的，想想是多么精致啊。\n\n第二天一早，我们第一次进入了Action实验室，第一项是各战队的介绍，在介绍中，对东京大学的介绍印象尤为深刻。不仅讲解了自己队伍的架构，还详细说明了Robocon2019，MR1与MR2的详细设计，控制策略等等很深入的东西。不得不说，Robocon这个比赛，虽然没有RoboMaster宣传多，沟通渠道多，但它根本真，更纯正，更像是一个技术交流平台。开源精神和研究的精神都有很多，让我们这些做过RM但是没做过RC的人不得不感到惊叹。\n\n下午则是与东北大学等其他高校的深入交流。看到了东大四冠王的车，就像是随着时代进化一般，一代更比一代强。反观我们的技术水平，除了老余这一年驱动技术的进步，仿佛就像是停滞不前一样。我甚至觉得我们的车还停留在东大2017年的水平，深感惭愧。看到了Action2019赛季的轮式，做的精致的像是一辆超跑，无论是电机驱动，线路布置，机械结构，都称得上是完美的。再看到足式，方案确定、电机选型、包括那四台轰鸣的陀螺，真的是令人印象深刻，深感：“想出和做出这些方案的都是神仙吧！“\n\n这次去东大交流，不仅得到了知识与技术点，更重要的是让我认清了现实：一山更比一山高，不要认为自己已经做到极限了，世界上的某些地方，还存在着不知多少个和你同样在做着这个比赛，技术比你好，比你更努力的人！永远不要被自己所处的环境所制约。希望这次交流能够激励我以更加努力，更加渴望的态度去继续做下去，完成自己的愿望。\n","source":"_posts/11月3日东北大学交流感想.md","raw":"title: 11月3日东北大学交流感想\ndate: 2020-02-19 09:46:08\ncategories: 日常\ntags: []\ntoc: true\n---\n第一天晚上在没有提前说明的情况下来到了东大校园，正巧走到了Action的实验室门口。来不及感叹周围环境多高大上，首先吸引我的就是实验室周围的展板。不得不说，宣传方面我们做的技不如人，更重要的是，看到东大实验室许多产品都已经在华为、京东等公司有了应用，不得不感叹一句，人家的东西，是产品化的，是可以直接拿来用的，想想是多么精致啊。\n\n第二天一早，我们第一次进入了Action实验室，第一项是各战队的介绍，在介绍中，对东京大学的介绍印象尤为深刻。不仅讲解了自己队伍的架构，还详细说明了Robocon2019，MR1与MR2的详细设计，控制策略等等很深入的东西。不得不说，Robocon这个比赛，虽然没有RoboMaster宣传多，沟通渠道多，但它根本真，更纯正，更像是一个技术交流平台。开源精神和研究的精神都有很多，让我们这些做过RM但是没做过RC的人不得不感到惊叹。\n\n下午则是与东北大学等其他高校的深入交流。看到了东大四冠王的车，就像是随着时代进化一般，一代更比一代强。反观我们的技术水平，除了老余这一年驱动技术的进步，仿佛就像是停滞不前一样。我甚至觉得我们的车还停留在东大2017年的水平，深感惭愧。看到了Action2019赛季的轮式，做的精致的像是一辆超跑，无论是电机驱动，线路布置，机械结构，都称得上是完美的。再看到足式，方案确定、电机选型、包括那四台轰鸣的陀螺，真的是令人印象深刻，深感：“想出和做出这些方案的都是神仙吧！“\n\n这次去东大交流，不仅得到了知识与技术点，更重要的是让我认清了现实：一山更比一山高，不要认为自己已经做到极限了，世界上的某些地方，还存在着不知多少个和你同样在做着这个比赛，技术比你好，比你更努力的人！永远不要被自己所处的环境所制约。希望这次交流能够激励我以更加努力，更加渴望的态度去继续做下去，完成自己的愿望。\n","slug":"11月3日东北大学交流感想","published":1,"updated":"2020-12-14T12:20:12.451Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0bi00017p190uirfoy7","content":"<p>第一天晚上在没有提前说明的情况下来到了东大校园，正巧走到了Action的实验室门口。来不及感叹周围环境多高大上，首先吸引我的就是实验室周围的展板。不得不说，宣传方面我们做的技不如人，更重要的是，看到东大实验室许多产品都已经在华为、京东等公司有了应用，不得不感叹一句，人家的东西，是产品化的，是可以直接拿来用的，想想是多么精致啊。</p>\n<p>第二天一早，我们第一次进入了Action实验室，第一项是各战队的介绍，在介绍中，对东京大学的介绍印象尤为深刻。不仅讲解了自己队伍的架构，还详细说明了Robocon2019，MR1与MR2的详细设计，控制策略等等很深入的东西。不得不说，Robocon这个比赛，虽然没有RoboMaster宣传多，沟通渠道多，但它根本真，更纯正，更像是一个技术交流平台。开源精神和研究的精神都有很多，让我们这些做过RM但是没做过RC的人不得不感到惊叹。</p>\n<p>下午则是与东北大学等其他高校的深入交流。看到了东大四冠王的车，就像是随着时代进化一般，一代更比一代强。反观我们的技术水平，除了老余这一年驱动技术的进步，仿佛就像是停滞不前一样。我甚至觉得我们的车还停留在东大2017年的水平，深感惭愧。看到了Action2019赛季的轮式，做的精致的像是一辆超跑，无论是电机驱动，线路布置，机械结构，都称得上是完美的。再看到足式，方案确定、电机选型、包括那四台轰鸣的陀螺，真的是令人印象深刻，深感：“想出和做出这些方案的都是神仙吧！“</p>\n<p>这次去东大交流，不仅得到了知识与技术点，更重要的是让我认清了现实：一山更比一山高，不要认为自己已经做到极限了，世界上的某些地方，还存在着不知多少个和你同样在做着这个比赛，技术比你好，比你更努力的人！永远不要被自己所处的环境所制约。希望这次交流能够激励我以更加努力，更加渴望的态度去继续做下去，完成自己的愿望。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>第一天晚上在没有提前说明的情况下来到了东大校园，正巧走到了Action的实验室门口。来不及感叹周围环境多高大上，首先吸引我的就是实验室周围的展板。不得不说，宣传方面我们做的技不如人，更重要的是，看到东大实验室许多产品都已经在华为、京东等公司有了应用，不得不感叹一句，人家的东西，是产品化的，是可以直接拿来用的，想想是多么精致啊。</p>\n<p>第二天一早，我们第一次进入了Action实验室，第一项是各战队的介绍，在介绍中，对东京大学的介绍印象尤为深刻。不仅讲解了自己队伍的架构，还详细说明了Robocon2019，MR1与MR2的详细设计，控制策略等等很深入的东西。不得不说，Robocon这个比赛，虽然没有RoboMaster宣传多，沟通渠道多，但它根本真，更纯正，更像是一个技术交流平台。开源精神和研究的精神都有很多，让我们这些做过RM但是没做过RC的人不得不感到惊叹。</p>\n<p>下午则是与东北大学等其他高校的深入交流。看到了东大四冠王的车，就像是随着时代进化一般，一代更比一代强。反观我们的技术水平，除了老余这一年驱动技术的进步，仿佛就像是停滞不前一样。我甚至觉得我们的车还停留在东大2017年的水平，深感惭愧。看到了Action2019赛季的轮式，做的精致的像是一辆超跑，无论是电机驱动，线路布置，机械结构，都称得上是完美的。再看到足式，方案确定、电机选型、包括那四台轰鸣的陀螺，真的是令人印象深刻，深感：“想出和做出这些方案的都是神仙吧！“</p>\n<p>这次去东大交流，不仅得到了知识与技术点，更重要的是让我认清了现实：一山更比一山高，不要认为自己已经做到极限了，世界上的某些地方，还存在着不知多少个和你同样在做着这个比赛，技术比你好，比你更努力的人！永远不要被自己所处的环境所制约。希望这次交流能够激励我以更加努力，更加渴望的态度去继续做下去，完成自己的愿望。</p>\n"},{"title":"3D物体是如何旋转滴1","date":"2020-02-28T08:46:00.000Z","toc":true,"_content":"表示二维物体的旋转十分简单，通过一个旋转矩阵就可以把一个二维向量旋转任意角度（就如同前面文章中所说的Park变换与反Park变换那样），所以二维的旋转可以用一个2X2的矩阵表示。\n然鹅，三维物体虽然也可用3X3矩阵表示，但它涉及到的运算与限制较二维要更麻烦一些，这次我们来讨论一下三维空间中的旋转（搞控制的和做游戏的都可以留下来康康啊！）\n\n这篇文章借鉴了许多CSDN、知乎上的大佬们，很多图都不是自己画的，侵删侵删！\n尤其感谢知乎大佬，也是哈工大电气的亲学长[FrancisZhao][1]，您在知乎的专栏[控制工程师笔记][2]给我带来了很多收获！\n\n\n**研究物体如何旋转，首先要知道旋转是什么，我理解中的旋转是：**\n\n 1. 对坐标系的旋转，使其中点在新旧坐标系中的坐标发生变化，并且能够用数学方式表达这个变化；\n 2. 或者你可以认为是直接对点、向量进行旋转，而坐标系不变。\n\n接下来我们就要研究物体旋转的表示方法，也就是坐标变换的方法，最常用的旋转表示方法有如下几种\n\n 1. 轴角法\n 2. 欧拉角法\n 3. 旋转矩阵、方向余弦\n 4. 四元数\n\n**我们主要就是来讲解一下这几种旋转表示法————**\n\n## 轴角表示法 ##\n![zhoujiao.png][3]\n轴角表示法，顾名思义，就是使用一个轴（可以认为是一个单位向量，也可认为是一条过原点的直线）加一个角度来表示旋转。\n三维空间中，轴是二自由度的，角是一个自由度，所以一共三自由度，来表示这个旋转完全没有问题。\n其实，我们在二维旋转中一直在使用轴角法，只不过轴恰好就是Z轴，而角就是那个角，放到三维也是很好理解滴！\n\n\n## 欧拉角表示法 ##\n![eular.jpg][4]\n前面提到的轴角法将两个自由度的轴和一个自由度的角结合到了一起，而欧拉角则由三个旋转组成，即三个自由度都由角组成。\n这三次旋转所绕的轴都是确定的，即坐标轴，根据选择轴的顺序、选择固定轴或者运动轴（即使用上次旋转后得到的新坐标系还是使用最初的坐标系）与选择三轴都转或者只转两轴，一共有24种欧拉角！\n我们做控制最常用的一种欧拉角就是zxy，也就是在云台指向y轴的情况下先转yaw，再转pitch，再转roll（比如RM的云台角度解算用的就是这种）\n要注意的是，在做结算之前，一定要先约定好欧拉角的类型，否则无论如何也得不到正确的角度！\n\n\n## 旋转矩阵 方向余弦 ##\n二维情况——绕Z轴转动，可得到一个2X2的矩阵来表示这个旋转，我们称其为旋转矩阵；\n![2d.jpg][5]\n三维情况下，如果也是绕坐标轴进行旋转，我们也可利用一个旋转矩阵（3X3）来表示，这就是接下来我们要讨论的旋转矩阵！\n（注：由于旋转矩阵是正交矩阵，因此它的逆就是变换θ的符号，也就是反向旋转，因此要注意旋转矩阵的形式，顺时针OR逆时针）\n本文讨论的向量或点都是列向量形式！\n向量或点左乘旋转矩阵，得到的结果是向量或点旋转过后得到的新向量或点相对于原坐标系的坐标（即第二种理解方式，向量或点的旋转）\n若要求得在坐标系旋转A后，一个固定的点相对于新坐标系的坐标变化（即第一种理解方式，坐标系的旋转），则需要左乘那个旋转矩阵的逆矩阵也就是A'，即相当于点的反向旋转！\n![z-rotate.PNG][6]\n上面这些旋转矩阵都是逆时针为正的旋转。\n\n这三次旋转（每次都绕新得到的坐标系旋转，角度即为三个欧拉角）的最终结果可以用矩阵乘法来计算（乘积顺序由对应的欧拉角旋转顺序决定），最终我们可以得到一个总的旋转矩阵：\n![multi.jpg][7]\n![full.jpg][8]\n（注意！有时我们在计算中会由于数值原因产生非正交的旋转矩阵，这时就要进行归一化，这点对任何正交矩阵数值计算都适用）\n旋转矩阵也不是每次必须通过麻烦地三个矩阵乘积来计算，他还可以通过旋转前后坐标系之间的角度关系来推算，这时我们就称它为方向余弦矩阵（DCM），具体算法如下：\n![dcm.jpg][9]\n其中大写字母是原坐标系的坐标轴，而小写字母则是旋转后坐标系的坐标轴。\nDCM与旋转矩阵是等价的！\n\n\n## 四元数 ##\n终于到了重头戏四元数！\n四元数表示法是所有旋转表示法中最完美的，它不受万向节锁（Gimbal Lock）的限制，可以把多个旋转合并，具有唯一性，可以说是融合了前几种方案的所有优点！可能真的是因为用三个数表示三自由度就会出问题所以我们要用四个吧o(*￣▽￣*)o\n四元数的形式如下：\n![4vector.jpg][10]\n与轴角法类似，四元数的数学意义也是绕轴旋转特定角度，只不过表示形式发生了变换：\n![4zhoujiao.jpg][11]\n一个向量或点 可以用一个纯四元数来表示（θ=0，旋转了0°），而一个非纯四元数则表示一种旋转（θ!=0，旋转了非0°），其实把四元数可以看做是四维空间下的一个向量，而纯四元数则相当于在这个四维空间下的三位超平面上的一个点（很难以置信吧！）\n四元数的运算与复数的运算十分类似，只不过i、j、k相当于不同的虚数轴，而求逆则相当于转-θ！\n四元数这样表示一个旋转：\n![rotatef.jpg][12]\n这里用的也是对旋转的第二种理解方式，若想旋转坐标系q，则需把q用q^-1替换来得到新的坐标。\n（注：四元数轴向量u要是一个单位向量！）\n下面这个图完美解释了为什么要左右都乘且为什么是θ/2：\n![why.jpg][13]\n\n**这次我们主要讨论了坐标表示法，下一篇我们将重点讲解利用四元数进行坐标解算，以及一些常用的互补滤波算法！**\n\n\n  [1]: https://www.zhihu.com/people/zhao-yong-zheng-bu-zheng\n  [2]: https://zhuanlan.zhihu.com/53231323\n  [3]: /old_images/2020/02/2495871206.png\n  [4]: /old_images/2020/02/1473089206.jpg\n  [5]: /old_images/2020/02/3230677208.jpg\n  [6]: /old_images/2020/02/1055054676.png\n  [7]: /old_images/2020/02/4279915631.jpg\n  [8]: /old_images/2020/02/1451004919.jpg\n  [9]: /old_images/2020/02/3798843184.jpg\n  [10]: /old_images/2020/02/855161026.jpg\n  [11]: /old_images/2020/02/242777591.jpg\n  [12]: /old_images/2020/02/817300143.jpg\n  [13]: /old_images/2020/02/1356342890.jpg\n","source":"_posts/3D物体是如何旋转滴1.md","raw":"title: 3D物体是如何旋转滴1\ndate: 2020-02-28 16:46:00\ncategories: 物数\ntags: []\n\ntoc: true\n---\n表示二维物体的旋转十分简单，通过一个旋转矩阵就可以把一个二维向量旋转任意角度（就如同前面文章中所说的Park变换与反Park变换那样），所以二维的旋转可以用一个2X2的矩阵表示。\n然鹅，三维物体虽然也可用3X3矩阵表示，但它涉及到的运算与限制较二维要更麻烦一些，这次我们来讨论一下三维空间中的旋转（搞控制的和做游戏的都可以留下来康康啊！）\n\n这篇文章借鉴了许多CSDN、知乎上的大佬们，很多图都不是自己画的，侵删侵删！\n尤其感谢知乎大佬，也是哈工大电气的亲学长[FrancisZhao][1]，您在知乎的专栏[控制工程师笔记][2]给我带来了很多收获！\n\n\n**研究物体如何旋转，首先要知道旋转是什么，我理解中的旋转是：**\n\n 1. 对坐标系的旋转，使其中点在新旧坐标系中的坐标发生变化，并且能够用数学方式表达这个变化；\n 2. 或者你可以认为是直接对点、向量进行旋转，而坐标系不变。\n\n接下来我们就要研究物体旋转的表示方法，也就是坐标变换的方法，最常用的旋转表示方法有如下几种\n\n 1. 轴角法\n 2. 欧拉角法\n 3. 旋转矩阵、方向余弦\n 4. 四元数\n\n**我们主要就是来讲解一下这几种旋转表示法————**\n\n## 轴角表示法 ##\n![zhoujiao.png][3]\n轴角表示法，顾名思义，就是使用一个轴（可以认为是一个单位向量，也可认为是一条过原点的直线）加一个角度来表示旋转。\n三维空间中，轴是二自由度的，角是一个自由度，所以一共三自由度，来表示这个旋转完全没有问题。\n其实，我们在二维旋转中一直在使用轴角法，只不过轴恰好就是Z轴，而角就是那个角，放到三维也是很好理解滴！\n\n\n## 欧拉角表示法 ##\n![eular.jpg][4]\n前面提到的轴角法将两个自由度的轴和一个自由度的角结合到了一起，而欧拉角则由三个旋转组成，即三个自由度都由角组成。\n这三次旋转所绕的轴都是确定的，即坐标轴，根据选择轴的顺序、选择固定轴或者运动轴（即使用上次旋转后得到的新坐标系还是使用最初的坐标系）与选择三轴都转或者只转两轴，一共有24种欧拉角！\n我们做控制最常用的一种欧拉角就是zxy，也就是在云台指向y轴的情况下先转yaw，再转pitch，再转roll（比如RM的云台角度解算用的就是这种）\n要注意的是，在做结算之前，一定要先约定好欧拉角的类型，否则无论如何也得不到正确的角度！\n\n\n## 旋转矩阵 方向余弦 ##\n二维情况——绕Z轴转动，可得到一个2X2的矩阵来表示这个旋转，我们称其为旋转矩阵；\n![2d.jpg][5]\n三维情况下，如果也是绕坐标轴进行旋转，我们也可利用一个旋转矩阵（3X3）来表示，这就是接下来我们要讨论的旋转矩阵！\n（注：由于旋转矩阵是正交矩阵，因此它的逆就是变换θ的符号，也就是反向旋转，因此要注意旋转矩阵的形式，顺时针OR逆时针）\n本文讨论的向量或点都是列向量形式！\n向量或点左乘旋转矩阵，得到的结果是向量或点旋转过后得到的新向量或点相对于原坐标系的坐标（即第二种理解方式，向量或点的旋转）\n若要求得在坐标系旋转A后，一个固定的点相对于新坐标系的坐标变化（即第一种理解方式，坐标系的旋转），则需要左乘那个旋转矩阵的逆矩阵也就是A'，即相当于点的反向旋转！\n![z-rotate.PNG][6]\n上面这些旋转矩阵都是逆时针为正的旋转。\n\n这三次旋转（每次都绕新得到的坐标系旋转，角度即为三个欧拉角）的最终结果可以用矩阵乘法来计算（乘积顺序由对应的欧拉角旋转顺序决定），最终我们可以得到一个总的旋转矩阵：\n![multi.jpg][7]\n![full.jpg][8]\n（注意！有时我们在计算中会由于数值原因产生非正交的旋转矩阵，这时就要进行归一化，这点对任何正交矩阵数值计算都适用）\n旋转矩阵也不是每次必须通过麻烦地三个矩阵乘积来计算，他还可以通过旋转前后坐标系之间的角度关系来推算，这时我们就称它为方向余弦矩阵（DCM），具体算法如下：\n![dcm.jpg][9]\n其中大写字母是原坐标系的坐标轴，而小写字母则是旋转后坐标系的坐标轴。\nDCM与旋转矩阵是等价的！\n\n\n## 四元数 ##\n终于到了重头戏四元数！\n四元数表示法是所有旋转表示法中最完美的，它不受万向节锁（Gimbal Lock）的限制，可以把多个旋转合并，具有唯一性，可以说是融合了前几种方案的所有优点！可能真的是因为用三个数表示三自由度就会出问题所以我们要用四个吧o(*￣▽￣*)o\n四元数的形式如下：\n![4vector.jpg][10]\n与轴角法类似，四元数的数学意义也是绕轴旋转特定角度，只不过表示形式发生了变换：\n![4zhoujiao.jpg][11]\n一个向量或点 可以用一个纯四元数来表示（θ=0，旋转了0°），而一个非纯四元数则表示一种旋转（θ!=0，旋转了非0°），其实把四元数可以看做是四维空间下的一个向量，而纯四元数则相当于在这个四维空间下的三位超平面上的一个点（很难以置信吧！）\n四元数的运算与复数的运算十分类似，只不过i、j、k相当于不同的虚数轴，而求逆则相当于转-θ！\n四元数这样表示一个旋转：\n![rotatef.jpg][12]\n这里用的也是对旋转的第二种理解方式，若想旋转坐标系q，则需把q用q^-1替换来得到新的坐标。\n（注：四元数轴向量u要是一个单位向量！）\n下面这个图完美解释了为什么要左右都乘且为什么是θ/2：\n![why.jpg][13]\n\n**这次我们主要讨论了坐标表示法，下一篇我们将重点讲解利用四元数进行坐标解算，以及一些常用的互补滤波算法！**\n\n\n  [1]: https://www.zhihu.com/people/zhao-yong-zheng-bu-zheng\n  [2]: https://zhuanlan.zhihu.com/53231323\n  [3]: /old_images/2020/02/2495871206.png\n  [4]: /old_images/2020/02/1473089206.jpg\n  [5]: /old_images/2020/02/3230677208.jpg\n  [6]: /old_images/2020/02/1055054676.png\n  [7]: /old_images/2020/02/4279915631.jpg\n  [8]: /old_images/2020/02/1451004919.jpg\n  [9]: /old_images/2020/02/3798843184.jpg\n  [10]: /old_images/2020/02/855161026.jpg\n  [11]: /old_images/2020/02/242777591.jpg\n  [12]: /old_images/2020/02/817300143.jpg\n  [13]: /old_images/2020/02/1356342890.jpg\n","slug":"3D物体是如何旋转滴1","published":1,"updated":"2020-12-14T12:19:51.555Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0bk00037p197gel87xx","content":"<p>表示二维物体的旋转十分简单，通过一个旋转矩阵就可以把一个二维向量旋转任意角度（就如同前面文章中所说的Park变换与反Park变换那样），所以二维的旋转可以用一个2X2的矩阵表示。<br>然鹅，三维物体虽然也可用3X3矩阵表示，但它涉及到的运算与限制较二维要更麻烦一些，这次我们来讨论一下三维空间中的旋转（搞控制的和做游戏的都可以留下来康康啊！）</p>\n<p>这篇文章借鉴了许多CSDN、知乎上的大佬们，很多图都不是自己画的，侵删侵删！<br>尤其感谢知乎大佬，也是哈工大电气的亲学长<a href=\"https://www.zhihu.com/people/zhao-yong-zheng-bu-zheng\">FrancisZhao</a>，您在知乎的专栏<a href=\"https://zhuanlan.zhihu.com/53231323\">控制工程师笔记</a>给我带来了很多收获！</p>\n<p><strong>研究物体如何旋转，首先要知道旋转是什么，我理解中的旋转是：</strong></p>\n<ol>\n<li>对坐标系的旋转，使其中点在新旧坐标系中的坐标发生变化，并且能够用数学方式表达这个变化；</li>\n<li>或者你可以认为是直接对点、向量进行旋转，而坐标系不变。</li>\n</ol>\n<p>接下来我们就要研究物体旋转的表示方法，也就是坐标变换的方法，最常用的旋转表示方法有如下几种</p>\n<ol>\n<li>轴角法</li>\n<li>欧拉角法</li>\n<li>旋转矩阵、方向余弦</li>\n<li>四元数</li>\n</ol>\n<p><strong>我们主要就是来讲解一下这几种旋转表示法————</strong></p>\n<h2 id=\"轴角表示法\"><a href=\"#轴角表示法\" class=\"headerlink\" title=\"轴角表示法\"></a>轴角表示法</h2><p><img src=\"/old_images/2020/02/2495871206.png\" alt=\"zhoujiao.png\"><br>轴角表示法，顾名思义，就是使用一个轴（可以认为是一个单位向量，也可认为是一条过原点的直线）加一个角度来表示旋转。<br>三维空间中，轴是二自由度的，角是一个自由度，所以一共三自由度，来表示这个旋转完全没有问题。<br>其实，我们在二维旋转中一直在使用轴角法，只不过轴恰好就是Z轴，而角就是那个角，放到三维也是很好理解滴！</p>\n<h2 id=\"欧拉角表示法\"><a href=\"#欧拉角表示法\" class=\"headerlink\" title=\"欧拉角表示法\"></a>欧拉角表示法</h2><p><img src=\"/old_images/2020/02/1473089206.jpg\" alt=\"eular.jpg\"><br>前面提到的轴角法将两个自由度的轴和一个自由度的角结合到了一起，而欧拉角则由三个旋转组成，即三个自由度都由角组成。<br>这三次旋转所绕的轴都是确定的，即坐标轴，根据选择轴的顺序、选择固定轴或者运动轴（即使用上次旋转后得到的新坐标系还是使用最初的坐标系）与选择三轴都转或者只转两轴，一共有24种欧拉角！<br>我们做控制最常用的一种欧拉角就是zxy，也就是在云台指向y轴的情况下先转yaw，再转pitch，再转roll（比如RM的云台角度解算用的就是这种）<br>要注意的是，在做结算之前，一定要先约定好欧拉角的类型，否则无论如何也得不到正确的角度！</p>\n<h2 id=\"旋转矩阵-方向余弦\"><a href=\"#旋转矩阵-方向余弦\" class=\"headerlink\" title=\"旋转矩阵 方向余弦\"></a>旋转矩阵 方向余弦</h2><p>二维情况——绕Z轴转动，可得到一个2X2的矩阵来表示这个旋转，我们称其为旋转矩阵；<br><img src=\"/old_images/2020/02/3230677208.jpg\" alt=\"2d.jpg\"><br>三维情况下，如果也是绕坐标轴进行旋转，我们也可利用一个旋转矩阵（3X3）来表示，这就是接下来我们要讨论的旋转矩阵！<br>（注：由于旋转矩阵是正交矩阵，因此它的逆就是变换θ的符号，也就是反向旋转，因此要注意旋转矩阵的形式，顺时针OR逆时针）<br>本文讨论的向量或点都是列向量形式！<br>向量或点左乘旋转矩阵，得到的结果是向量或点旋转过后得到的新向量或点相对于原坐标系的坐标（即第二种理解方式，向量或点的旋转）<br>若要求得在坐标系旋转A后，一个固定的点相对于新坐标系的坐标变化（即第一种理解方式，坐标系的旋转），则需要左乘那个旋转矩阵的逆矩阵也就是A’，即相当于点的反向旋转！<br><img src=\"/old_images/2020/02/1055054676.png\" alt=\"z-rotate.PNG\"><br>上面这些旋转矩阵都是逆时针为正的旋转。</p>\n<p>这三次旋转（每次都绕新得到的坐标系旋转，角度即为三个欧拉角）的最终结果可以用矩阵乘法来计算（乘积顺序由对应的欧拉角旋转顺序决定），最终我们可以得到一个总的旋转矩阵：<br><img src=\"/old_images/2020/02/4279915631.jpg\" alt=\"multi.jpg\"><br><img src=\"/old_images/2020/02/1451004919.jpg\" alt=\"full.jpg\"><br>（注意！有时我们在计算中会由于数值原因产生非正交的旋转矩阵，这时就要进行归一化，这点对任何正交矩阵数值计算都适用）<br>旋转矩阵也不是每次必须通过麻烦地三个矩阵乘积来计算，他还可以通过旋转前后坐标系之间的角度关系来推算，这时我们就称它为方向余弦矩阵（DCM），具体算法如下：<br><img src=\"/old_images/2020/02/3798843184.jpg\" alt=\"dcm.jpg\"><br>其中大写字母是原坐标系的坐标轴，而小写字母则是旋转后坐标系的坐标轴。<br>DCM与旋转矩阵是等价的！</p>\n<h2 id=\"四元数\"><a href=\"#四元数\" class=\"headerlink\" title=\"四元数\"></a>四元数</h2><p>终于到了重头戏四元数！<br>四元数表示法是所有旋转表示法中最完美的，它不受万向节锁（Gimbal Lock）的限制，可以把多个旋转合并，具有唯一性，可以说是融合了前几种方案的所有优点！可能真的是因为用三个数表示三自由度就会出问题所以我们要用四个吧o(<em>￣▽￣</em>)o<br>四元数的形式如下：<br><img src=\"/old_images/2020/02/855161026.jpg\" alt=\"4vector.jpg\"><br>与轴角法类似，四元数的数学意义也是绕轴旋转特定角度，只不过表示形式发生了变换：<br><img src=\"/old_images/2020/02/242777591.jpg\" alt=\"4zhoujiao.jpg\"><br>一个向量或点 可以用一个纯四元数来表示（θ=0，旋转了0°），而一个非纯四元数则表示一种旋转（θ!=0，旋转了非0°），其实把四元数可以看做是四维空间下的一个向量，而纯四元数则相当于在这个四维空间下的三位超平面上的一个点（很难以置信吧！）<br>四元数的运算与复数的运算十分类似，只不过i、j、k相当于不同的虚数轴，而求逆则相当于转-θ！<br>四元数这样表示一个旋转：<br><img src=\"/old_images/2020/02/817300143.jpg\" alt=\"rotatef.jpg\"><br>这里用的也是对旋转的第二种理解方式，若想旋转坐标系q，则需把q用q^-1替换来得到新的坐标。<br>（注：四元数轴向量u要是一个单位向量！）<br>下面这个图完美解释了为什么要左右都乘且为什么是θ/2：<br><img src=\"/old_images/2020/02/1356342890.jpg\" alt=\"why.jpg\"></p>\n<p><strong>这次我们主要讨论了坐标表示法，下一篇我们将重点讲解利用四元数进行坐标解算，以及一些常用的互补滤波算法！</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>表示二维物体的旋转十分简单，通过一个旋转矩阵就可以把一个二维向量旋转任意角度（就如同前面文章中所说的Park变换与反Park变换那样），所以二维的旋转可以用一个2X2的矩阵表示。<br>然鹅，三维物体虽然也可用3X3矩阵表示，但它涉及到的运算与限制较二维要更麻烦一些，这次我们来讨论一下三维空间中的旋转（搞控制的和做游戏的都可以留下来康康啊！）</p>\n<p>这篇文章借鉴了许多CSDN、知乎上的大佬们，很多图都不是自己画的，侵删侵删！<br>尤其感谢知乎大佬，也是哈工大电气的亲学长<a href=\"https://www.zhihu.com/people/zhao-yong-zheng-bu-zheng\">FrancisZhao</a>，您在知乎的专栏<a href=\"https://zhuanlan.zhihu.com/53231323\">控制工程师笔记</a>给我带来了很多收获！</p>\n<p><strong>研究物体如何旋转，首先要知道旋转是什么，我理解中的旋转是：</strong></p>\n<ol>\n<li>对坐标系的旋转，使其中点在新旧坐标系中的坐标发生变化，并且能够用数学方式表达这个变化；</li>\n<li>或者你可以认为是直接对点、向量进行旋转，而坐标系不变。</li>\n</ol>\n<p>接下来我们就要研究物体旋转的表示方法，也就是坐标变换的方法，最常用的旋转表示方法有如下几种</p>\n<ol>\n<li>轴角法</li>\n<li>欧拉角法</li>\n<li>旋转矩阵、方向余弦</li>\n<li>四元数</li>\n</ol>\n<p><strong>我们主要就是来讲解一下这几种旋转表示法————</strong></p>\n<h2 id=\"轴角表示法\"><a href=\"#轴角表示法\" class=\"headerlink\" title=\"轴角表示法\"></a>轴角表示法</h2><p><img src=\"/old_images/2020/02/2495871206.png\" alt=\"zhoujiao.png\"><br>轴角表示法，顾名思义，就是使用一个轴（可以认为是一个单位向量，也可认为是一条过原点的直线）加一个角度来表示旋转。<br>三维空间中，轴是二自由度的，角是一个自由度，所以一共三自由度，来表示这个旋转完全没有问题。<br>其实，我们在二维旋转中一直在使用轴角法，只不过轴恰好就是Z轴，而角就是那个角，放到三维也是很好理解滴！</p>\n<h2 id=\"欧拉角表示法\"><a href=\"#欧拉角表示法\" class=\"headerlink\" title=\"欧拉角表示法\"></a>欧拉角表示法</h2><p><img src=\"/old_images/2020/02/1473089206.jpg\" alt=\"eular.jpg\"><br>前面提到的轴角法将两个自由度的轴和一个自由度的角结合到了一起，而欧拉角则由三个旋转组成，即三个自由度都由角组成。<br>这三次旋转所绕的轴都是确定的，即坐标轴，根据选择轴的顺序、选择固定轴或者运动轴（即使用上次旋转后得到的新坐标系还是使用最初的坐标系）与选择三轴都转或者只转两轴，一共有24种欧拉角！<br>我们做控制最常用的一种欧拉角就是zxy，也就是在云台指向y轴的情况下先转yaw，再转pitch，再转roll（比如RM的云台角度解算用的就是这种）<br>要注意的是，在做结算之前，一定要先约定好欧拉角的类型，否则无论如何也得不到正确的角度！</p>\n<h2 id=\"旋转矩阵-方向余弦\"><a href=\"#旋转矩阵-方向余弦\" class=\"headerlink\" title=\"旋转矩阵 方向余弦\"></a>旋转矩阵 方向余弦</h2><p>二维情况——绕Z轴转动，可得到一个2X2的矩阵来表示这个旋转，我们称其为旋转矩阵；<br><img src=\"/old_images/2020/02/3230677208.jpg\" alt=\"2d.jpg\"><br>三维情况下，如果也是绕坐标轴进行旋转，我们也可利用一个旋转矩阵（3X3）来表示，这就是接下来我们要讨论的旋转矩阵！<br>（注：由于旋转矩阵是正交矩阵，因此它的逆就是变换θ的符号，也就是反向旋转，因此要注意旋转矩阵的形式，顺时针OR逆时针）<br>本文讨论的向量或点都是列向量形式！<br>向量或点左乘旋转矩阵，得到的结果是向量或点旋转过后得到的新向量或点相对于原坐标系的坐标（即第二种理解方式，向量或点的旋转）<br>若要求得在坐标系旋转A后，一个固定的点相对于新坐标系的坐标变化（即第一种理解方式，坐标系的旋转），则需要左乘那个旋转矩阵的逆矩阵也就是A’，即相当于点的反向旋转！<br><img src=\"/old_images/2020/02/1055054676.png\" alt=\"z-rotate.PNG\"><br>上面这些旋转矩阵都是逆时针为正的旋转。</p>\n<p>这三次旋转（每次都绕新得到的坐标系旋转，角度即为三个欧拉角）的最终结果可以用矩阵乘法来计算（乘积顺序由对应的欧拉角旋转顺序决定），最终我们可以得到一个总的旋转矩阵：<br><img src=\"/old_images/2020/02/4279915631.jpg\" alt=\"multi.jpg\"><br><img src=\"/old_images/2020/02/1451004919.jpg\" alt=\"full.jpg\"><br>（注意！有时我们在计算中会由于数值原因产生非正交的旋转矩阵，这时就要进行归一化，这点对任何正交矩阵数值计算都适用）<br>旋转矩阵也不是每次必须通过麻烦地三个矩阵乘积来计算，他还可以通过旋转前后坐标系之间的角度关系来推算，这时我们就称它为方向余弦矩阵（DCM），具体算法如下：<br><img src=\"/old_images/2020/02/3798843184.jpg\" alt=\"dcm.jpg\"><br>其中大写字母是原坐标系的坐标轴，而小写字母则是旋转后坐标系的坐标轴。<br>DCM与旋转矩阵是等价的！</p>\n<h2 id=\"四元数\"><a href=\"#四元数\" class=\"headerlink\" title=\"四元数\"></a>四元数</h2><p>终于到了重头戏四元数！<br>四元数表示法是所有旋转表示法中最完美的，它不受万向节锁（Gimbal Lock）的限制，可以把多个旋转合并，具有唯一性，可以说是融合了前几种方案的所有优点！可能真的是因为用三个数表示三自由度就会出问题所以我们要用四个吧o(<em>￣▽￣</em>)o<br>四元数的形式如下：<br><img src=\"/old_images/2020/02/855161026.jpg\" alt=\"4vector.jpg\"><br>与轴角法类似，四元数的数学意义也是绕轴旋转特定角度，只不过表示形式发生了变换：<br><img src=\"/old_images/2020/02/242777591.jpg\" alt=\"4zhoujiao.jpg\"><br>一个向量或点 可以用一个纯四元数来表示（θ=0，旋转了0°），而一个非纯四元数则表示一种旋转（θ!=0，旋转了非0°），其实把四元数可以看做是四维空间下的一个向量，而纯四元数则相当于在这个四维空间下的三位超平面上的一个点（很难以置信吧！）<br>四元数的运算与复数的运算十分类似，只不过i、j、k相当于不同的虚数轴，而求逆则相当于转-θ！<br>四元数这样表示一个旋转：<br><img src=\"/old_images/2020/02/817300143.jpg\" alt=\"rotatef.jpg\"><br>这里用的也是对旋转的第二种理解方式，若想旋转坐标系q，则需把q用q^-1替换来得到新的坐标。<br>（注：四元数轴向量u要是一个单位向量！）<br>下面这个图完美解释了为什么要左右都乘且为什么是θ/2：<br><img src=\"/old_images/2020/02/1356342890.jpg\" alt=\"why.jpg\"></p>\n<p><strong>这次我们主要讨论了坐标表示法，下一篇我们将重点讲解利用四元数进行坐标解算，以及一些常用的互补滤波算法！</strong></p>\n"},{"title":"3D物体是如何旋转滴2","date":"2020-02-28T20:06:00.000Z","toc":true,"_content":"在上一篇文章中我们已经知道了如何表示旋转，但是现实世界中直接得到四元数或欧拉角的方法少之又少，那么新的问题就是如何通过角速度、加速度甚至地磁计这些我们能够容易测量的量得到旋转呢？\n本期我们来讨论通过姿态解算的问题！\n\n## 旋转的微分 ##\n我们都知道，使用陀螺仪，可以很轻松地得到物体的角速度，而角速度又是角度的微分，通过角速度我们计算出“旋转的微分”，再解这个微分方程，不就可以得到角度了吗！但是说的轻巧做起来难，到底该使用哪种角度（旋转）表示法才能够计算简便并且容易理解呢？欧拉角在微分时会出现万向节死锁的现象，如图：\n![eularerr.PNG][1]\n此时分母上产生了0，在计算时就会出问题，因此我们不能采用这种方法。\n而轴角法没有办法表示旋转的叠加，就不能进行积分，因此也不可取。\n最终答案就是四元数！我们能够很方便的通过角速度计算出四元数的微分方程（具体推导省略），就像下面这样:\n![4diff.PNG][2]\n（四元数乘法，转换为矩阵乘法可表示为下式）\n![4diff2.PNG][3]\n其中wb代表机体坐标系下的角速度向量，也就是直接从陀螺仪读取的值！\n接下来初始化一个q（根据需求），然后解微分方程，就能够随时得到世界->机体的四元数啦！\n（注：得到的四元数表示的是坐标系的旋转，即从世界坐标系到机体坐标系的旋转，即第一种理解）\n\n## 四元数、旋转矩阵、欧拉角的互相转换 ##\n四元数与旋转矩阵的转换很容易完成：\n![rocol24.jpg][4]\n![42rocol.PNG][5]\n突破q0后再依照关系一一突破即可\n\n而旋转矩阵化为欧拉角则比较麻烦，需要先约定好欧拉角的种类（24种之一）\n详情就不贴了，论坛上一抓一大把的（＞人＜；）\n\n**至此，我们已经通过角速度计算出欧拉角！**\n\n但是我们解微分方程的方法是积分，由于传感器零偏，积分就难免会产生漂移，我们需要纠正这个偏移，就需要这种积分传感器以外的绝对传感器，就像SLAM中的里程计+激光雷达的组合一样，我们也常用陀螺仪与加速度计、地磁计的组合进行角度测量！\n下面介绍一种较为简便的AHRS（航姿参考系）算法，MahonyAHRS\nMahony的中心思想是陀螺仪更新角度，加速度计与地磁计以较缓慢的方式纠正更新的角度。\n就拿加速度计来说，静止状态下，加速度计测量为g，方向指向世界坐标z轴负方向，利用上一次计算得到的四元数，我们把世界坐标系中z轴负方向在机体坐标系下的坐标解出来，再将其与加速度计做叉乘来计算误差（产生误差正是由于你从世界转换到机体的这个旋转是不准的），这时我们得到了一个误差向量，要注意它在机体坐标系下的方向可能是任意的，但在世界坐标系下一定是在xOy平面上的（这时由于先叉乘再旋转与先旋转再叉乘得到的结果是一样的），这也是加速度计仅能矫正pitch与roll轴漂移而不能矫正yaw轴的原因，误差向量在世界坐标系下根本没有z轴的分量啊！！\n误差向量经过PI控制器后可以得到一个矫正向量，这个向量是一个角速度量，把它和陀螺仪所测得的角速度相加，即可得到最终的角速度，具体系统请自行分析一哈，这样一来我们就能够通过加速度计的修正角度漂移！\n与此同理，若我们知道了地磁计的数据，拿它和机体坐标系下的地磁方向作比较，即可得到存在z轴分量的误差向量，这样一来我们就可以修正yaw轴的零偏啦！\n（这里存在一个问题，即地磁方向的确定，大家可以想一想如何解决）\n如此迭代，MahonyAHRS就完成啦！\n\n与此相类似的算法还有MadgWickAHRS、卡尔曼滤波等，\nMadgWick是通过加速度计、地磁计计算（使用了梯度下降最优化的思想）的四元数与陀螺仪计算的四元数进行加权得到；\nKalman则是使用陀螺仪作为状态方程，加速度计、地磁计作为测量方程进行滤波得到。\n这俩就不详细讲了（其实是因为我也不懂(￣▽￣)\"）\n\n  [1]: /old_images/2020/02/4039222537.png\n  [2]: /old_images/2020/02/1475506760.png\n  [3]: /old_images/2020/02/3523885477.png\n  [4]: /old_images/2020/02/1605118435.jpg\n  [5]: /old_images/2020/02/2575250596.png\n  [6]: /old_images/2020/02/192949300.png\n","source":"_posts/3D物体是如何旋转滴2.md","raw":"title: 3D物体是如何旋转滴2\ndate: 2020-02-29 04:06:00\ncategories: 物数\ntags: []\ntoc: true\n---\n在上一篇文章中我们已经知道了如何表示旋转，但是现实世界中直接得到四元数或欧拉角的方法少之又少，那么新的问题就是如何通过角速度、加速度甚至地磁计这些我们能够容易测量的量得到旋转呢？\n本期我们来讨论通过姿态解算的问题！\n\n## 旋转的微分 ##\n我们都知道，使用陀螺仪，可以很轻松地得到物体的角速度，而角速度又是角度的微分，通过角速度我们计算出“旋转的微分”，再解这个微分方程，不就可以得到角度了吗！但是说的轻巧做起来难，到底该使用哪种角度（旋转）表示法才能够计算简便并且容易理解呢？欧拉角在微分时会出现万向节死锁的现象，如图：\n![eularerr.PNG][1]\n此时分母上产生了0，在计算时就会出问题，因此我们不能采用这种方法。\n而轴角法没有办法表示旋转的叠加，就不能进行积分，因此也不可取。\n最终答案就是四元数！我们能够很方便的通过角速度计算出四元数的微分方程（具体推导省略），就像下面这样:\n![4diff.PNG][2]\n（四元数乘法，转换为矩阵乘法可表示为下式）\n![4diff2.PNG][3]\n其中wb代表机体坐标系下的角速度向量，也就是直接从陀螺仪读取的值！\n接下来初始化一个q（根据需求），然后解微分方程，就能够随时得到世界->机体的四元数啦！\n（注：得到的四元数表示的是坐标系的旋转，即从世界坐标系到机体坐标系的旋转，即第一种理解）\n\n## 四元数、旋转矩阵、欧拉角的互相转换 ##\n四元数与旋转矩阵的转换很容易完成：\n![rocol24.jpg][4]\n![42rocol.PNG][5]\n突破q0后再依照关系一一突破即可\n\n而旋转矩阵化为欧拉角则比较麻烦，需要先约定好欧拉角的种类（24种之一）\n详情就不贴了，论坛上一抓一大把的（＞人＜；）\n\n**至此，我们已经通过角速度计算出欧拉角！**\n\n但是我们解微分方程的方法是积分，由于传感器零偏，积分就难免会产生漂移，我们需要纠正这个偏移，就需要这种积分传感器以外的绝对传感器，就像SLAM中的里程计+激光雷达的组合一样，我们也常用陀螺仪与加速度计、地磁计的组合进行角度测量！\n下面介绍一种较为简便的AHRS（航姿参考系）算法，MahonyAHRS\nMahony的中心思想是陀螺仪更新角度，加速度计与地磁计以较缓慢的方式纠正更新的角度。\n就拿加速度计来说，静止状态下，加速度计测量为g，方向指向世界坐标z轴负方向，利用上一次计算得到的四元数，我们把世界坐标系中z轴负方向在机体坐标系下的坐标解出来，再将其与加速度计做叉乘来计算误差（产生误差正是由于你从世界转换到机体的这个旋转是不准的），这时我们得到了一个误差向量，要注意它在机体坐标系下的方向可能是任意的，但在世界坐标系下一定是在xOy平面上的（这时由于先叉乘再旋转与先旋转再叉乘得到的结果是一样的），这也是加速度计仅能矫正pitch与roll轴漂移而不能矫正yaw轴的原因，误差向量在世界坐标系下根本没有z轴的分量啊！！\n误差向量经过PI控制器后可以得到一个矫正向量，这个向量是一个角速度量，把它和陀螺仪所测得的角速度相加，即可得到最终的角速度，具体系统请自行分析一哈，这样一来我们就能够通过加速度计的修正角度漂移！\n与此同理，若我们知道了地磁计的数据，拿它和机体坐标系下的地磁方向作比较，即可得到存在z轴分量的误差向量，这样一来我们就可以修正yaw轴的零偏啦！\n（这里存在一个问题，即地磁方向的确定，大家可以想一想如何解决）\n如此迭代，MahonyAHRS就完成啦！\n\n与此相类似的算法还有MadgWickAHRS、卡尔曼滤波等，\nMadgWick是通过加速度计、地磁计计算（使用了梯度下降最优化的思想）的四元数与陀螺仪计算的四元数进行加权得到；\nKalman则是使用陀螺仪作为状态方程，加速度计、地磁计作为测量方程进行滤波得到。\n这俩就不详细讲了（其实是因为我也不懂(￣▽￣)\"）\n\n  [1]: /old_images/2020/02/4039222537.png\n  [2]: /old_images/2020/02/1475506760.png\n  [3]: /old_images/2020/02/3523885477.png\n  [4]: /old_images/2020/02/1605118435.jpg\n  [5]: /old_images/2020/02/2575250596.png\n  [6]: /old_images/2020/02/192949300.png\n","slug":"3D物体是如何旋转滴2","published":1,"updated":"2020-12-14T12:20:04.347Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0bn00067p1990qcau2m","content":"<p>在上一篇文章中我们已经知道了如何表示旋转，但是现实世界中直接得到四元数或欧拉角的方法少之又少，那么新的问题就是如何通过角速度、加速度甚至地磁计这些我们能够容易测量的量得到旋转呢？<br>本期我们来讨论通过姿态解算的问题！</p>\n<h2 id=\"旋转的微分\"><a href=\"#旋转的微分\" class=\"headerlink\" title=\"旋转的微分\"></a>旋转的微分</h2><p>我们都知道，使用陀螺仪，可以很轻松地得到物体的角速度，而角速度又是角度的微分，通过角速度我们计算出“旋转的微分”，再解这个微分方程，不就可以得到角度了吗！但是说的轻巧做起来难，到底该使用哪种角度（旋转）表示法才能够计算简便并且容易理解呢？欧拉角在微分时会出现万向节死锁的现象，如图：<br><img src=\"/old_images/2020/02/4039222537.png\" alt=\"eularerr.PNG\"><br>此时分母上产生了0，在计算时就会出问题，因此我们不能采用这种方法。<br>而轴角法没有办法表示旋转的叠加，就不能进行积分，因此也不可取。<br>最终答案就是四元数！我们能够很方便的通过角速度计算出四元数的微分方程（具体推导省略），就像下面这样:<br><img src=\"/old_images/2020/02/1475506760.png\" alt=\"4diff.PNG\"><br>（四元数乘法，转换为矩阵乘法可表示为下式）<br><img src=\"/old_images/2020/02/3523885477.png\" alt=\"4diff2.PNG\"><br>其中wb代表机体坐标系下的角速度向量，也就是直接从陀螺仪读取的值！<br>接下来初始化一个q（根据需求），然后解微分方程，就能够随时得到世界-&gt;机体的四元数啦！<br>（注：得到的四元数表示的是坐标系的旋转，即从世界坐标系到机体坐标系的旋转，即第一种理解）</p>\n<h2 id=\"四元数、旋转矩阵、欧拉角的互相转换\"><a href=\"#四元数、旋转矩阵、欧拉角的互相转换\" class=\"headerlink\" title=\"四元数、旋转矩阵、欧拉角的互相转换\"></a>四元数、旋转矩阵、欧拉角的互相转换</h2><p>四元数与旋转矩阵的转换很容易完成：<br><img src=\"/old_images/2020/02/1605118435.jpg\" alt=\"rocol24.jpg\"><br><img src=\"/old_images/2020/02/2575250596.png\" alt=\"42rocol.PNG\"><br>突破q0后再依照关系一一突破即可</p>\n<p>而旋转矩阵化为欧拉角则比较麻烦，需要先约定好欧拉角的种类（24种之一）<br>详情就不贴了，论坛上一抓一大把的（＞人＜；）</p>\n<p><strong>至此，我们已经通过角速度计算出欧拉角！</strong></p>\n<p>但是我们解微分方程的方法是积分，由于传感器零偏，积分就难免会产生漂移，我们需要纠正这个偏移，就需要这种积分传感器以外的绝对传感器，就像SLAM中的里程计+激光雷达的组合一样，我们也常用陀螺仪与加速度计、地磁计的组合进行角度测量！<br>下面介绍一种较为简便的AHRS（航姿参考系）算法，MahonyAHRS<br>Mahony的中心思想是陀螺仪更新角度，加速度计与地磁计以较缓慢的方式纠正更新的角度。<br>就拿加速度计来说，静止状态下，加速度计测量为g，方向指向世界坐标z轴负方向，利用上一次计算得到的四元数，我们把世界坐标系中z轴负方向在机体坐标系下的坐标解出来，再将其与加速度计做叉乘来计算误差（产生误差正是由于你从世界转换到机体的这个旋转是不准的），这时我们得到了一个误差向量，要注意它在机体坐标系下的方向可能是任意的，但在世界坐标系下一定是在xOy平面上的（这时由于先叉乘再旋转与先旋转再叉乘得到的结果是一样的），这也是加速度计仅能矫正pitch与roll轴漂移而不能矫正yaw轴的原因，误差向量在世界坐标系下根本没有z轴的分量啊！！<br>误差向量经过PI控制器后可以得到一个矫正向量，这个向量是一个角速度量，把它和陀螺仪所测得的角速度相加，即可得到最终的角速度，具体系统请自行分析一哈，这样一来我们就能够通过加速度计的修正角度漂移！<br>与此同理，若我们知道了地磁计的数据，拿它和机体坐标系下的地磁方向作比较，即可得到存在z轴分量的误差向量，这样一来我们就可以修正yaw轴的零偏啦！<br>（这里存在一个问题，即地磁方向的确定，大家可以想一想如何解决）<br>如此迭代，MahonyAHRS就完成啦！</p>\n<p>与此相类似的算法还有MadgWickAHRS、卡尔曼滤波等，<br>MadgWick是通过加速度计、地磁计计算（使用了梯度下降最优化的思想）的四元数与陀螺仪计算的四元数进行加权得到；<br>Kalman则是使用陀螺仪作为状态方程，加速度计、地磁计作为测量方程进行滤波得到。<br>这俩就不详细讲了（其实是因为我也不懂(￣▽￣)”）</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在上一篇文章中我们已经知道了如何表示旋转，但是现实世界中直接得到四元数或欧拉角的方法少之又少，那么新的问题就是如何通过角速度、加速度甚至地磁计这些我们能够容易测量的量得到旋转呢？<br>本期我们来讨论通过姿态解算的问题！</p>\n<h2 id=\"旋转的微分\"><a href=\"#旋转的微分\" class=\"headerlink\" title=\"旋转的微分\"></a>旋转的微分</h2><p>我们都知道，使用陀螺仪，可以很轻松地得到物体的角速度，而角速度又是角度的微分，通过角速度我们计算出“旋转的微分”，再解这个微分方程，不就可以得到角度了吗！但是说的轻巧做起来难，到底该使用哪种角度（旋转）表示法才能够计算简便并且容易理解呢？欧拉角在微分时会出现万向节死锁的现象，如图：<br><img src=\"/old_images/2020/02/4039222537.png\" alt=\"eularerr.PNG\"><br>此时分母上产生了0，在计算时就会出问题，因此我们不能采用这种方法。<br>而轴角法没有办法表示旋转的叠加，就不能进行积分，因此也不可取。<br>最终答案就是四元数！我们能够很方便的通过角速度计算出四元数的微分方程（具体推导省略），就像下面这样:<br><img src=\"/old_images/2020/02/1475506760.png\" alt=\"4diff.PNG\"><br>（四元数乘法，转换为矩阵乘法可表示为下式）<br><img src=\"/old_images/2020/02/3523885477.png\" alt=\"4diff2.PNG\"><br>其中wb代表机体坐标系下的角速度向量，也就是直接从陀螺仪读取的值！<br>接下来初始化一个q（根据需求），然后解微分方程，就能够随时得到世界-&gt;机体的四元数啦！<br>（注：得到的四元数表示的是坐标系的旋转，即从世界坐标系到机体坐标系的旋转，即第一种理解）</p>\n<h2 id=\"四元数、旋转矩阵、欧拉角的互相转换\"><a href=\"#四元数、旋转矩阵、欧拉角的互相转换\" class=\"headerlink\" title=\"四元数、旋转矩阵、欧拉角的互相转换\"></a>四元数、旋转矩阵、欧拉角的互相转换</h2><p>四元数与旋转矩阵的转换很容易完成：<br><img src=\"/old_images/2020/02/1605118435.jpg\" alt=\"rocol24.jpg\"><br><img src=\"/old_images/2020/02/2575250596.png\" alt=\"42rocol.PNG\"><br>突破q0后再依照关系一一突破即可</p>\n<p>而旋转矩阵化为欧拉角则比较麻烦，需要先约定好欧拉角的种类（24种之一）<br>详情就不贴了，论坛上一抓一大把的（＞人＜；）</p>\n<p><strong>至此，我们已经通过角速度计算出欧拉角！</strong></p>\n<p>但是我们解微分方程的方法是积分，由于传感器零偏，积分就难免会产生漂移，我们需要纠正这个偏移，就需要这种积分传感器以外的绝对传感器，就像SLAM中的里程计+激光雷达的组合一样，我们也常用陀螺仪与加速度计、地磁计的组合进行角度测量！<br>下面介绍一种较为简便的AHRS（航姿参考系）算法，MahonyAHRS<br>Mahony的中心思想是陀螺仪更新角度，加速度计与地磁计以较缓慢的方式纠正更新的角度。<br>就拿加速度计来说，静止状态下，加速度计测量为g，方向指向世界坐标z轴负方向，利用上一次计算得到的四元数，我们把世界坐标系中z轴负方向在机体坐标系下的坐标解出来，再将其与加速度计做叉乘来计算误差（产生误差正是由于你从世界转换到机体的这个旋转是不准的），这时我们得到了一个误差向量，要注意它在机体坐标系下的方向可能是任意的，但在世界坐标系下一定是在xOy平面上的（这时由于先叉乘再旋转与先旋转再叉乘得到的结果是一样的），这也是加速度计仅能矫正pitch与roll轴漂移而不能矫正yaw轴的原因，误差向量在世界坐标系下根本没有z轴的分量啊！！<br>误差向量经过PI控制器后可以得到一个矫正向量，这个向量是一个角速度量，把它和陀螺仪所测得的角速度相加，即可得到最终的角速度，具体系统请自行分析一哈，这样一来我们就能够通过加速度计的修正角度漂移！<br>与此同理，若我们知道了地磁计的数据，拿它和机体坐标系下的地磁方向作比较，即可得到存在z轴分量的误差向量，这样一来我们就可以修正yaw轴的零偏啦！<br>（这里存在一个问题，即地磁方向的确定，大家可以想一想如何解决）<br>如此迭代，MahonyAHRS就完成啦！</p>\n<p>与此相类似的算法还有MadgWickAHRS、卡尔曼滤波等，<br>MadgWick是通过加速度计、地磁计计算（使用了梯度下降最优化的思想）的四元数与陀螺仪计算的四元数进行加权得到；<br>Kalman则是使用陀螺仪作为状态方程，加速度计、地磁计作为测量方程进行滤波得到。<br>这俩就不详细讲了（其实是因为我也不懂(￣▽￣)”）</p>\n"},{"title":"ARM裸机开发实战1","date":"2020-02-19T01:45:27.000Z","toc":true,"_content":"本科阶段的学习是应该学深还是学广呢，在我看来，应该学广，但是，也应该有自己特别擅长的一两个方向，其他的，浅尝辄止即可。\n\n近几天又开了ARM Corrtex-A的新坑，明明连M系列都没怎么学明白的我胆子还真是大呢~，嵌入式老本行的我当然要把这部分死死地往深学。\n\n废话不多说，总结一下Cortex-A系列裸机开发的容易懵逼的小知识点\n\n本次使用的是正点原子Alphak开发板，搭载的是 I.MX6ULL芯片，单核Corex-A7。没有库，几千多页文档，看的我是着实头很大。不过在左神的带领下还是慢慢地摸清了它的门路，而且对STM32有了更深的理解，你说神不神奇！\n\n编译与链接：\n\n编译会检查.c或.S文件的语法错误，并根据文件生成\n\n对应的.o文件，即object文件\n\n链接会根据.o文件之间的引用关系，找到文件之间、变量之间的联系，将其链接成一个二进制文件，.elf文件，这是一个Linux的二进制文件，其中除了包含机器码，还包含着其他额外的信息，我们由.elf生成.bin文件，就是可以让单片机看懂的文件了。\n\n链接 时还要注意链接脚本的编写，链接脚本确定了程序的链接地址，即程序存放到内存的哪一片区域。程序还分为text、bss、data、等静态程序段，还有堆、栈等动态单元，这些都要放在不同的地址上去。\n\n生成.bin文件后，还需要在前面添加IVT、Bootdata以及DCD等信息，这些信息是芯片启动时Bootram内程序会参考的信息，用于初始化DDR、MMU等设备，锁定运行地址，还可以初始化一些寄存器。添加完成之后就可以烧写进SD卡了。\n\n启动流程：\n\nBootram程序会检查几个IO以确定是串行烧写还是存储设备启动，是哪类存储设备，之后配置一些设备，然后会从运行地址开始运行程序。\n\n \n\n汇编里要配置的东西：\n\nSTM32的初始化由ST官方提供的STARTUP.S完成，而我们的I.MX6ULL只能由我们自己来完成了，大体步骤如下：\n\n首先我们的链接脚本决定了我们的_start:标号被链接到了0X87800000这个地址，我们的header又决定了我们的执行也是从0X87800000这个地址开始所以第一个执行的语句就是_start咯！\n\n在_start:后，我们要手动配置中断向量表\n\n\n\n原理就是改PC寄存器的值，是不是很简单。\n\n复位中断这个很有意思，我们每次上电、复位都会使pc指向最一开始，也就是复位中断的位置，所以你说他没有也行\n","source":"_posts/ARM裸机开发实战1.md","raw":"title: ARM裸机开发实战1\ndate: 2020-02-19 09:45:27\ncategories: 开发\ntags: []\ntoc: true\n---\n本科阶段的学习是应该学深还是学广呢，在我看来，应该学广，但是，也应该有自己特别擅长的一两个方向，其他的，浅尝辄止即可。\n\n近几天又开了ARM Corrtex-A的新坑，明明连M系列都没怎么学明白的我胆子还真是大呢~，嵌入式老本行的我当然要把这部分死死地往深学。\n\n废话不多说，总结一下Cortex-A系列裸机开发的容易懵逼的小知识点\n\n本次使用的是正点原子Alphak开发板，搭载的是 I.MX6ULL芯片，单核Corex-A7。没有库，几千多页文档，看的我是着实头很大。不过在左神的带领下还是慢慢地摸清了它的门路，而且对STM32有了更深的理解，你说神不神奇！\n\n编译与链接：\n\n编译会检查.c或.S文件的语法错误，并根据文件生成\n\n对应的.o文件，即object文件\n\n链接会根据.o文件之间的引用关系，找到文件之间、变量之间的联系，将其链接成一个二进制文件，.elf文件，这是一个Linux的二进制文件，其中除了包含机器码，还包含着其他额外的信息，我们由.elf生成.bin文件，就是可以让单片机看懂的文件了。\n\n链接 时还要注意链接脚本的编写，链接脚本确定了程序的链接地址，即程序存放到内存的哪一片区域。程序还分为text、bss、data、等静态程序段，还有堆、栈等动态单元，这些都要放在不同的地址上去。\n\n生成.bin文件后，还需要在前面添加IVT、Bootdata以及DCD等信息，这些信息是芯片启动时Bootram内程序会参考的信息，用于初始化DDR、MMU等设备，锁定运行地址，还可以初始化一些寄存器。添加完成之后就可以烧写进SD卡了。\n\n启动流程：\n\nBootram程序会检查几个IO以确定是串行烧写还是存储设备启动，是哪类存储设备，之后配置一些设备，然后会从运行地址开始运行程序。\n\n \n\n汇编里要配置的东西：\n\nSTM32的初始化由ST官方提供的STARTUP.S完成，而我们的I.MX6ULL只能由我们自己来完成了，大体步骤如下：\n\n首先我们的链接脚本决定了我们的_start:标号被链接到了0X87800000这个地址，我们的header又决定了我们的执行也是从0X87800000这个地址开始所以第一个执行的语句就是_start咯！\n\n在_start:后，我们要手动配置中断向量表\n\n\n\n原理就是改PC寄存器的值，是不是很简单。\n\n复位中断这个很有意思，我们每次上电、复位都会使pc指向最一开始，也就是复位中断的位置，所以你说他没有也行\n","slug":"ARM裸机开发实战1","published":1,"updated":"2020-12-14T12:20:16.771Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0bo00087p193y5xfqtu","content":"<p>本科阶段的学习是应该学深还是学广呢，在我看来，应该学广，但是，也应该有自己特别擅长的一两个方向，其他的，浅尝辄止即可。</p>\n<p>近几天又开了ARM Corrtex-A的新坑，明明连M系列都没怎么学明白的我胆子还真是大呢~，嵌入式老本行的我当然要把这部分死死地往深学。</p>\n<p>废话不多说，总结一下Cortex-A系列裸机开发的容易懵逼的小知识点</p>\n<p>本次使用的是正点原子Alphak开发板，搭载的是 I.MX6ULL芯片，单核Corex-A7。没有库，几千多页文档，看的我是着实头很大。不过在左神的带领下还是慢慢地摸清了它的门路，而且对STM32有了更深的理解，你说神不神奇！</p>\n<p>编译与链接：</p>\n<p>编译会检查.c或.S文件的语法错误，并根据文件生成</p>\n<p>对应的.o文件，即object文件</p>\n<p>链接会根据.o文件之间的引用关系，找到文件之间、变量之间的联系，将其链接成一个二进制文件，.elf文件，这是一个Linux的二进制文件，其中除了包含机器码，还包含着其他额外的信息，我们由.elf生成.bin文件，就是可以让单片机看懂的文件了。</p>\n<p>链接 时还要注意链接脚本的编写，链接脚本确定了程序的链接地址，即程序存放到内存的哪一片区域。程序还分为text、bss、data、等静态程序段，还有堆、栈等动态单元，这些都要放在不同的地址上去。</p>\n<p>生成.bin文件后，还需要在前面添加IVT、Bootdata以及DCD等信息，这些信息是芯片启动时Bootram内程序会参考的信息，用于初始化DDR、MMU等设备，锁定运行地址，还可以初始化一些寄存器。添加完成之后就可以烧写进SD卡了。</p>\n<p>启动流程：</p>\n<p>Bootram程序会检查几个IO以确定是串行烧写还是存储设备启动，是哪类存储设备，之后配置一些设备，然后会从运行地址开始运行程序。</p>\n<p>汇编里要配置的东西：</p>\n<p>STM32的初始化由ST官方提供的STARTUP.S完成，而我们的I.MX6ULL只能由我们自己来完成了，大体步骤如下：</p>\n<p>首先我们的链接脚本决定了我们的_start:标号被链接到了0X87800000这个地址，我们的header又决定了我们的执行也是从0X87800000这个地址开始所以第一个执行的语句就是_start咯！</p>\n<p>在_start:后，我们要手动配置中断向量表</p>\n<p>原理就是改PC寄存器的值，是不是很简单。</p>\n<p>复位中断这个很有意思，我们每次上电、复位都会使pc指向最一开始，也就是复位中断的位置，所以你说他没有也行</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本科阶段的学习是应该学深还是学广呢，在我看来，应该学广，但是，也应该有自己特别擅长的一两个方向，其他的，浅尝辄止即可。</p>\n<p>近几天又开了ARM Corrtex-A的新坑，明明连M系列都没怎么学明白的我胆子还真是大呢~，嵌入式老本行的我当然要把这部分死死地往深学。</p>\n<p>废话不多说，总结一下Cortex-A系列裸机开发的容易懵逼的小知识点</p>\n<p>本次使用的是正点原子Alphak开发板，搭载的是 I.MX6ULL芯片，单核Corex-A7。没有库，几千多页文档，看的我是着实头很大。不过在左神的带领下还是慢慢地摸清了它的门路，而且对STM32有了更深的理解，你说神不神奇！</p>\n<p>编译与链接：</p>\n<p>编译会检查.c或.S文件的语法错误，并根据文件生成</p>\n<p>对应的.o文件，即object文件</p>\n<p>链接会根据.o文件之间的引用关系，找到文件之间、变量之间的联系，将其链接成一个二进制文件，.elf文件，这是一个Linux的二进制文件，其中除了包含机器码，还包含着其他额外的信息，我们由.elf生成.bin文件，就是可以让单片机看懂的文件了。</p>\n<p>链接 时还要注意链接脚本的编写，链接脚本确定了程序的链接地址，即程序存放到内存的哪一片区域。程序还分为text、bss、data、等静态程序段，还有堆、栈等动态单元，这些都要放在不同的地址上去。</p>\n<p>生成.bin文件后，还需要在前面添加IVT、Bootdata以及DCD等信息，这些信息是芯片启动时Bootram内程序会参考的信息，用于初始化DDR、MMU等设备，锁定运行地址，还可以初始化一些寄存器。添加完成之后就可以烧写进SD卡了。</p>\n<p>启动流程：</p>\n<p>Bootram程序会检查几个IO以确定是串行烧写还是存储设备启动，是哪类存储设备，之后配置一些设备，然后会从运行地址开始运行程序。</p>\n<p>汇编里要配置的东西：</p>\n<p>STM32的初始化由ST官方提供的STARTUP.S完成，而我们的I.MX6ULL只能由我们自己来完成了，大体步骤如下：</p>\n<p>首先我们的链接脚本决定了我们的_start:标号被链接到了0X87800000这个地址，我们的header又决定了我们的执行也是从0X87800000这个地址开始所以第一个执行的语句就是_start咯！</p>\n<p>在_start:后，我们要手动配置中断向量表</p>\n<p>原理就是改PC寄存器的值，是不是很简单。</p>\n<p>复位中断这个很有意思，我们每次上电、复位都会使pc指向最一开始，也就是复位中断的位置，所以你说他没有也行</p>\n"},{"title":"FIR和IIR之间的故事","date":"2020-05-08T06:31:00.000Z","toc":true,"_content":"","source":"_posts/FIR和IIR之间的故事.md","raw":"title: FIR和IIR之间的故事\ndate: 2020-05-08 14:31:00\ncategories: 控制\ntags: []\ntoc: true\n---\n","slug":"FIR和IIR之间的故事","published":1,"updated":"2020-12-14T12:20:19.167Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0bp000a7p1942vk0zri","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"HTTP协议最常见的两种请求方法","date":"2020-05-14T01:25:00.000Z","toc":true,"_content":"运行在网络中的诸多协议，组成了你生活中所有网络应用的基础。这些应用层协议常见的有如下几种：\n 1. http：最常见的协议，实现超文本传输，浏览器中文本图像在服务器与客户端之间传递；\n 2. ssh：安全shell，远程连接服务器的shell；\n 3. ftp：远程文件系统；\n 4. dns：域名解析；\n 5. smtp：邮件协议；\n等等等等……\n\n只要掌握了这些协议的内部原理，我们就可以随意操作实现功能了。\n这次我们来讲一下使用python的requests库实现http协议的请求\nhttp协议通过客户端（浏览器）向服务器发出请求，服务器相应这些请求，文字，图像就能够显示在我们的浏览器上了！\n这些请求有如下几种：\n![Snipaste_2020-05-14_16-43-46.jpg][1]\n我们主要讲解两种最常见的——GET、POST\n\n## GET ##\n\nGET请求是一种显式传递信息的方式，通常用于获取服务器发来的数据而做出请求。\n常见发起GET请求的方式就是URL。\n我们在浏览器中输入一个URL，点击访问，就是发起了一次GET请求\nGET请求的内容通常是直接显式地显示在URL后面，以?分隔的。\nGET返回的内容就会被浏览器理解，显示在界面上了：\n使用浏览器自带的抓包工具，我们来看一下GET请求与响应都是什么样的\n![Snipaste_2020-05-14_16-52-41.jpg][2]\n点开B站的一瞬间，扑面而来的GET请求瞬间刷屏，当然这些都是第一个GET所带来的连锁反应\n![Snipaste_2020-05-14_16-54-24.jpg][3]\n首先General中告诉我们这是一个GET，目标URL是B站，IP也可以看见，status code就是状态码，200表示成功\n大家常见的404、502也是状态码：        [关于状态码详细——百度百科][4]\n![Snipaste_2020-05-14_16-56-30.jpg][5]\n后面接着是Request Header，请求头，是我们发给服务器的数据：\n![Snipaste_2020-05-14_16-58-34.jpg][6]\n这其中包含着语言、所用浏览器、操作系统、编码方式等等，服务器拿到这些数据进行分析，来给你做出响应（反-反爬虫最基本的就是伪造请求头(●ˇ∀ˇ●)）\n当然这里面最重要的是cookie信息，它保存着我的登录信息，利用cookie就可以实现免重复登陆的功能。\nB站接到这个请求后，会进行处理，返回给我们一个Response Header：\n![Snipaste_2020-05-14_17-02-55.jpg][7]\n还有Response的内容，也就是B站主站的index.html，通过这个html我们就知道接下来该去哪些URL去GET些什么了。\n![Snipaste_2020-05-14_17-31-24.jpg][8]\n接下来，就是一系列GET来搭建出整个网站所呈现出的样子，比如一些图片啊、script啊之类的。至此，通过一系列的GET我们访问到了B站。\n\n## POST ##\n\n当我们想去向服务器传递内容时，比如登陆时传递用户名密码，发送弹幕、评论，该如何发送请求呢？这时就需要POST登场了。\n与GET不同，POST是一种隐含的信息传递方式，因此它更安全，适合向服务器传递隐私内容。\n常见发起POST请求的是FORM表单。\n这次我们以发送弹幕为例来看看POST是如何工作的：\n![Snipaste_2020-05-14_17-18-41.jpg][9]\n点击发送弹幕，发现，我们确实发出了一次POST请求（忽略下面这个failed的GET）\n除了Request Header和Response，我们发现，POST还多了一个Form Data表单：\n![Snipaste_2020-05-14_17-22-29.jpg][10]\n这个Form Data中就保存了我们要传递给服务器的数据，比如弹幕的字体大小、颜色、内容、发送时间、BV号等等。\n服务器接收到这样的POST请求，就能做出反应（在视频上显示出该弹幕），同样，评论与登录也是一个道理。\n得到的Response也挺有趣的(/▽＼)\n![Snipaste_2020-05-14_17-25-22.jpg][11]\n\n\n  [1]: /old_images/2020/05/1596536276.jpg\n  [2]: /old_images/2020/05/1113348697.jpg\n  [3]: /old_images/2020/05/330527918.jpg\n  [4]: https://baike.baidu.com/item/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/5053660?fr=aladdin\n  [5]: /old_images/2020/05/1088359098.jpg\n  [6]: /old_images/2020/05/3068723404.jpg\n  [7]: /old_images/2020/05/2576890486.jpg\n  [8]: /old_images/2020/05/2978689860.jpg\n  [9]: /old_images/2020/05/1187310326.jpg\n  [10]: /old_images/2020/05/910319602.jpg\n  [11]: /old_images/2020/05/963849757.jpg\n","source":"_posts/HTTP协议最常见的两种请求方法.md","raw":"title: HTTP协议最常见的两种请求方法\ndate: 2020-05-14 09:25:00\ncategories: 网络\ntags: []\ntoc: true\n---\n运行在网络中的诸多协议，组成了你生活中所有网络应用的基础。这些应用层协议常见的有如下几种：\n 1. http：最常见的协议，实现超文本传输，浏览器中文本图像在服务器与客户端之间传递；\n 2. ssh：安全shell，远程连接服务器的shell；\n 3. ftp：远程文件系统；\n 4. dns：域名解析；\n 5. smtp：邮件协议；\n等等等等……\n\n只要掌握了这些协议的内部原理，我们就可以随意操作实现功能了。\n这次我们来讲一下使用python的requests库实现http协议的请求\nhttp协议通过客户端（浏览器）向服务器发出请求，服务器相应这些请求，文字，图像就能够显示在我们的浏览器上了！\n这些请求有如下几种：\n![Snipaste_2020-05-14_16-43-46.jpg][1]\n我们主要讲解两种最常见的——GET、POST\n\n## GET ##\n\nGET请求是一种显式传递信息的方式，通常用于获取服务器发来的数据而做出请求。\n常见发起GET请求的方式就是URL。\n我们在浏览器中输入一个URL，点击访问，就是发起了一次GET请求\nGET请求的内容通常是直接显式地显示在URL后面，以?分隔的。\nGET返回的内容就会被浏览器理解，显示在界面上了：\n使用浏览器自带的抓包工具，我们来看一下GET请求与响应都是什么样的\n![Snipaste_2020-05-14_16-52-41.jpg][2]\n点开B站的一瞬间，扑面而来的GET请求瞬间刷屏，当然这些都是第一个GET所带来的连锁反应\n![Snipaste_2020-05-14_16-54-24.jpg][3]\n首先General中告诉我们这是一个GET，目标URL是B站，IP也可以看见，status code就是状态码，200表示成功\n大家常见的404、502也是状态码：        [关于状态码详细——百度百科][4]\n![Snipaste_2020-05-14_16-56-30.jpg][5]\n后面接着是Request Header，请求头，是我们发给服务器的数据：\n![Snipaste_2020-05-14_16-58-34.jpg][6]\n这其中包含着语言、所用浏览器、操作系统、编码方式等等，服务器拿到这些数据进行分析，来给你做出响应（反-反爬虫最基本的就是伪造请求头(●ˇ∀ˇ●)）\n当然这里面最重要的是cookie信息，它保存着我的登录信息，利用cookie就可以实现免重复登陆的功能。\nB站接到这个请求后，会进行处理，返回给我们一个Response Header：\n![Snipaste_2020-05-14_17-02-55.jpg][7]\n还有Response的内容，也就是B站主站的index.html，通过这个html我们就知道接下来该去哪些URL去GET些什么了。\n![Snipaste_2020-05-14_17-31-24.jpg][8]\n接下来，就是一系列GET来搭建出整个网站所呈现出的样子，比如一些图片啊、script啊之类的。至此，通过一系列的GET我们访问到了B站。\n\n## POST ##\n\n当我们想去向服务器传递内容时，比如登陆时传递用户名密码，发送弹幕、评论，该如何发送请求呢？这时就需要POST登场了。\n与GET不同，POST是一种隐含的信息传递方式，因此它更安全，适合向服务器传递隐私内容。\n常见发起POST请求的是FORM表单。\n这次我们以发送弹幕为例来看看POST是如何工作的：\n![Snipaste_2020-05-14_17-18-41.jpg][9]\n点击发送弹幕，发现，我们确实发出了一次POST请求（忽略下面这个failed的GET）\n除了Request Header和Response，我们发现，POST还多了一个Form Data表单：\n![Snipaste_2020-05-14_17-22-29.jpg][10]\n这个Form Data中就保存了我们要传递给服务器的数据，比如弹幕的字体大小、颜色、内容、发送时间、BV号等等。\n服务器接收到这样的POST请求，就能做出反应（在视频上显示出该弹幕），同样，评论与登录也是一个道理。\n得到的Response也挺有趣的(/▽＼)\n![Snipaste_2020-05-14_17-25-22.jpg][11]\n\n\n  [1]: /old_images/2020/05/1596536276.jpg\n  [2]: /old_images/2020/05/1113348697.jpg\n  [3]: /old_images/2020/05/330527918.jpg\n  [4]: https://baike.baidu.com/item/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/5053660?fr=aladdin\n  [5]: /old_images/2020/05/1088359098.jpg\n  [6]: /old_images/2020/05/3068723404.jpg\n  [7]: /old_images/2020/05/2576890486.jpg\n  [8]: /old_images/2020/05/2978689860.jpg\n  [9]: /old_images/2020/05/1187310326.jpg\n  [10]: /old_images/2020/05/910319602.jpg\n  [11]: /old_images/2020/05/963849757.jpg\n","slug":"HTTP协议最常见的两种请求方法","published":1,"updated":"2020-12-14T12:20:23.283Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0bq000d7p19fl9p7ln6","content":"<p>运行在网络中的诸多协议，组成了你生活中所有网络应用的基础。这些应用层协议常见的有如下几种：</p>\n<ol>\n<li>http：最常见的协议，实现超文本传输，浏览器中文本图像在服务器与客户端之间传递；</li>\n<li>ssh：安全shell，远程连接服务器的shell；</li>\n<li>ftp：远程文件系统；</li>\n<li>dns：域名解析；</li>\n<li>smtp：邮件协议；<br>等等等等……</li>\n</ol>\n<p>只要掌握了这些协议的内部原理，我们就可以随意操作实现功能了。<br>这次我们来讲一下使用python的requests库实现http协议的请求<br>http协议通过客户端（浏览器）向服务器发出请求，服务器相应这些请求，文字，图像就能够显示在我们的浏览器上了！<br>这些请求有如下几种：<br><img src=\"/old_images/2020/05/1596536276.jpg\" alt=\"Snipaste_2020-05-14_16-43-46.jpg\"><br>我们主要讲解两种最常见的——GET、POST</p>\n<h2 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h2><p>GET请求是一种显式传递信息的方式，通常用于获取服务器发来的数据而做出请求。<br>常见发起GET请求的方式就是URL。<br>我们在浏览器中输入一个URL，点击访问，就是发起了一次GET请求<br>GET请求的内容通常是直接显式地显示在URL后面，以?分隔的。<br>GET返回的内容就会被浏览器理解，显示在界面上了：<br>使用浏览器自带的抓包工具，我们来看一下GET请求与响应都是什么样的<br><img src=\"/old_images/2020/05/1113348697.jpg\" alt=\"Snipaste_2020-05-14_16-52-41.jpg\"><br>点开B站的一瞬间，扑面而来的GET请求瞬间刷屏，当然这些都是第一个GET所带来的连锁反应<br><img src=\"/old_images/2020/05/330527918.jpg\" alt=\"Snipaste_2020-05-14_16-54-24.jpg\"><br>首先General中告诉我们这是一个GET，目标URL是B站，IP也可以看见，status code就是状态码，200表示成功<br>大家常见的404、502也是状态码：        <a href=\"https://baike.baidu.com/item/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/5053660?fr=aladdin\">关于状态码详细——百度百科</a><br><img src=\"/old_images/2020/05/1088359098.jpg\" alt=\"Snipaste_2020-05-14_16-56-30.jpg\"><br>后面接着是Request Header，请求头，是我们发给服务器的数据：<br><img src=\"/old_images/2020/05/3068723404.jpg\" alt=\"Snipaste_2020-05-14_16-58-34.jpg\"><br>这其中包含着语言、所用浏览器、操作系统、编码方式等等，服务器拿到这些数据进行分析，来给你做出响应（反-反爬虫最基本的就是伪造请求头(●ˇ∀ˇ●)）<br>当然这里面最重要的是cookie信息，它保存着我的登录信息，利用cookie就可以实现免重复登陆的功能。<br>B站接到这个请求后，会进行处理，返回给我们一个Response Header：<br><img src=\"/old_images/2020/05/2576890486.jpg\" alt=\"Snipaste_2020-05-14_17-02-55.jpg\"><br>还有Response的内容，也就是B站主站的index.html，通过这个html我们就知道接下来该去哪些URL去GET些什么了。<br><img src=\"/old_images/2020/05/2978689860.jpg\" alt=\"Snipaste_2020-05-14_17-31-24.jpg\"><br>接下来，就是一系列GET来搭建出整个网站所呈现出的样子，比如一些图片啊、script啊之类的。至此，通过一系列的GET我们访问到了B站。</p>\n<h2 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h2><p>当我们想去向服务器传递内容时，比如登陆时传递用户名密码，发送弹幕、评论，该如何发送请求呢？这时就需要POST登场了。<br>与GET不同，POST是一种隐含的信息传递方式，因此它更安全，适合向服务器传递隐私内容。<br>常见发起POST请求的是FORM表单。<br>这次我们以发送弹幕为例来看看POST是如何工作的：<br><img src=\"/old_images/2020/05/1187310326.jpg\" alt=\"Snipaste_2020-05-14_17-18-41.jpg\"><br>点击发送弹幕，发现，我们确实发出了一次POST请求（忽略下面这个failed的GET）<br>除了Request Header和Response，我们发现，POST还多了一个Form Data表单：<br><img src=\"/old_images/2020/05/910319602.jpg\" alt=\"Snipaste_2020-05-14_17-22-29.jpg\"><br>这个Form Data中就保存了我们要传递给服务器的数据，比如弹幕的字体大小、颜色、内容、发送时间、BV号等等。<br>服务器接收到这样的POST请求，就能做出反应（在视频上显示出该弹幕），同样，评论与登录也是一个道理。<br>得到的Response也挺有趣的(/▽＼)<br><img src=\"/old_images/2020/05/963849757.jpg\" alt=\"Snipaste_2020-05-14_17-25-22.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>运行在网络中的诸多协议，组成了你生活中所有网络应用的基础。这些应用层协议常见的有如下几种：</p>\n<ol>\n<li>http：最常见的协议，实现超文本传输，浏览器中文本图像在服务器与客户端之间传递；</li>\n<li>ssh：安全shell，远程连接服务器的shell；</li>\n<li>ftp：远程文件系统；</li>\n<li>dns：域名解析；</li>\n<li>smtp：邮件协议；<br>等等等等……</li>\n</ol>\n<p>只要掌握了这些协议的内部原理，我们就可以随意操作实现功能了。<br>这次我们来讲一下使用python的requests库实现http协议的请求<br>http协议通过客户端（浏览器）向服务器发出请求，服务器相应这些请求，文字，图像就能够显示在我们的浏览器上了！<br>这些请求有如下几种：<br><img src=\"/old_images/2020/05/1596536276.jpg\" alt=\"Snipaste_2020-05-14_16-43-46.jpg\"><br>我们主要讲解两种最常见的——GET、POST</p>\n<h2 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h2><p>GET请求是一种显式传递信息的方式，通常用于获取服务器发来的数据而做出请求。<br>常见发起GET请求的方式就是URL。<br>我们在浏览器中输入一个URL，点击访问，就是发起了一次GET请求<br>GET请求的内容通常是直接显式地显示在URL后面，以?分隔的。<br>GET返回的内容就会被浏览器理解，显示在界面上了：<br>使用浏览器自带的抓包工具，我们来看一下GET请求与响应都是什么样的<br><img src=\"/old_images/2020/05/1113348697.jpg\" alt=\"Snipaste_2020-05-14_16-52-41.jpg\"><br>点开B站的一瞬间，扑面而来的GET请求瞬间刷屏，当然这些都是第一个GET所带来的连锁反应<br><img src=\"/old_images/2020/05/330527918.jpg\" alt=\"Snipaste_2020-05-14_16-54-24.jpg\"><br>首先General中告诉我们这是一个GET，目标URL是B站，IP也可以看见，status code就是状态码，200表示成功<br>大家常见的404、502也是状态码：        <a href=\"https://baike.baidu.com/item/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/5053660?fr=aladdin\">关于状态码详细——百度百科</a><br><img src=\"/old_images/2020/05/1088359098.jpg\" alt=\"Snipaste_2020-05-14_16-56-30.jpg\"><br>后面接着是Request Header，请求头，是我们发给服务器的数据：<br><img src=\"/old_images/2020/05/3068723404.jpg\" alt=\"Snipaste_2020-05-14_16-58-34.jpg\"><br>这其中包含着语言、所用浏览器、操作系统、编码方式等等，服务器拿到这些数据进行分析，来给你做出响应（反-反爬虫最基本的就是伪造请求头(●ˇ∀ˇ●)）<br>当然这里面最重要的是cookie信息，它保存着我的登录信息，利用cookie就可以实现免重复登陆的功能。<br>B站接到这个请求后，会进行处理，返回给我们一个Response Header：<br><img src=\"/old_images/2020/05/2576890486.jpg\" alt=\"Snipaste_2020-05-14_17-02-55.jpg\"><br>还有Response的内容，也就是B站主站的index.html，通过这个html我们就知道接下来该去哪些URL去GET些什么了。<br><img src=\"/old_images/2020/05/2978689860.jpg\" alt=\"Snipaste_2020-05-14_17-31-24.jpg\"><br>接下来，就是一系列GET来搭建出整个网站所呈现出的样子，比如一些图片啊、script啊之类的。至此，通过一系列的GET我们访问到了B站。</p>\n<h2 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h2><p>当我们想去向服务器传递内容时，比如登陆时传递用户名密码，发送弹幕、评论，该如何发送请求呢？这时就需要POST登场了。<br>与GET不同，POST是一种隐含的信息传递方式，因此它更安全，适合向服务器传递隐私内容。<br>常见发起POST请求的是FORM表单。<br>这次我们以发送弹幕为例来看看POST是如何工作的：<br><img src=\"/old_images/2020/05/1187310326.jpg\" alt=\"Snipaste_2020-05-14_17-18-41.jpg\"><br>点击发送弹幕，发现，我们确实发出了一次POST请求（忽略下面这个failed的GET）<br>除了Request Header和Response，我们发现，POST还多了一个Form Data表单：<br><img src=\"/old_images/2020/05/910319602.jpg\" alt=\"Snipaste_2020-05-14_17-22-29.jpg\"><br>这个Form Data中就保存了我们要传递给服务器的数据，比如弹幕的字体大小、颜色、内容、发送时间、BV号等等。<br>服务器接收到这样的POST请求，就能做出反应（在视频上显示出该弹幕），同样，评论与登录也是一个道理。<br>得到的Response也挺有趣的(/▽＼)<br><img src=\"/old_images/2020/05/963849757.jpg\" alt=\"Snipaste_2020-05-14_17-25-22.jpg\"></p>\n"},{"title":"LCD vs OLED","date":"2020-07-11T06:41:00.000Z","toc":true,"_content":"转载以下知乎大佬们为我们带来的LCD与OLED大比拼：\n\n链接：[OLED 和 LCD 有什么区别？][1]\n\n来源：知乎\n\n![Snipaste_2020-07-11_22-41-15.jpg][2]\n\n\n  [1]: https://www.zhihu.com/question/22263252\n  [2]: /old_images/2020/07/3074664648.jpg\n","source":"_posts/LCD vs OLED.md","raw":"title: LCD vs OLED\ndate: 2020-07-11 14:41:00\ncategories: 日常\ntags: []\ntoc: true\n---\n转载以下知乎大佬们为我们带来的LCD与OLED大比拼：\n\n链接：[OLED 和 LCD 有什么区别？][1]\n\n来源：知乎\n\n![Snipaste_2020-07-11_22-41-15.jpg][2]\n\n\n  [1]: https://www.zhihu.com/question/22263252\n  [2]: /old_images/2020/07/3074664648.jpg\n","slug":"LCD vs OLED","published":1,"updated":"2020-12-14T12:20:25.831Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0br000f7p190pml3233","content":"<p>转载以下知乎大佬们为我们带来的LCD与OLED大比拼：</p>\n<p>链接：<a href=\"https://www.zhihu.com/question/22263252\">OLED 和 LCD 有什么区别？</a></p>\n<p>来源：知乎</p>\n<p><img src=\"/old_images/2020/07/3074664648.jpg\" alt=\"Snipaste_2020-07-11_22-41-15.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>转载以下知乎大佬们为我们带来的LCD与OLED大比拼：</p>\n<p>链接：<a href=\"https://www.zhihu.com/question/22263252\">OLED 和 LCD 有什么区别？</a></p>\n<p>来源：知乎</p>\n<p><img src=\"/old_images/2020/07/3074664648.jpg\" alt=\"Snipaste_2020-07-11_22-41-15.jpg\"></p>\n"},{"title":"Python爬虫实战！","date":"2020-03-13T22:21:00.000Z","toc":true,"_content":"老早就有闻爬虫的鼎鼎大名，但一直找不到合适的机会去试一试。正好前几天刚学习了Python的语法，拿爬虫练练手正合适，顺便在网上找到了漫画的资源正好下载下来看一看，省了我几个漫读券了，一举两得，美滋滋！\n\n## Python requests库的基础使用 ##\n爬虫的原理十分简单，就是将程序模拟为浏览器，来快速地获取网络上的资源，包括文字、图片、音频、视频都能被爬取到，也可见即可爬！\n那么怎样自动化地模拟浏览器进行网络请求呢，答案就是Python第三方库——requests，这个库功能十分强大，提供了get、post等多种http、https请求，我们可以很简单地利用requests库来模拟浏览器的动作。\nget(url,headers = header)方法用于使用get方法发出一个请求（注意get方法的数据显式地存放在url中，因此我们只需要提供url即可），使用headers参数来提供请求头（也是防反爬最基本的方法之一）；\npost(url,data = data,headers = header)方法类似，用来发出post请求，数据存放于data中（通常为JSON字符串格式）；\n\n这两个类得到的实例就包含了服务器获得请求后返回的响应，我们称之为response，通过respons的text与content方法，我们就可以获得返回的数据了，而这二者的区别是text方法以字符串形式返回，通常用于我们来做数据分析的，当然也可以用来保存文字内容；而content方法返回二进制数据，通常用于我们保存文件，文字、图片、音频、视频均可。\n这样我们就通过requests库获得了网页的内容啦！\n\n## 内容的保存 ##\n获得了内容之后我们要将保存为文件，Python的文件操作非常方便\n使用：with open(filename,method) as f:\n可以以method所定义的方法打开filename这个文件。一般我们用于保存文件的method就是\"w\"和\"wb\"两种，区别在于\"w\"使用文本形式保存文件，而\"wb\"使用二进制字节流形式保存文件，我们的多媒体文件以及可执行文件都是以这种形式保存的！\n打开文件后，我们可以使用f.write(content)方法向文件写入内容，也就是之前我们得到的response.text或response.content，这样，从网络上爬取数据并保存的工作就完成了！\n\n## 数据的筛选 正则re与parsel库##\n互联网上数据众多，为了能够筛选出我想要的内容，比如我们只想要漫画网站上面的图片而不想要底下的评论，我们还需要对获取的数据进行筛选，这该如何是好呢？\n最简单粗暴的办法，我们可以使用Python正则表达式库re中的findall方法来匹配我们想要的内容\n用法就是——re.findall(\"style\",text)，其中style就是正则要匹配的内容，text就是所要匹配的数据，style中()内的内容就会被返回，这样我们能够简单地提取出我们想要的内容，比如图片url啊、小说标题和文本啊等等，但是由于网站的元素实在过多，我们可能会匹配到错误的内容，需要一种更高级智能的匹配手段！\nparsel库向我们提供了三种匹配手段，re、xpath与css选择器，我这里就主要解释一下css选择器的使用\n网页上的html元素都有着不同的css标签，可以通过css标签来选择出我们想要的元素。parsel提供了Selector(text)方法，实例使用css(css_selector).getall()的方法可以获取到所有匹配的元素内容，所以我们只需要知道这一系列元素所共同具有的css选择器就可以了。\n同理，xpath也是html元素的属性，也可以由浏览器调试获得！我们不过多赘述（好吧其实是因为不会(*￣;(￣ *)）\n\n## 批量爬取 ##\n刚刚我们只获取到一页内容的数据，如果我们想翻页，或者想去自动地爬另一个内容，怎么办呢？\n批量爬取是一只爬虫必备的能力，做到批量爬取，其实就是获取下一个想爬的url在一个循环里来回爬就行啦，获取url成为了我们的首要目标\n如何获取url呢？最简单粗暴的办法就是，观察网页变化的\n如果下一页是一个超链接，那就简单了，获取到下一页的url即可\n如果下一页是get请求，也没啥太大问题，使用get方法，模拟网页发出一个一模一样的请求就行，当然get请求也是包含在url里面的，我们也可以直接获取url\n如果下一页是个AJAX请求（即动态地在同一个url下面显示不同内容），抱歉目前我还不太会（＞人＜；）\n获取到下一页内容后，再把他们循环起来，重复上面的工作就行啦！我们的爬虫就可以运行起来啦!\n\n## 实战：爬取某网站整部漫画 ##\n话不多说，直接上代码\n![2020-03-14 20-05-24 的屏幕截图.png][1]\n你没有看错，只用了29行（这就或许是Python的魅力吧）\n原理也很简单\n\n 1. 查看是否存在文件夹image，没有则创建\n 2. 最外面的循环是章节循环，由于每一章网页url上面的数字是连起来的，简单的字符串拼接就可以遍历了\n 3. 再在image内创建一个名为章节号码的文件夹，用来存放图片\n 4. 首先请求一次，（注意这个get请求使用一个visitor_header的请求头，目的在于防止被反爬）\n 5. 这次请求获取当前章节的总页数，然后就可以遍历每一页啦\n 6. 再次get请求，使用css选择器获得符合要求的img的html元素（也就是漫画图片），再使用正则筛选出图片url（个人网站加个延时防止网站崩溃）\n 7. 最后按页数保存下来就大功告成啦！\n\n**最后运行的结果：**\n（爬了租借女友的23到27话做个示范）\n![2020-03-14 20-17-10 的屏幕截图.png][2]\n![2020-03-14 20-17-15 的屏幕截图.png][3]\n\n**爬虫真的是一种便捷获取网络数据的利器！\n但白嫖可耻，也请大家不要学习盗版行为！\n真的已经在哔哩哔哩漫画补过票了！(❤ ω ❤)**\n\n  [1]: /old_images/2020/03/340887529.png\n  [2]: /old_images/2020/03/999894680.png\n  [3]: /old_images/2020/03/3846485483.png\n","source":"_posts/Python爬虫实战！.md","raw":"title: Python爬虫实战！\ndate: 2020-03-14 06:21:00\ncategories: 开发\ntags: []\ntoc: true\n---\n老早就有闻爬虫的鼎鼎大名，但一直找不到合适的机会去试一试。正好前几天刚学习了Python的语法，拿爬虫练练手正合适，顺便在网上找到了漫画的资源正好下载下来看一看，省了我几个漫读券了，一举两得，美滋滋！\n\n## Python requests库的基础使用 ##\n爬虫的原理十分简单，就是将程序模拟为浏览器，来快速地获取网络上的资源，包括文字、图片、音频、视频都能被爬取到，也可见即可爬！\n那么怎样自动化地模拟浏览器进行网络请求呢，答案就是Python第三方库——requests，这个库功能十分强大，提供了get、post等多种http、https请求，我们可以很简单地利用requests库来模拟浏览器的动作。\nget(url,headers = header)方法用于使用get方法发出一个请求（注意get方法的数据显式地存放在url中，因此我们只需要提供url即可），使用headers参数来提供请求头（也是防反爬最基本的方法之一）；\npost(url,data = data,headers = header)方法类似，用来发出post请求，数据存放于data中（通常为JSON字符串格式）；\n\n这两个类得到的实例就包含了服务器获得请求后返回的响应，我们称之为response，通过respons的text与content方法，我们就可以获得返回的数据了，而这二者的区别是text方法以字符串形式返回，通常用于我们来做数据分析的，当然也可以用来保存文字内容；而content方法返回二进制数据，通常用于我们保存文件，文字、图片、音频、视频均可。\n这样我们就通过requests库获得了网页的内容啦！\n\n## 内容的保存 ##\n获得了内容之后我们要将保存为文件，Python的文件操作非常方便\n使用：with open(filename,method) as f:\n可以以method所定义的方法打开filename这个文件。一般我们用于保存文件的method就是\"w\"和\"wb\"两种，区别在于\"w\"使用文本形式保存文件，而\"wb\"使用二进制字节流形式保存文件，我们的多媒体文件以及可执行文件都是以这种形式保存的！\n打开文件后，我们可以使用f.write(content)方法向文件写入内容，也就是之前我们得到的response.text或response.content，这样，从网络上爬取数据并保存的工作就完成了！\n\n## 数据的筛选 正则re与parsel库##\n互联网上数据众多，为了能够筛选出我想要的内容，比如我们只想要漫画网站上面的图片而不想要底下的评论，我们还需要对获取的数据进行筛选，这该如何是好呢？\n最简单粗暴的办法，我们可以使用Python正则表达式库re中的findall方法来匹配我们想要的内容\n用法就是——re.findall(\"style\",text)，其中style就是正则要匹配的内容，text就是所要匹配的数据，style中()内的内容就会被返回，这样我们能够简单地提取出我们想要的内容，比如图片url啊、小说标题和文本啊等等，但是由于网站的元素实在过多，我们可能会匹配到错误的内容，需要一种更高级智能的匹配手段！\nparsel库向我们提供了三种匹配手段，re、xpath与css选择器，我这里就主要解释一下css选择器的使用\n网页上的html元素都有着不同的css标签，可以通过css标签来选择出我们想要的元素。parsel提供了Selector(text)方法，实例使用css(css_selector).getall()的方法可以获取到所有匹配的元素内容，所以我们只需要知道这一系列元素所共同具有的css选择器就可以了。\n同理，xpath也是html元素的属性，也可以由浏览器调试获得！我们不过多赘述（好吧其实是因为不会(*￣;(￣ *)）\n\n## 批量爬取 ##\n刚刚我们只获取到一页内容的数据，如果我们想翻页，或者想去自动地爬另一个内容，怎么办呢？\n批量爬取是一只爬虫必备的能力，做到批量爬取，其实就是获取下一个想爬的url在一个循环里来回爬就行啦，获取url成为了我们的首要目标\n如何获取url呢？最简单粗暴的办法就是，观察网页变化的\n如果下一页是一个超链接，那就简单了，获取到下一页的url即可\n如果下一页是get请求，也没啥太大问题，使用get方法，模拟网页发出一个一模一样的请求就行，当然get请求也是包含在url里面的，我们也可以直接获取url\n如果下一页是个AJAX请求（即动态地在同一个url下面显示不同内容），抱歉目前我还不太会（＞人＜；）\n获取到下一页内容后，再把他们循环起来，重复上面的工作就行啦！我们的爬虫就可以运行起来啦!\n\n## 实战：爬取某网站整部漫画 ##\n话不多说，直接上代码\n![2020-03-14 20-05-24 的屏幕截图.png][1]\n你没有看错，只用了29行（这就或许是Python的魅力吧）\n原理也很简单\n\n 1. 查看是否存在文件夹image，没有则创建\n 2. 最外面的循环是章节循环，由于每一章网页url上面的数字是连起来的，简单的字符串拼接就可以遍历了\n 3. 再在image内创建一个名为章节号码的文件夹，用来存放图片\n 4. 首先请求一次，（注意这个get请求使用一个visitor_header的请求头，目的在于防止被反爬）\n 5. 这次请求获取当前章节的总页数，然后就可以遍历每一页啦\n 6. 再次get请求，使用css选择器获得符合要求的img的html元素（也就是漫画图片），再使用正则筛选出图片url（个人网站加个延时防止网站崩溃）\n 7. 最后按页数保存下来就大功告成啦！\n\n**最后运行的结果：**\n（爬了租借女友的23到27话做个示范）\n![2020-03-14 20-17-10 的屏幕截图.png][2]\n![2020-03-14 20-17-15 的屏幕截图.png][3]\n\n**爬虫真的是一种便捷获取网络数据的利器！\n但白嫖可耻，也请大家不要学习盗版行为！\n真的已经在哔哩哔哩漫画补过票了！(❤ ω ❤)**\n\n  [1]: /old_images/2020/03/340887529.png\n  [2]: /old_images/2020/03/999894680.png\n  [3]: /old_images/2020/03/3846485483.png\n","slug":"Python爬虫实战！","published":1,"updated":"2020-12-14T12:20:28.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0bt000j7p192zadfcor","content":"<p>老早就有闻爬虫的鼎鼎大名，但一直找不到合适的机会去试一试。正好前几天刚学习了Python的语法，拿爬虫练练手正合适，顺便在网上找到了漫画的资源正好下载下来看一看，省了我几个漫读券了，一举两得，美滋滋！</p>\n<h2 id=\"Python-requests库的基础使用\"><a href=\"#Python-requests库的基础使用\" class=\"headerlink\" title=\"Python requests库的基础使用\"></a>Python requests库的基础使用</h2><p>爬虫的原理十分简单，就是将程序模拟为浏览器，来快速地获取网络上的资源，包括文字、图片、音频、视频都能被爬取到，也可见即可爬！<br>那么怎样自动化地模拟浏览器进行网络请求呢，答案就是Python第三方库——requests，这个库功能十分强大，提供了get、post等多种http、https请求，我们可以很简单地利用requests库来模拟浏览器的动作。<br>get(url,headers = header)方法用于使用get方法发出一个请求（注意get方法的数据显式地存放在url中，因此我们只需要提供url即可），使用headers参数来提供请求头（也是防反爬最基本的方法之一）；<br>post(url,data = data,headers = header)方法类似，用来发出post请求，数据存放于data中（通常为JSON字符串格式）；</p>\n<p>这两个类得到的实例就包含了服务器获得请求后返回的响应，我们称之为response，通过respons的text与content方法，我们就可以获得返回的数据了，而这二者的区别是text方法以字符串形式返回，通常用于我们来做数据分析的，当然也可以用来保存文字内容；而content方法返回二进制数据，通常用于我们保存文件，文字、图片、音频、视频均可。<br>这样我们就通过requests库获得了网页的内容啦！</p>\n<h2 id=\"内容的保存\"><a href=\"#内容的保存\" class=\"headerlink\" title=\"内容的保存\"></a>内容的保存</h2><p>获得了内容之后我们要将保存为文件，Python的文件操作非常方便<br>使用：with open(filename,method) as f:<br>可以以method所定义的方法打开filename这个文件。一般我们用于保存文件的method就是”w”和”wb”两种，区别在于”w”使用文本形式保存文件，而”wb”使用二进制字节流形式保存文件，我们的多媒体文件以及可执行文件都是以这种形式保存的！<br>打开文件后，我们可以使用f.write(content)方法向文件写入内容，也就是之前我们得到的response.text或response.content，这样，从网络上爬取数据并保存的工作就完成了！</p>\n<h2 id=\"数据的筛选-正则re与parsel库\"><a href=\"#数据的筛选-正则re与parsel库\" class=\"headerlink\" title=\"数据的筛选 正则re与parsel库##\"></a>数据的筛选 正则re与parsel库##</h2><p>互联网上数据众多，为了能够筛选出我想要的内容，比如我们只想要漫画网站上面的图片而不想要底下的评论，我们还需要对获取的数据进行筛选，这该如何是好呢？<br>最简单粗暴的办法，我们可以使用Python正则表达式库re中的findall方法来匹配我们想要的内容<br>用法就是——re.findall(“style”,text)，其中style就是正则要匹配的内容，text就是所要匹配的数据，style中()内的内容就会被返回，这样我们能够简单地提取出我们想要的内容，比如图片url啊、小说标题和文本啊等等，但是由于网站的元素实在过多，我们可能会匹配到错误的内容，需要一种更高级智能的匹配手段！<br>parsel库向我们提供了三种匹配手段，re、xpath与css选择器，我这里就主要解释一下css选择器的使用<br>网页上的html元素都有着不同的css标签，可以通过css标签来选择出我们想要的元素。parsel提供了Selector(text)方法，实例使用css(css_selector).getall()的方法可以获取到所有匹配的元素内容，所以我们只需要知道这一系列元素所共同具有的css选择器就可以了。<br>同理，xpath也是html元素的属性，也可以由浏览器调试获得！我们不过多赘述（好吧其实是因为不会(*￣;(￣ *)）</p>\n<h2 id=\"批量爬取\"><a href=\"#批量爬取\" class=\"headerlink\" title=\"批量爬取\"></a>批量爬取</h2><p>刚刚我们只获取到一页内容的数据，如果我们想翻页，或者想去自动地爬另一个内容，怎么办呢？<br>批量爬取是一只爬虫必备的能力，做到批量爬取，其实就是获取下一个想爬的url在一个循环里来回爬就行啦，获取url成为了我们的首要目标<br>如何获取url呢？最简单粗暴的办法就是，观察网页变化的<br>如果下一页是一个超链接，那就简单了，获取到下一页的url即可<br>如果下一页是get请求，也没啥太大问题，使用get方法，模拟网页发出一个一模一样的请求就行，当然get请求也是包含在url里面的，我们也可以直接获取url<br>如果下一页是个AJAX请求（即动态地在同一个url下面显示不同内容），抱歉目前我还不太会（＞人＜；）<br>获取到下一页内容后，再把他们循环起来，重复上面的工作就行啦！我们的爬虫就可以运行起来啦!</p>\n<h2 id=\"实战：爬取某网站整部漫画\"><a href=\"#实战：爬取某网站整部漫画\" class=\"headerlink\" title=\"实战：爬取某网站整部漫画\"></a>实战：爬取某网站整部漫画</h2><p>话不多说，直接上代码<br><img src=\"/old_images/2020/03/340887529.png\" alt=\"2020-03-14 20-05-24 的屏幕截图.png\"><br>你没有看错，只用了29行（这就或许是Python的魅力吧）<br>原理也很简单</p>\n<ol>\n<li>查看是否存在文件夹image，没有则创建</li>\n<li>最外面的循环是章节循环，由于每一章网页url上面的数字是连起来的，简单的字符串拼接就可以遍历了</li>\n<li>再在image内创建一个名为章节号码的文件夹，用来存放图片</li>\n<li>首先请求一次，（注意这个get请求使用一个visitor_header的请求头，目的在于防止被反爬）</li>\n<li>这次请求获取当前章节的总页数，然后就可以遍历每一页啦</li>\n<li>再次get请求，使用css选择器获得符合要求的img的html元素（也就是漫画图片），再使用正则筛选出图片url（个人网站加个延时防止网站崩溃）</li>\n<li>最后按页数保存下来就大功告成啦！</li>\n</ol>\n<p><strong>最后运行的结果：</strong><br>（爬了租借女友的23到27话做个示范）<br><img src=\"/old_images/2020/03/999894680.png\" alt=\"2020-03-14 20-17-10 的屏幕截图.png\"><br><img src=\"/old_images/2020/03/3846485483.png\" alt=\"2020-03-14 20-17-15 的屏幕截图.png\"></p>\n<p><strong>爬虫真的是一种便捷获取网络数据的利器！<br>但白嫖可耻，也请大家不要学习盗版行为！<br>真的已经在哔哩哔哩漫画补过票了！(❤ ω ❤)</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>老早就有闻爬虫的鼎鼎大名，但一直找不到合适的机会去试一试。正好前几天刚学习了Python的语法，拿爬虫练练手正合适，顺便在网上找到了漫画的资源正好下载下来看一看，省了我几个漫读券了，一举两得，美滋滋！</p>\n<h2 id=\"Python-requests库的基础使用\"><a href=\"#Python-requests库的基础使用\" class=\"headerlink\" title=\"Python requests库的基础使用\"></a>Python requests库的基础使用</h2><p>爬虫的原理十分简单，就是将程序模拟为浏览器，来快速地获取网络上的资源，包括文字、图片、音频、视频都能被爬取到，也可见即可爬！<br>那么怎样自动化地模拟浏览器进行网络请求呢，答案就是Python第三方库——requests，这个库功能十分强大，提供了get、post等多种http、https请求，我们可以很简单地利用requests库来模拟浏览器的动作。<br>get(url,headers = header)方法用于使用get方法发出一个请求（注意get方法的数据显式地存放在url中，因此我们只需要提供url即可），使用headers参数来提供请求头（也是防反爬最基本的方法之一）；<br>post(url,data = data,headers = header)方法类似，用来发出post请求，数据存放于data中（通常为JSON字符串格式）；</p>\n<p>这两个类得到的实例就包含了服务器获得请求后返回的响应，我们称之为response，通过respons的text与content方法，我们就可以获得返回的数据了，而这二者的区别是text方法以字符串形式返回，通常用于我们来做数据分析的，当然也可以用来保存文字内容；而content方法返回二进制数据，通常用于我们保存文件，文字、图片、音频、视频均可。<br>这样我们就通过requests库获得了网页的内容啦！</p>\n<h2 id=\"内容的保存\"><a href=\"#内容的保存\" class=\"headerlink\" title=\"内容的保存\"></a>内容的保存</h2><p>获得了内容之后我们要将保存为文件，Python的文件操作非常方便<br>使用：with open(filename,method) as f:<br>可以以method所定义的方法打开filename这个文件。一般我们用于保存文件的method就是”w”和”wb”两种，区别在于”w”使用文本形式保存文件，而”wb”使用二进制字节流形式保存文件，我们的多媒体文件以及可执行文件都是以这种形式保存的！<br>打开文件后，我们可以使用f.write(content)方法向文件写入内容，也就是之前我们得到的response.text或response.content，这样，从网络上爬取数据并保存的工作就完成了！</p>\n<h2 id=\"数据的筛选-正则re与parsel库\"><a href=\"#数据的筛选-正则re与parsel库\" class=\"headerlink\" title=\"数据的筛选 正则re与parsel库##\"></a>数据的筛选 正则re与parsel库##</h2><p>互联网上数据众多，为了能够筛选出我想要的内容，比如我们只想要漫画网站上面的图片而不想要底下的评论，我们还需要对获取的数据进行筛选，这该如何是好呢？<br>最简单粗暴的办法，我们可以使用Python正则表达式库re中的findall方法来匹配我们想要的内容<br>用法就是——re.findall(“style”,text)，其中style就是正则要匹配的内容，text就是所要匹配的数据，style中()内的内容就会被返回，这样我们能够简单地提取出我们想要的内容，比如图片url啊、小说标题和文本啊等等，但是由于网站的元素实在过多，我们可能会匹配到错误的内容，需要一种更高级智能的匹配手段！<br>parsel库向我们提供了三种匹配手段，re、xpath与css选择器，我这里就主要解释一下css选择器的使用<br>网页上的html元素都有着不同的css标签，可以通过css标签来选择出我们想要的元素。parsel提供了Selector(text)方法，实例使用css(css_selector).getall()的方法可以获取到所有匹配的元素内容，所以我们只需要知道这一系列元素所共同具有的css选择器就可以了。<br>同理，xpath也是html元素的属性，也可以由浏览器调试获得！我们不过多赘述（好吧其实是因为不会(*￣;(￣ *)）</p>\n<h2 id=\"批量爬取\"><a href=\"#批量爬取\" class=\"headerlink\" title=\"批量爬取\"></a>批量爬取</h2><p>刚刚我们只获取到一页内容的数据，如果我们想翻页，或者想去自动地爬另一个内容，怎么办呢？<br>批量爬取是一只爬虫必备的能力，做到批量爬取，其实就是获取下一个想爬的url在一个循环里来回爬就行啦，获取url成为了我们的首要目标<br>如何获取url呢？最简单粗暴的办法就是，观察网页变化的<br>如果下一页是一个超链接，那就简单了，获取到下一页的url即可<br>如果下一页是get请求，也没啥太大问题，使用get方法，模拟网页发出一个一模一样的请求就行，当然get请求也是包含在url里面的，我们也可以直接获取url<br>如果下一页是个AJAX请求（即动态地在同一个url下面显示不同内容），抱歉目前我还不太会（＞人＜；）<br>获取到下一页内容后，再把他们循环起来，重复上面的工作就行啦！我们的爬虫就可以运行起来啦!</p>\n<h2 id=\"实战：爬取某网站整部漫画\"><a href=\"#实战：爬取某网站整部漫画\" class=\"headerlink\" title=\"实战：爬取某网站整部漫画\"></a>实战：爬取某网站整部漫画</h2><p>话不多说，直接上代码<br><img src=\"/old_images/2020/03/340887529.png\" alt=\"2020-03-14 20-05-24 的屏幕截图.png\"><br>你没有看错，只用了29行（这就或许是Python的魅力吧）<br>原理也很简单</p>\n<ol>\n<li>查看是否存在文件夹image，没有则创建</li>\n<li>最外面的循环是章节循环，由于每一章网页url上面的数字是连起来的，简单的字符串拼接就可以遍历了</li>\n<li>再在image内创建一个名为章节号码的文件夹，用来存放图片</li>\n<li>首先请求一次，（注意这个get请求使用一个visitor_header的请求头，目的在于防止被反爬）</li>\n<li>这次请求获取当前章节的总页数，然后就可以遍历每一页啦</li>\n<li>再次get请求，使用css选择器获得符合要求的img的html元素（也就是漫画图片），再使用正则筛选出图片url（个人网站加个延时防止网站崩溃）</li>\n<li>最后按页数保存下来就大功告成啦！</li>\n</ol>\n<p><strong>最后运行的结果：</strong><br>（爬了租借女友的23到27话做个示范）<br><img src=\"/old_images/2020/03/999894680.png\" alt=\"2020-03-14 20-17-10 的屏幕截图.png\"><br><img src=\"/old_images/2020/03/3846485483.png\" alt=\"2020-03-14 20-17-15 的屏幕截图.png\"></p>\n<p><strong>爬虫真的是一种便捷获取网络数据的利器！<br>但白嫖可耻，也请大家不要学习盗版行为！<br>真的已经在哔哩哔哩漫画补过票了！(❤ ω ❤)</strong></p>\n"},{"title":"ROS入门","date":"2020-08-28T06:08:00.000Z","toc":true,"_content":"进入大四，终于要开启我的ROS之旅。\n接触了几天ROS，越发发觉它的便利，今天来记录一下最基础的ROS操作。（大部分来自[ROS官网][1]，俗话说官网是学习的最佳路径）\n\n## ROS项目管理机制 ##\n\nROS使用Workspace+Package的方式来管理一个项目。比如以一个机器人为例，机器人的每一个功能（比如传感器数据接收，运动控制，导航感知，决策）都会对应一个Package，这些Package之间可能互相依赖，他们共同构成一个Workspace，就构成了这个机器人整体。\n从零开始构建一个项目，首先需要构建一个Workspace，使用：\n\n    $ mkdir -p ~/catkin_ws/src        #用来存放Package\n    $ cd ~/catkin_ws/\n    $ catkin_make\n在家目录构建一个空的，名为catkin_ws的Workspace，使用**catkin_make**可以自动生成一些所需的配置文件和目录（这个命令也充当着ROS管理工程中CMake的作用）。\n如果想让ROS命令认识这个包，需要把他的位置加入到环境变量中去，这时我们就需要使用source（用来执行命令行脚本）执行～/catkin_ws/devel/中的 setup.bash命令了。这时$ROS_PACKAGE_PATH变量就包含了我们的工作区/src/目录。\n如果想要使用官方的一些Package，他们的初始化脚本是/opt/ros/<distri>/setup.bash。（也可将其放入~/.bashrc中，在启动终端后自动执行）\n对ROS的Package的一些操作：\n\n    $ rospack find [package_name]\n    $ roscd [locationname[/subdir]]\n    $ roscd log\n    $ rosls [locationname[/subdir]]\n\n如何创建一个Package？\n一个Package由一个独立的文件夹内的package.xml和一个CMakeists.txt文件（以及其他必要文件）组成，如下所示：\n\n    workspace_folder/        -- WORKSPACE\n      src/                   -- SOURCE SPACE\n        CMakeLists.txt       -- 'Toplevel' CMake file, provided by catkin\n        package_1/\n          CMakeLists.txt     -- CMakeLists.txt file for package_1\n          package.xml        -- Package manifest for package_1\n        ...\n        package_n/\n          CMakeLists.txt     -- CMakeLists.txt file for package_n\n          package.xml        -- Package manifest for package_n\n如何自动创建这些文件？在~/catkin_ws/src目录中使用\n\n    $ catkin_create_pkg <package_name> [depend1] [depend2] [depend3]\n创建一个依赖于dependx的Package。\n使用\n\n    $ catkin_make\n    $ . ~/catkin_ws/devel/setup.bash\nbuild这个Workspace（内的所有Package），并且将其（内的所有Package）加入环境变量。\n\n这些Package都有着各自（直接）依赖的Package，catkin_create_pkg命令中的dependx会体现在package.xml中。\n直接的依赖Package使用以下命令查看：\n$ rospack depend1 [Package name]\n间接的依赖Package使用以下命令查看：\n$ rospack depends [Package name]\n对于你自己的项目，可以通过修改package.xml和CMakeLists.txt来进行定制化的操作。（详细略）\n\n就如同CMake管理的项目一样，ROS管理的项目使用catkin_make进行项目的编译构建。\n在～/catkin_ws/中使用：\n\n    $ catkin_make\n    $ catkin_make install  # (optionally)\n这个命令会build整个Workspace下的所有Package，与cmake命令有相同作用。\n\n## ROS通信机制 1##\n\nROS不仅为我们提供了一种项目管理的功能，还提供了一种便利的多进程通讯机制。\n要启用这个多进程通讯机制，首先我们要启动ROS内核，使用：\n\n    $ roscore\n这个roscore进程是ROS进程间通讯的核心，起到了中继站的作用。一切ROS应用都少不了它。\nROS中，node代表一个可以进行通讯的节点，使用以下命令查看node属性：\n\n    $ rosnode list\n    $ rosnode info /[node name]\n    $ rosnode ping /[node name]\n使用rosrun来运行一个Package中的node。\n\n    $ rosrun [package_name] [node_name]\n    $ rosrun turtlesim turtlesim_node __name:=my_turtle\nnode之间通讯是通过node-msg-topic机制，两个或多个node向同一个topic发送消息msg，并接收其他node的特定的消息msg，就能实现通讯。\n使用以下命令可以图形化查看当前运行中的node和topic：\n\n    $ rosrun rqt_graph rqt_graph\n为了查看运行中topic中传递的数据和一些其他信息，使用：\n\n    $ rostopic echo [topic]\n    $ rostopic list -h\n    $ rostopic list -v\n    $ rostopic type [topic]\n    $ rosmsg show [msg type]\n    $ rostopic hz\n    $ rosrun rqt_plot rqt_plot\n手动上传msg到指定的topic，使用：\n\n    $ rostopic pub [topic] [msg_type] [args]\n（注意，我们在命令行中使用的一些命令也是通过创建节点来实现功能的）\n\n## ROS通信机制 2##\n\n除了node-msg-topic的通信方式，我们还可以通过service实现通信。\nrosservice的基本使用方法：\n\n    $ rosservice list         print information about active services\n    $ rosservice call         call the service with the provided args\n    $ rosservice type         print service type\n    $ rosservice find         find services by service type\n    $ rosservice uri          print service ROSRPC uri\n\n总而言之，每个Package会包含一些service，使用rosservice call可以调用这些service（可以理解为调用方法），实现某些功能。\n\n使用rosparam可以存储某个Package参数，调整Package的功能：\n\n    $ rosparam set            set parameter\n    $ rosparam get            get parameter\n    $ rosparam load           load parameters from file\n    $ rosparam dump           dump parameters to file\n    $ rosparam delete         delete parameter\n    $ rosparam list           list parameter names\n\n使用图形化界面管理ROS，使用如下命令：\n\n    $ rosrun rqt_console rqt_console\n    $ rosrun rqt_logger_level rqt_logger_level\n\n使用.launch文件一键启动整个项目：\n\n    $ roslaunch [package] [filename.launch]\n\n    <launch>\n    \n      <group ns=\"turtlesim1\">\n        <node pkg=\"turtlesim\" name=\"sim\" type=\"turtlesim_node\"/>\n      </group>\n    \n      <group ns=\"turtlesim2\">\n        <node pkg=\"turtlesim\" name=\"sim\" type=\"turtlesim_node\"/>\n      </group>\n    \n      <node pkg=\"turtlesim\" name=\"mimic\" type=\"mimic\">\n        <remap from=\"input\" to=\"turtlesim1/turtle1\"/>\n        <remap from=\"output\" to=\"turtlesim2/turtle1\"/>\n      </node>\n    \n    </launch>\n\n使用rosed进行编辑：\n\n    $ rosed [package_name] [filename]\n\n创建Package_dir/msg/Num.msg文件，来规定传递的msg。\n创建Package_dir/srv/AddTwoInts.srv文件，来规定service的类型。\n（需要在package.xml和CMakeists.txt声明该文件）\n\n    $ rosmsg show [message type]\n    $ rosmsg -h\n    $ rossrv show <service type>\n\n最后，我们可以在C++程序中使用ROS的库来实现msg和service的操作。\n（对于我们添加的msg和srv，make后会自动生成对应的头文件，便于对其进行操作）\n\n    #include \"ros/ros.h\"\n    #include \"std_msgs/String.h\"\n    #include \"Package_dir/AddTwoInts.h\"\n\n  [1]: https://www.ros.org/\n\n\n\n","source":"_posts/ROS入门.md","raw":"title: ROS入门\ndate: 2020-08-28 14:08:00\ncategories: 工具\ntags: []\ntoc: true\n---\n进入大四，终于要开启我的ROS之旅。\n接触了几天ROS，越发发觉它的便利，今天来记录一下最基础的ROS操作。（大部分来自[ROS官网][1]，俗话说官网是学习的最佳路径）\n\n## ROS项目管理机制 ##\n\nROS使用Workspace+Package的方式来管理一个项目。比如以一个机器人为例，机器人的每一个功能（比如传感器数据接收，运动控制，导航感知，决策）都会对应一个Package，这些Package之间可能互相依赖，他们共同构成一个Workspace，就构成了这个机器人整体。\n从零开始构建一个项目，首先需要构建一个Workspace，使用：\n\n    $ mkdir -p ~/catkin_ws/src        #用来存放Package\n    $ cd ~/catkin_ws/\n    $ catkin_make\n在家目录构建一个空的，名为catkin_ws的Workspace，使用**catkin_make**可以自动生成一些所需的配置文件和目录（这个命令也充当着ROS管理工程中CMake的作用）。\n如果想让ROS命令认识这个包，需要把他的位置加入到环境变量中去，这时我们就需要使用source（用来执行命令行脚本）执行～/catkin_ws/devel/中的 setup.bash命令了。这时$ROS_PACKAGE_PATH变量就包含了我们的工作区/src/目录。\n如果想要使用官方的一些Package，他们的初始化脚本是/opt/ros/<distri>/setup.bash。（也可将其放入~/.bashrc中，在启动终端后自动执行）\n对ROS的Package的一些操作：\n\n    $ rospack find [package_name]\n    $ roscd [locationname[/subdir]]\n    $ roscd log\n    $ rosls [locationname[/subdir]]\n\n如何创建一个Package？\n一个Package由一个独立的文件夹内的package.xml和一个CMakeists.txt文件（以及其他必要文件）组成，如下所示：\n\n    workspace_folder/        -- WORKSPACE\n      src/                   -- SOURCE SPACE\n        CMakeLists.txt       -- 'Toplevel' CMake file, provided by catkin\n        package_1/\n          CMakeLists.txt     -- CMakeLists.txt file for package_1\n          package.xml        -- Package manifest for package_1\n        ...\n        package_n/\n          CMakeLists.txt     -- CMakeLists.txt file for package_n\n          package.xml        -- Package manifest for package_n\n如何自动创建这些文件？在~/catkin_ws/src目录中使用\n\n    $ catkin_create_pkg <package_name> [depend1] [depend2] [depend3]\n创建一个依赖于dependx的Package。\n使用\n\n    $ catkin_make\n    $ . ~/catkin_ws/devel/setup.bash\nbuild这个Workspace（内的所有Package），并且将其（内的所有Package）加入环境变量。\n\n这些Package都有着各自（直接）依赖的Package，catkin_create_pkg命令中的dependx会体现在package.xml中。\n直接的依赖Package使用以下命令查看：\n$ rospack depend1 [Package name]\n间接的依赖Package使用以下命令查看：\n$ rospack depends [Package name]\n对于你自己的项目，可以通过修改package.xml和CMakeLists.txt来进行定制化的操作。（详细略）\n\n就如同CMake管理的项目一样，ROS管理的项目使用catkin_make进行项目的编译构建。\n在～/catkin_ws/中使用：\n\n    $ catkin_make\n    $ catkin_make install  # (optionally)\n这个命令会build整个Workspace下的所有Package，与cmake命令有相同作用。\n\n## ROS通信机制 1##\n\nROS不仅为我们提供了一种项目管理的功能，还提供了一种便利的多进程通讯机制。\n要启用这个多进程通讯机制，首先我们要启动ROS内核，使用：\n\n    $ roscore\n这个roscore进程是ROS进程间通讯的核心，起到了中继站的作用。一切ROS应用都少不了它。\nROS中，node代表一个可以进行通讯的节点，使用以下命令查看node属性：\n\n    $ rosnode list\n    $ rosnode info /[node name]\n    $ rosnode ping /[node name]\n使用rosrun来运行一个Package中的node。\n\n    $ rosrun [package_name] [node_name]\n    $ rosrun turtlesim turtlesim_node __name:=my_turtle\nnode之间通讯是通过node-msg-topic机制，两个或多个node向同一个topic发送消息msg，并接收其他node的特定的消息msg，就能实现通讯。\n使用以下命令可以图形化查看当前运行中的node和topic：\n\n    $ rosrun rqt_graph rqt_graph\n为了查看运行中topic中传递的数据和一些其他信息，使用：\n\n    $ rostopic echo [topic]\n    $ rostopic list -h\n    $ rostopic list -v\n    $ rostopic type [topic]\n    $ rosmsg show [msg type]\n    $ rostopic hz\n    $ rosrun rqt_plot rqt_plot\n手动上传msg到指定的topic，使用：\n\n    $ rostopic pub [topic] [msg_type] [args]\n（注意，我们在命令行中使用的一些命令也是通过创建节点来实现功能的）\n\n## ROS通信机制 2##\n\n除了node-msg-topic的通信方式，我们还可以通过service实现通信。\nrosservice的基本使用方法：\n\n    $ rosservice list         print information about active services\n    $ rosservice call         call the service with the provided args\n    $ rosservice type         print service type\n    $ rosservice find         find services by service type\n    $ rosservice uri          print service ROSRPC uri\n\n总而言之，每个Package会包含一些service，使用rosservice call可以调用这些service（可以理解为调用方法），实现某些功能。\n\n使用rosparam可以存储某个Package参数，调整Package的功能：\n\n    $ rosparam set            set parameter\n    $ rosparam get            get parameter\n    $ rosparam load           load parameters from file\n    $ rosparam dump           dump parameters to file\n    $ rosparam delete         delete parameter\n    $ rosparam list           list parameter names\n\n使用图形化界面管理ROS，使用如下命令：\n\n    $ rosrun rqt_console rqt_console\n    $ rosrun rqt_logger_level rqt_logger_level\n\n使用.launch文件一键启动整个项目：\n\n    $ roslaunch [package] [filename.launch]\n\n    <launch>\n    \n      <group ns=\"turtlesim1\">\n        <node pkg=\"turtlesim\" name=\"sim\" type=\"turtlesim_node\"/>\n      </group>\n    \n      <group ns=\"turtlesim2\">\n        <node pkg=\"turtlesim\" name=\"sim\" type=\"turtlesim_node\"/>\n      </group>\n    \n      <node pkg=\"turtlesim\" name=\"mimic\" type=\"mimic\">\n        <remap from=\"input\" to=\"turtlesim1/turtle1\"/>\n        <remap from=\"output\" to=\"turtlesim2/turtle1\"/>\n      </node>\n    \n    </launch>\n\n使用rosed进行编辑：\n\n    $ rosed [package_name] [filename]\n\n创建Package_dir/msg/Num.msg文件，来规定传递的msg。\n创建Package_dir/srv/AddTwoInts.srv文件，来规定service的类型。\n（需要在package.xml和CMakeists.txt声明该文件）\n\n    $ rosmsg show [message type]\n    $ rosmsg -h\n    $ rossrv show <service type>\n\n最后，我们可以在C++程序中使用ROS的库来实现msg和service的操作。\n（对于我们添加的msg和srv，make后会自动生成对应的头文件，便于对其进行操作）\n\n    #include \"ros/ros.h\"\n    #include \"std_msgs/String.h\"\n    #include \"Package_dir/AddTwoInts.h\"\n\n  [1]: https://www.ros.org/\n\n\n\n","slug":"ROS入门","published":1,"updated":"2020-12-14T12:20:30.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0bu000l7p191gtodkcy","content":"<p>进入大四，终于要开启我的ROS之旅。<br>接触了几天ROS，越发发觉它的便利，今天来记录一下最基础的ROS操作。（大部分来自<a href=\"https://www.ros.org/\">ROS官网</a>，俗话说官网是学习的最佳路径）</p>\n<h2 id=\"ROS项目管理机制\"><a href=\"#ROS项目管理机制\" class=\"headerlink\" title=\"ROS项目管理机制\"></a>ROS项目管理机制</h2><p>ROS使用Workspace+Package的方式来管理一个项目。比如以一个机器人为例，机器人的每一个功能（比如传感器数据接收，运动控制，导航感知，决策）都会对应一个Package，这些Package之间可能互相依赖，他们共同构成一个Workspace，就构成了这个机器人整体。<br>从零开始构建一个项目，首先需要构建一个Workspace，使用：</p>\n<pre><code>$ mkdir -p ~/catkin_ws/src        #用来存放Package\n$ cd ~/catkin_ws/\n$ catkin_make</code></pre>\n<p>在家目录构建一个空的，名为catkin_ws的Workspace，使用<strong>catkin_make</strong>可以自动生成一些所需的配置文件和目录（这个命令也充当着ROS管理工程中CMake的作用）。<br>如果想让ROS命令认识这个包，需要把他的位置加入到环境变量中去，这时我们就需要使用source（用来执行命令行脚本）执行～/catkin_ws/devel/中的 setup.bash命令了。这时$ROS_PACKAGE_PATH变量就包含了我们的工作区/src/目录。<br>如果想要使用官方的一些Package，他们的初始化脚本是/opt/ros/<distri>/setup.bash。（也可将其放入~/.bashrc中，在启动终端后自动执行）<br>对ROS的Package的一些操作：</p>\n<pre><code>$ rospack find [package_name]\n$ roscd [locationname[/subdir]]\n$ roscd log\n$ rosls [locationname[/subdir]]</code></pre>\n<p>如何创建一个Package？<br>一个Package由一个独立的文件夹内的package.xml和一个CMakeists.txt文件（以及其他必要文件）组成，如下所示：</p>\n<pre><code>workspace_folder/        -- WORKSPACE\n  src/                   -- SOURCE SPACE\n    CMakeLists.txt       -- &#39;Toplevel&#39; CMake file, provided by catkin\n    package_1/\n      CMakeLists.txt     -- CMakeLists.txt file for package_1\n      package.xml        -- Package manifest for package_1\n    ...\n    package_n/\n      CMakeLists.txt     -- CMakeLists.txt file for package_n\n      package.xml        -- Package manifest for package_n</code></pre>\n<p>如何自动创建这些文件？在~/catkin_ws/src目录中使用</p>\n<pre><code>$ catkin_create_pkg &lt;package_name&gt; [depend1] [depend2] [depend3]</code></pre>\n<p>创建一个依赖于dependx的Package。<br>使用</p>\n<pre><code>$ catkin_make\n$ . ~/catkin_ws/devel/setup.bash</code></pre>\n<p>build这个Workspace（内的所有Package），并且将其（内的所有Package）加入环境变量。</p>\n<p>这些Package都有着各自（直接）依赖的Package，catkin_create_pkg命令中的dependx会体现在package.xml中。<br>直接的依赖Package使用以下命令查看：<br>$ rospack depend1 [Package name]<br>间接的依赖Package使用以下命令查看：<br>$ rospack depends [Package name]<br>对于你自己的项目，可以通过修改package.xml和CMakeLists.txt来进行定制化的操作。（详细略）</p>\n<p>就如同CMake管理的项目一样，ROS管理的项目使用catkin_make进行项目的编译构建。<br>在～/catkin_ws/中使用：</p>\n<pre><code>$ catkin_make\n$ catkin_make install  # (optionally)</code></pre>\n<p>这个命令会build整个Workspace下的所有Package，与cmake命令有相同作用。</p>\n<h2 id=\"ROS通信机制-1\"><a href=\"#ROS通信机制-1\" class=\"headerlink\" title=\"ROS通信机制 1##\"></a>ROS通信机制 1##</h2><p>ROS不仅为我们提供了一种项目管理的功能，还提供了一种便利的多进程通讯机制。<br>要启用这个多进程通讯机制，首先我们要启动ROS内核，使用：</p>\n<pre><code>$ roscore</code></pre>\n<p>这个roscore进程是ROS进程间通讯的核心，起到了中继站的作用。一切ROS应用都少不了它。<br>ROS中，node代表一个可以进行通讯的节点，使用以下命令查看node属性：</p>\n<pre><code>$ rosnode list\n$ rosnode info /[node name]\n$ rosnode ping /[node name]</code></pre>\n<p>使用rosrun来运行一个Package中的node。</p>\n<pre><code>$ rosrun [package_name] [node_name]\n$ rosrun turtlesim turtlesim_node __name:=my_turtle</code></pre>\n<p>node之间通讯是通过node-msg-topic机制，两个或多个node向同一个topic发送消息msg，并接收其他node的特定的消息msg，就能实现通讯。<br>使用以下命令可以图形化查看当前运行中的node和topic：</p>\n<pre><code>$ rosrun rqt_graph rqt_graph</code></pre>\n<p>为了查看运行中topic中传递的数据和一些其他信息，使用：</p>\n<pre><code>$ rostopic echo [topic]\n$ rostopic list -h\n$ rostopic list -v\n$ rostopic type [topic]\n$ rosmsg show [msg type]\n$ rostopic hz\n$ rosrun rqt_plot rqt_plot</code></pre>\n<p>手动上传msg到指定的topic，使用：</p>\n<pre><code>$ rostopic pub [topic] [msg_type] [args]</code></pre>\n<p>（注意，我们在命令行中使用的一些命令也是通过创建节点来实现功能的）</p>\n<h2 id=\"ROS通信机制-2\"><a href=\"#ROS通信机制-2\" class=\"headerlink\" title=\"ROS通信机制 2##\"></a>ROS通信机制 2##</h2><p>除了node-msg-topic的通信方式，我们还可以通过service实现通信。<br>rosservice的基本使用方法：</p>\n<pre><code>$ rosservice list         print information about active services\n$ rosservice call         call the service with the provided args\n$ rosservice type         print service type\n$ rosservice find         find services by service type\n$ rosservice uri          print service ROSRPC uri</code></pre>\n<p>总而言之，每个Package会包含一些service，使用rosservice call可以调用这些service（可以理解为调用方法），实现某些功能。</p>\n<p>使用rosparam可以存储某个Package参数，调整Package的功能：</p>\n<pre><code>$ rosparam set            set parameter\n$ rosparam get            get parameter\n$ rosparam load           load parameters from file\n$ rosparam dump           dump parameters to file\n$ rosparam delete         delete parameter\n$ rosparam list           list parameter names</code></pre>\n<p>使用图形化界面管理ROS，使用如下命令：</p>\n<pre><code>$ rosrun rqt_console rqt_console\n$ rosrun rqt_logger_level rqt_logger_level</code></pre>\n<p>使用.launch文件一键启动整个项目：</p>\n<pre><code>$ roslaunch [package] [filename.launch]\n\n&lt;launch&gt;\n\n  &lt;group ns=&quot;turtlesim1&quot;&gt;\n    &lt;node pkg=&quot;turtlesim&quot; name=&quot;sim&quot; type=&quot;turtlesim_node&quot;/&gt;\n  &lt;/group&gt;\n\n  &lt;group ns=&quot;turtlesim2&quot;&gt;\n    &lt;node pkg=&quot;turtlesim&quot; name=&quot;sim&quot; type=&quot;turtlesim_node&quot;/&gt;\n  &lt;/group&gt;\n\n  &lt;node pkg=&quot;turtlesim&quot; name=&quot;mimic&quot; type=&quot;mimic&quot;&gt;\n    &lt;remap from=&quot;input&quot; to=&quot;turtlesim1/turtle1&quot;/&gt;\n    &lt;remap from=&quot;output&quot; to=&quot;turtlesim2/turtle1&quot;/&gt;\n  &lt;/node&gt;\n\n&lt;/launch&gt;</code></pre>\n<p>使用rosed进行编辑：</p>\n<pre><code>$ rosed [package_name] [filename]</code></pre>\n<p>创建Package_dir/msg/Num.msg文件，来规定传递的msg。<br>创建Package_dir/srv/AddTwoInts.srv文件，来规定service的类型。<br>（需要在package.xml和CMakeists.txt声明该文件）</p>\n<pre><code>$ rosmsg show [message type]\n$ rosmsg -h\n$ rossrv show &lt;service type&gt;</code></pre>\n<p>最后，我们可以在C++程序中使用ROS的库来实现msg和service的操作。<br>（对于我们添加的msg和srv，make后会自动生成对应的头文件，便于对其进行操作）</p>\n<pre><code>#include &quot;ros/ros.h&quot;\n#include &quot;std_msgs/String.h&quot;\n#include &quot;Package_dir/AddTwoInts.h&quot;</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>进入大四，终于要开启我的ROS之旅。<br>接触了几天ROS，越发发觉它的便利，今天来记录一下最基础的ROS操作。（大部分来自<a href=\"https://www.ros.org/\">ROS官网</a>，俗话说官网是学习的最佳路径）</p>\n<h2 id=\"ROS项目管理机制\"><a href=\"#ROS项目管理机制\" class=\"headerlink\" title=\"ROS项目管理机制\"></a>ROS项目管理机制</h2><p>ROS使用Workspace+Package的方式来管理一个项目。比如以一个机器人为例，机器人的每一个功能（比如传感器数据接收，运动控制，导航感知，决策）都会对应一个Package，这些Package之间可能互相依赖，他们共同构成一个Workspace，就构成了这个机器人整体。<br>从零开始构建一个项目，首先需要构建一个Workspace，使用：</p>\n<pre><code>$ mkdir -p ~/catkin_ws/src        #用来存放Package\n$ cd ~/catkin_ws/\n$ catkin_make</code></pre>\n<p>在家目录构建一个空的，名为catkin_ws的Workspace，使用<strong>catkin_make</strong>可以自动生成一些所需的配置文件和目录（这个命令也充当着ROS管理工程中CMake的作用）。<br>如果想让ROS命令认识这个包，需要把他的位置加入到环境变量中去，这时我们就需要使用source（用来执行命令行脚本）执行～/catkin_ws/devel/中的 setup.bash命令了。这时$ROS_PACKAGE_PATH变量就包含了我们的工作区/src/目录。<br>如果想要使用官方的一些Package，他们的初始化脚本是/opt/ros/<distri>/setup.bash。（也可将其放入~/.bashrc中，在启动终端后自动执行）<br>对ROS的Package的一些操作：</p>\n<pre><code>$ rospack find [package_name]\n$ roscd [locationname[/subdir]]\n$ roscd log\n$ rosls [locationname[/subdir]]</code></pre>\n<p>如何创建一个Package？<br>一个Package由一个独立的文件夹内的package.xml和一个CMakeists.txt文件（以及其他必要文件）组成，如下所示：</p>\n<pre><code>workspace_folder/        -- WORKSPACE\n  src/                   -- SOURCE SPACE\n    CMakeLists.txt       -- &#39;Toplevel&#39; CMake file, provided by catkin\n    package_1/\n      CMakeLists.txt     -- CMakeLists.txt file for package_1\n      package.xml        -- Package manifest for package_1\n    ...\n    package_n/\n      CMakeLists.txt     -- CMakeLists.txt file for package_n\n      package.xml        -- Package manifest for package_n</code></pre>\n<p>如何自动创建这些文件？在~/catkin_ws/src目录中使用</p>\n<pre><code>$ catkin_create_pkg &lt;package_name&gt; [depend1] [depend2] [depend3]</code></pre>\n<p>创建一个依赖于dependx的Package。<br>使用</p>\n<pre><code>$ catkin_make\n$ . ~/catkin_ws/devel/setup.bash</code></pre>\n<p>build这个Workspace（内的所有Package），并且将其（内的所有Package）加入环境变量。</p>\n<p>这些Package都有着各自（直接）依赖的Package，catkin_create_pkg命令中的dependx会体现在package.xml中。<br>直接的依赖Package使用以下命令查看：<br>$ rospack depend1 [Package name]<br>间接的依赖Package使用以下命令查看：<br>$ rospack depends [Package name]<br>对于你自己的项目，可以通过修改package.xml和CMakeLists.txt来进行定制化的操作。（详细略）</p>\n<p>就如同CMake管理的项目一样，ROS管理的项目使用catkin_make进行项目的编译构建。<br>在～/catkin_ws/中使用：</p>\n<pre><code>$ catkin_make\n$ catkin_make install  # (optionally)</code></pre>\n<p>这个命令会build整个Workspace下的所有Package，与cmake命令有相同作用。</p>\n<h2 id=\"ROS通信机制-1\"><a href=\"#ROS通信机制-1\" class=\"headerlink\" title=\"ROS通信机制 1##\"></a>ROS通信机制 1##</h2><p>ROS不仅为我们提供了一种项目管理的功能，还提供了一种便利的多进程通讯机制。<br>要启用这个多进程通讯机制，首先我们要启动ROS内核，使用：</p>\n<pre><code>$ roscore</code></pre>\n<p>这个roscore进程是ROS进程间通讯的核心，起到了中继站的作用。一切ROS应用都少不了它。<br>ROS中，node代表一个可以进行通讯的节点，使用以下命令查看node属性：</p>\n<pre><code>$ rosnode list\n$ rosnode info /[node name]\n$ rosnode ping /[node name]</code></pre>\n<p>使用rosrun来运行一个Package中的node。</p>\n<pre><code>$ rosrun [package_name] [node_name]\n$ rosrun turtlesim turtlesim_node __name:=my_turtle</code></pre>\n<p>node之间通讯是通过node-msg-topic机制，两个或多个node向同一个topic发送消息msg，并接收其他node的特定的消息msg，就能实现通讯。<br>使用以下命令可以图形化查看当前运行中的node和topic：</p>\n<pre><code>$ rosrun rqt_graph rqt_graph</code></pre>\n<p>为了查看运行中topic中传递的数据和一些其他信息，使用：</p>\n<pre><code>$ rostopic echo [topic]\n$ rostopic list -h\n$ rostopic list -v\n$ rostopic type [topic]\n$ rosmsg show [msg type]\n$ rostopic hz\n$ rosrun rqt_plot rqt_plot</code></pre>\n<p>手动上传msg到指定的topic，使用：</p>\n<pre><code>$ rostopic pub [topic] [msg_type] [args]</code></pre>\n<p>（注意，我们在命令行中使用的一些命令也是通过创建节点来实现功能的）</p>\n<h2 id=\"ROS通信机制-2\"><a href=\"#ROS通信机制-2\" class=\"headerlink\" title=\"ROS通信机制 2##\"></a>ROS通信机制 2##</h2><p>除了node-msg-topic的通信方式，我们还可以通过service实现通信。<br>rosservice的基本使用方法：</p>\n<pre><code>$ rosservice list         print information about active services\n$ rosservice call         call the service with the provided args\n$ rosservice type         print service type\n$ rosservice find         find services by service type\n$ rosservice uri          print service ROSRPC uri</code></pre>\n<p>总而言之，每个Package会包含一些service，使用rosservice call可以调用这些service（可以理解为调用方法），实现某些功能。</p>\n<p>使用rosparam可以存储某个Package参数，调整Package的功能：</p>\n<pre><code>$ rosparam set            set parameter\n$ rosparam get            get parameter\n$ rosparam load           load parameters from file\n$ rosparam dump           dump parameters to file\n$ rosparam delete         delete parameter\n$ rosparam list           list parameter names</code></pre>\n<p>使用图形化界面管理ROS，使用如下命令：</p>\n<pre><code>$ rosrun rqt_console rqt_console\n$ rosrun rqt_logger_level rqt_logger_level</code></pre>\n<p>使用.launch文件一键启动整个项目：</p>\n<pre><code>$ roslaunch [package] [filename.launch]\n\n&lt;launch&gt;\n\n  &lt;group ns=&quot;turtlesim1&quot;&gt;\n    &lt;node pkg=&quot;turtlesim&quot; name=&quot;sim&quot; type=&quot;turtlesim_node&quot;/&gt;\n  &lt;/group&gt;\n\n  &lt;group ns=&quot;turtlesim2&quot;&gt;\n    &lt;node pkg=&quot;turtlesim&quot; name=&quot;sim&quot; type=&quot;turtlesim_node&quot;/&gt;\n  &lt;/group&gt;\n\n  &lt;node pkg=&quot;turtlesim&quot; name=&quot;mimic&quot; type=&quot;mimic&quot;&gt;\n    &lt;remap from=&quot;input&quot; to=&quot;turtlesim1/turtle1&quot;/&gt;\n    &lt;remap from=&quot;output&quot; to=&quot;turtlesim2/turtle1&quot;/&gt;\n  &lt;/node&gt;\n\n&lt;/launch&gt;</code></pre>\n<p>使用rosed进行编辑：</p>\n<pre><code>$ rosed [package_name] [filename]</code></pre>\n<p>创建Package_dir/msg/Num.msg文件，来规定传递的msg。<br>创建Package_dir/srv/AddTwoInts.srv文件，来规定service的类型。<br>（需要在package.xml和CMakeists.txt声明该文件）</p>\n<pre><code>$ rosmsg show [message type]\n$ rosmsg -h\n$ rossrv show &lt;service type&gt;</code></pre>\n<p>最后，我们可以在C++程序中使用ROS的库来实现msg和service的操作。<br>（对于我们添加的msg和srv，make后会自动生成对应的头文件，便于对其进行操作）</p>\n<pre><code>#include &quot;ros/ros.h&quot;\n#include &quot;std_msgs/String.h&quot;\n#include &quot;Package_dir/AddTwoInts.h&quot;</code></pre>\n"},{"title":"一个并不无聊的人的加入和调研","date":"2020-06-10T23:30:33.000Z","toc":true,"_content":"嗨！朋友们你们好。\n因为疫情，我们可能已经有半年没见了。也是因为疫情，好多同学开始开发研究新的技能，比如有些人去学了做饭，而闫栋宇这个B就去搞了个blog自己运营。\n当他第一次把网址发给我的时候，我还以为是个黄片网站，或者是那种，点开就，是吧，发出不可描述且不可关闭的声音的那种。\n他说是博客，自己做的blog，当时我的表情大概就像2018年他被抢了回来敲我门一样，满脸写着“忽悠”二字。\n但后来我还是点开了，心里想着万一是黄色网站，我也不亏（虎狼之词狗头保命）。结果发现真是一个blog，很真实，跟闫栋宇的风格有点不搭，除了满屏的二次元。但有什么事是他干不出来的呢？\n可能是新年新气象吧。\n之后的日子里，很偶尔的也打开看一眼，发现这家伙搞的这玩意儿有点东西哦。\n今天他来找我问了点有关磁场的事情，因为我是电机方向的，就胆战心惊地讲了讲，发现还行没讲错什么东西。\n他邀请我把这个过程记录下来做成像样的东西发到这个博客上来。我说害，我干嘛写这个，我写我擅长的不好吗。\n他说也行啊，很欢迎。\n于是我就来了——\n大家好，我是Captain，微信和QQ名字是5033，如果你加过我你就会知道我是谁。极其业余的轨道交通和民用航空爱好者，目前在准备同济大学轨交专业的夏令营和考研。收到闫栋宇的邀请，今天开始成为此blog的用户，VIP中P。\n我目前的专业是电气工程及其自动化，当然我就住在闫栋宇隔壁。如果顺利的话明年这个时候我就是同济的研究生了，铁道与轨道交通研究院或者磁浮中心的某个专业（可能是车辆/机械/交通/载具运用）。如果再顺利一些，可能考虑读个博再。\n所以我是很忙活的。之所以答应他来写这个，是因为我实在想在复习之余找点事情做。人不能总做一件事情，不然就会变傻。像闫栋宇那样，一直学习，就被劫匪盯上了。\n今天写这篇文章，是想调研一下各位闫栋宇的用户，也给他做个广告，大家有没有关于轨道交通或者民航方面想知道的东西，或者有没有坐火车坐地铁坐飞机（别跟我抬杠地铁轻轨什么的，这里就是个总称。具体的区别我应该也知道）的时候有什么看见觉得很神奇但又解释不了的事情，请在评论区留言，我会考虑写进我的投稿里。\n给大家提一些思路吧。比如，为什么铁路下面有的有石头有的没有，为什么地铁供电是直流的而高铁是交流的，为什么地铁起步的时候会有像防空警报一样的声音，为什么铁路还是不能完全的自动驾驶，为什么有的铁路旁边会有一个牌子，上面写着“断”或者“合”。再或者，为什么我的微信QQ名字叫5033，这个数字有什么梗，等等吧。欢迎大家多提问题，能解答的我写进文章里，解答不了的我就去研究。\n近期也在准备同济轨交的夏令营，这一个月期间会集中去看轨交的知识和专业英语，所以第一篇投稿应该不会很晚问世。\n如果写得好，我就问闫栋宇要一个专属标签。\n来吧。\n","source":"_posts/一个并不无聊的人的加入和调研.md","raw":"title: 一个并不无聊的人的加入和调研\ndate: 2020-06-11 07:30:33\ncategories: 日常\ntags: []\ntoc: true\n---\n嗨！朋友们你们好。\n因为疫情，我们可能已经有半年没见了。也是因为疫情，好多同学开始开发研究新的技能，比如有些人去学了做饭，而闫栋宇这个B就去搞了个blog自己运营。\n当他第一次把网址发给我的时候，我还以为是个黄片网站，或者是那种，点开就，是吧，发出不可描述且不可关闭的声音的那种。\n他说是博客，自己做的blog，当时我的表情大概就像2018年他被抢了回来敲我门一样，满脸写着“忽悠”二字。\n但后来我还是点开了，心里想着万一是黄色网站，我也不亏（虎狼之词狗头保命）。结果发现真是一个blog，很真实，跟闫栋宇的风格有点不搭，除了满屏的二次元。但有什么事是他干不出来的呢？\n可能是新年新气象吧。\n之后的日子里，很偶尔的也打开看一眼，发现这家伙搞的这玩意儿有点东西哦。\n今天他来找我问了点有关磁场的事情，因为我是电机方向的，就胆战心惊地讲了讲，发现还行没讲错什么东西。\n他邀请我把这个过程记录下来做成像样的东西发到这个博客上来。我说害，我干嘛写这个，我写我擅长的不好吗。\n他说也行啊，很欢迎。\n于是我就来了——\n大家好，我是Captain，微信和QQ名字是5033，如果你加过我你就会知道我是谁。极其业余的轨道交通和民用航空爱好者，目前在准备同济大学轨交专业的夏令营和考研。收到闫栋宇的邀请，今天开始成为此blog的用户，VIP中P。\n我目前的专业是电气工程及其自动化，当然我就住在闫栋宇隔壁。如果顺利的话明年这个时候我就是同济的研究生了，铁道与轨道交通研究院或者磁浮中心的某个专业（可能是车辆/机械/交通/载具运用）。如果再顺利一些，可能考虑读个博再。\n所以我是很忙活的。之所以答应他来写这个，是因为我实在想在复习之余找点事情做。人不能总做一件事情，不然就会变傻。像闫栋宇那样，一直学习，就被劫匪盯上了。\n今天写这篇文章，是想调研一下各位闫栋宇的用户，也给他做个广告，大家有没有关于轨道交通或者民航方面想知道的东西，或者有没有坐火车坐地铁坐飞机（别跟我抬杠地铁轻轨什么的，这里就是个总称。具体的区别我应该也知道）的时候有什么看见觉得很神奇但又解释不了的事情，请在评论区留言，我会考虑写进我的投稿里。\n给大家提一些思路吧。比如，为什么铁路下面有的有石头有的没有，为什么地铁供电是直流的而高铁是交流的，为什么地铁起步的时候会有像防空警报一样的声音，为什么铁路还是不能完全的自动驾驶，为什么有的铁路旁边会有一个牌子，上面写着“断”或者“合”。再或者，为什么我的微信QQ名字叫5033，这个数字有什么梗，等等吧。欢迎大家多提问题，能解答的我写进文章里，解答不了的我就去研究。\n近期也在准备同济轨交的夏令营，这一个月期间会集中去看轨交的知识和专业英语，所以第一篇投稿应该不会很晚问世。\n如果写得好，我就问闫栋宇要一个专属标签。\n来吧。\n","slug":"一个并不无聊的人的加入和调研","published":1,"updated":"2020-12-14T12:22:27.300Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0bv000o7p19djvn6xw1","content":"<p>嗨！朋友们你们好。<br>因为疫情，我们可能已经有半年没见了。也是因为疫情，好多同学开始开发研究新的技能，比如有些人去学了做饭，而闫栋宇这个B就去搞了个blog自己运营。<br>当他第一次把网址发给我的时候，我还以为是个黄片网站，或者是那种，点开就，是吧，发出不可描述且不可关闭的声音的那种。<br>他说是博客，自己做的blog，当时我的表情大概就像2018年他被抢了回来敲我门一样，满脸写着“忽悠”二字。<br>但后来我还是点开了，心里想着万一是黄色网站，我也不亏（虎狼之词狗头保命）。结果发现真是一个blog，很真实，跟闫栋宇的风格有点不搭，除了满屏的二次元。但有什么事是他干不出来的呢？<br>可能是新年新气象吧。<br>之后的日子里，很偶尔的也打开看一眼，发现这家伙搞的这玩意儿有点东西哦。<br>今天他来找我问了点有关磁场的事情，因为我是电机方向的，就胆战心惊地讲了讲，发现还行没讲错什么东西。<br>他邀请我把这个过程记录下来做成像样的东西发到这个博客上来。我说害，我干嘛写这个，我写我擅长的不好吗。<br>他说也行啊，很欢迎。<br>于是我就来了——<br>大家好，我是Captain，微信和QQ名字是5033，如果你加过我你就会知道我是谁。极其业余的轨道交通和民用航空爱好者，目前在准备同济大学轨交专业的夏令营和考研。收到闫栋宇的邀请，今天开始成为此blog的用户，VIP中P。<br>我目前的专业是电气工程及其自动化，当然我就住在闫栋宇隔壁。如果顺利的话明年这个时候我就是同济的研究生了，铁道与轨道交通研究院或者磁浮中心的某个专业（可能是车辆/机械/交通/载具运用）。如果再顺利一些，可能考虑读个博再。<br>所以我是很忙活的。之所以答应他来写这个，是因为我实在想在复习之余找点事情做。人不能总做一件事情，不然就会变傻。像闫栋宇那样，一直学习，就被劫匪盯上了。<br>今天写这篇文章，是想调研一下各位闫栋宇的用户，也给他做个广告，大家有没有关于轨道交通或者民航方面想知道的东西，或者有没有坐火车坐地铁坐飞机（别跟我抬杠地铁轻轨什么的，这里就是个总称。具体的区别我应该也知道）的时候有什么看见觉得很神奇但又解释不了的事情，请在评论区留言，我会考虑写进我的投稿里。<br>给大家提一些思路吧。比如，为什么铁路下面有的有石头有的没有，为什么地铁供电是直流的而高铁是交流的，为什么地铁起步的时候会有像防空警报一样的声音，为什么铁路还是不能完全的自动驾驶，为什么有的铁路旁边会有一个牌子，上面写着“断”或者“合”。再或者，为什么我的微信QQ名字叫5033，这个数字有什么梗，等等吧。欢迎大家多提问题，能解答的我写进文章里，解答不了的我就去研究。<br>近期也在准备同济轨交的夏令营，这一个月期间会集中去看轨交的知识和专业英语，所以第一篇投稿应该不会很晚问世。<br>如果写得好，我就问闫栋宇要一个专属标签。<br>来吧。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>嗨！朋友们你们好。<br>因为疫情，我们可能已经有半年没见了。也是因为疫情，好多同学开始开发研究新的技能，比如有些人去学了做饭，而闫栋宇这个B就去搞了个blog自己运营。<br>当他第一次把网址发给我的时候，我还以为是个黄片网站，或者是那种，点开就，是吧，发出不可描述且不可关闭的声音的那种。<br>他说是博客，自己做的blog，当时我的表情大概就像2018年他被抢了回来敲我门一样，满脸写着“忽悠”二字。<br>但后来我还是点开了，心里想着万一是黄色网站，我也不亏（虎狼之词狗头保命）。结果发现真是一个blog，很真实，跟闫栋宇的风格有点不搭，除了满屏的二次元。但有什么事是他干不出来的呢？<br>可能是新年新气象吧。<br>之后的日子里，很偶尔的也打开看一眼，发现这家伙搞的这玩意儿有点东西哦。<br>今天他来找我问了点有关磁场的事情，因为我是电机方向的，就胆战心惊地讲了讲，发现还行没讲错什么东西。<br>他邀请我把这个过程记录下来做成像样的东西发到这个博客上来。我说害，我干嘛写这个，我写我擅长的不好吗。<br>他说也行啊，很欢迎。<br>于是我就来了——<br>大家好，我是Captain，微信和QQ名字是5033，如果你加过我你就会知道我是谁。极其业余的轨道交通和民用航空爱好者，目前在准备同济大学轨交专业的夏令营和考研。收到闫栋宇的邀请，今天开始成为此blog的用户，VIP中P。<br>我目前的专业是电气工程及其自动化，当然我就住在闫栋宇隔壁。如果顺利的话明年这个时候我就是同济的研究生了，铁道与轨道交通研究院或者磁浮中心的某个专业（可能是车辆/机械/交通/载具运用）。如果再顺利一些，可能考虑读个博再。<br>所以我是很忙活的。之所以答应他来写这个，是因为我实在想在复习之余找点事情做。人不能总做一件事情，不然就会变傻。像闫栋宇那样，一直学习，就被劫匪盯上了。<br>今天写这篇文章，是想调研一下各位闫栋宇的用户，也给他做个广告，大家有没有关于轨道交通或者民航方面想知道的东西，或者有没有坐火车坐地铁坐飞机（别跟我抬杠地铁轻轨什么的，这里就是个总称。具体的区别我应该也知道）的时候有什么看见觉得很神奇但又解释不了的事情，请在评论区留言，我会考虑写进我的投稿里。<br>给大家提一些思路吧。比如，为什么铁路下面有的有石头有的没有，为什么地铁供电是直流的而高铁是交流的，为什么地铁起步的时候会有像防空警报一样的声音，为什么铁路还是不能完全的自动驾驶，为什么有的铁路旁边会有一个牌子，上面写着“断”或者“合”。再或者，为什么我的微信QQ名字叫5033，这个数字有什么梗，等等吧。欢迎大家多提问题，能解答的我写进文章里，解答不了的我就去研究。<br>近期也在准备同济轨交的夏令营，这一个月期间会集中去看轨交的知识和专业英语，所以第一篇投稿应该不会很晚问世。<br>如果写得好，我就问闫栋宇要一个专属标签。<br>来吧。</p>\n"},{"title":"中国加油！武汉加油！","date":"2020-04-04T00:32:51.000Z","toc":true,"_content":"![d37b7bcd2f0c4f03a00a8684eff7a87d.jpeg][1]\n特别敬佩那些奋战在抗疫一线的战士们，深刻缅怀那些在抗疫战场上逝去的英雄们。\n作为新时代的中国青年，我会更加努力，致敬时刻保卫中国的最可爱的人们，为祖国奉献自己的生命价值！\n我为我是中国人而自豪！\n\n\n  [1]: /old_images/2020/04/4165605798.jpeg\n","source":"_posts/中国加油！武汉加油！.md","raw":"title: 中国加油！武汉加油！\ndate: 2020-04-04 08:32:51\ncategories: 日常\ntags: []\ntoc: true\n---\n![d37b7bcd2f0c4f03a00a8684eff7a87d.jpeg][1]\n特别敬佩那些奋战在抗疫一线的战士们，深刻缅怀那些在抗疫战场上逝去的英雄们。\n作为新时代的中国青年，我会更加努力，致敬时刻保卫中国的最可爱的人们，为祖国奉献自己的生命价值！\n我为我是中国人而自豪！\n\n\n  [1]: /old_images/2020/04/4165605798.jpeg\n","slug":"中国加油！武汉加油！","published":1,"updated":"2020-12-14T12:22:31.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0bv000q7p19bnsu3mck","content":"<p><img src=\"/old_images/2020/04/4165605798.jpeg\" alt=\"d37b7bcd2f0c4f03a00a8684eff7a87d.jpeg\"><br>特别敬佩那些奋战在抗疫一线的战士们，深刻缅怀那些在抗疫战场上逝去的英雄们。<br>作为新时代的中国青年，我会更加努力，致敬时刻保卫中国的最可爱的人们，为祖国奉献自己的生命价值！<br>我为我是中国人而自豪！</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/old_images/2020/04/4165605798.jpeg\" alt=\"d37b7bcd2f0c4f03a00a8684eff7a87d.jpeg\"><br>特别敬佩那些奋战在抗疫一线的战士们，深刻缅怀那些在抗疫战场上逝去的英雄们。<br>作为新时代的中国青年，我会更加努力，致敬时刻保卫中国的最可爱的人们，为祖国奉献自己的生命价值！<br>我为我是中国人而自豪！</p>\n"},{"title":"从 最小二乘 到 最优化算法","date":"2020-05-06T22:30:00.000Z","toc":true,"_content":"在讲最小二乘之前我们先普及一下插值和拟合的含义\n\n## 插值与拟合 ##\n数值分析中，有两大利器在工程实际的数据处理中有着很重要的地位，它们就是**插值**和**拟合**。\n\n插值指的是对于已知的离散序列，使用**同时过这个序列中的点**的函数将其中间间隔的部分填充满，使任意一个点都有数值与其对应。\n最常见的一种应用就是，在图像处理领域中，对图像进行线性变换（如放缩、旋转、仿射变换或透视变换等）后，原来对应整数坐标上的像素点可能在新的图像中处于非整数坐标，若想要构建变换后的图像，就需要依据这些已知像素还原出整数坐标上的未知像素，这里就用到了插值。\n![Snipaste_2020-05-07_21-58-33.jpg][1]\n插值使用经过已知序列得函数填充中间部分\n\n同样是已知序列，若想要求得一个函数，能够最接近地表达出这个序列，但是**不要求这个函数经过这个序列中的任一个点**，这种方法就称作拟合。\n拟合也有着重要得工程价值，在神经网络、系统辨识等领域均有应用。\n下图展示了欠拟合、比较好的拟合和过拟合三种情况\n![Snipaste_2020-05-07_22-00-09.jpg][2]\n拟合使用不一定经过已知序列的函数表达已知序列\n\n## 最小二乘的原理 ##\n最小二乘法是一种很常用的**拟合**手段。上面提到了，拟合是寻找一个函数，能够**最接近地**表达出这个序列，最小二乘算法对这个**最接近地**下了一个定义，即均方误差最小。\n![Snipaste_2020-05-07_22-35-09.jpg][3]\n通过数学表达就是这个ε最小\n\n想要进行最小二乘，就先要知道想要拟合的目标函数是怎样的。对于一个有n个未知参数，n个自变量的函数f（这个函数应该是n个自变量对于n个未知参数的**线性**组合），我们进行n阶最小二乘，这时我们的序列数据也应该是n维的（若小于n维，则应该根据拟合函数中变量的变化方法对其进行变化）\n![Snipaste_2020-05-07_22-45-30.jpg][4]\n对非线性函数这样线性化\n\n这样一来，我们能够用矩阵方便的表示这个不存在的方程\n![Snipaste_2020-05-07_22-47-17.jpg][5]\nX是序列中m个n维点组成的矩阵，其中m应该大于n，否则方程可解或多解，也就没有拟合的必要了；\nβ是n维线性函数f的系数矩阵；\ny是m个n维点对应的纵坐标；\n三者满足关系：\n![Snipaste_2020-05-07_22-51-48.jpg][6]\n通过这个方程求出β即求出拟合函数就是我们的目标，但由于m>n，显然这个方程无解，我们根据最小二乘的条件*均方误差最小*，将等式相等换为一个要求更小的约束，即在β变化时，ε(β)取最小值。这样我们就将最小二乘法化简为一个求多元函数**极值点**的问题。\n高中数学我们就学过，一个函数极值一定出现在导数为0的情况下，我们对ε(β)求导使其等于0，得到：\n![Snipaste_2020-05-07_22-59-15.jpg][7]\n这个β_hat代表对β的最佳估计（观测）值。\n\n## 从另一个角度理解最小二乘 ##\n我们回到得到一个无解的矩阵方程这一步：\n![Snipaste_2020-05-07_22-51-48.jpg][8]\n无解，则代表着没有一组对于X向量组的线性组合能够表示y向量，本质上是由于y向量不在X矩阵的列空间中。但是，如果选择一个y'，使其是y在X矩阵列空间的投影，这样Xβ = y'就有解，我们也许就能最近似地**“求出”**这个方程组的解。利用向量投影的法则，我们得到了和上面方法同样的结果：\n![Snipaste_2020-05-07_22-59-15.jpg][9]\n数学真的很神奇！\n\n## 从 最小二乘 到 最优化（Optimal）算法 ##\n最优化算法是什么？最简单的理解，就是通过改变方法与参数，使得某个特定的代价函数（cost function）取地最小值（即代价最小），这样确定的参数，就是最优化系统中的最优解。\n最小二乘拟合的过程，也可以看作一个最优化问题，这个过程的代价函数就是ε(β)。类比推出，求取最优解的一个思路就是对代价函数求导，在其导数等于0的位置，就是代价函数的极值点，也就是可能的最优解。\n对于带有约束的问题，使用拉格朗日乘子法来解决\n拉格朗日乘子法本质上就是是：在满足约束条件时**梯度相等**的位置就是最优解。如下图：\n![Snipaste_2020-05-07_23-16-30.jpg][10]\n最优化问题是一个很深奥、很复杂的问题，但是从最小二乘切入来理解，也是一个不错的思路\n\n延申阅读：[凸优化][11]、[拉格朗日乘子][12]\n\n\n  [1]: /old_images/2020/05/2016954707.jpg\n  [2]: /old_images/2020/05/4249439680.jpg\n  [3]: /old_images/2020/05/805442062.jpg\n  [4]: /old_images/2020/05/4289012251.jpg\n  [5]: /old_images/2020/05/2166186195.jpg\n  [6]: /old_images/2020/05/1880372148.jpg\n  [7]: /old_images/2020/05/1760421220.jpg\n  [8]: /old_images/2020/05/1880372148.jpg\n  [9]: /old_images/2020/05/1760421220.jpg\n  [10]: /old_images/2020/05/10186376.jpg\n  [11]: https://blog.csdn.net/chan_cyx/article/details/80274747\n  [12]: https://www.zhihu.com/question/38586401\n","source":"_posts/从 最小二乘 到 最优化算法.md","raw":"title: 从 最小二乘 到 最优化算法\ndate: 2020-05-07 06:30:00\ncategories: 物数\ntags: []\ntoc: true\n---\n在讲最小二乘之前我们先普及一下插值和拟合的含义\n\n## 插值与拟合 ##\n数值分析中，有两大利器在工程实际的数据处理中有着很重要的地位，它们就是**插值**和**拟合**。\n\n插值指的是对于已知的离散序列，使用**同时过这个序列中的点**的函数将其中间间隔的部分填充满，使任意一个点都有数值与其对应。\n最常见的一种应用就是，在图像处理领域中，对图像进行线性变换（如放缩、旋转、仿射变换或透视变换等）后，原来对应整数坐标上的像素点可能在新的图像中处于非整数坐标，若想要构建变换后的图像，就需要依据这些已知像素还原出整数坐标上的未知像素，这里就用到了插值。\n![Snipaste_2020-05-07_21-58-33.jpg][1]\n插值使用经过已知序列得函数填充中间部分\n\n同样是已知序列，若想要求得一个函数，能够最接近地表达出这个序列，但是**不要求这个函数经过这个序列中的任一个点**，这种方法就称作拟合。\n拟合也有着重要得工程价值，在神经网络、系统辨识等领域均有应用。\n下图展示了欠拟合、比较好的拟合和过拟合三种情况\n![Snipaste_2020-05-07_22-00-09.jpg][2]\n拟合使用不一定经过已知序列的函数表达已知序列\n\n## 最小二乘的原理 ##\n最小二乘法是一种很常用的**拟合**手段。上面提到了，拟合是寻找一个函数，能够**最接近地**表达出这个序列，最小二乘算法对这个**最接近地**下了一个定义，即均方误差最小。\n![Snipaste_2020-05-07_22-35-09.jpg][3]\n通过数学表达就是这个ε最小\n\n想要进行最小二乘，就先要知道想要拟合的目标函数是怎样的。对于一个有n个未知参数，n个自变量的函数f（这个函数应该是n个自变量对于n个未知参数的**线性**组合），我们进行n阶最小二乘，这时我们的序列数据也应该是n维的（若小于n维，则应该根据拟合函数中变量的变化方法对其进行变化）\n![Snipaste_2020-05-07_22-45-30.jpg][4]\n对非线性函数这样线性化\n\n这样一来，我们能够用矩阵方便的表示这个不存在的方程\n![Snipaste_2020-05-07_22-47-17.jpg][5]\nX是序列中m个n维点组成的矩阵，其中m应该大于n，否则方程可解或多解，也就没有拟合的必要了；\nβ是n维线性函数f的系数矩阵；\ny是m个n维点对应的纵坐标；\n三者满足关系：\n![Snipaste_2020-05-07_22-51-48.jpg][6]\n通过这个方程求出β即求出拟合函数就是我们的目标，但由于m>n，显然这个方程无解，我们根据最小二乘的条件*均方误差最小*，将等式相等换为一个要求更小的约束，即在β变化时，ε(β)取最小值。这样我们就将最小二乘法化简为一个求多元函数**极值点**的问题。\n高中数学我们就学过，一个函数极值一定出现在导数为0的情况下，我们对ε(β)求导使其等于0，得到：\n![Snipaste_2020-05-07_22-59-15.jpg][7]\n这个β_hat代表对β的最佳估计（观测）值。\n\n## 从另一个角度理解最小二乘 ##\n我们回到得到一个无解的矩阵方程这一步：\n![Snipaste_2020-05-07_22-51-48.jpg][8]\n无解，则代表着没有一组对于X向量组的线性组合能够表示y向量，本质上是由于y向量不在X矩阵的列空间中。但是，如果选择一个y'，使其是y在X矩阵列空间的投影，这样Xβ = y'就有解，我们也许就能最近似地**“求出”**这个方程组的解。利用向量投影的法则，我们得到了和上面方法同样的结果：\n![Snipaste_2020-05-07_22-59-15.jpg][9]\n数学真的很神奇！\n\n## 从 最小二乘 到 最优化（Optimal）算法 ##\n最优化算法是什么？最简单的理解，就是通过改变方法与参数，使得某个特定的代价函数（cost function）取地最小值（即代价最小），这样确定的参数，就是最优化系统中的最优解。\n最小二乘拟合的过程，也可以看作一个最优化问题，这个过程的代价函数就是ε(β)。类比推出，求取最优解的一个思路就是对代价函数求导，在其导数等于0的位置，就是代价函数的极值点，也就是可能的最优解。\n对于带有约束的问题，使用拉格朗日乘子法来解决\n拉格朗日乘子法本质上就是是：在满足约束条件时**梯度相等**的位置就是最优解。如下图：\n![Snipaste_2020-05-07_23-16-30.jpg][10]\n最优化问题是一个很深奥、很复杂的问题，但是从最小二乘切入来理解，也是一个不错的思路\n\n延申阅读：[凸优化][11]、[拉格朗日乘子][12]\n\n\n  [1]: /old_images/2020/05/2016954707.jpg\n  [2]: /old_images/2020/05/4249439680.jpg\n  [3]: /old_images/2020/05/805442062.jpg\n  [4]: /old_images/2020/05/4289012251.jpg\n  [5]: /old_images/2020/05/2166186195.jpg\n  [6]: /old_images/2020/05/1880372148.jpg\n  [7]: /old_images/2020/05/1760421220.jpg\n  [8]: /old_images/2020/05/1880372148.jpg\n  [9]: /old_images/2020/05/1760421220.jpg\n  [10]: /old_images/2020/05/10186376.jpg\n  [11]: https://blog.csdn.net/chan_cyx/article/details/80274747\n  [12]: https://www.zhihu.com/question/38586401\n","slug":"从 最小二乘 到 最优化算法","published":1,"updated":"2020-12-14T12:20:55.158Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0bw000t7p191rrlhawc","content":"<p>在讲最小二乘之前我们先普及一下插值和拟合的含义</p>\n<h2 id=\"插值与拟合\"><a href=\"#插值与拟合\" class=\"headerlink\" title=\"插值与拟合\"></a>插值与拟合</h2><p>数值分析中，有两大利器在工程实际的数据处理中有着很重要的地位，它们就是<strong>插值</strong>和<strong>拟合</strong>。</p>\n<p>插值指的是对于已知的离散序列，使用<strong>同时过这个序列中的点</strong>的函数将其中间间隔的部分填充满，使任意一个点都有数值与其对应。<br>最常见的一种应用就是，在图像处理领域中，对图像进行线性变换（如放缩、旋转、仿射变换或透视变换等）后，原来对应整数坐标上的像素点可能在新的图像中处于非整数坐标，若想要构建变换后的图像，就需要依据这些已知像素还原出整数坐标上的未知像素，这里就用到了插值。<br><img src=\"/old_images/2020/05/2016954707.jpg\" alt=\"Snipaste_2020-05-07_21-58-33.jpg\"><br>插值使用经过已知序列得函数填充中间部分</p>\n<p>同样是已知序列，若想要求得一个函数，能够最接近地表达出这个序列，但是<strong>不要求这个函数经过这个序列中的任一个点</strong>，这种方法就称作拟合。<br>拟合也有着重要得工程价值，在神经网络、系统辨识等领域均有应用。<br>下图展示了欠拟合、比较好的拟合和过拟合三种情况<br><img src=\"/old_images/2020/05/4249439680.jpg\" alt=\"Snipaste_2020-05-07_22-00-09.jpg\"><br>拟合使用不一定经过已知序列的函数表达已知序列</p>\n<h2 id=\"最小二乘的原理\"><a href=\"#最小二乘的原理\" class=\"headerlink\" title=\"最小二乘的原理\"></a>最小二乘的原理</h2><p>最小二乘法是一种很常用的<strong>拟合</strong>手段。上面提到了，拟合是寻找一个函数，能够<strong>最接近地</strong>表达出这个序列，最小二乘算法对这个<strong>最接近地</strong>下了一个定义，即均方误差最小。<br><img src=\"/old_images/2020/05/805442062.jpg\" alt=\"Snipaste_2020-05-07_22-35-09.jpg\"><br>通过数学表达就是这个ε最小</p>\n<p>想要进行最小二乘，就先要知道想要拟合的目标函数是怎样的。对于一个有n个未知参数，n个自变量的函数f（这个函数应该是n个自变量对于n个未知参数的<strong>线性</strong>组合），我们进行n阶最小二乘，这时我们的序列数据也应该是n维的（若小于n维，则应该根据拟合函数中变量的变化方法对其进行变化）<br><img src=\"/old_images/2020/05/4289012251.jpg\" alt=\"Snipaste_2020-05-07_22-45-30.jpg\"><br>对非线性函数这样线性化</p>\n<p>这样一来，我们能够用矩阵方便的表示这个不存在的方程<br><img src=\"/old_images/2020/05/2166186195.jpg\" alt=\"Snipaste_2020-05-07_22-47-17.jpg\"><br>X是序列中m个n维点组成的矩阵，其中m应该大于n，否则方程可解或多解，也就没有拟合的必要了；<br>β是n维线性函数f的系数矩阵；<br>y是m个n维点对应的纵坐标；<br>三者满足关系：<br><img src=\"/old_images/2020/05/1880372148.jpg\" alt=\"Snipaste_2020-05-07_22-51-48.jpg\"><br>通过这个方程求出β即求出拟合函数就是我们的目标，但由于m&gt;n，显然这个方程无解，我们根据最小二乘的条件<em>均方误差最小</em>，将等式相等换为一个要求更小的约束，即在β变化时，ε(β)取最小值。这样我们就将最小二乘法化简为一个求多元函数<strong>极值点</strong>的问题。<br>高中数学我们就学过，一个函数极值一定出现在导数为0的情况下，我们对ε(β)求导使其等于0，得到：<br><img src=\"/old_images/2020/05/1760421220.jpg\" alt=\"Snipaste_2020-05-07_22-59-15.jpg\"><br>这个β_hat代表对β的最佳估计（观测）值。</p>\n<h2 id=\"从另一个角度理解最小二乘\"><a href=\"#从另一个角度理解最小二乘\" class=\"headerlink\" title=\"从另一个角度理解最小二乘\"></a>从另一个角度理解最小二乘</h2><p>我们回到得到一个无解的矩阵方程这一步：<br><img src=\"/old_images/2020/05/1880372148.jpg\" alt=\"Snipaste_2020-05-07_22-51-48.jpg\"><br>无解，则代表着没有一组对于X向量组的线性组合能够表示y向量，本质上是由于y向量不在X矩阵的列空间中。但是，如果选择一个y’，使其是y在X矩阵列空间的投影，这样Xβ = y’就有解，我们也许就能最近似地<strong>“求出”</strong>这个方程组的解。利用向量投影的法则，我们得到了和上面方法同样的结果：<br><img src=\"/old_images/2020/05/1760421220.jpg\" alt=\"Snipaste_2020-05-07_22-59-15.jpg\"><br>数学真的很神奇！</p>\n<h2 id=\"从-最小二乘-到-最优化（Optimal）算法\"><a href=\"#从-最小二乘-到-最优化（Optimal）算法\" class=\"headerlink\" title=\"从 最小二乘 到 最优化（Optimal）算法\"></a>从 最小二乘 到 最优化（Optimal）算法</h2><p>最优化算法是什么？最简单的理解，就是通过改变方法与参数，使得某个特定的代价函数（cost function）取地最小值（即代价最小），这样确定的参数，就是最优化系统中的最优解。<br>最小二乘拟合的过程，也可以看作一个最优化问题，这个过程的代价函数就是ε(β)。类比推出，求取最优解的一个思路就是对代价函数求导，在其导数等于0的位置，就是代价函数的极值点，也就是可能的最优解。<br>对于带有约束的问题，使用拉格朗日乘子法来解决<br>拉格朗日乘子法本质上就是是：在满足约束条件时<strong>梯度相等</strong>的位置就是最优解。如下图：<br><img src=\"/old_images/2020/05/10186376.jpg\" alt=\"Snipaste_2020-05-07_23-16-30.jpg\"><br>最优化问题是一个很深奥、很复杂的问题，但是从最小二乘切入来理解，也是一个不错的思路</p>\n<p>延申阅读：<a href=\"https://blog.csdn.net/chan_cyx/article/details/80274747\">凸优化</a>、<a href=\"https://www.zhihu.com/question/38586401\">拉格朗日乘子</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在讲最小二乘之前我们先普及一下插值和拟合的含义</p>\n<h2 id=\"插值与拟合\"><a href=\"#插值与拟合\" class=\"headerlink\" title=\"插值与拟合\"></a>插值与拟合</h2><p>数值分析中，有两大利器在工程实际的数据处理中有着很重要的地位，它们就是<strong>插值</strong>和<strong>拟合</strong>。</p>\n<p>插值指的是对于已知的离散序列，使用<strong>同时过这个序列中的点</strong>的函数将其中间间隔的部分填充满，使任意一个点都有数值与其对应。<br>最常见的一种应用就是，在图像处理领域中，对图像进行线性变换（如放缩、旋转、仿射变换或透视变换等）后，原来对应整数坐标上的像素点可能在新的图像中处于非整数坐标，若想要构建变换后的图像，就需要依据这些已知像素还原出整数坐标上的未知像素，这里就用到了插值。<br><img src=\"/old_images/2020/05/2016954707.jpg\" alt=\"Snipaste_2020-05-07_21-58-33.jpg\"><br>插值使用经过已知序列得函数填充中间部分</p>\n<p>同样是已知序列，若想要求得一个函数，能够最接近地表达出这个序列，但是<strong>不要求这个函数经过这个序列中的任一个点</strong>，这种方法就称作拟合。<br>拟合也有着重要得工程价值，在神经网络、系统辨识等领域均有应用。<br>下图展示了欠拟合、比较好的拟合和过拟合三种情况<br><img src=\"/old_images/2020/05/4249439680.jpg\" alt=\"Snipaste_2020-05-07_22-00-09.jpg\"><br>拟合使用不一定经过已知序列的函数表达已知序列</p>\n<h2 id=\"最小二乘的原理\"><a href=\"#最小二乘的原理\" class=\"headerlink\" title=\"最小二乘的原理\"></a>最小二乘的原理</h2><p>最小二乘法是一种很常用的<strong>拟合</strong>手段。上面提到了，拟合是寻找一个函数，能够<strong>最接近地</strong>表达出这个序列，最小二乘算法对这个<strong>最接近地</strong>下了一个定义，即均方误差最小。<br><img src=\"/old_images/2020/05/805442062.jpg\" alt=\"Snipaste_2020-05-07_22-35-09.jpg\"><br>通过数学表达就是这个ε最小</p>\n<p>想要进行最小二乘，就先要知道想要拟合的目标函数是怎样的。对于一个有n个未知参数，n个自变量的函数f（这个函数应该是n个自变量对于n个未知参数的<strong>线性</strong>组合），我们进行n阶最小二乘，这时我们的序列数据也应该是n维的（若小于n维，则应该根据拟合函数中变量的变化方法对其进行变化）<br><img src=\"/old_images/2020/05/4289012251.jpg\" alt=\"Snipaste_2020-05-07_22-45-30.jpg\"><br>对非线性函数这样线性化</p>\n<p>这样一来，我们能够用矩阵方便的表示这个不存在的方程<br><img src=\"/old_images/2020/05/2166186195.jpg\" alt=\"Snipaste_2020-05-07_22-47-17.jpg\"><br>X是序列中m个n维点组成的矩阵，其中m应该大于n，否则方程可解或多解，也就没有拟合的必要了；<br>β是n维线性函数f的系数矩阵；<br>y是m个n维点对应的纵坐标；<br>三者满足关系：<br><img src=\"/old_images/2020/05/1880372148.jpg\" alt=\"Snipaste_2020-05-07_22-51-48.jpg\"><br>通过这个方程求出β即求出拟合函数就是我们的目标，但由于m&gt;n，显然这个方程无解，我们根据最小二乘的条件<em>均方误差最小</em>，将等式相等换为一个要求更小的约束，即在β变化时，ε(β)取最小值。这样我们就将最小二乘法化简为一个求多元函数<strong>极值点</strong>的问题。<br>高中数学我们就学过，一个函数极值一定出现在导数为0的情况下，我们对ε(β)求导使其等于0，得到：<br><img src=\"/old_images/2020/05/1760421220.jpg\" alt=\"Snipaste_2020-05-07_22-59-15.jpg\"><br>这个β_hat代表对β的最佳估计（观测）值。</p>\n<h2 id=\"从另一个角度理解最小二乘\"><a href=\"#从另一个角度理解最小二乘\" class=\"headerlink\" title=\"从另一个角度理解最小二乘\"></a>从另一个角度理解最小二乘</h2><p>我们回到得到一个无解的矩阵方程这一步：<br><img src=\"/old_images/2020/05/1880372148.jpg\" alt=\"Snipaste_2020-05-07_22-51-48.jpg\"><br>无解，则代表着没有一组对于X向量组的线性组合能够表示y向量，本质上是由于y向量不在X矩阵的列空间中。但是，如果选择一个y’，使其是y在X矩阵列空间的投影，这样Xβ = y’就有解，我们也许就能最近似地<strong>“求出”</strong>这个方程组的解。利用向量投影的法则，我们得到了和上面方法同样的结果：<br><img src=\"/old_images/2020/05/1760421220.jpg\" alt=\"Snipaste_2020-05-07_22-59-15.jpg\"><br>数学真的很神奇！</p>\n<h2 id=\"从-最小二乘-到-最优化（Optimal）算法\"><a href=\"#从-最小二乘-到-最优化（Optimal）算法\" class=\"headerlink\" title=\"从 最小二乘 到 最优化（Optimal）算法\"></a>从 最小二乘 到 最优化（Optimal）算法</h2><p>最优化算法是什么？最简单的理解，就是通过改变方法与参数，使得某个特定的代价函数（cost function）取地最小值（即代价最小），这样确定的参数，就是最优化系统中的最优解。<br>最小二乘拟合的过程，也可以看作一个最优化问题，这个过程的代价函数就是ε(β)。类比推出，求取最优解的一个思路就是对代价函数求导，在其导数等于0的位置，就是代价函数的极值点，也就是可能的最优解。<br>对于带有约束的问题，使用拉格朗日乘子法来解决<br>拉格朗日乘子法本质上就是是：在满足约束条件时<strong>梯度相等</strong>的位置就是最优解。如下图：<br><img src=\"/old_images/2020/05/10186376.jpg\" alt=\"Snipaste_2020-05-07_23-16-30.jpg\"><br>最优化问题是一个很深奥、很复杂的问题，但是从最小二乘切入来理解，也是一个不错的思路</p>\n<p>延申阅读：<a href=\"https://blog.csdn.net/chan_cyx/article/details/80274747\">凸优化</a>、<a href=\"https://www.zhihu.com/question/38586401\">拉格朗日乘子</a></p>\n"},{"title":"从双网卡——到路由表","date":"2020-08-13T02:18:00.000Z","toc":true,"_content":"现在的电脑一般都拥有双网卡，但这是否是一件好事呢？对于某些小白来说，可能并不是（比如我(●ˇ∀ˇ●)）。\n\n发现问题\n----\n拿到刚到手的树莓派，首先要做的肯定是配环境！但是在VNC连接树莓派时遇到了问题：\n当我使用WIFI连接树莓派时，由于带宽限制，界面很卡，影响体验。\n当我使用有线连接树莓派时，由于有线网卡的优先级高于无线网卡，导致树莓派只能浏览内网（也就是我笔记本的网络），如果使用笔记本共享外网的话只能使用DHCP自动分配IP，这样则会导致IP变化不方便我们连接 树莓派。\n但是我明明有一个无线网卡连接外网啊！！！怎样才能把它利用起来，成了我要解决的问题。\n\n原理探究\n----\n找了好久，终于发现了路由表这个神奇的东西，\n[百度百科][1]这样说道：\n在计算机网络中，路由表（routing table）或称路由择域信息库（RIB, Routing Information Base），是一个存储在**路由器**或者**联网计算机**中的电子表格（文件）或类数据库。路由表存储着指向特定网络地址的路径（在有些情况下，还记录有路径的路由度量值）。路由表中含有网络周边的拓扑信息。路由表建立的主要目标是为了实现路由协议和静态路由选择。\n\n简单来讲，路由表可以规定发往何处的信息使用哪一个路由，也就是决定要发出的信息（对于计算机）或收到的信息（对于路由器）的下一跳是哪里。\n\n在linux中配置路由表很简单，因为它全部被集成到了route这一个指令中。\n首先我们来看路由表长什么样。\n拿我的服务器举例，在终端中输入（sudo）route，可以看到：\n![Snipaste_2020-08-13_17-38-05.jpg][2]\n其中Destination表示目标的IP地址；\nGateway表示选择下一跳网关IP地址（所有跨网段传输的信息均需要通过该网段的网关传输）；\nGenMask代表掩码，用于确定一个网段；\nFlags是用于区分的标志位；\nIface是网卡设备的名称（可以使用（sudo）ifconfig来查看）；\n![Snipaste_2020-08-13_17-44-12.jpg][3]\nFlags标志位确定了一系列的路由类型，主要有以下几种：\n**主机路由：**\n顾名思义，主机路由表示单独指向某个特定主机（IP）的路由，所有目标为该主机的信息都发送到所设定的网关，同时也确定了用哪个网卡设备传输信息。\n主机路由除了Flags的区别，最明显的特征就是它的Destination是一个完整的IP地址，并且它的GenMask是255.255.255.255。这说明了它的目标不是一个网络而是一个特定的主机（IP）。\n\n----------\n\n**网络路由：**\n理解了主机路由 在来理解网络路由并不是很难。网络路由指向一个特定的网段，因此它的GenMask不全是 1（比如是255.255.0.0）。它的Destination中也包含0（比如192.168.0.0），0的含义就是任意，这个网段表示整个192.168.*.*的网络。\n同理，所有目标为该网络的信息都发送到所设定的网关。\n\n----------\n\n**默认路由：**\n剩下最简单的就是默认路由了，没有特殊指明的主机（IP），就发送到默认路由设定的网关。默认路由最明显的特征是它的Destination是default，GenMask是0.0.0.0（表示全部网段）。\n\n想要改变路由表，就要使用route命令，它的基本操作如下：\n\n添加路由：route add\n 1. route add -host 192.168.1.2 dev eth0 添加设备eth0为主机路由，主机IP为192.168.1.2\n 2. route add -host 10.20.30.148 gw 10.20.30.40 添加网关10.20.30.40为主机路由\n 3. route add -net 10.20.30.40 netmask 255.255.255.248 eth0 添加网络路由，网段为255.255.255.248 \n 4. route add -net 10.20.30.48 netmask 255.255.255.248 gw 10.20.30.41 同上，使用网关添加\n 5. route add -net 192.168.1.0/24 eth1 添加网络路由，使用目标IP段/MASK位数形式\n 6. route add default gw 192.168.1.1 添加默认路由\n\n删除路由：route del\n 1. route del -host 192.168.1.2 dev eth0 原理同上\n 2. route del -host 10.20.30.148 gw 10.20.30.40\n 3. route del -net 10.20.30.40 netmask 255.255.255.248 eth0\n 4. route del -net 10.20.30.48 netmask 255.255.255.248 gw 10.20.30.41\n 5. route del -net 192.168.1.0/24 eth1\n 6. route del default gw 192.168.1.1\n\n解决问题\n----\n了解了基础知识，我们来解决一下实际问题！\n首先删除所有默认网关：\n\n    # sudo route del default gw 192.168.20.1\n    # sudo route del default gw 192.168.21.1\n\n添加eth0（有线网卡）仅进行内网访问，即仅在Destination为192.168.*.*的时候使用它。\n\n    # sudo route add -net 192.168.0.0 netmask 255.255.0.0 eth0（或gw 192.168.21.1）\n\n添加wlan0（无线网卡）进行全网络的访问，即在非内网情况下，使用wlan0进行访问。\n\n    # sudo route add default wlan0（或gw 192.168.20.1）\n\n需要注意的是，如果使用网关确定，需要设置两个网卡的 默认网关不同；\n这样设置还有一个弊端就是在访问外网时不能使用有线网卡，可能在没有WiFi的情况下还需要切换。\n\n这样设置下来，双网卡内外分工就大功告成了！\n\n\n\n\n  [1]: https://baike.baidu.com/item/%E8%B7%AF%E7%94%B1%E8%A1%A8\n  [2]: /old_images/2020/08/75184131.jpg\n  [3]: /old_images/2020/08/1049549032.jpg\n","source":"_posts/从双网卡——到路由表.md","raw":"title: 从双网卡——到路由表\ndate: 2020-08-13 10:18:00\ncategories: 网络\ntags: []\ntoc: true\n---\n现在的电脑一般都拥有双网卡，但这是否是一件好事呢？对于某些小白来说，可能并不是（比如我(●ˇ∀ˇ●)）。\n\n发现问题\n----\n拿到刚到手的树莓派，首先要做的肯定是配环境！但是在VNC连接树莓派时遇到了问题：\n当我使用WIFI连接树莓派时，由于带宽限制，界面很卡，影响体验。\n当我使用有线连接树莓派时，由于有线网卡的优先级高于无线网卡，导致树莓派只能浏览内网（也就是我笔记本的网络），如果使用笔记本共享外网的话只能使用DHCP自动分配IP，这样则会导致IP变化不方便我们连接 树莓派。\n但是我明明有一个无线网卡连接外网啊！！！怎样才能把它利用起来，成了我要解决的问题。\n\n原理探究\n----\n找了好久，终于发现了路由表这个神奇的东西，\n[百度百科][1]这样说道：\n在计算机网络中，路由表（routing table）或称路由择域信息库（RIB, Routing Information Base），是一个存储在**路由器**或者**联网计算机**中的电子表格（文件）或类数据库。路由表存储着指向特定网络地址的路径（在有些情况下，还记录有路径的路由度量值）。路由表中含有网络周边的拓扑信息。路由表建立的主要目标是为了实现路由协议和静态路由选择。\n\n简单来讲，路由表可以规定发往何处的信息使用哪一个路由，也就是决定要发出的信息（对于计算机）或收到的信息（对于路由器）的下一跳是哪里。\n\n在linux中配置路由表很简单，因为它全部被集成到了route这一个指令中。\n首先我们来看路由表长什么样。\n拿我的服务器举例，在终端中输入（sudo）route，可以看到：\n![Snipaste_2020-08-13_17-38-05.jpg][2]\n其中Destination表示目标的IP地址；\nGateway表示选择下一跳网关IP地址（所有跨网段传输的信息均需要通过该网段的网关传输）；\nGenMask代表掩码，用于确定一个网段；\nFlags是用于区分的标志位；\nIface是网卡设备的名称（可以使用（sudo）ifconfig来查看）；\n![Snipaste_2020-08-13_17-44-12.jpg][3]\nFlags标志位确定了一系列的路由类型，主要有以下几种：\n**主机路由：**\n顾名思义，主机路由表示单独指向某个特定主机（IP）的路由，所有目标为该主机的信息都发送到所设定的网关，同时也确定了用哪个网卡设备传输信息。\n主机路由除了Flags的区别，最明显的特征就是它的Destination是一个完整的IP地址，并且它的GenMask是255.255.255.255。这说明了它的目标不是一个网络而是一个特定的主机（IP）。\n\n----------\n\n**网络路由：**\n理解了主机路由 在来理解网络路由并不是很难。网络路由指向一个特定的网段，因此它的GenMask不全是 1（比如是255.255.0.0）。它的Destination中也包含0（比如192.168.0.0），0的含义就是任意，这个网段表示整个192.168.*.*的网络。\n同理，所有目标为该网络的信息都发送到所设定的网关。\n\n----------\n\n**默认路由：**\n剩下最简单的就是默认路由了，没有特殊指明的主机（IP），就发送到默认路由设定的网关。默认路由最明显的特征是它的Destination是default，GenMask是0.0.0.0（表示全部网段）。\n\n想要改变路由表，就要使用route命令，它的基本操作如下：\n\n添加路由：route add\n 1. route add -host 192.168.1.2 dev eth0 添加设备eth0为主机路由，主机IP为192.168.1.2\n 2. route add -host 10.20.30.148 gw 10.20.30.40 添加网关10.20.30.40为主机路由\n 3. route add -net 10.20.30.40 netmask 255.255.255.248 eth0 添加网络路由，网段为255.255.255.248 \n 4. route add -net 10.20.30.48 netmask 255.255.255.248 gw 10.20.30.41 同上，使用网关添加\n 5. route add -net 192.168.1.0/24 eth1 添加网络路由，使用目标IP段/MASK位数形式\n 6. route add default gw 192.168.1.1 添加默认路由\n\n删除路由：route del\n 1. route del -host 192.168.1.2 dev eth0 原理同上\n 2. route del -host 10.20.30.148 gw 10.20.30.40\n 3. route del -net 10.20.30.40 netmask 255.255.255.248 eth0\n 4. route del -net 10.20.30.48 netmask 255.255.255.248 gw 10.20.30.41\n 5. route del -net 192.168.1.0/24 eth1\n 6. route del default gw 192.168.1.1\n\n解决问题\n----\n了解了基础知识，我们来解决一下实际问题！\n首先删除所有默认网关：\n\n    # sudo route del default gw 192.168.20.1\n    # sudo route del default gw 192.168.21.1\n\n添加eth0（有线网卡）仅进行内网访问，即仅在Destination为192.168.*.*的时候使用它。\n\n    # sudo route add -net 192.168.0.0 netmask 255.255.0.0 eth0（或gw 192.168.21.1）\n\n添加wlan0（无线网卡）进行全网络的访问，即在非内网情况下，使用wlan0进行访问。\n\n    # sudo route add default wlan0（或gw 192.168.20.1）\n\n需要注意的是，如果使用网关确定，需要设置两个网卡的 默认网关不同；\n这样设置还有一个弊端就是在访问外网时不能使用有线网卡，可能在没有WiFi的情况下还需要切换。\n\n这样设置下来，双网卡内外分工就大功告成了！\n\n\n\n\n  [1]: https://baike.baidu.com/item/%E8%B7%AF%E7%94%B1%E8%A1%A8\n  [2]: /old_images/2020/08/75184131.jpg\n  [3]: /old_images/2020/08/1049549032.jpg\n","slug":"从双网卡——到路由表","published":1,"updated":"2020-12-14T12:20:48.906Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0bx000u7p19dvv422k8","content":"<p>现在的电脑一般都拥有双网卡，但这是否是一件好事呢？对于某些小白来说，可能并不是（比如我(●ˇ∀ˇ●)）。</p>\n<h2 id=\"发现问题\"><a href=\"#发现问题\" class=\"headerlink\" title=\"发现问题\"></a>发现问题</h2><p>拿到刚到手的树莓派，首先要做的肯定是配环境！但是在VNC连接树莓派时遇到了问题：<br>当我使用WIFI连接树莓派时，由于带宽限制，界面很卡，影响体验。<br>当我使用有线连接树莓派时，由于有线网卡的优先级高于无线网卡，导致树莓派只能浏览内网（也就是我笔记本的网络），如果使用笔记本共享外网的话只能使用DHCP自动分配IP，这样则会导致IP变化不方便我们连接 树莓派。<br>但是我明明有一个无线网卡连接外网啊！！！怎样才能把它利用起来，成了我要解决的问题。</p>\n<h2 id=\"原理探究\"><a href=\"#原理探究\" class=\"headerlink\" title=\"原理探究\"></a>原理探究</h2><p>找了好久，终于发现了路由表这个神奇的东西，<br><a href=\"https://baike.baidu.com/item/%E8%B7%AF%E7%94%B1%E8%A1%A8\">百度百科</a>这样说道：<br>在计算机网络中，路由表（routing table）或称路由择域信息库（RIB, Routing Information Base），是一个存储在<strong>路由器</strong>或者<strong>联网计算机</strong>中的电子表格（文件）或类数据库。路由表存储着指向特定网络地址的路径（在有些情况下，还记录有路径的路由度量值）。路由表中含有网络周边的拓扑信息。路由表建立的主要目标是为了实现路由协议和静态路由选择。</p>\n<p>简单来讲，路由表可以规定发往何处的信息使用哪一个路由，也就是决定要发出的信息（对于计算机）或收到的信息（对于路由器）的下一跳是哪里。</p>\n<p>在linux中配置路由表很简单，因为它全部被集成到了route这一个指令中。<br>首先我们来看路由表长什么样。<br>拿我的服务器举例，在终端中输入（sudo）route，可以看到：<br><img src=\"/old_images/2020/08/75184131.jpg\" alt=\"Snipaste_2020-08-13_17-38-05.jpg\"><br>其中Destination表示目标的IP地址；<br>Gateway表示选择下一跳网关IP地址（所有跨网段传输的信息均需要通过该网段的网关传输）；<br>GenMask代表掩码，用于确定一个网段；<br>Flags是用于区分的标志位；<br>Iface是网卡设备的名称（可以使用（sudo）ifconfig来查看）；<br><img src=\"/old_images/2020/08/1049549032.jpg\" alt=\"Snipaste_2020-08-13_17-44-12.jpg\"><br>Flags标志位确定了一系列的路由类型，主要有以下几种：<br><strong>主机路由：</strong><br>顾名思义，主机路由表示单独指向某个特定主机（IP）的路由，所有目标为该主机的信息都发送到所设定的网关，同时也确定了用哪个网卡设备传输信息。<br>主机路由除了Flags的区别，最明显的特征就是它的Destination是一个完整的IP地址，并且它的GenMask是255.255.255.255。这说明了它的目标不是一个网络而是一个特定的主机（IP）。</p>\n<hr>\n<p><strong>网络路由：</strong><br>理解了主机路由 在来理解网络路由并不是很难。网络路由指向一个特定的网段，因此它的GenMask不全是 1（比如是255.255.0.0）。它的Destination中也包含0（比如192.168.0.0），0的含义就是任意，这个网段表示整个192.168.*.*的网络。<br>同理，所有目标为该网络的信息都发送到所设定的网关。</p>\n<hr>\n<p><strong>默认路由：</strong><br>剩下最简单的就是默认路由了，没有特殊指明的主机（IP），就发送到默认路由设定的网关。默认路由最明显的特征是它的Destination是default，GenMask是0.0.0.0（表示全部网段）。</p>\n<p>想要改变路由表，就要使用route命令，它的基本操作如下：</p>\n<p>添加路由：route add</p>\n<ol>\n<li>route add -host 192.168.1.2 dev eth0 添加设备eth0为主机路由，主机IP为192.168.1.2</li>\n<li>route add -host 10.20.30.148 gw 10.20.30.40 添加网关10.20.30.40为主机路由</li>\n<li>route add -net 10.20.30.40 netmask 255.255.255.248 eth0 添加网络路由，网段为255.255.255.248 </li>\n<li>route add -net 10.20.30.48 netmask 255.255.255.248 gw 10.20.30.41 同上，使用网关添加</li>\n<li>route add -net 192.168.1.0/24 eth1 添加网络路由，使用目标IP段/MASK位数形式</li>\n<li>route add default gw 192.168.1.1 添加默认路由</li>\n</ol>\n<p>删除路由：route del</p>\n<ol>\n<li>route del -host 192.168.1.2 dev eth0 原理同上</li>\n<li>route del -host 10.20.30.148 gw 10.20.30.40</li>\n<li>route del -net 10.20.30.40 netmask 255.255.255.248 eth0</li>\n<li>route del -net 10.20.30.48 netmask 255.255.255.248 gw 10.20.30.41</li>\n<li>route del -net 192.168.1.0/24 eth1</li>\n<li>route del default gw 192.168.1.1</li>\n</ol>\n<h2 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h2><p>了解了基础知识，我们来解决一下实际问题！<br>首先删除所有默认网关：</p>\n<pre><code># sudo route del default gw 192.168.20.1\n# sudo route del default gw 192.168.21.1</code></pre>\n<p>添加eth0（有线网卡）仅进行内网访问，即仅在Destination为192.168.*.*的时候使用它。</p>\n<pre><code># sudo route add -net 192.168.0.0 netmask 255.255.0.0 eth0（或gw 192.168.21.1）</code></pre>\n<p>添加wlan0（无线网卡）进行全网络的访问，即在非内网情况下，使用wlan0进行访问。</p>\n<pre><code># sudo route add default wlan0（或gw 192.168.20.1）</code></pre>\n<p>需要注意的是，如果使用网关确定，需要设置两个网卡的 默认网关不同；<br>这样设置还有一个弊端就是在访问外网时不能使用有线网卡，可能在没有WiFi的情况下还需要切换。</p>\n<p>这样设置下来，双网卡内外分工就大功告成了！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>现在的电脑一般都拥有双网卡，但这是否是一件好事呢？对于某些小白来说，可能并不是（比如我(●ˇ∀ˇ●)）。</p>\n<h2 id=\"发现问题\"><a href=\"#发现问题\" class=\"headerlink\" title=\"发现问题\"></a>发现问题</h2><p>拿到刚到手的树莓派，首先要做的肯定是配环境！但是在VNC连接树莓派时遇到了问题：<br>当我使用WIFI连接树莓派时，由于带宽限制，界面很卡，影响体验。<br>当我使用有线连接树莓派时，由于有线网卡的优先级高于无线网卡，导致树莓派只能浏览内网（也就是我笔记本的网络），如果使用笔记本共享外网的话只能使用DHCP自动分配IP，这样则会导致IP变化不方便我们连接 树莓派。<br>但是我明明有一个无线网卡连接外网啊！！！怎样才能把它利用起来，成了我要解决的问题。</p>\n<h2 id=\"原理探究\"><a href=\"#原理探究\" class=\"headerlink\" title=\"原理探究\"></a>原理探究</h2><p>找了好久，终于发现了路由表这个神奇的东西，<br><a href=\"https://baike.baidu.com/item/%E8%B7%AF%E7%94%B1%E8%A1%A8\">百度百科</a>这样说道：<br>在计算机网络中，路由表（routing table）或称路由择域信息库（RIB, Routing Information Base），是一个存储在<strong>路由器</strong>或者<strong>联网计算机</strong>中的电子表格（文件）或类数据库。路由表存储着指向特定网络地址的路径（在有些情况下，还记录有路径的路由度量值）。路由表中含有网络周边的拓扑信息。路由表建立的主要目标是为了实现路由协议和静态路由选择。</p>\n<p>简单来讲，路由表可以规定发往何处的信息使用哪一个路由，也就是决定要发出的信息（对于计算机）或收到的信息（对于路由器）的下一跳是哪里。</p>\n<p>在linux中配置路由表很简单，因为它全部被集成到了route这一个指令中。<br>首先我们来看路由表长什么样。<br>拿我的服务器举例，在终端中输入（sudo）route，可以看到：<br><img src=\"/old_images/2020/08/75184131.jpg\" alt=\"Snipaste_2020-08-13_17-38-05.jpg\"><br>其中Destination表示目标的IP地址；<br>Gateway表示选择下一跳网关IP地址（所有跨网段传输的信息均需要通过该网段的网关传输）；<br>GenMask代表掩码，用于确定一个网段；<br>Flags是用于区分的标志位；<br>Iface是网卡设备的名称（可以使用（sudo）ifconfig来查看）；<br><img src=\"/old_images/2020/08/1049549032.jpg\" alt=\"Snipaste_2020-08-13_17-44-12.jpg\"><br>Flags标志位确定了一系列的路由类型，主要有以下几种：<br><strong>主机路由：</strong><br>顾名思义，主机路由表示单独指向某个特定主机（IP）的路由，所有目标为该主机的信息都发送到所设定的网关，同时也确定了用哪个网卡设备传输信息。<br>主机路由除了Flags的区别，最明显的特征就是它的Destination是一个完整的IP地址，并且它的GenMask是255.255.255.255。这说明了它的目标不是一个网络而是一个特定的主机（IP）。</p>\n<hr>\n<p><strong>网络路由：</strong><br>理解了主机路由 在来理解网络路由并不是很难。网络路由指向一个特定的网段，因此它的GenMask不全是 1（比如是255.255.0.0）。它的Destination中也包含0（比如192.168.0.0），0的含义就是任意，这个网段表示整个192.168.*.*的网络。<br>同理，所有目标为该网络的信息都发送到所设定的网关。</p>\n<hr>\n<p><strong>默认路由：</strong><br>剩下最简单的就是默认路由了，没有特殊指明的主机（IP），就发送到默认路由设定的网关。默认路由最明显的特征是它的Destination是default，GenMask是0.0.0.0（表示全部网段）。</p>\n<p>想要改变路由表，就要使用route命令，它的基本操作如下：</p>\n<p>添加路由：route add</p>\n<ol>\n<li>route add -host 192.168.1.2 dev eth0 添加设备eth0为主机路由，主机IP为192.168.1.2</li>\n<li>route add -host 10.20.30.148 gw 10.20.30.40 添加网关10.20.30.40为主机路由</li>\n<li>route add -net 10.20.30.40 netmask 255.255.255.248 eth0 添加网络路由，网段为255.255.255.248 </li>\n<li>route add -net 10.20.30.48 netmask 255.255.255.248 gw 10.20.30.41 同上，使用网关添加</li>\n<li>route add -net 192.168.1.0/24 eth1 添加网络路由，使用目标IP段/MASK位数形式</li>\n<li>route add default gw 192.168.1.1 添加默认路由</li>\n</ol>\n<p>删除路由：route del</p>\n<ol>\n<li>route del -host 192.168.1.2 dev eth0 原理同上</li>\n<li>route del -host 10.20.30.148 gw 10.20.30.40</li>\n<li>route del -net 10.20.30.40 netmask 255.255.255.248 eth0</li>\n<li>route del -net 10.20.30.48 netmask 255.255.255.248 gw 10.20.30.41</li>\n<li>route del -net 192.168.1.0/24 eth1</li>\n<li>route del default gw 192.168.1.1</li>\n</ol>\n<h2 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h2><p>了解了基础知识，我们来解决一下实际问题！<br>首先删除所有默认网关：</p>\n<pre><code># sudo route del default gw 192.168.20.1\n# sudo route del default gw 192.168.21.1</code></pre>\n<p>添加eth0（有线网卡）仅进行内网访问，即仅在Destination为192.168.*.*的时候使用它。</p>\n<pre><code># sudo route add -net 192.168.0.0 netmask 255.255.0.0 eth0（或gw 192.168.21.1）</code></pre>\n<p>添加wlan0（无线网卡）进行全网络的访问，即在非内网情况下，使用wlan0进行访问。</p>\n<pre><code># sudo route add default wlan0（或gw 192.168.20.1）</code></pre>\n<p>需要注意的是，如果使用网关确定，需要设置两个网卡的 默认网关不同；<br>这样设置还有一个弊端就是在访问外网时不能使用有线网卡，可能在没有WiFi的情况下还需要切换。</p>\n<p>这样设置下来，双网卡内外分工就大功告成了！</p>\n"},{"title":"从支持向量机到拉格朗日乘子对偶问题","date":"2020-09-17T19:11:00.000Z","toc":true,"_content":"很早以前就在林哥那儿听过支持向量机这个神奇的名字，是用来识别（分类）装甲板数字的，当时觉得很高深，很硬核。\n最近在研读周志华老师所著的《机器学习》，又看到了这个熟悉而又陌生的名词——支持向量机。这次终于能够更深入地了解它了。写此文章来记录。\n\n支持向量机\n-----\n\n首先考虑一个二分类问题，我们有一组有标记的样本，分布在样本空间中，假设是一个二维的样本空间，那么它们看起来可能是这样的：\n![2019-04-29-134021.jpg][1]\n其中我们可以认为三角代表正类而圆圈代表反类。\n怎样找到一条直线能够最大程度上地区分正类和反类呢？很容易想到我们需要一条直线（超平面），使它的一侧全是正类，另一侧全是反类。这种情况叫做线性可分的情况，等一会儿我们会讨论基本线性可分与非线性情况。\n![1.1.png][2]\n不过这样的直线（超平面）有很多，哪一条更好呢？这里的更好代表着对于新来的样本也能有很好的划分能力，所以我们启发式地想，找一条能够划分样本，并且两边样本到直线最近距离最大且相等的直线。\n![2.1.png][3]\n这些据直线最近的样本的位置（向量）就叫做支持向量。\n用更严谨的数学表示就是：\n![Snipaste_2020-10-05_21-09-28.jpg][4]\n![Snipaste_2020-10-05_21-09-43.jpg][5]\n不要忘记我们能够划分样本的条件：\n![Snipaste_2020-10-05_21-09-17.jpg][6]\n细心的我们可以发现，我们定义的这个直线理应具有dim(w)个自由度，而实际上却有dim(w)+1个参数（别忘了截距b），我们很容易想到，同时放大缩小w与b，直线是不变的，但是对于直线wx+b=1，却是在变化的，因此我们仅仅优化|w|²看似不合理，实际上整条直线已经在条件中进行了限制，所以b也会被考虑进去的。\n\n于是我们使用支持向量机把二分类模型训练问题转化为了一个带不等式约束的优化问题。\n我们知道对于等式约束的优化问题我们可以用拉格朗日乘子法进行解决，但是对于不等式约束，我们又该怎样解决呢？\n我们称这个优化问题为原始问题，解决办法就是使用拉格朗日乘子法找到一个对偶问题，解决对偶问题并且在满足KKT条件的情况下，我们就能解决原始问题。\n那么具体怎么做呢？\n首先还是使用拉格朗日乘子法，找到拉格朗日函数：\n![Snipaste_2020-10-05_21-27-07.jpg][7]\n为了把不等式约束消解掉，我们分情况讨论：\n如果求得的直线不满足不等式约束，则L取得max只需要α->∞，就有：\n![Snipaste_2020-10-05_21-28-01.jpg][8]\n如果满足不等式约束，则有L取得max发生在α=0的情况下，即：\n![Snipaste_2020-10-05_21-28-08.jpg][9]\n所以我们把不等式约束的优化问题化为双重最值的优化问题：\n![Snipaste_2020-10-05_21-28-13.jpg][10]\n根据对偶原理，它的对偶问题为：\n![Snipaste_2020-10-05_21-34-33.jpg][11]\n同时还要满足KKT条件：\n![Snipaste_2020-10-05_21-35-19.jpg][12]\n解得最终的超平面为：（具体方法略）\n![Snipaste_2020-10-05_21-35-19.jpg][13]\n我们还得到一个结论，就是最终发挥作用的样本点只有支持向量，这点我们也能直观地感受到。\n\n还有一些没解决的问题\n----------\n上面一节我们只讨论了线性可分的情况，如果遇到基本上线性可分的情况（有有限个点被分错），或者非线性可分的情况\n![2019-03-08-010339.jpg][14]\n我们该怎么办呢？\n\n1.软间隔法\n对于基本上线性可分的情况，我们可以改进优化参数，使其允许一些错误出现，但是要尽最大可能避免这些错误，比如这样：\n![Snipaste_2020-10-05_21-41-57.jpg][15]\n在优化函数中引入惩罚项，惩罚那些超过界限的样本点。\n2.核方法\n对于非线性的方法，软间隔就不能用了，比如这种情况：\n![Snipaste_2020-10-05_21-44-07.jpg][16]\n但是我们可以使用一个映射将样本转换到另一个空间中\n![Snipaste_2020-10-05_21-45-04.jpg][17]\n![下载.png][18]\n这样就能解决非线性可分的问题了。\n\n  [1]: /old_images/2020/10/3898272400.jpg\n  [2]: /old_images/2020/10/3032572949.png\n  [3]: /old_images/2020/10/4055019828.png\n  [4]: /old_images/2020/10/1161417211.jpg\n  [5]: /old_images/2020/10/513067831.jpg\n  [6]: /old_images/2020/10/2013533644.jpg\n  [7]: /old_images/2020/10/3422282407.jpg\n  [8]: /old_images/2020/10/2634073253.jpg\n  [9]: /old_images/2020/10/1816268613.jpg\n  [10]: /old_images/2020/10/2296969013.jpg\n  [11]: /old_images/2020/10/270394888.jpg\n  [12]: /old_images/2020/10/2604642185.jpg\n  [13]: /old_images/2020/10/1506103335.jpg\n  [14]: /old_images/2020/10/1768418527.jpg\n  [15]: /old_images/2020/10/2773680925.jpg\n  [16]: /old_images/2020/10/2447629851.jpg\n  [17]: /old_images/2020/10/2420399875.jpg\n  [18]: /old_images/2020/10/3031661130.png\n","source":"_posts/从支持向量机到拉格朗日乘子对偶问题.md","raw":"title: 从支持向量机到拉格朗日乘子对偶问题\ndate: 2020-09-18 03:11:00\ncategories: 控制\ntags: []\ntoc: true\n---\n很早以前就在林哥那儿听过支持向量机这个神奇的名字，是用来识别（分类）装甲板数字的，当时觉得很高深，很硬核。\n最近在研读周志华老师所著的《机器学习》，又看到了这个熟悉而又陌生的名词——支持向量机。这次终于能够更深入地了解它了。写此文章来记录。\n\n支持向量机\n-----\n\n首先考虑一个二分类问题，我们有一组有标记的样本，分布在样本空间中，假设是一个二维的样本空间，那么它们看起来可能是这样的：\n![2019-04-29-134021.jpg][1]\n其中我们可以认为三角代表正类而圆圈代表反类。\n怎样找到一条直线能够最大程度上地区分正类和反类呢？很容易想到我们需要一条直线（超平面），使它的一侧全是正类，另一侧全是反类。这种情况叫做线性可分的情况，等一会儿我们会讨论基本线性可分与非线性情况。\n![1.1.png][2]\n不过这样的直线（超平面）有很多，哪一条更好呢？这里的更好代表着对于新来的样本也能有很好的划分能力，所以我们启发式地想，找一条能够划分样本，并且两边样本到直线最近距离最大且相等的直线。\n![2.1.png][3]\n这些据直线最近的样本的位置（向量）就叫做支持向量。\n用更严谨的数学表示就是：\n![Snipaste_2020-10-05_21-09-28.jpg][4]\n![Snipaste_2020-10-05_21-09-43.jpg][5]\n不要忘记我们能够划分样本的条件：\n![Snipaste_2020-10-05_21-09-17.jpg][6]\n细心的我们可以发现，我们定义的这个直线理应具有dim(w)个自由度，而实际上却有dim(w)+1个参数（别忘了截距b），我们很容易想到，同时放大缩小w与b，直线是不变的，但是对于直线wx+b=1，却是在变化的，因此我们仅仅优化|w|²看似不合理，实际上整条直线已经在条件中进行了限制，所以b也会被考虑进去的。\n\n于是我们使用支持向量机把二分类模型训练问题转化为了一个带不等式约束的优化问题。\n我们知道对于等式约束的优化问题我们可以用拉格朗日乘子法进行解决，但是对于不等式约束，我们又该怎样解决呢？\n我们称这个优化问题为原始问题，解决办法就是使用拉格朗日乘子法找到一个对偶问题，解决对偶问题并且在满足KKT条件的情况下，我们就能解决原始问题。\n那么具体怎么做呢？\n首先还是使用拉格朗日乘子法，找到拉格朗日函数：\n![Snipaste_2020-10-05_21-27-07.jpg][7]\n为了把不等式约束消解掉，我们分情况讨论：\n如果求得的直线不满足不等式约束，则L取得max只需要α->∞，就有：\n![Snipaste_2020-10-05_21-28-01.jpg][8]\n如果满足不等式约束，则有L取得max发生在α=0的情况下，即：\n![Snipaste_2020-10-05_21-28-08.jpg][9]\n所以我们把不等式约束的优化问题化为双重最值的优化问题：\n![Snipaste_2020-10-05_21-28-13.jpg][10]\n根据对偶原理，它的对偶问题为：\n![Snipaste_2020-10-05_21-34-33.jpg][11]\n同时还要满足KKT条件：\n![Snipaste_2020-10-05_21-35-19.jpg][12]\n解得最终的超平面为：（具体方法略）\n![Snipaste_2020-10-05_21-35-19.jpg][13]\n我们还得到一个结论，就是最终发挥作用的样本点只有支持向量，这点我们也能直观地感受到。\n\n还有一些没解决的问题\n----------\n上面一节我们只讨论了线性可分的情况，如果遇到基本上线性可分的情况（有有限个点被分错），或者非线性可分的情况\n![2019-03-08-010339.jpg][14]\n我们该怎么办呢？\n\n1.软间隔法\n对于基本上线性可分的情况，我们可以改进优化参数，使其允许一些错误出现，但是要尽最大可能避免这些错误，比如这样：\n![Snipaste_2020-10-05_21-41-57.jpg][15]\n在优化函数中引入惩罚项，惩罚那些超过界限的样本点。\n2.核方法\n对于非线性的方法，软间隔就不能用了，比如这种情况：\n![Snipaste_2020-10-05_21-44-07.jpg][16]\n但是我们可以使用一个映射将样本转换到另一个空间中\n![Snipaste_2020-10-05_21-45-04.jpg][17]\n![下载.png][18]\n这样就能解决非线性可分的问题了。\n\n  [1]: /old_images/2020/10/3898272400.jpg\n  [2]: /old_images/2020/10/3032572949.png\n  [3]: /old_images/2020/10/4055019828.png\n  [4]: /old_images/2020/10/1161417211.jpg\n  [5]: /old_images/2020/10/513067831.jpg\n  [6]: /old_images/2020/10/2013533644.jpg\n  [7]: /old_images/2020/10/3422282407.jpg\n  [8]: /old_images/2020/10/2634073253.jpg\n  [9]: /old_images/2020/10/1816268613.jpg\n  [10]: /old_images/2020/10/2296969013.jpg\n  [11]: /old_images/2020/10/270394888.jpg\n  [12]: /old_images/2020/10/2604642185.jpg\n  [13]: /old_images/2020/10/1506103335.jpg\n  [14]: /old_images/2020/10/1768418527.jpg\n  [15]: /old_images/2020/10/2773680925.jpg\n  [16]: /old_images/2020/10/2447629851.jpg\n  [17]: /old_images/2020/10/2420399875.jpg\n  [18]: /old_images/2020/10/3031661130.png\n","slug":"从支持向量机到拉格朗日乘子对偶问题","published":1,"updated":"2020-12-14T12:39:06.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0by000x7p19hqp8c8ot","content":"<p>很早以前就在林哥那儿听过支持向量机这个神奇的名字，是用来识别（分类）装甲板数字的，当时觉得很高深，很硬核。<br>最近在研读周志华老师所著的《机器学习》，又看到了这个熟悉而又陌生的名词——支持向量机。这次终于能够更深入地了解它了。写此文章来记录。</p>\n<h2 id=\"支持向量机\"><a href=\"#支持向量机\" class=\"headerlink\" title=\"支持向量机\"></a>支持向量机</h2><p>首先考虑一个二分类问题，我们有一组有标记的样本，分布在样本空间中，假设是一个二维的样本空间，那么它们看起来可能是这样的：<br><img src=\"/old_images/2020/10/3898272400.jpg\" alt=\"2019-04-29-134021.jpg\"><br>其中我们可以认为三角代表正类而圆圈代表反类。<br>怎样找到一条直线能够最大程度上地区分正类和反类呢？很容易想到我们需要一条直线（超平面），使它的一侧全是正类，另一侧全是反类。这种情况叫做线性可分的情况，等一会儿我们会讨论基本线性可分与非线性情况。<br><img src=\"/old_images/2020/10/3032572949.png\" alt=\"1.1.png\"><br>不过这样的直线（超平面）有很多，哪一条更好呢？这里的更好代表着对于新来的样本也能有很好的划分能力，所以我们启发式地想，找一条能够划分样本，并且两边样本到直线最近距离最大且相等的直线。<br><img src=\"/old_images/2020/10/4055019828.png\" alt=\"2.1.png\"><br>这些据直线最近的样本的位置（向量）就叫做支持向量。<br>用更严谨的数学表示就是：<br><img src=\"/old_images/2020/10/1161417211.jpg\" alt=\"Snipaste_2020-10-05_21-09-28.jpg\"><br><img src=\"/old_images/2020/10/513067831.jpg\" alt=\"Snipaste_2020-10-05_21-09-43.jpg\"><br>不要忘记我们能够划分样本的条件：<br><img src=\"/old_images/2020/10/2013533644.jpg\" alt=\"Snipaste_2020-10-05_21-09-17.jpg\"><br>细心的我们可以发现，我们定义的这个直线理应具有dim(w)个自由度，而实际上却有dim(w)+1个参数（别忘了截距b），我们很容易想到，同时放大缩小w与b，直线是不变的，但是对于直线wx+b=1，却是在变化的，因此我们仅仅优化|w|²看似不合理，实际上整条直线已经在条件中进行了限制，所以b也会被考虑进去的。</p>\n<p>于是我们使用支持向量机把二分类模型训练问题转化为了一个带不等式约束的优化问题。<br>我们知道对于等式约束的优化问题我们可以用拉格朗日乘子法进行解决，但是对于不等式约束，我们又该怎样解决呢？<br>我们称这个优化问题为原始问题，解决办法就是使用拉格朗日乘子法找到一个对偶问题，解决对偶问题并且在满足KKT条件的情况下，我们就能解决原始问题。<br>那么具体怎么做呢？<br>首先还是使用拉格朗日乘子法，找到拉格朗日函数：<br><img src=\"/old_images/2020/10/3422282407.jpg\" alt=\"Snipaste_2020-10-05_21-27-07.jpg\"><br>为了把不等式约束消解掉，我们分情况讨论：<br>如果求得的直线不满足不等式约束，则L取得max只需要α-&gt;∞，就有：<br><img src=\"/old_images/2020/10/2634073253.jpg\" alt=\"Snipaste_2020-10-05_21-28-01.jpg\"><br>如果满足不等式约束，则有L取得max发生在α=0的情况下，即：<br><img src=\"/old_images/2020/10/1816268613.jpg\" alt=\"Snipaste_2020-10-05_21-28-08.jpg\"><br>所以我们把不等式约束的优化问题化为双重最值的优化问题：<br><img src=\"/old_images/2020/10/2296969013.jpg\" alt=\"Snipaste_2020-10-05_21-28-13.jpg\"><br>根据对偶原理，它的对偶问题为：<br><img src=\"/old_images/2020/10/270394888.jpg\" alt=\"Snipaste_2020-10-05_21-34-33.jpg\"><br>同时还要满足KKT条件：<br><img src=\"/old_images/2020/10/2604642185.jpg\" alt=\"Snipaste_2020-10-05_21-35-19.jpg\"><br>解得最终的超平面为：（具体方法略）<br><img src=\"/old_images/2020/10/1506103335.jpg\" alt=\"Snipaste_2020-10-05_21-35-19.jpg\"><br>我们还得到一个结论，就是最终发挥作用的样本点只有支持向量，这点我们也能直观地感受到。</p>\n<h2 id=\"还有一些没解决的问题\"><a href=\"#还有一些没解决的问题\" class=\"headerlink\" title=\"还有一些没解决的问题\"></a>还有一些没解决的问题</h2><p>上面一节我们只讨论了线性可分的情况，如果遇到基本上线性可分的情况（有有限个点被分错），或者非线性可分的情况<br><img src=\"/old_images/2020/10/1768418527.jpg\" alt=\"2019-03-08-010339.jpg\"><br>我们该怎么办呢？</p>\n<p>1.软间隔法<br>对于基本上线性可分的情况，我们可以改进优化参数，使其允许一些错误出现，但是要尽最大可能避免这些错误，比如这样：<br><img src=\"/old_images/2020/10/2773680925.jpg\" alt=\"Snipaste_2020-10-05_21-41-57.jpg\"><br>在优化函数中引入惩罚项，惩罚那些超过界限的样本点。<br>2.核方法<br>对于非线性的方法，软间隔就不能用了，比如这种情况：<br><img src=\"/old_images/2020/10/2447629851.jpg\" alt=\"Snipaste_2020-10-05_21-44-07.jpg\"><br>但是我们可以使用一个映射将样本转换到另一个空间中<br><img src=\"/old_images/2020/10/2420399875.jpg\" alt=\"Snipaste_2020-10-05_21-45-04.jpg\"><br><img src=\"/old_images/2020/10/3031661130.png\" alt=\"下载.png\"><br>这样就能解决非线性可分的问题了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>很早以前就在林哥那儿听过支持向量机这个神奇的名字，是用来识别（分类）装甲板数字的，当时觉得很高深，很硬核。<br>最近在研读周志华老师所著的《机器学习》，又看到了这个熟悉而又陌生的名词——支持向量机。这次终于能够更深入地了解它了。写此文章来记录。</p>\n<h2 id=\"支持向量机\"><a href=\"#支持向量机\" class=\"headerlink\" title=\"支持向量机\"></a>支持向量机</h2><p>首先考虑一个二分类问题，我们有一组有标记的样本，分布在样本空间中，假设是一个二维的样本空间，那么它们看起来可能是这样的：<br><img src=\"/old_images/2020/10/3898272400.jpg\" alt=\"2019-04-29-134021.jpg\"><br>其中我们可以认为三角代表正类而圆圈代表反类。<br>怎样找到一条直线能够最大程度上地区分正类和反类呢？很容易想到我们需要一条直线（超平面），使它的一侧全是正类，另一侧全是反类。这种情况叫做线性可分的情况，等一会儿我们会讨论基本线性可分与非线性情况。<br><img src=\"/old_images/2020/10/3032572949.png\" alt=\"1.1.png\"><br>不过这样的直线（超平面）有很多，哪一条更好呢？这里的更好代表着对于新来的样本也能有很好的划分能力，所以我们启发式地想，找一条能够划分样本，并且两边样本到直线最近距离最大且相等的直线。<br><img src=\"/old_images/2020/10/4055019828.png\" alt=\"2.1.png\"><br>这些据直线最近的样本的位置（向量）就叫做支持向量。<br>用更严谨的数学表示就是：<br><img src=\"/old_images/2020/10/1161417211.jpg\" alt=\"Snipaste_2020-10-05_21-09-28.jpg\"><br><img src=\"/old_images/2020/10/513067831.jpg\" alt=\"Snipaste_2020-10-05_21-09-43.jpg\"><br>不要忘记我们能够划分样本的条件：<br><img src=\"/old_images/2020/10/2013533644.jpg\" alt=\"Snipaste_2020-10-05_21-09-17.jpg\"><br>细心的我们可以发现，我们定义的这个直线理应具有dim(w)个自由度，而实际上却有dim(w)+1个参数（别忘了截距b），我们很容易想到，同时放大缩小w与b，直线是不变的，但是对于直线wx+b=1，却是在变化的，因此我们仅仅优化|w|²看似不合理，实际上整条直线已经在条件中进行了限制，所以b也会被考虑进去的。</p>\n<p>于是我们使用支持向量机把二分类模型训练问题转化为了一个带不等式约束的优化问题。<br>我们知道对于等式约束的优化问题我们可以用拉格朗日乘子法进行解决，但是对于不等式约束，我们又该怎样解决呢？<br>我们称这个优化问题为原始问题，解决办法就是使用拉格朗日乘子法找到一个对偶问题，解决对偶问题并且在满足KKT条件的情况下，我们就能解决原始问题。<br>那么具体怎么做呢？<br>首先还是使用拉格朗日乘子法，找到拉格朗日函数：<br><img src=\"/old_images/2020/10/3422282407.jpg\" alt=\"Snipaste_2020-10-05_21-27-07.jpg\"><br>为了把不等式约束消解掉，我们分情况讨论：<br>如果求得的直线不满足不等式约束，则L取得max只需要α-&gt;∞，就有：<br><img src=\"/old_images/2020/10/2634073253.jpg\" alt=\"Snipaste_2020-10-05_21-28-01.jpg\"><br>如果满足不等式约束，则有L取得max发生在α=0的情况下，即：<br><img src=\"/old_images/2020/10/1816268613.jpg\" alt=\"Snipaste_2020-10-05_21-28-08.jpg\"><br>所以我们把不等式约束的优化问题化为双重最值的优化问题：<br><img src=\"/old_images/2020/10/2296969013.jpg\" alt=\"Snipaste_2020-10-05_21-28-13.jpg\"><br>根据对偶原理，它的对偶问题为：<br><img src=\"/old_images/2020/10/270394888.jpg\" alt=\"Snipaste_2020-10-05_21-34-33.jpg\"><br>同时还要满足KKT条件：<br><img src=\"/old_images/2020/10/2604642185.jpg\" alt=\"Snipaste_2020-10-05_21-35-19.jpg\"><br>解得最终的超平面为：（具体方法略）<br><img src=\"/old_images/2020/10/1506103335.jpg\" alt=\"Snipaste_2020-10-05_21-35-19.jpg\"><br>我们还得到一个结论，就是最终发挥作用的样本点只有支持向量，这点我们也能直观地感受到。</p>\n<h2 id=\"还有一些没解决的问题\"><a href=\"#还有一些没解决的问题\" class=\"headerlink\" title=\"还有一些没解决的问题\"></a>还有一些没解决的问题</h2><p>上面一节我们只讨论了线性可分的情况，如果遇到基本上线性可分的情况（有有限个点被分错），或者非线性可分的情况<br><img src=\"/old_images/2020/10/1768418527.jpg\" alt=\"2019-03-08-010339.jpg\"><br>我们该怎么办呢？</p>\n<p>1.软间隔法<br>对于基本上线性可分的情况，我们可以改进优化参数，使其允许一些错误出现，但是要尽最大可能避免这些错误，比如这样：<br><img src=\"/old_images/2020/10/2773680925.jpg\" alt=\"Snipaste_2020-10-05_21-41-57.jpg\"><br>在优化函数中引入惩罚项，惩罚那些超过界限的样本点。<br>2.核方法<br>对于非线性的方法，软间隔就不能用了，比如这种情况：<br><img src=\"/old_images/2020/10/2447629851.jpg\" alt=\"Snipaste_2020-10-05_21-44-07.jpg\"><br>但是我们可以使用一个映射将样本转换到另一个空间中<br><img src=\"/old_images/2020/10/2420399875.jpg\" alt=\"Snipaste_2020-10-05_21-45-04.jpg\"><br><img src=\"/old_images/2020/10/3031661130.png\" alt=\"下载.png\"><br>这样就能解决非线性可分的问题了。</p>\n"},{"title":"俺对卷积的粗鄙理解","date":"2020-03-23T01:35:00.000Z","toc":true,"_content":"说到卷积，你们首先会想到什么？卷饼？烧鸡？这个卷积可不是吃的啊！\n写这篇文章契机是上午上网课，第一节是信号与系统，老师讲了一维连续卷积，第二节是数字图像处理，老师讲了二维离散卷积。\n喂喂喂！你们是约好了吗，一上午老师算是把卷积讲透了，可是我还是一头雾水，这都什么鬼？想起之前DR_CAN也讲过卷积（有空来康康这几个视频：[理解卷积的含义][1]、[卷积好声音][2]、[卷积的拉氏变换][3]），我又双叒叕“预习”了一遍卷积，正好趁这个机会总结一下！\n\n## 卷积一 ##\n**——从系统的角度取理解卷积。**\n\n大家都知道一个LTI系统，可以完全地由这个系统的冲激响应所描述，这是为什么呢，卷积给了我们答案\n![Snipaste_2020-03-23_17-05-22.png][4]\n左边这一列代表系统的输入可以完全由一系列冲激函数平移到τ时刻加权和（即对τ积分）表示，而权重（代表冲激函数的高度）就是输入函数在τ时刻的取值。\n右边这一列利用了LTI系统的性质（线性组合+时移），在τ时刻的输入是冲激函数的加权和，那么输出就必然是冲激响应的加权和，于是我们得到著名的卷积公式：\n![Snipaste_2020-03-23_17-13-40.png][5]\n它表示系统响应等于系统输入卷上系统的冲激响应函数，这也就是为什么冲激响应可以完全地描述系统。\n由它我们也可以推理得出一些冲激函数的性质，比如说：\n\n (1). 与冲激函数的卷积就是输入本身\n![Snipaste_2020-03-23_17-22-24.png][6]\n这个很简单就能证明，当系统冲激响应就是冲激函数，系统的传函可以简单地表示为“1”，那么响应自然就与输入相同啦！\n (2). 与冲激函数微分、积分的卷积就是输入本身的积分、微分\n![Snipaste_2020-03-23_17-24-23.png][7]\n![Snipaste_2020-03-23_17-24-33.png][8]\n与上文同理，冲激响应为冲激函数的微分、积分，系统的传函也可简单地表示为“s^n”，也就是说，这个系统单纯地对输入做n阶的微分（或-n阶的积分），自然能得出这个结论\n (3). 时移特性：f(t-τ)与δ(t-τ)的卷积就是f(t-τ)\n![Snipaste_2020-03-25_08-16-39.png][9]\n同同同理，系统相当于纯延时环节“e^(-τs)”\n\n## 卷积二 ##\n**——换个角度看卷积**\n\n重新打量一下这个卷积公式\n![Snipaste_2020-03-23_17-13-40.png][10]\n是不是很奇妙，他就是两个函数乘积的积分（注意是对τ进行积分，千万别搞错积分变量），放在离散就叫乘积的和。\n而这两个函数又有什么特点呢？第一个f(τ)，代表着输入样本，第二个h(t-τ)，是系统冲激响应的反向（这大概就是卷积这个“卷”字的由来）加平移t（注意这里的t看作常数，因为我们只现在需要算出t时刻响应的大小）。\n\n从几何角度来理解更简单一些，先来看一维连续的情况：\n![Snipaste_2020-03-23_17-43-24.png][11]\n把h(τ)反转，得到一个新函数h(-τ)（注意是以τ为自变量），我们称之为“卷积核”\n将卷积核右移t=2个单位，再与f(τ)积分，我们不就得到了所要的公式了吗，所以结果就是t=2时刻的响应y(2)啦！\n当然如果t从-∞到+∞动起来，我们就能连续地获得这个响应y(t)。\n（＞人＜；）好想支持动图哇！！！\n\n那为什么要这么算卷积呢，因为这个角度去计算离散卷积会很方便，比如这个例子：\n![automatic_investment_plan.gif][12]\nwoc竟然能动？？？(☆▽☆)\n对于连续来讲的积分变成了求和，这下一个一个地计算y[n]是不是很方便呢！\n\n在数字图像处理、深度学习等课程上，老师将这种操作也叫做了卷积，当时的我们可能会不理解，但是现在来看，这种操作是不是很容易理解呢？\n![Snipaste_2020-03-23_17-57-59.png][13]\n终于，我们来看上面这个二维离散卷积的例子，拿它来和我们的一维离散卷积来对比一下\nOriginal这张图就相当于输入f[n]，而这个Filter就相当于我们的卷积核h[-n]，当m = 灰色e时（我也不知道为啥有两个e），也就是卷积核移动到了灰色e这个位置，计算一次离散卷积，也就是将对应位置的灰度值相乘再相加，我们就得到了输出图像t = 灰色e位置时的输出eprocessed，相当于y[m = 灰色e]，再对其他位置的像素进行卷积运算就可以得到整张图的最终结果y[m]啦。\n整个卷积的过程下面这个动图展示的淋漓尽致啦：\n![convolutions_on_images.gif][14]\n尤其要注意的有一点：那就是图像处理里面直接拿来用的卷积核，就是已经经过反转的冲激响应了，从下面这个例子也可以看出来：\n![Snipaste_2020-03-23_18-07-01.png][15]\n原图中的1就相当于一个冲激函数，它经过卷积核后的响应正好是卷积核反过来，这里也就可以说明卷积核就代表着h[-n].\n\n至此感觉大家对卷积的理解也应该很深刻了把！\n\n\n  [1]: https://www.bilibili.com/video/BV1cs411W74f\n  [2]: https://www.bilibili.com/video/BV1vE411h7W2\n  [3]: https://www.bilibili.com/video/BV1fs411p7zD\n  [4]: /old_images/2020/03/2487254389.png\n  [5]: /old_images/2020/03/3384316763.png\n  [6]: /old_images/2020/03/3781678227.png\n  [7]: /old_images/2020/03/1392671162.png\n  [8]: /old_images/2020/03/1451641391.png\n  [9]: /old_images/2020/03/2566011118.png\n  [10]: /old_images/2020/03/3384316763.png\n  [11]: /old_images/2020/03/1666061624.png\n  [12]: /old_images/2020/03/2875168475.gif\n  [13]: /old_images/2020/03/417397721.png\n  [14]: /old_images/2020/03/2715500984.gif\n  [15]: /old_images/2020/03/2861910617.png\n","source":"_posts/俺对卷积的粗鄙理解.md","raw":"title: 俺对卷积的粗鄙理解\ndate: 2020-03-23 09:35:00\ncategories: 物数\ntags: []\ntoc: true\n---\n说到卷积，你们首先会想到什么？卷饼？烧鸡？这个卷积可不是吃的啊！\n写这篇文章契机是上午上网课，第一节是信号与系统，老师讲了一维连续卷积，第二节是数字图像处理，老师讲了二维离散卷积。\n喂喂喂！你们是约好了吗，一上午老师算是把卷积讲透了，可是我还是一头雾水，这都什么鬼？想起之前DR_CAN也讲过卷积（有空来康康这几个视频：[理解卷积的含义][1]、[卷积好声音][2]、[卷积的拉氏变换][3]），我又双叒叕“预习”了一遍卷积，正好趁这个机会总结一下！\n\n## 卷积一 ##\n**——从系统的角度取理解卷积。**\n\n大家都知道一个LTI系统，可以完全地由这个系统的冲激响应所描述，这是为什么呢，卷积给了我们答案\n![Snipaste_2020-03-23_17-05-22.png][4]\n左边这一列代表系统的输入可以完全由一系列冲激函数平移到τ时刻加权和（即对τ积分）表示，而权重（代表冲激函数的高度）就是输入函数在τ时刻的取值。\n右边这一列利用了LTI系统的性质（线性组合+时移），在τ时刻的输入是冲激函数的加权和，那么输出就必然是冲激响应的加权和，于是我们得到著名的卷积公式：\n![Snipaste_2020-03-23_17-13-40.png][5]\n它表示系统响应等于系统输入卷上系统的冲激响应函数，这也就是为什么冲激响应可以完全地描述系统。\n由它我们也可以推理得出一些冲激函数的性质，比如说：\n\n (1). 与冲激函数的卷积就是输入本身\n![Snipaste_2020-03-23_17-22-24.png][6]\n这个很简单就能证明，当系统冲激响应就是冲激函数，系统的传函可以简单地表示为“1”，那么响应自然就与输入相同啦！\n (2). 与冲激函数微分、积分的卷积就是输入本身的积分、微分\n![Snipaste_2020-03-23_17-24-23.png][7]\n![Snipaste_2020-03-23_17-24-33.png][8]\n与上文同理，冲激响应为冲激函数的微分、积分，系统的传函也可简单地表示为“s^n”，也就是说，这个系统单纯地对输入做n阶的微分（或-n阶的积分），自然能得出这个结论\n (3). 时移特性：f(t-τ)与δ(t-τ)的卷积就是f(t-τ)\n![Snipaste_2020-03-25_08-16-39.png][9]\n同同同理，系统相当于纯延时环节“e^(-τs)”\n\n## 卷积二 ##\n**——换个角度看卷积**\n\n重新打量一下这个卷积公式\n![Snipaste_2020-03-23_17-13-40.png][10]\n是不是很奇妙，他就是两个函数乘积的积分（注意是对τ进行积分，千万别搞错积分变量），放在离散就叫乘积的和。\n而这两个函数又有什么特点呢？第一个f(τ)，代表着输入样本，第二个h(t-τ)，是系统冲激响应的反向（这大概就是卷积这个“卷”字的由来）加平移t（注意这里的t看作常数，因为我们只现在需要算出t时刻响应的大小）。\n\n从几何角度来理解更简单一些，先来看一维连续的情况：\n![Snipaste_2020-03-23_17-43-24.png][11]\n把h(τ)反转，得到一个新函数h(-τ)（注意是以τ为自变量），我们称之为“卷积核”\n将卷积核右移t=2个单位，再与f(τ)积分，我们不就得到了所要的公式了吗，所以结果就是t=2时刻的响应y(2)啦！\n当然如果t从-∞到+∞动起来，我们就能连续地获得这个响应y(t)。\n（＞人＜；）好想支持动图哇！！！\n\n那为什么要这么算卷积呢，因为这个角度去计算离散卷积会很方便，比如这个例子：\n![automatic_investment_plan.gif][12]\nwoc竟然能动？？？(☆▽☆)\n对于连续来讲的积分变成了求和，这下一个一个地计算y[n]是不是很方便呢！\n\n在数字图像处理、深度学习等课程上，老师将这种操作也叫做了卷积，当时的我们可能会不理解，但是现在来看，这种操作是不是很容易理解呢？\n![Snipaste_2020-03-23_17-57-59.png][13]\n终于，我们来看上面这个二维离散卷积的例子，拿它来和我们的一维离散卷积来对比一下\nOriginal这张图就相当于输入f[n]，而这个Filter就相当于我们的卷积核h[-n]，当m = 灰色e时（我也不知道为啥有两个e），也就是卷积核移动到了灰色e这个位置，计算一次离散卷积，也就是将对应位置的灰度值相乘再相加，我们就得到了输出图像t = 灰色e位置时的输出eprocessed，相当于y[m = 灰色e]，再对其他位置的像素进行卷积运算就可以得到整张图的最终结果y[m]啦。\n整个卷积的过程下面这个动图展示的淋漓尽致啦：\n![convolutions_on_images.gif][14]\n尤其要注意的有一点：那就是图像处理里面直接拿来用的卷积核，就是已经经过反转的冲激响应了，从下面这个例子也可以看出来：\n![Snipaste_2020-03-23_18-07-01.png][15]\n原图中的1就相当于一个冲激函数，它经过卷积核后的响应正好是卷积核反过来，这里也就可以说明卷积核就代表着h[-n].\n\n至此感觉大家对卷积的理解也应该很深刻了把！\n\n\n  [1]: https://www.bilibili.com/video/BV1cs411W74f\n  [2]: https://www.bilibili.com/video/BV1vE411h7W2\n  [3]: https://www.bilibili.com/video/BV1fs411p7zD\n  [4]: /old_images/2020/03/2487254389.png\n  [5]: /old_images/2020/03/3384316763.png\n  [6]: /old_images/2020/03/3781678227.png\n  [7]: /old_images/2020/03/1392671162.png\n  [8]: /old_images/2020/03/1451641391.png\n  [9]: /old_images/2020/03/2566011118.png\n  [10]: /old_images/2020/03/3384316763.png\n  [11]: /old_images/2020/03/1666061624.png\n  [12]: /old_images/2020/03/2875168475.gif\n  [13]: /old_images/2020/03/417397721.png\n  [14]: /old_images/2020/03/2715500984.gif\n  [15]: /old_images/2020/03/2861910617.png\n","slug":"俺对卷积的粗鄙理解","published":1,"updated":"2020-12-14T12:20:36.246Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0by000z7p19beaocgdd","content":"<p>说到卷积，你们首先会想到什么？卷饼？烧鸡？这个卷积可不是吃的啊！<br>写这篇文章契机是上午上网课，第一节是信号与系统，老师讲了一维连续卷积，第二节是数字图像处理，老师讲了二维离散卷积。<br>喂喂喂！你们是约好了吗，一上午老师算是把卷积讲透了，可是我还是一头雾水，这都什么鬼？想起之前DR_CAN也讲过卷积（有空来康康这几个视频：<a href=\"https://www.bilibili.com/video/BV1cs411W74f\">理解卷积的含义</a>、<a href=\"https://www.bilibili.com/video/BV1vE411h7W2\">卷积好声音</a>、<a href=\"https://www.bilibili.com/video/BV1fs411p7zD\">卷积的拉氏变换</a>），我又双叒叕“预习”了一遍卷积，正好趁这个机会总结一下！</p>\n<h2 id=\"卷积一\"><a href=\"#卷积一\" class=\"headerlink\" title=\"卷积一\"></a>卷积一</h2><p><strong>——从系统的角度取理解卷积。</strong></p>\n<p>大家都知道一个LTI系统，可以完全地由这个系统的冲激响应所描述，这是为什么呢，卷积给了我们答案<br><img src=\"/old_images/2020/03/2487254389.png\" alt=\"Snipaste_2020-03-23_17-05-22.png\"><br>左边这一列代表系统的输入可以完全由一系列冲激函数平移到τ时刻加权和（即对τ积分）表示，而权重（代表冲激函数的高度）就是输入函数在τ时刻的取值。<br>右边这一列利用了LTI系统的性质（线性组合+时移），在τ时刻的输入是冲激函数的加权和，那么输出就必然是冲激响应的加权和，于是我们得到著名的卷积公式：<br><img src=\"/old_images/2020/03/3384316763.png\" alt=\"Snipaste_2020-03-23_17-13-40.png\"><br>它表示系统响应等于系统输入卷上系统的冲激响应函数，这也就是为什么冲激响应可以完全地描述系统。<br>由它我们也可以推理得出一些冲激函数的性质，比如说：</p>\n<p> (1). 与冲激函数的卷积就是输入本身<br><img src=\"/old_images/2020/03/3781678227.png\" alt=\"Snipaste_2020-03-23_17-22-24.png\"><br>这个很简单就能证明，当系统冲激响应就是冲激函数，系统的传函可以简单地表示为“1”，那么响应自然就与输入相同啦！<br> (2). 与冲激函数微分、积分的卷积就是输入本身的积分、微分<br><img src=\"/old_images/2020/03/1392671162.png\" alt=\"Snipaste_2020-03-23_17-24-23.png\"><br><img src=\"/old_images/2020/03/1451641391.png\" alt=\"Snipaste_2020-03-23_17-24-33.png\"><br>与上文同理，冲激响应为冲激函数的微分、积分，系统的传函也可简单地表示为“s^n”，也就是说，这个系统单纯地对输入做n阶的微分（或-n阶的积分），自然能得出这个结论<br> (3). 时移特性：f(t-τ)与δ(t-τ)的卷积就是f(t-τ)<br><img src=\"/old_images/2020/03/2566011118.png\" alt=\"Snipaste_2020-03-25_08-16-39.png\"><br>同同同理，系统相当于纯延时环节“e^(-τs)”</p>\n<h2 id=\"卷积二\"><a href=\"#卷积二\" class=\"headerlink\" title=\"卷积二\"></a>卷积二</h2><p><strong>——换个角度看卷积</strong></p>\n<p>重新打量一下这个卷积公式<br><img src=\"/old_images/2020/03/3384316763.png\" alt=\"Snipaste_2020-03-23_17-13-40.png\"><br>是不是很奇妙，他就是两个函数乘积的积分（注意是对τ进行积分，千万别搞错积分变量），放在离散就叫乘积的和。<br>而这两个函数又有什么特点呢？第一个f(τ)，代表着输入样本，第二个h(t-τ)，是系统冲激响应的反向（这大概就是卷积这个“卷”字的由来）加平移t（注意这里的t看作常数，因为我们只现在需要算出t时刻响应的大小）。</p>\n<p>从几何角度来理解更简单一些，先来看一维连续的情况：<br><img src=\"/old_images/2020/03/1666061624.png\" alt=\"Snipaste_2020-03-23_17-43-24.png\"><br>把h(τ)反转，得到一个新函数h(-τ)（注意是以τ为自变量），我们称之为“卷积核”<br>将卷积核右移t=2个单位，再与f(τ)积分，我们不就得到了所要的公式了吗，所以结果就是t=2时刻的响应y(2)啦！<br>当然如果t从-∞到+∞动起来，我们就能连续地获得这个响应y(t)。<br>（＞人＜；）好想支持动图哇！！！</p>\n<p>那为什么要这么算卷积呢，因为这个角度去计算离散卷积会很方便，比如这个例子：<br><img src=\"/old_images/2020/03/2875168475.gif\" alt=\"automatic_investment_plan.gif\"><br>woc竟然能动？？？(☆▽☆)<br>对于连续来讲的积分变成了求和，这下一个一个地计算y[n]是不是很方便呢！</p>\n<p>在数字图像处理、深度学习等课程上，老师将这种操作也叫做了卷积，当时的我们可能会不理解，但是现在来看，这种操作是不是很容易理解呢？<br><img src=\"/old_images/2020/03/417397721.png\" alt=\"Snipaste_2020-03-23_17-57-59.png\"><br>终于，我们来看上面这个二维离散卷积的例子，拿它来和我们的一维离散卷积来对比一下<br>Original这张图就相当于输入f[n]，而这个Filter就相当于我们的卷积核h[-n]，当m = 灰色e时（我也不知道为啥有两个e），也就是卷积核移动到了灰色e这个位置，计算一次离散卷积，也就是将对应位置的灰度值相乘再相加，我们就得到了输出图像t = 灰色e位置时的输出eprocessed，相当于y[m = 灰色e]，再对其他位置的像素进行卷积运算就可以得到整张图的最终结果y[m]啦。<br>整个卷积的过程下面这个动图展示的淋漓尽致啦：<br><img src=\"/old_images/2020/03/2715500984.gif\" alt=\"convolutions_on_images.gif\"><br>尤其要注意的有一点：那就是图像处理里面直接拿来用的卷积核，就是已经经过反转的冲激响应了，从下面这个例子也可以看出来：<br><img src=\"/old_images/2020/03/2861910617.png\" alt=\"Snipaste_2020-03-23_18-07-01.png\"><br>原图中的1就相当于一个冲激函数，它经过卷积核后的响应正好是卷积核反过来，这里也就可以说明卷积核就代表着h[-n].</p>\n<p>至此感觉大家对卷积的理解也应该很深刻了把！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>说到卷积，你们首先会想到什么？卷饼？烧鸡？这个卷积可不是吃的啊！<br>写这篇文章契机是上午上网课，第一节是信号与系统，老师讲了一维连续卷积，第二节是数字图像处理，老师讲了二维离散卷积。<br>喂喂喂！你们是约好了吗，一上午老师算是把卷积讲透了，可是我还是一头雾水，这都什么鬼？想起之前DR_CAN也讲过卷积（有空来康康这几个视频：<a href=\"https://www.bilibili.com/video/BV1cs411W74f\">理解卷积的含义</a>、<a href=\"https://www.bilibili.com/video/BV1vE411h7W2\">卷积好声音</a>、<a href=\"https://www.bilibili.com/video/BV1fs411p7zD\">卷积的拉氏变换</a>），我又双叒叕“预习”了一遍卷积，正好趁这个机会总结一下！</p>\n<h2 id=\"卷积一\"><a href=\"#卷积一\" class=\"headerlink\" title=\"卷积一\"></a>卷积一</h2><p><strong>——从系统的角度取理解卷积。</strong></p>\n<p>大家都知道一个LTI系统，可以完全地由这个系统的冲激响应所描述，这是为什么呢，卷积给了我们答案<br><img src=\"/old_images/2020/03/2487254389.png\" alt=\"Snipaste_2020-03-23_17-05-22.png\"><br>左边这一列代表系统的输入可以完全由一系列冲激函数平移到τ时刻加权和（即对τ积分）表示，而权重（代表冲激函数的高度）就是输入函数在τ时刻的取值。<br>右边这一列利用了LTI系统的性质（线性组合+时移），在τ时刻的输入是冲激函数的加权和，那么输出就必然是冲激响应的加权和，于是我们得到著名的卷积公式：<br><img src=\"/old_images/2020/03/3384316763.png\" alt=\"Snipaste_2020-03-23_17-13-40.png\"><br>它表示系统响应等于系统输入卷上系统的冲激响应函数，这也就是为什么冲激响应可以完全地描述系统。<br>由它我们也可以推理得出一些冲激函数的性质，比如说：</p>\n<p> (1). 与冲激函数的卷积就是输入本身<br><img src=\"/old_images/2020/03/3781678227.png\" alt=\"Snipaste_2020-03-23_17-22-24.png\"><br>这个很简单就能证明，当系统冲激响应就是冲激函数，系统的传函可以简单地表示为“1”，那么响应自然就与输入相同啦！<br> (2). 与冲激函数微分、积分的卷积就是输入本身的积分、微分<br><img src=\"/old_images/2020/03/1392671162.png\" alt=\"Snipaste_2020-03-23_17-24-23.png\"><br><img src=\"/old_images/2020/03/1451641391.png\" alt=\"Snipaste_2020-03-23_17-24-33.png\"><br>与上文同理，冲激响应为冲激函数的微分、积分，系统的传函也可简单地表示为“s^n”，也就是说，这个系统单纯地对输入做n阶的微分（或-n阶的积分），自然能得出这个结论<br> (3). 时移特性：f(t-τ)与δ(t-τ)的卷积就是f(t-τ)<br><img src=\"/old_images/2020/03/2566011118.png\" alt=\"Snipaste_2020-03-25_08-16-39.png\"><br>同同同理，系统相当于纯延时环节“e^(-τs)”</p>\n<h2 id=\"卷积二\"><a href=\"#卷积二\" class=\"headerlink\" title=\"卷积二\"></a>卷积二</h2><p><strong>——换个角度看卷积</strong></p>\n<p>重新打量一下这个卷积公式<br><img src=\"/old_images/2020/03/3384316763.png\" alt=\"Snipaste_2020-03-23_17-13-40.png\"><br>是不是很奇妙，他就是两个函数乘积的积分（注意是对τ进行积分，千万别搞错积分变量），放在离散就叫乘积的和。<br>而这两个函数又有什么特点呢？第一个f(τ)，代表着输入样本，第二个h(t-τ)，是系统冲激响应的反向（这大概就是卷积这个“卷”字的由来）加平移t（注意这里的t看作常数，因为我们只现在需要算出t时刻响应的大小）。</p>\n<p>从几何角度来理解更简单一些，先来看一维连续的情况：<br><img src=\"/old_images/2020/03/1666061624.png\" alt=\"Snipaste_2020-03-23_17-43-24.png\"><br>把h(τ)反转，得到一个新函数h(-τ)（注意是以τ为自变量），我们称之为“卷积核”<br>将卷积核右移t=2个单位，再与f(τ)积分，我们不就得到了所要的公式了吗，所以结果就是t=2时刻的响应y(2)啦！<br>当然如果t从-∞到+∞动起来，我们就能连续地获得这个响应y(t)。<br>（＞人＜；）好想支持动图哇！！！</p>\n<p>那为什么要这么算卷积呢，因为这个角度去计算离散卷积会很方便，比如这个例子：<br><img src=\"/old_images/2020/03/2875168475.gif\" alt=\"automatic_investment_plan.gif\"><br>woc竟然能动？？？(☆▽☆)<br>对于连续来讲的积分变成了求和，这下一个一个地计算y[n]是不是很方便呢！</p>\n<p>在数字图像处理、深度学习等课程上，老师将这种操作也叫做了卷积，当时的我们可能会不理解，但是现在来看，这种操作是不是很容易理解呢？<br><img src=\"/old_images/2020/03/417397721.png\" alt=\"Snipaste_2020-03-23_17-57-59.png\"><br>终于，我们来看上面这个二维离散卷积的例子，拿它来和我们的一维离散卷积来对比一下<br>Original这张图就相当于输入f[n]，而这个Filter就相当于我们的卷积核h[-n]，当m = 灰色e时（我也不知道为啥有两个e），也就是卷积核移动到了灰色e这个位置，计算一次离散卷积，也就是将对应位置的灰度值相乘再相加，我们就得到了输出图像t = 灰色e位置时的输出eprocessed，相当于y[m = 灰色e]，再对其他位置的像素进行卷积运算就可以得到整张图的最终结果y[m]啦。<br>整个卷积的过程下面这个动图展示的淋漓尽致啦：<br><img src=\"/old_images/2020/03/2715500984.gif\" alt=\"convolutions_on_images.gif\"><br>尤其要注意的有一点：那就是图像处理里面直接拿来用的卷积核，就是已经经过反转的冲激响应了，从下面这个例子也可以看出来：<br><img src=\"/old_images/2020/03/2861910617.png\" alt=\"Snipaste_2020-03-23_18-07-01.png\"><br>原图中的1就相当于一个冲激函数，它经过卷积核后的响应正好是卷积核反过来，这里也就可以说明卷积核就代表着h[-n].</p>\n<p>至此感觉大家对卷积的理解也应该很深刻了把！</p>\n"},{"title":"俺滴课表","date":"2020-02-24T17:46:00.000Z","toc":true,"_content":"欢迎大家按照课表时间来偶遇俺！\n\n\n----------\n![schedule.PNG][1]\n\n\n  [1]: /old_images/2020/02/4250702223.png\n","source":"_posts/俺滴课表.md","raw":"title: 俺滴课表\ndate: 2020-02-25 01:46:00\ncategories: 日常\ntags: []\ntoc: true\n---\n欢迎大家按照课表时间来偶遇俺！\n\n\n----------\n![schedule.PNG][1]\n\n\n  [1]: /old_images/2020/02/4250702223.png\n","slug":"俺滴课表","published":1,"updated":"2020-12-14T12:20:33.214Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0bz00117p19hakh1dls","content":"<p>欢迎大家按照课表时间来偶遇俺！</p>\n<hr>\n<p><img src=\"/old_images/2020/02/4250702223.png\" alt=\"schedule.PNG\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>欢迎大家按照课表时间来偶遇俺！</p>\n<hr>\n<p><img src=\"/old_images/2020/02/4250702223.png\" alt=\"schedule.PNG\"></p>\n"},{"title":"傅里叶变换的两种变形——L&amp;Z","date":"2020-04-23T22:11:00.000Z","toc":true,"_content":"## 拉普拉斯变换 ##\n\n函数能够进行傅里叶变换的条件是绝对可积，但是许多信号都不满足这个条件，为了能对更多信号进行频域分析，引入一个收敛因子σ，这个函数就变成了绝对可积的了：\n![Snipaste_2020-04-24_14-15-26.png][1]\n这样对这个新函数的傅里叶变换就成了：\n![Snipaste_2020-04-24_14-18-27.png][2]\n其中：\n![Snipaste_2020-04-24_14-15-04.png][3]\n这个算子e^-st是这样螺旋收敛的：\n![v2-43d198199e03853a065ed3e424a761c4_720w.jpg][4]\n拉氏变换将微积分运算变为代数运算，可以很方便地用来解微分方程。\n\n## Z变换 ##\n\n离散时间傅里叶变换DTFT需要序列满足绝对可和的条件，同样的道理，也让它加上一个收敛因子σ：\n![Snipaste_2020-04-24_15-46-10.png][5]\n其中：\n![Snipaste_2020-04-24_15-46-05.png][6]\n也可认为z变换就是对离散信号的拉普拉斯变换。\nz变换将序列的差分求和运算变换为代数运算，可以很方便地用来解差分方程。\n\n\n以上这二者由于收敛因子的引入，需要注意收敛域的明确。\n\n## 离散系统设计 ##\n\n对于一个连续系统，可以通过系统s域传递函数的零极点判断系统性质；\n而对于一个离散系统，可以通过系统z域传递函数的零极点判断系统性质；\n由s到z是一个复平面上一一对应的映射关系，s平面上稳定性分割线Re=0在z平面就变成了|z|=1，称为判断离散系统稳定性的基本判据；\n\n我们很难实现通过微分方程来更新系统（模拟电路），但很容易实现差分方程更新系统（数字处理器）！\n对于一个离散控制系统，我们可以先在连续状态下设计控制器（使用微分方程），再离散化（转化为程序能实现的差分方程）：\n用系统s域传函离散化为系统的z域传函（利用泰勒展开近似为z的多项式形式），再来求出系统的差分方程，即可应用在数字控制器中，这是系统离散化的一种常用的手段。\n利用z变换的性质，有很重要的方法来求差分方程：\nx[k]   <->   X(z)\nx[k+1] <-> z*X(z)\n\n对于观测器与滤波器，这个离散系统将一直在程序中更新迭代，得到离散的输出；\n而对于控制器，最终得到的输出序列再经过零阶保持器，又变为连续信号输入被控系统。\n\n\n  [1]: /old_images/2020/04/2618287092.png\n  [2]: /old_images/2020/04/880508434.png\n  [3]: /old_images/2020/04/3285543330.png\n  [4]: /old_images/2020/04/3074183323.jpg\n  [5]: /old_images/2020/04/2449902183.png\n  [6]: /old_images/2020/04/1621410449.png\n","source":"_posts/傅里叶变换的两种变形——L&amp;Z.md","raw":"title: 傅里叶变换的两种变形——L&amp;Z\ndate: 2020-04-24 06:11:00\ncategories: 物数\ntags: []\ntoc: true\n---\n## 拉普拉斯变换 ##\n\n函数能够进行傅里叶变换的条件是绝对可积，但是许多信号都不满足这个条件，为了能对更多信号进行频域分析，引入一个收敛因子σ，这个函数就变成了绝对可积的了：\n![Snipaste_2020-04-24_14-15-26.png][1]\n这样对这个新函数的傅里叶变换就成了：\n![Snipaste_2020-04-24_14-18-27.png][2]\n其中：\n![Snipaste_2020-04-24_14-15-04.png][3]\n这个算子e^-st是这样螺旋收敛的：\n![v2-43d198199e03853a065ed3e424a761c4_720w.jpg][4]\n拉氏变换将微积分运算变为代数运算，可以很方便地用来解微分方程。\n\n## Z变换 ##\n\n离散时间傅里叶变换DTFT需要序列满足绝对可和的条件，同样的道理，也让它加上一个收敛因子σ：\n![Snipaste_2020-04-24_15-46-10.png][5]\n其中：\n![Snipaste_2020-04-24_15-46-05.png][6]\n也可认为z变换就是对离散信号的拉普拉斯变换。\nz变换将序列的差分求和运算变换为代数运算，可以很方便地用来解差分方程。\n\n\n以上这二者由于收敛因子的引入，需要注意收敛域的明确。\n\n## 离散系统设计 ##\n\n对于一个连续系统，可以通过系统s域传递函数的零极点判断系统性质；\n而对于一个离散系统，可以通过系统z域传递函数的零极点判断系统性质；\n由s到z是一个复平面上一一对应的映射关系，s平面上稳定性分割线Re=0在z平面就变成了|z|=1，称为判断离散系统稳定性的基本判据；\n\n我们很难实现通过微分方程来更新系统（模拟电路），但很容易实现差分方程更新系统（数字处理器）！\n对于一个离散控制系统，我们可以先在连续状态下设计控制器（使用微分方程），再离散化（转化为程序能实现的差分方程）：\n用系统s域传函离散化为系统的z域传函（利用泰勒展开近似为z的多项式形式），再来求出系统的差分方程，即可应用在数字控制器中，这是系统离散化的一种常用的手段。\n利用z变换的性质，有很重要的方法来求差分方程：\nx[k]   <->   X(z)\nx[k+1] <-> z*X(z)\n\n对于观测器与滤波器，这个离散系统将一直在程序中更新迭代，得到离散的输出；\n而对于控制器，最终得到的输出序列再经过零阶保持器，又变为连续信号输入被控系统。\n\n\n  [1]: /old_images/2020/04/2618287092.png\n  [2]: /old_images/2020/04/880508434.png\n  [3]: /old_images/2020/04/3285543330.png\n  [4]: /old_images/2020/04/3074183323.jpg\n  [5]: /old_images/2020/04/2449902183.png\n  [6]: /old_images/2020/04/1621410449.png\n","slug":"傅里叶变换的两种变形——L&amp;Z","published":1,"updated":"2020-12-14T12:21:04.550Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0c000147p19d5gogt4a","content":"<h2 id=\"拉普拉斯变换\"><a href=\"#拉普拉斯变换\" class=\"headerlink\" title=\"拉普拉斯变换\"></a>拉普拉斯变换</h2><p>函数能够进行傅里叶变换的条件是绝对可积，但是许多信号都不满足这个条件，为了能对更多信号进行频域分析，引入一个收敛因子σ，这个函数就变成了绝对可积的了：<br><img src=\"/old_images/2020/04/2618287092.png\" alt=\"Snipaste_2020-04-24_14-15-26.png\"><br>这样对这个新函数的傅里叶变换就成了：<br><img src=\"/old_images/2020/04/880508434.png\" alt=\"Snipaste_2020-04-24_14-18-27.png\"><br>其中：<br><img src=\"/old_images/2020/04/3285543330.png\" alt=\"Snipaste_2020-04-24_14-15-04.png\"><br>这个算子e^-st是这样螺旋收敛的：<br><img src=\"/old_images/2020/04/3074183323.jpg\" alt=\"v2-43d198199e03853a065ed3e424a761c4_720w.jpg\"><br>拉氏变换将微积分运算变为代数运算，可以很方便地用来解微分方程。</p>\n<h2 id=\"Z变换\"><a href=\"#Z变换\" class=\"headerlink\" title=\"Z变换\"></a>Z变换</h2><p>离散时间傅里叶变换DTFT需要序列满足绝对可和的条件，同样的道理，也让它加上一个收敛因子σ：<br><img src=\"/old_images/2020/04/2449902183.png\" alt=\"Snipaste_2020-04-24_15-46-10.png\"><br>其中：<br><img src=\"/old_images/2020/04/1621410449.png\" alt=\"Snipaste_2020-04-24_15-46-05.png\"><br>也可认为z变换就是对离散信号的拉普拉斯变换。<br>z变换将序列的差分求和运算变换为代数运算，可以很方便地用来解差分方程。</p>\n<p>以上这二者由于收敛因子的引入，需要注意收敛域的明确。</p>\n<h2 id=\"离散系统设计\"><a href=\"#离散系统设计\" class=\"headerlink\" title=\"离散系统设计\"></a>离散系统设计</h2><p>对于一个连续系统，可以通过系统s域传递函数的零极点判断系统性质；<br>而对于一个离散系统，可以通过系统z域传递函数的零极点判断系统性质；<br>由s到z是一个复平面上一一对应的映射关系，s平面上稳定性分割线Re=0在z平面就变成了|z|=1，称为判断离散系统稳定性的基本判据；</p>\n<p>我们很难实现通过微分方程来更新系统（模拟电路），但很容易实现差分方程更新系统（数字处理器）！<br>对于一个离散控制系统，我们可以先在连续状态下设计控制器（使用微分方程），再离散化（转化为程序能实现的差分方程）：<br>用系统s域传函离散化为系统的z域传函（利用泰勒展开近似为z的多项式形式），再来求出系统的差分方程，即可应用在数字控制器中，这是系统离散化的一种常用的手段。<br>利用z变换的性质，有很重要的方法来求差分方程：<br>x[k]   &lt;-&gt;   X(z)<br>x[k+1] &lt;-&gt; z*X(z)</p>\n<p>对于观测器与滤波器，这个离散系统将一直在程序中更新迭代，得到离散的输出；<br>而对于控制器，最终得到的输出序列再经过零阶保持器，又变为连续信号输入被控系统。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"拉普拉斯变换\"><a href=\"#拉普拉斯变换\" class=\"headerlink\" title=\"拉普拉斯变换\"></a>拉普拉斯变换</h2><p>函数能够进行傅里叶变换的条件是绝对可积，但是许多信号都不满足这个条件，为了能对更多信号进行频域分析，引入一个收敛因子σ，这个函数就变成了绝对可积的了：<br><img src=\"/old_images/2020/04/2618287092.png\" alt=\"Snipaste_2020-04-24_14-15-26.png\"><br>这样对这个新函数的傅里叶变换就成了：<br><img src=\"/old_images/2020/04/880508434.png\" alt=\"Snipaste_2020-04-24_14-18-27.png\"><br>其中：<br><img src=\"/old_images/2020/04/3285543330.png\" alt=\"Snipaste_2020-04-24_14-15-04.png\"><br>这个算子e^-st是这样螺旋收敛的：<br><img src=\"/old_images/2020/04/3074183323.jpg\" alt=\"v2-43d198199e03853a065ed3e424a761c4_720w.jpg\"><br>拉氏变换将微积分运算变为代数运算，可以很方便地用来解微分方程。</p>\n<h2 id=\"Z变换\"><a href=\"#Z变换\" class=\"headerlink\" title=\"Z变换\"></a>Z变换</h2><p>离散时间傅里叶变换DTFT需要序列满足绝对可和的条件，同样的道理，也让它加上一个收敛因子σ：<br><img src=\"/old_images/2020/04/2449902183.png\" alt=\"Snipaste_2020-04-24_15-46-10.png\"><br>其中：<br><img src=\"/old_images/2020/04/1621410449.png\" alt=\"Snipaste_2020-04-24_15-46-05.png\"><br>也可认为z变换就是对离散信号的拉普拉斯变换。<br>z变换将序列的差分求和运算变换为代数运算，可以很方便地用来解差分方程。</p>\n<p>以上这二者由于收敛因子的引入，需要注意收敛域的明确。</p>\n<h2 id=\"离散系统设计\"><a href=\"#离散系统设计\" class=\"headerlink\" title=\"离散系统设计\"></a>离散系统设计</h2><p>对于一个连续系统，可以通过系统s域传递函数的零极点判断系统性质；<br>而对于一个离散系统，可以通过系统z域传递函数的零极点判断系统性质；<br>由s到z是一个复平面上一一对应的映射关系，s平面上稳定性分割线Re=0在z平面就变成了|z|=1，称为判断离散系统稳定性的基本判据；</p>\n<p>我们很难实现通过微分方程来更新系统（模拟电路），但很容易实现差分方程更新系统（数字处理器）！<br>对于一个离散控制系统，我们可以先在连续状态下设计控制器（使用微分方程），再离散化（转化为程序能实现的差分方程）：<br>用系统s域传函离散化为系统的z域传函（利用泰勒展开近似为z的多项式形式），再来求出系统的差分方程，即可应用在数字控制器中，这是系统离散化的一种常用的手段。<br>利用z变换的性质，有很重要的方法来求差分方程：<br>x[k]   &lt;-&gt;   X(z)<br>x[k+1] &lt;-&gt; z*X(z)</p>\n<p>对于观测器与滤波器，这个离散系统将一直在程序中更新迭代，得到离散的输出；<br>而对于控制器，最终得到的输出序列再经过零阶保持器，又变为连续信号输入被控系统。</p>\n"},{"title":"出息啦！","date":"2020-04-18T04:19:41.000Z","toc":true,"_content":"![4ZL893UZXIA@LY7@1U`VG92.png][1]\n\n![TIM图片20200418201710.png][2]\n\n被谷歌爬到了！可惜百度还是没有(;´༎ຶД༎ຶ`)\n\n  [1]: /old_images/2020/04/1650604475.png\n  [2]: /old_images/2020/04/1882562433.png\n","source":"_posts/出息啦！.md","raw":"title: 出息啦！\ndate: 2020-04-18 12:19:41\ncategories: 日常\ntags: []\ntoc: true\n---\n![4ZL893UZXIA@LY7@1U`VG92.png][1]\n\n![TIM图片20200418201710.png][2]\n\n被谷歌爬到了！可惜百度还是没有(;´༎ຶД༎ຶ`)\n\n  [1]: /old_images/2020/04/1650604475.png\n  [2]: /old_images/2020/04/1882562433.png\n","slug":"出息啦！","published":1,"updated":"2020-12-14T12:20:42.814Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0c000167p1900fh3w7h","content":"<p>![4ZL893UZXIA@LY7@1U`VG92.png]<a href=\"/old_images/2020/04/1650604475.png\">1</a></p>\n<p><img src=\"/old_images/2020/04/1882562433.png\" alt=\"TIM图片20200418201710.png\"></p>\n<p>被谷歌爬到了！可惜百度还是没有(;´༎ຶД༎ຶ`)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>![4ZL893UZXIA@LY7@1U`VG92.png]<a href=\"/old_images/2020/04/1650604475.png\">1</a></p>\n<p><img src=\"/old_images/2020/04/1882562433.png\" alt=\"TIM图片20200418201710.png\"></p>\n<p>被谷歌爬到了！可惜百度还是没有(;´༎ຶД༎ຶ`)</p>\n"},{"title":"初探自抗扰控制（ADRC）","date":"2020-04-14T20:10:00.000Z","toc":true,"_content":"学习控制的小伙伴们大概都听说过自抗扰控制ADRC，但你未必知晓自抗扰控制的提出者——韩京清先生。是的，自抗扰控制这一理论方法，正是由我们中国科学家发明的。\n韩京清，系统与控制专家，我国控制理论和应用的早期开拓者之一。用最优控制理论提出了拦截问题中新的制导概念和方法；在国内率先推动控制系统计算机辅助设计软件的开发和研究。\n这次我们就来初步了解一下自抗扰控制。\n韩老提出的自抗扰控制由三部分组成：\n 1. 跟踪微分器（TD）\n 2. 扩张状态观测器（ESO）\n 3. 非线性状态误差反馈控制率（NLSEF）\n\n![v2-ba80e3fe72af3e5b746f1919c596f827_r.jpg][1]\n这三部分一起，构成了ADRC自抗扰控制理论，但是，这三部分不仅仅只能用在ADRC技术中，还可以单独提取出来，与其他控制理论相结合使用。例如跟踪微分器TD就可以用来产生平滑信号来跟踪输入，并且还可以计算该平滑信号的微分，扩张状态观测器ES还可用在观测系统除状态变量外的一些扰动上等等。由此可见，自抗扰控制不仅是一种控制方法，同时还为工程师们提供了解决工程问题的方法。\n下面我们分别讨论ADRC这三个重要组成部分。\n\n## 跟踪微分器TD ##\n在讲跟踪微分器之前，想一想平常我们是怎样对数字信号作微分的？是不是用差分替代呢？\n常用的几种方法：\nz变换方法：![Snipaste_2020-04-15_14-41-42.png][2]\n后向差分法：![Snipaste_2020-04-15_14-37-57.png][3]\n前向差分法：![Snipaste_2020-04-15_14-39-22.png][4]\n双线性法：![Snipaste_2020-04-15_14-39-59.png][5]\n使用这些方法可以将连续系统传函（s域）转化为离散系统传函（z域），这样即可离散地描述微分，但是往往这样面临着局限性，通常由于传感器测量噪声导致微分噪声明显。\n\n**再让我们来看一下TD是什么样子的，**\n![Snipaste_2020-04-15_14-56-05.png][6]\n其中：\n![Snipaste_2020-04-15_15-06-21.png][7]\n**代码实现：**\n\n    void TD_Function(TD *tdtd)\n    {\n\tfloat d,d0,y,a0,a=0;\n\ttdtd->x = tdtd->x1 - tdtd->aim;\n\td = tdtd->r*tdtd->h;\td0=tdtd->h * d;\ty = tdtd->x + tdtd->h*tdtd->x2;\n\ta0 = sqrt(d*d+8*tdtd->r*fabs(y));\n\tif(fabs(y)>d0)\t\n\t{\n\t\ta = tdtd->x2+(a0-d)*Sgn(y)/2;\n\t}\n\telse\n\t{\n\t\ta = tdtd->x2 + y/tdtd->h;\n\t}\n\t\n\t\tif(fabs(a)>d)\t\n\t{\n\t\ty=-1*tdtd->r*Sgn(a);\n\t}\n\telse\n\t{\n\t\ty=-1*tdtd->r*a/d;\n\t}\n\ttdtd->x1 +=  0.001f*tdtd->x2;\n\ttdtd->x2 +=  0.001f*y; \n    }\n\n\n跟踪微分器的参数主要有两个：快速因子r和滤波因子h。其中，r与跟踪速度呈正相关，然而，随之带来的是噪声放大的副作用； h与滤波效果呈正相关，但当h增大时，跟踪信号的相位损失也会随之增加。\n简单来讲，可以将TD理解为一个低通滤波器，输出的x1就是滤波后的结果，它是跟踪输入信号的。输出的x2则代表对x1的微分，这样降低了输入信号噪声对微分效果的影响。\n在自抗扰控制中，使用跟踪微分器获得状态变量的微分，是用来在系统动态跟踪目标时，前馈掉系统输出中关于x的微分项的。比如在电机伺服控制中，可以通过跟踪微分器跟踪x_des的微分，在速度目标中加以补偿，以达到更好的动态效果，这样的方法常称为速度前馈。\n\n## 扩张状态观测器ESO ##\n为了进一步地消除扰动对系统的影响，我们通过扩张状态观测器对扰动进行观测，通过前馈补偿到系统模型中，这样的方法就叫做扩张状态观测器ESO。在系统微分方程中加入扰动项，并且将扰动视作状态变量（通常视扰动的导数为0），这样构造的新的状态方程就叫做扩张（Extend）的状态方程。使用这个状态方程构建观测器，通过测量量来观测状态量，就能得到扰动。这就是扩张状态观测器ESO的中心思想。\n当然，与此同时，此观测器还可得到其他状态变量的观测值。\n![20190318105009907.png][9]\n\n## 非线性状态误差反馈控制率NLSEF ##\n非线性状态误差反馈控制器结构如下：\n![Snipaste_2020-04-15_15-46-46.png][10]\n韩老论文中这样描述这个状态变量非线性组合：\n![Snipaste_2020-04-15_15-56-11.png][11]\n简单理解的话，NLSEF可以看作是一个非线性PID控制器。\n\n\n\n  [1]: /old_images/2020/04/3257021255.jpg\n  [2]: /old_images/2020/04/2906032673.png\n  [3]: /old_images/2020/04/1299645001.png\n  [4]: /old_images/2020/04/2554124242.png\n  [5]: /old_images/2020/04/3960144680.png\n  [6]: /old_images/2020/04/1901336664.png\n  [7]: /old_images/2020/04/2682758795.png\n  [8]: /old_images/2020/04/3432493824.png\n  [9]: /old_images/2020/04/604554278.png\n  [10]: /old_images/2020/04/3271978332.png\n  [11]: /old_images/2020/04/2295689788.png\n","source":"_posts/初探自抗扰控制（ADRC）.md","raw":"title: 初探自抗扰控制（ADRC）\ndate: 2020-04-15 04:10:00\ncategories: 控制\ntags: []\ntoc: true\n---\n学习控制的小伙伴们大概都听说过自抗扰控制ADRC，但你未必知晓自抗扰控制的提出者——韩京清先生。是的，自抗扰控制这一理论方法，正是由我们中国科学家发明的。\n韩京清，系统与控制专家，我国控制理论和应用的早期开拓者之一。用最优控制理论提出了拦截问题中新的制导概念和方法；在国内率先推动控制系统计算机辅助设计软件的开发和研究。\n这次我们就来初步了解一下自抗扰控制。\n韩老提出的自抗扰控制由三部分组成：\n 1. 跟踪微分器（TD）\n 2. 扩张状态观测器（ESO）\n 3. 非线性状态误差反馈控制率（NLSEF）\n\n![v2-ba80e3fe72af3e5b746f1919c596f827_r.jpg][1]\n这三部分一起，构成了ADRC自抗扰控制理论，但是，这三部分不仅仅只能用在ADRC技术中，还可以单独提取出来，与其他控制理论相结合使用。例如跟踪微分器TD就可以用来产生平滑信号来跟踪输入，并且还可以计算该平滑信号的微分，扩张状态观测器ES还可用在观测系统除状态变量外的一些扰动上等等。由此可见，自抗扰控制不仅是一种控制方法，同时还为工程师们提供了解决工程问题的方法。\n下面我们分别讨论ADRC这三个重要组成部分。\n\n## 跟踪微分器TD ##\n在讲跟踪微分器之前，想一想平常我们是怎样对数字信号作微分的？是不是用差分替代呢？\n常用的几种方法：\nz变换方法：![Snipaste_2020-04-15_14-41-42.png][2]\n后向差分法：![Snipaste_2020-04-15_14-37-57.png][3]\n前向差分法：![Snipaste_2020-04-15_14-39-22.png][4]\n双线性法：![Snipaste_2020-04-15_14-39-59.png][5]\n使用这些方法可以将连续系统传函（s域）转化为离散系统传函（z域），这样即可离散地描述微分，但是往往这样面临着局限性，通常由于传感器测量噪声导致微分噪声明显。\n\n**再让我们来看一下TD是什么样子的，**\n![Snipaste_2020-04-15_14-56-05.png][6]\n其中：\n![Snipaste_2020-04-15_15-06-21.png][7]\n**代码实现：**\n\n    void TD_Function(TD *tdtd)\n    {\n\tfloat d,d0,y,a0,a=0;\n\ttdtd->x = tdtd->x1 - tdtd->aim;\n\td = tdtd->r*tdtd->h;\td0=tdtd->h * d;\ty = tdtd->x + tdtd->h*tdtd->x2;\n\ta0 = sqrt(d*d+8*tdtd->r*fabs(y));\n\tif(fabs(y)>d0)\t\n\t{\n\t\ta = tdtd->x2+(a0-d)*Sgn(y)/2;\n\t}\n\telse\n\t{\n\t\ta = tdtd->x2 + y/tdtd->h;\n\t}\n\t\n\t\tif(fabs(a)>d)\t\n\t{\n\t\ty=-1*tdtd->r*Sgn(a);\n\t}\n\telse\n\t{\n\t\ty=-1*tdtd->r*a/d;\n\t}\n\ttdtd->x1 +=  0.001f*tdtd->x2;\n\ttdtd->x2 +=  0.001f*y; \n    }\n\n\n跟踪微分器的参数主要有两个：快速因子r和滤波因子h。其中，r与跟踪速度呈正相关，然而，随之带来的是噪声放大的副作用； h与滤波效果呈正相关，但当h增大时，跟踪信号的相位损失也会随之增加。\n简单来讲，可以将TD理解为一个低通滤波器，输出的x1就是滤波后的结果，它是跟踪输入信号的。输出的x2则代表对x1的微分，这样降低了输入信号噪声对微分效果的影响。\n在自抗扰控制中，使用跟踪微分器获得状态变量的微分，是用来在系统动态跟踪目标时，前馈掉系统输出中关于x的微分项的。比如在电机伺服控制中，可以通过跟踪微分器跟踪x_des的微分，在速度目标中加以补偿，以达到更好的动态效果，这样的方法常称为速度前馈。\n\n## 扩张状态观测器ESO ##\n为了进一步地消除扰动对系统的影响，我们通过扩张状态观测器对扰动进行观测，通过前馈补偿到系统模型中，这样的方法就叫做扩张状态观测器ESO。在系统微分方程中加入扰动项，并且将扰动视作状态变量（通常视扰动的导数为0），这样构造的新的状态方程就叫做扩张（Extend）的状态方程。使用这个状态方程构建观测器，通过测量量来观测状态量，就能得到扰动。这就是扩张状态观测器ESO的中心思想。\n当然，与此同时，此观测器还可得到其他状态变量的观测值。\n![20190318105009907.png][9]\n\n## 非线性状态误差反馈控制率NLSEF ##\n非线性状态误差反馈控制器结构如下：\n![Snipaste_2020-04-15_15-46-46.png][10]\n韩老论文中这样描述这个状态变量非线性组合：\n![Snipaste_2020-04-15_15-56-11.png][11]\n简单理解的话，NLSEF可以看作是一个非线性PID控制器。\n\n\n\n  [1]: /old_images/2020/04/3257021255.jpg\n  [2]: /old_images/2020/04/2906032673.png\n  [3]: /old_images/2020/04/1299645001.png\n  [4]: /old_images/2020/04/2554124242.png\n  [5]: /old_images/2020/04/3960144680.png\n  [6]: /old_images/2020/04/1901336664.png\n  [7]: /old_images/2020/04/2682758795.png\n  [8]: /old_images/2020/04/3432493824.png\n  [9]: /old_images/2020/04/604554278.png\n  [10]: /old_images/2020/04/3271978332.png\n  [11]: /old_images/2020/04/2295689788.png\n","slug":"初探自抗扰控制（ADRC）","published":1,"updated":"2020-12-14T12:20:45.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0c100197p19ccpmhyru","content":"<p>学习控制的小伙伴们大概都听说过自抗扰控制ADRC，但你未必知晓自抗扰控制的提出者——韩京清先生。是的，自抗扰控制这一理论方法，正是由我们中国科学家发明的。<br>韩京清，系统与控制专家，我国控制理论和应用的早期开拓者之一。用最优控制理论提出了拦截问题中新的制导概念和方法；在国内率先推动控制系统计算机辅助设计软件的开发和研究。<br>这次我们就来初步了解一下自抗扰控制。<br>韩老提出的自抗扰控制由三部分组成：</p>\n<ol>\n<li>跟踪微分器（TD）</li>\n<li>扩张状态观测器（ESO）</li>\n<li>非线性状态误差反馈控制率（NLSEF）</li>\n</ol>\n<p><img src=\"/old_images/2020/04/3257021255.jpg\" alt=\"v2-ba80e3fe72af3e5b746f1919c596f827_r.jpg\"><br>这三部分一起，构成了ADRC自抗扰控制理论，但是，这三部分不仅仅只能用在ADRC技术中，还可以单独提取出来，与其他控制理论相结合使用。例如跟踪微分器TD就可以用来产生平滑信号来跟踪输入，并且还可以计算该平滑信号的微分，扩张状态观测器ES还可用在观测系统除状态变量外的一些扰动上等等。由此可见，自抗扰控制不仅是一种控制方法，同时还为工程师们提供了解决工程问题的方法。<br>下面我们分别讨论ADRC这三个重要组成部分。</p>\n<h2 id=\"跟踪微分器TD\"><a href=\"#跟踪微分器TD\" class=\"headerlink\" title=\"跟踪微分器TD\"></a>跟踪微分器TD</h2><p>在讲跟踪微分器之前，想一想平常我们是怎样对数字信号作微分的？是不是用差分替代呢？<br>常用的几种方法：<br>z变换方法：<img src=\"/old_images/2020/04/2906032673.png\" alt=\"Snipaste_2020-04-15_14-41-42.png\"><br>后向差分法：<img src=\"/old_images/2020/04/1299645001.png\" alt=\"Snipaste_2020-04-15_14-37-57.png\"><br>前向差分法：<img src=\"/old_images/2020/04/2554124242.png\" alt=\"Snipaste_2020-04-15_14-39-22.png\"><br>双线性法：<img src=\"/old_images/2020/04/3960144680.png\" alt=\"Snipaste_2020-04-15_14-39-59.png\"><br>使用这些方法可以将连续系统传函（s域）转化为离散系统传函（z域），这样即可离散地描述微分，但是往往这样面临着局限性，通常由于传感器测量噪声导致微分噪声明显。</p>\n<p><strong>再让我们来看一下TD是什么样子的，</strong><br><img src=\"/old_images/2020/04/1901336664.png\" alt=\"Snipaste_2020-04-15_14-56-05.png\"><br>其中：<br><img src=\"/old_images/2020/04/2682758795.png\" alt=\"Snipaste_2020-04-15_15-06-21.png\"><br><strong>代码实现：</strong></p>\n<pre><code>void TD_Function(TD *tdtd)\n&#123;\nfloat d,d0,y,a0,a=0;\ntdtd-&gt;x = tdtd-&gt;x1 - tdtd-&gt;aim;\nd = tdtd-&gt;r*tdtd-&gt;h;    d0=tdtd-&gt;h * d;    y = tdtd-&gt;x + tdtd-&gt;h*tdtd-&gt;x2;\na0 = sqrt(d*d+8*tdtd-&gt;r*fabs(y));\nif(fabs(y)&gt;d0)    \n&#123;\n    a = tdtd-&gt;x2+(a0-d)*Sgn(y)/2;\n&#125;\nelse\n&#123;\n    a = tdtd-&gt;x2 + y/tdtd-&gt;h;\n&#125;\n\n    if(fabs(a)&gt;d)    \n&#123;\n    y=-1*tdtd-&gt;r*Sgn(a);\n&#125;\nelse\n&#123;\n    y=-1*tdtd-&gt;r*a/d;\n&#125;\ntdtd-&gt;x1 +=  0.001f*tdtd-&gt;x2;\ntdtd-&gt;x2 +=  0.001f*y; \n&#125;</code></pre>\n<p>跟踪微分器的参数主要有两个：快速因子r和滤波因子h。其中，r与跟踪速度呈正相关，然而，随之带来的是噪声放大的副作用； h与滤波效果呈正相关，但当h增大时，跟踪信号的相位损失也会随之增加。<br>简单来讲，可以将TD理解为一个低通滤波器，输出的x1就是滤波后的结果，它是跟踪输入信号的。输出的x2则代表对x1的微分，这样降低了输入信号噪声对微分效果的影响。<br>在自抗扰控制中，使用跟踪微分器获得状态变量的微分，是用来在系统动态跟踪目标时，前馈掉系统输出中关于x的微分项的。比如在电机伺服控制中，可以通过跟踪微分器跟踪x_des的微分，在速度目标中加以补偿，以达到更好的动态效果，这样的方法常称为速度前馈。</p>\n<h2 id=\"扩张状态观测器ESO\"><a href=\"#扩张状态观测器ESO\" class=\"headerlink\" title=\"扩张状态观测器ESO\"></a>扩张状态观测器ESO</h2><p>为了进一步地消除扰动对系统的影响，我们通过扩张状态观测器对扰动进行观测，通过前馈补偿到系统模型中，这样的方法就叫做扩张状态观测器ESO。在系统微分方程中加入扰动项，并且将扰动视作状态变量（通常视扰动的导数为0），这样构造的新的状态方程就叫做扩张（Extend）的状态方程。使用这个状态方程构建观测器，通过测量量来观测状态量，就能得到扰动。这就是扩张状态观测器ESO的中心思想。<br>当然，与此同时，此观测器还可得到其他状态变量的观测值。<br><img src=\"/old_images/2020/04/604554278.png\" alt=\"20190318105009907.png\"></p>\n<h2 id=\"非线性状态误差反馈控制率NLSEF\"><a href=\"#非线性状态误差反馈控制率NLSEF\" class=\"headerlink\" title=\"非线性状态误差反馈控制率NLSEF\"></a>非线性状态误差反馈控制率NLSEF</h2><p>非线性状态误差反馈控制器结构如下：<br><img src=\"/old_images/2020/04/3271978332.png\" alt=\"Snipaste_2020-04-15_15-46-46.png\"><br>韩老论文中这样描述这个状态变量非线性组合：<br><img src=\"/old_images/2020/04/2295689788.png\" alt=\"Snipaste_2020-04-15_15-56-11.png\"><br>简单理解的话，NLSEF可以看作是一个非线性PID控制器。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>学习控制的小伙伴们大概都听说过自抗扰控制ADRC，但你未必知晓自抗扰控制的提出者——韩京清先生。是的，自抗扰控制这一理论方法，正是由我们中国科学家发明的。<br>韩京清，系统与控制专家，我国控制理论和应用的早期开拓者之一。用最优控制理论提出了拦截问题中新的制导概念和方法；在国内率先推动控制系统计算机辅助设计软件的开发和研究。<br>这次我们就来初步了解一下自抗扰控制。<br>韩老提出的自抗扰控制由三部分组成：</p>\n<ol>\n<li>跟踪微分器（TD）</li>\n<li>扩张状态观测器（ESO）</li>\n<li>非线性状态误差反馈控制率（NLSEF）</li>\n</ol>\n<p><img src=\"/old_images/2020/04/3257021255.jpg\" alt=\"v2-ba80e3fe72af3e5b746f1919c596f827_r.jpg\"><br>这三部分一起，构成了ADRC自抗扰控制理论，但是，这三部分不仅仅只能用在ADRC技术中，还可以单独提取出来，与其他控制理论相结合使用。例如跟踪微分器TD就可以用来产生平滑信号来跟踪输入，并且还可以计算该平滑信号的微分，扩张状态观测器ES还可用在观测系统除状态变量外的一些扰动上等等。由此可见，自抗扰控制不仅是一种控制方法，同时还为工程师们提供了解决工程问题的方法。<br>下面我们分别讨论ADRC这三个重要组成部分。</p>\n<h2 id=\"跟踪微分器TD\"><a href=\"#跟踪微分器TD\" class=\"headerlink\" title=\"跟踪微分器TD\"></a>跟踪微分器TD</h2><p>在讲跟踪微分器之前，想一想平常我们是怎样对数字信号作微分的？是不是用差分替代呢？<br>常用的几种方法：<br>z变换方法：<img src=\"/old_images/2020/04/2906032673.png\" alt=\"Snipaste_2020-04-15_14-41-42.png\"><br>后向差分法：<img src=\"/old_images/2020/04/1299645001.png\" alt=\"Snipaste_2020-04-15_14-37-57.png\"><br>前向差分法：<img src=\"/old_images/2020/04/2554124242.png\" alt=\"Snipaste_2020-04-15_14-39-22.png\"><br>双线性法：<img src=\"/old_images/2020/04/3960144680.png\" alt=\"Snipaste_2020-04-15_14-39-59.png\"><br>使用这些方法可以将连续系统传函（s域）转化为离散系统传函（z域），这样即可离散地描述微分，但是往往这样面临着局限性，通常由于传感器测量噪声导致微分噪声明显。</p>\n<p><strong>再让我们来看一下TD是什么样子的，</strong><br><img src=\"/old_images/2020/04/1901336664.png\" alt=\"Snipaste_2020-04-15_14-56-05.png\"><br>其中：<br><img src=\"/old_images/2020/04/2682758795.png\" alt=\"Snipaste_2020-04-15_15-06-21.png\"><br><strong>代码实现：</strong></p>\n<pre><code>void TD_Function(TD *tdtd)\n&#123;\nfloat d,d0,y,a0,a=0;\ntdtd-&gt;x = tdtd-&gt;x1 - tdtd-&gt;aim;\nd = tdtd-&gt;r*tdtd-&gt;h;    d0=tdtd-&gt;h * d;    y = tdtd-&gt;x + tdtd-&gt;h*tdtd-&gt;x2;\na0 = sqrt(d*d+8*tdtd-&gt;r*fabs(y));\nif(fabs(y)&gt;d0)    \n&#123;\n    a = tdtd-&gt;x2+(a0-d)*Sgn(y)/2;\n&#125;\nelse\n&#123;\n    a = tdtd-&gt;x2 + y/tdtd-&gt;h;\n&#125;\n\n    if(fabs(a)&gt;d)    \n&#123;\n    y=-1*tdtd-&gt;r*Sgn(a);\n&#125;\nelse\n&#123;\n    y=-1*tdtd-&gt;r*a/d;\n&#125;\ntdtd-&gt;x1 +=  0.001f*tdtd-&gt;x2;\ntdtd-&gt;x2 +=  0.001f*y; \n&#125;</code></pre>\n<p>跟踪微分器的参数主要有两个：快速因子r和滤波因子h。其中，r与跟踪速度呈正相关，然而，随之带来的是噪声放大的副作用； h与滤波效果呈正相关，但当h增大时，跟踪信号的相位损失也会随之增加。<br>简单来讲，可以将TD理解为一个低通滤波器，输出的x1就是滤波后的结果，它是跟踪输入信号的。输出的x2则代表对x1的微分，这样降低了输入信号噪声对微分效果的影响。<br>在自抗扰控制中，使用跟踪微分器获得状态变量的微分，是用来在系统动态跟踪目标时，前馈掉系统输出中关于x的微分项的。比如在电机伺服控制中，可以通过跟踪微分器跟踪x_des的微分，在速度目标中加以补偿，以达到更好的动态效果，这样的方法常称为速度前馈。</p>\n<h2 id=\"扩张状态观测器ESO\"><a href=\"#扩张状态观测器ESO\" class=\"headerlink\" title=\"扩张状态观测器ESO\"></a>扩张状态观测器ESO</h2><p>为了进一步地消除扰动对系统的影响，我们通过扩张状态观测器对扰动进行观测，通过前馈补偿到系统模型中，这样的方法就叫做扩张状态观测器ESO。在系统微分方程中加入扰动项，并且将扰动视作状态变量（通常视扰动的导数为0），这样构造的新的状态方程就叫做扩张（Extend）的状态方程。使用这个状态方程构建观测器，通过测量量来观测状态量，就能得到扰动。这就是扩张状态观测器ESO的中心思想。<br>当然，与此同时，此观测器还可得到其他状态变量的观测值。<br><img src=\"/old_images/2020/04/604554278.png\" alt=\"20190318105009907.png\"></p>\n<h2 id=\"非线性状态误差反馈控制率NLSEF\"><a href=\"#非线性状态误差反馈控制率NLSEF\" class=\"headerlink\" title=\"非线性状态误差反馈控制率NLSEF\"></a>非线性状态误差反馈控制率NLSEF</h2><p>非线性状态误差反馈控制器结构如下：<br><img src=\"/old_images/2020/04/3271978332.png\" alt=\"Snipaste_2020-04-15_15-46-46.png\"><br>韩老论文中这样描述这个状态变量非线性组合：<br><img src=\"/old_images/2020/04/2295689788.png\" alt=\"Snipaste_2020-04-15_15-56-11.png\"><br>简单理解的话，NLSEF可以看作是一个非线性PID控制器。</p>\n"},{"title":"利用ANSYS进行叶轮动态流场仿真分析实例","date":"2020-08-15T07:37:05.000Z","toc":true,"_content":"大家好，我是Albert！没错，我又来了！最近题主正在做一个小项目，其中一个功能就是利用一个半开离心泵进行对一个有限固定水域（就是一个小泳池）进行水循环，我们都知道洗衣机滚筒就是一个典型的离心泵，所以有很大可能将离心泵开口后，里面的水有可能流不出来，或者说达不到预期参数，为了直观快速地看到整个流场情况以确定下一步迭代方向，题主选择了ANSYS中的Fluent作为仿真平台，借着这个项目正好分享一下动态仿真如何进行。下图是离心泵模型图和简化模型图（因为是几小时出的初稿，很丑）。\n\n![离心泵模型图.PNG][1]\n\n![简化模型图.PNG][2]\n\n***一、模型前处理及导出***\n\n从上面两张图可以看出，简化模型主要保留了离心泵特征和开口尺寸等关键信息，这样的处理是为了减少计算量，突出问题主要矛盾。除此之外呢，可能比较注重细节的同学看到了简化模型有些许不同，在叶轮外加了一个圆柱体，这部分叫做仿真的前处理，在进行动态流场仿真的时候，流体的传递并不是像真实物理世界连续传递那样，那样的计算量过于庞大，效率很低，Fluent的解决方式是通过interface连接动域和静域，将流动流体（interior）交互到静止流体（interior）中，所以在前处理就是要建立流动域和静止域，方便后面几何处理，从简化模型中可以看出，圆柱体作为旋转域，外部的几何体为静止域，通过圆柱外表面作为interface进行交互。将简化后的模型导出为STEP格式、igs格式或Parasolid格式均可，即可进行下一步操作。\n\n***二、ANSYS中几何处理及划分网格***\n\n题主使用的版本是ANSYS 17.0，下一步就是打开Workbench，将Geometry模块拖入工作区然后打开Geometry后，将刚刚导出的模型文件导入Geometry中，结果就像下图所示，可能不同格式文件导入会出现一些不同，比如题主使用的是STEP格式，会导致圆柱面分离，即图中看到的圆柱壁面分成了两个面，这时候使用Tools下面的merge指令选择需要合并的面，合并一些面，做成连续面，这样处理也是为了减小运算量和避免一些玄学BUG。\n\n![1.PNG][3]\n\n![2.PNG][4]\n\n基本上模型处理成这样就可以了，下一步就要建立旋转域和静止域，这里用到的是Tools下的Enclosure指令，因为我们是自己创建的几何体，所以类型选择User Defined，这里面有一个点是需要关注，以旋转域为例，所谓旋转域就是由于叶轮运动而旋转的水，所以旋转域应当是圆柱体与叶轮实体的差集，在类型选择上，User Defined Body选择圆柱体，即基本几何轮廓，Target Body选择叶轮，即内部实体，两者取差集得到流动域。如下图所示。\n\n![3.PNG][5]\n\n![4.PNG][6]\n\n静止域的处理方法与旋转域相同，题主只把最后得到的效果放出来，这一步处理之后我们就可以close Geometry了，然后进入下一步了。\n\n![5.PNG][7]\n\n此时返回Workbench主界面，将Fluid Flow（Fluent）拖入界面连接到Geometry上，并双击打开mesh进行网格划分。这里的mesh是ANSYS自带的网格划分软件，一些基本处理是可以完成的，是基于ICEM，所以和ICEM界面一样感人。\n\n![6.PNG][8]\n\n当我们进入mesh后，第一步在左侧结构树中先找到叶轮，将其suppress掉，方便后续处理，接下来是设置一下进出口面（inlet和outlet），目的是方便观察，还有就是气动仿真中会用到计算起点，对于液体来说就是方便观察。第二步是最关键的，即在旋转域中建立动力交互面interface，我们先把刚刚得到的旋转域独立出来（即将其余body隐藏掉），将光标选择换为Box Select。\n\n![7.PNG][9]\n\n然后长按鼠标左键框选旋转域中的叶轮表面，记住此时的叶轮形状并不属于叶轮实体，而是旋转域的内壁表面，然后右键绿色区域，并Create Named Selection，这样导入Fluent就可以自动生成interface了。\n\n![8.PNG][10]\n\n下一步就是自动划分网格了，直接点击mesh，generate即可，因为是自动划分的网格，所以网格尺寸较大，可根据需要调整尺寸大小，在Body Sizing中调整element size。\n\n![9.PNG][11]\n\n![11.PNG][12]\n\n 网格划分完毕后，我们的前处理就完成了，即可进入Fluent里进行计算了。\n\n***三、仿真计算***\n\n我们close meshing后返回Workbench主界面，先update一下mesh文件，然后双击打开Setup，这里设置一下计算方式换为并行计算，将核数改为6，增加一个GPU，提高计算速度。\n\n![10.PNG][13]\n\n将General设置如下图，我们这次选择的是瞬时分析，由于流体是水，一定要加上重力加速度。\n\n![12.PNG][14]\n\n粘性模型选择K-omega下的SST模型，在Model下的Viscous选项中选择，并在材料中，将液态水添加进流体类型中，关键步骤，设置旋转域旋转，旋转域转轴及转速，如下图所示，选择mesh motion，右侧是旋转轴方向，左侧是旋转轴相对于世界坐标系的偏移量，由于我的叶轮旋转轴与世界坐标系Y轴重合，即无需偏移，转速设置为25rad/s。\n\n![13.PNG][15]\n\n下一步就是进行初始化，选择Hybrid Initialization，初始化后的步骤就是preview，及观察叶轮是否转动，保证我们的计算是有效的。在preview中，设置步长0.01s，先跑10步。\n\n![14.PNG][16]\n\npreview验证 - 知乎\nhttps://www.zhihu.com/zvideo/1277979482393960448\n\n从preview的视频中看出，叶轮的转动是正常，我们就可以开始仿真了，由于仿真时间太长，收敛后是十分密的锯齿曲线，直接上结果，速度场变化的动画。从仿真视频中可以看出，水是可以从离心泵中流出来，但是流域不是很理想，这就需要后面慢慢改导流机构啦！（由于这个Blog添加不了视频，我就把视频放到了知乎上，后面的连接复制打开一下就能看到结果啦！）\n\n速度场结果 - 知乎\nhttps://www.zhihu.com/zvideo/1277981000899616768\n\n下次看个人情况更新机器人学或者SLAM十四讲的学习笔记吧！希望对你有用，bye！\n\n\n  [1]: /old_images/2020/08/615084051.png\n  [2]: /old_images/2020/08/1060845710.png\n  [3]: /old_images/2020/08/2072954433.png\n  [4]: /old_images/2020/08/3016259840.png\n  [5]: /old_images/2020/08/3614482147.png\n  [6]: /old_images/2020/08/1639294894.png\n  [7]: /old_images/2020/08/4046785801.png\n  [8]: /old_images/2020/08/482966380.png\n  [9]: /old_images/2020/08/1083781610.png\n  [10]: /old_images/2020/08/2373904712.png\n  [11]: /old_images/2020/08/350215919.png\n  [12]: /old_images/2020/08/1791974604.png\n  [13]: /old_images/2020/08/437577698.png\n  [14]: /old_images/2020/08/3976439614.png\n  [15]: /old_images/2020/08/502004202.png\n  [16]: /old_images/2020/08/4228770977.png\n","source":"_posts/利用ANSYS进行叶轮动态流场仿真分析实例.md","raw":"title: 利用ANSYS进行叶轮动态流场仿真分析实例\ndate: 2020-08-15 15:37:05\ncategories: 开发\ntags: []\ntoc: true\n---\n大家好，我是Albert！没错，我又来了！最近题主正在做一个小项目，其中一个功能就是利用一个半开离心泵进行对一个有限固定水域（就是一个小泳池）进行水循环，我们都知道洗衣机滚筒就是一个典型的离心泵，所以有很大可能将离心泵开口后，里面的水有可能流不出来，或者说达不到预期参数，为了直观快速地看到整个流场情况以确定下一步迭代方向，题主选择了ANSYS中的Fluent作为仿真平台，借着这个项目正好分享一下动态仿真如何进行。下图是离心泵模型图和简化模型图（因为是几小时出的初稿，很丑）。\n\n![离心泵模型图.PNG][1]\n\n![简化模型图.PNG][2]\n\n***一、模型前处理及导出***\n\n从上面两张图可以看出，简化模型主要保留了离心泵特征和开口尺寸等关键信息，这样的处理是为了减少计算量，突出问题主要矛盾。除此之外呢，可能比较注重细节的同学看到了简化模型有些许不同，在叶轮外加了一个圆柱体，这部分叫做仿真的前处理，在进行动态流场仿真的时候，流体的传递并不是像真实物理世界连续传递那样，那样的计算量过于庞大，效率很低，Fluent的解决方式是通过interface连接动域和静域，将流动流体（interior）交互到静止流体（interior）中，所以在前处理就是要建立流动域和静止域，方便后面几何处理，从简化模型中可以看出，圆柱体作为旋转域，外部的几何体为静止域，通过圆柱外表面作为interface进行交互。将简化后的模型导出为STEP格式、igs格式或Parasolid格式均可，即可进行下一步操作。\n\n***二、ANSYS中几何处理及划分网格***\n\n题主使用的版本是ANSYS 17.0，下一步就是打开Workbench，将Geometry模块拖入工作区然后打开Geometry后，将刚刚导出的模型文件导入Geometry中，结果就像下图所示，可能不同格式文件导入会出现一些不同，比如题主使用的是STEP格式，会导致圆柱面分离，即图中看到的圆柱壁面分成了两个面，这时候使用Tools下面的merge指令选择需要合并的面，合并一些面，做成连续面，这样处理也是为了减小运算量和避免一些玄学BUG。\n\n![1.PNG][3]\n\n![2.PNG][4]\n\n基本上模型处理成这样就可以了，下一步就要建立旋转域和静止域，这里用到的是Tools下的Enclosure指令，因为我们是自己创建的几何体，所以类型选择User Defined，这里面有一个点是需要关注，以旋转域为例，所谓旋转域就是由于叶轮运动而旋转的水，所以旋转域应当是圆柱体与叶轮实体的差集，在类型选择上，User Defined Body选择圆柱体，即基本几何轮廓，Target Body选择叶轮，即内部实体，两者取差集得到流动域。如下图所示。\n\n![3.PNG][5]\n\n![4.PNG][6]\n\n静止域的处理方法与旋转域相同，题主只把最后得到的效果放出来，这一步处理之后我们就可以close Geometry了，然后进入下一步了。\n\n![5.PNG][7]\n\n此时返回Workbench主界面，将Fluid Flow（Fluent）拖入界面连接到Geometry上，并双击打开mesh进行网格划分。这里的mesh是ANSYS自带的网格划分软件，一些基本处理是可以完成的，是基于ICEM，所以和ICEM界面一样感人。\n\n![6.PNG][8]\n\n当我们进入mesh后，第一步在左侧结构树中先找到叶轮，将其suppress掉，方便后续处理，接下来是设置一下进出口面（inlet和outlet），目的是方便观察，还有就是气动仿真中会用到计算起点，对于液体来说就是方便观察。第二步是最关键的，即在旋转域中建立动力交互面interface，我们先把刚刚得到的旋转域独立出来（即将其余body隐藏掉），将光标选择换为Box Select。\n\n![7.PNG][9]\n\n然后长按鼠标左键框选旋转域中的叶轮表面，记住此时的叶轮形状并不属于叶轮实体，而是旋转域的内壁表面，然后右键绿色区域，并Create Named Selection，这样导入Fluent就可以自动生成interface了。\n\n![8.PNG][10]\n\n下一步就是自动划分网格了，直接点击mesh，generate即可，因为是自动划分的网格，所以网格尺寸较大，可根据需要调整尺寸大小，在Body Sizing中调整element size。\n\n![9.PNG][11]\n\n![11.PNG][12]\n\n 网格划分完毕后，我们的前处理就完成了，即可进入Fluent里进行计算了。\n\n***三、仿真计算***\n\n我们close meshing后返回Workbench主界面，先update一下mesh文件，然后双击打开Setup，这里设置一下计算方式换为并行计算，将核数改为6，增加一个GPU，提高计算速度。\n\n![10.PNG][13]\n\n将General设置如下图，我们这次选择的是瞬时分析，由于流体是水，一定要加上重力加速度。\n\n![12.PNG][14]\n\n粘性模型选择K-omega下的SST模型，在Model下的Viscous选项中选择，并在材料中，将液态水添加进流体类型中，关键步骤，设置旋转域旋转，旋转域转轴及转速，如下图所示，选择mesh motion，右侧是旋转轴方向，左侧是旋转轴相对于世界坐标系的偏移量，由于我的叶轮旋转轴与世界坐标系Y轴重合，即无需偏移，转速设置为25rad/s。\n\n![13.PNG][15]\n\n下一步就是进行初始化，选择Hybrid Initialization，初始化后的步骤就是preview，及观察叶轮是否转动，保证我们的计算是有效的。在preview中，设置步长0.01s，先跑10步。\n\n![14.PNG][16]\n\npreview验证 - 知乎\nhttps://www.zhihu.com/zvideo/1277979482393960448\n\n从preview的视频中看出，叶轮的转动是正常，我们就可以开始仿真了，由于仿真时间太长，收敛后是十分密的锯齿曲线，直接上结果，速度场变化的动画。从仿真视频中可以看出，水是可以从离心泵中流出来，但是流域不是很理想，这就需要后面慢慢改导流机构啦！（由于这个Blog添加不了视频，我就把视频放到了知乎上，后面的连接复制打开一下就能看到结果啦！）\n\n速度场结果 - 知乎\nhttps://www.zhihu.com/zvideo/1277981000899616768\n\n下次看个人情况更新机器人学或者SLAM十四讲的学习笔记吧！希望对你有用，bye！\n\n\n  [1]: /old_images/2020/08/615084051.png\n  [2]: /old_images/2020/08/1060845710.png\n  [3]: /old_images/2020/08/2072954433.png\n  [4]: /old_images/2020/08/3016259840.png\n  [5]: /old_images/2020/08/3614482147.png\n  [6]: /old_images/2020/08/1639294894.png\n  [7]: /old_images/2020/08/4046785801.png\n  [8]: /old_images/2020/08/482966380.png\n  [9]: /old_images/2020/08/1083781610.png\n  [10]: /old_images/2020/08/2373904712.png\n  [11]: /old_images/2020/08/350215919.png\n  [12]: /old_images/2020/08/1791974604.png\n  [13]: /old_images/2020/08/437577698.png\n  [14]: /old_images/2020/08/3976439614.png\n  [15]: /old_images/2020/08/502004202.png\n  [16]: /old_images/2020/08/4228770977.png\n","slug":"利用ANSYS进行叶轮动态流场仿真分析实例","published":1,"updated":"2020-12-14T12:21:46.549Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0c2001b7p19dg6513cl","content":"<p>大家好，我是Albert！没错，我又来了！最近题主正在做一个小项目，其中一个功能就是利用一个半开离心泵进行对一个有限固定水域（就是一个小泳池）进行水循环，我们都知道洗衣机滚筒就是一个典型的离心泵，所以有很大可能将离心泵开口后，里面的水有可能流不出来，或者说达不到预期参数，为了直观快速地看到整个流场情况以确定下一步迭代方向，题主选择了ANSYS中的Fluent作为仿真平台，借着这个项目正好分享一下动态仿真如何进行。下图是离心泵模型图和简化模型图（因为是几小时出的初稿，很丑）。</p>\n<p><img src=\"/old_images/2020/08/615084051.png\" alt=\"离心泵模型图.PNG\"></p>\n<p><img src=\"/old_images/2020/08/1060845710.png\" alt=\"简化模型图.PNG\"></p>\n<p><strong><em>一、模型前处理及导出</em></strong></p>\n<p>从上面两张图可以看出，简化模型主要保留了离心泵特征和开口尺寸等关键信息，这样的处理是为了减少计算量，突出问题主要矛盾。除此之外呢，可能比较注重细节的同学看到了简化模型有些许不同，在叶轮外加了一个圆柱体，这部分叫做仿真的前处理，在进行动态流场仿真的时候，流体的传递并不是像真实物理世界连续传递那样，那样的计算量过于庞大，效率很低，Fluent的解决方式是通过interface连接动域和静域，将流动流体（interior）交互到静止流体（interior）中，所以在前处理就是要建立流动域和静止域，方便后面几何处理，从简化模型中可以看出，圆柱体作为旋转域，外部的几何体为静止域，通过圆柱外表面作为interface进行交互。将简化后的模型导出为STEP格式、igs格式或Parasolid格式均可，即可进行下一步操作。</p>\n<p><strong><em>二、ANSYS中几何处理及划分网格</em></strong></p>\n<p>题主使用的版本是ANSYS 17.0，下一步就是打开Workbench，将Geometry模块拖入工作区然后打开Geometry后，将刚刚导出的模型文件导入Geometry中，结果就像下图所示，可能不同格式文件导入会出现一些不同，比如题主使用的是STEP格式，会导致圆柱面分离，即图中看到的圆柱壁面分成了两个面，这时候使用Tools下面的merge指令选择需要合并的面，合并一些面，做成连续面，这样处理也是为了减小运算量和避免一些玄学BUG。</p>\n<p><img src=\"/old_images/2020/08/2072954433.png\" alt=\"1.PNG\"></p>\n<p><img src=\"/old_images/2020/08/3016259840.png\" alt=\"2.PNG\"></p>\n<p>基本上模型处理成这样就可以了，下一步就要建立旋转域和静止域，这里用到的是Tools下的Enclosure指令，因为我们是自己创建的几何体，所以类型选择User Defined，这里面有一个点是需要关注，以旋转域为例，所谓旋转域就是由于叶轮运动而旋转的水，所以旋转域应当是圆柱体与叶轮实体的差集，在类型选择上，User Defined Body选择圆柱体，即基本几何轮廓，Target Body选择叶轮，即内部实体，两者取差集得到流动域。如下图所示。</p>\n<p><img src=\"/old_images/2020/08/3614482147.png\" alt=\"3.PNG\"></p>\n<p><img src=\"/old_images/2020/08/1639294894.png\" alt=\"4.PNG\"></p>\n<p>静止域的处理方法与旋转域相同，题主只把最后得到的效果放出来，这一步处理之后我们就可以close Geometry了，然后进入下一步了。</p>\n<p><img src=\"/old_images/2020/08/4046785801.png\" alt=\"5.PNG\"></p>\n<p>此时返回Workbench主界面，将Fluid Flow（Fluent）拖入界面连接到Geometry上，并双击打开mesh进行网格划分。这里的mesh是ANSYS自带的网格划分软件，一些基本处理是可以完成的，是基于ICEM，所以和ICEM界面一样感人。</p>\n<p><img src=\"/old_images/2020/08/482966380.png\" alt=\"6.PNG\"></p>\n<p>当我们进入mesh后，第一步在左侧结构树中先找到叶轮，将其suppress掉，方便后续处理，接下来是设置一下进出口面（inlet和outlet），目的是方便观察，还有就是气动仿真中会用到计算起点，对于液体来说就是方便观察。第二步是最关键的，即在旋转域中建立动力交互面interface，我们先把刚刚得到的旋转域独立出来（即将其余body隐藏掉），将光标选择换为Box Select。</p>\n<p><img src=\"/old_images/2020/08/1083781610.png\" alt=\"7.PNG\"></p>\n<p>然后长按鼠标左键框选旋转域中的叶轮表面，记住此时的叶轮形状并不属于叶轮实体，而是旋转域的内壁表面，然后右键绿色区域，并Create Named Selection，这样导入Fluent就可以自动生成interface了。</p>\n<p><img src=\"/old_images/2020/08/2373904712.png\" alt=\"8.PNG\"></p>\n<p>下一步就是自动划分网格了，直接点击mesh，generate即可，因为是自动划分的网格，所以网格尺寸较大，可根据需要调整尺寸大小，在Body Sizing中调整element size。</p>\n<p><img src=\"/old_images/2020/08/350215919.png\" alt=\"9.PNG\"></p>\n<p><img src=\"/old_images/2020/08/1791974604.png\" alt=\"11.PNG\"></p>\n<p> 网格划分完毕后，我们的前处理就完成了，即可进入Fluent里进行计算了。</p>\n<p><strong><em>三、仿真计算</em></strong></p>\n<p>我们close meshing后返回Workbench主界面，先update一下mesh文件，然后双击打开Setup，这里设置一下计算方式换为并行计算，将核数改为6，增加一个GPU，提高计算速度。</p>\n<p><img src=\"/old_images/2020/08/437577698.png\" alt=\"10.PNG\"></p>\n<p>将General设置如下图，我们这次选择的是瞬时分析，由于流体是水，一定要加上重力加速度。</p>\n<p><img src=\"/old_images/2020/08/3976439614.png\" alt=\"12.PNG\"></p>\n<p>粘性模型选择K-omega下的SST模型，在Model下的Viscous选项中选择，并在材料中，将液态水添加进流体类型中，关键步骤，设置旋转域旋转，旋转域转轴及转速，如下图所示，选择mesh motion，右侧是旋转轴方向，左侧是旋转轴相对于世界坐标系的偏移量，由于我的叶轮旋转轴与世界坐标系Y轴重合，即无需偏移，转速设置为25rad/s。</p>\n<p><img src=\"/old_images/2020/08/502004202.png\" alt=\"13.PNG\"></p>\n<p>下一步就是进行初始化，选择Hybrid Initialization，初始化后的步骤就是preview，及观察叶轮是否转动，保证我们的计算是有效的。在preview中，设置步长0.01s，先跑10步。</p>\n<p><img src=\"/old_images/2020/08/4228770977.png\" alt=\"14.PNG\"></p>\n<p>preview验证 - 知乎<br><a href=\"https://www.zhihu.com/zvideo/1277979482393960448\">https://www.zhihu.com/zvideo/1277979482393960448</a></p>\n<p>从preview的视频中看出，叶轮的转动是正常，我们就可以开始仿真了，由于仿真时间太长，收敛后是十分密的锯齿曲线，直接上结果，速度场变化的动画。从仿真视频中可以看出，水是可以从离心泵中流出来，但是流域不是很理想，这就需要后面慢慢改导流机构啦！（由于这个Blog添加不了视频，我就把视频放到了知乎上，后面的连接复制打开一下就能看到结果啦！）</p>\n<p>速度场结果 - 知乎<br><a href=\"https://www.zhihu.com/zvideo/1277981000899616768\">https://www.zhihu.com/zvideo/1277981000899616768</a></p>\n<p>下次看个人情况更新机器人学或者SLAM十四讲的学习笔记吧！希望对你有用，bye！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>大家好，我是Albert！没错，我又来了！最近题主正在做一个小项目，其中一个功能就是利用一个半开离心泵进行对一个有限固定水域（就是一个小泳池）进行水循环，我们都知道洗衣机滚筒就是一个典型的离心泵，所以有很大可能将离心泵开口后，里面的水有可能流不出来，或者说达不到预期参数，为了直观快速地看到整个流场情况以确定下一步迭代方向，题主选择了ANSYS中的Fluent作为仿真平台，借着这个项目正好分享一下动态仿真如何进行。下图是离心泵模型图和简化模型图（因为是几小时出的初稿，很丑）。</p>\n<p><img src=\"/old_images/2020/08/615084051.png\" alt=\"离心泵模型图.PNG\"></p>\n<p><img src=\"/old_images/2020/08/1060845710.png\" alt=\"简化模型图.PNG\"></p>\n<p><strong><em>一、模型前处理及导出</em></strong></p>\n<p>从上面两张图可以看出，简化模型主要保留了离心泵特征和开口尺寸等关键信息，这样的处理是为了减少计算量，突出问题主要矛盾。除此之外呢，可能比较注重细节的同学看到了简化模型有些许不同，在叶轮外加了一个圆柱体，这部分叫做仿真的前处理，在进行动态流场仿真的时候，流体的传递并不是像真实物理世界连续传递那样，那样的计算量过于庞大，效率很低，Fluent的解决方式是通过interface连接动域和静域，将流动流体（interior）交互到静止流体（interior）中，所以在前处理就是要建立流动域和静止域，方便后面几何处理，从简化模型中可以看出，圆柱体作为旋转域，外部的几何体为静止域，通过圆柱外表面作为interface进行交互。将简化后的模型导出为STEP格式、igs格式或Parasolid格式均可，即可进行下一步操作。</p>\n<p><strong><em>二、ANSYS中几何处理及划分网格</em></strong></p>\n<p>题主使用的版本是ANSYS 17.0，下一步就是打开Workbench，将Geometry模块拖入工作区然后打开Geometry后，将刚刚导出的模型文件导入Geometry中，结果就像下图所示，可能不同格式文件导入会出现一些不同，比如题主使用的是STEP格式，会导致圆柱面分离，即图中看到的圆柱壁面分成了两个面，这时候使用Tools下面的merge指令选择需要合并的面，合并一些面，做成连续面，这样处理也是为了减小运算量和避免一些玄学BUG。</p>\n<p><img src=\"/old_images/2020/08/2072954433.png\" alt=\"1.PNG\"></p>\n<p><img src=\"/old_images/2020/08/3016259840.png\" alt=\"2.PNG\"></p>\n<p>基本上模型处理成这样就可以了，下一步就要建立旋转域和静止域，这里用到的是Tools下的Enclosure指令，因为我们是自己创建的几何体，所以类型选择User Defined，这里面有一个点是需要关注，以旋转域为例，所谓旋转域就是由于叶轮运动而旋转的水，所以旋转域应当是圆柱体与叶轮实体的差集，在类型选择上，User Defined Body选择圆柱体，即基本几何轮廓，Target Body选择叶轮，即内部实体，两者取差集得到流动域。如下图所示。</p>\n<p><img src=\"/old_images/2020/08/3614482147.png\" alt=\"3.PNG\"></p>\n<p><img src=\"/old_images/2020/08/1639294894.png\" alt=\"4.PNG\"></p>\n<p>静止域的处理方法与旋转域相同，题主只把最后得到的效果放出来，这一步处理之后我们就可以close Geometry了，然后进入下一步了。</p>\n<p><img src=\"/old_images/2020/08/4046785801.png\" alt=\"5.PNG\"></p>\n<p>此时返回Workbench主界面，将Fluid Flow（Fluent）拖入界面连接到Geometry上，并双击打开mesh进行网格划分。这里的mesh是ANSYS自带的网格划分软件，一些基本处理是可以完成的，是基于ICEM，所以和ICEM界面一样感人。</p>\n<p><img src=\"/old_images/2020/08/482966380.png\" alt=\"6.PNG\"></p>\n<p>当我们进入mesh后，第一步在左侧结构树中先找到叶轮，将其suppress掉，方便后续处理，接下来是设置一下进出口面（inlet和outlet），目的是方便观察，还有就是气动仿真中会用到计算起点，对于液体来说就是方便观察。第二步是最关键的，即在旋转域中建立动力交互面interface，我们先把刚刚得到的旋转域独立出来（即将其余body隐藏掉），将光标选择换为Box Select。</p>\n<p><img src=\"/old_images/2020/08/1083781610.png\" alt=\"7.PNG\"></p>\n<p>然后长按鼠标左键框选旋转域中的叶轮表面，记住此时的叶轮形状并不属于叶轮实体，而是旋转域的内壁表面，然后右键绿色区域，并Create Named Selection，这样导入Fluent就可以自动生成interface了。</p>\n<p><img src=\"/old_images/2020/08/2373904712.png\" alt=\"8.PNG\"></p>\n<p>下一步就是自动划分网格了，直接点击mesh，generate即可，因为是自动划分的网格，所以网格尺寸较大，可根据需要调整尺寸大小，在Body Sizing中调整element size。</p>\n<p><img src=\"/old_images/2020/08/350215919.png\" alt=\"9.PNG\"></p>\n<p><img src=\"/old_images/2020/08/1791974604.png\" alt=\"11.PNG\"></p>\n<p> 网格划分完毕后，我们的前处理就完成了，即可进入Fluent里进行计算了。</p>\n<p><strong><em>三、仿真计算</em></strong></p>\n<p>我们close meshing后返回Workbench主界面，先update一下mesh文件，然后双击打开Setup，这里设置一下计算方式换为并行计算，将核数改为6，增加一个GPU，提高计算速度。</p>\n<p><img src=\"/old_images/2020/08/437577698.png\" alt=\"10.PNG\"></p>\n<p>将General设置如下图，我们这次选择的是瞬时分析，由于流体是水，一定要加上重力加速度。</p>\n<p><img src=\"/old_images/2020/08/3976439614.png\" alt=\"12.PNG\"></p>\n<p>粘性模型选择K-omega下的SST模型，在Model下的Viscous选项中选择，并在材料中，将液态水添加进流体类型中，关键步骤，设置旋转域旋转，旋转域转轴及转速，如下图所示，选择mesh motion，右侧是旋转轴方向，左侧是旋转轴相对于世界坐标系的偏移量，由于我的叶轮旋转轴与世界坐标系Y轴重合，即无需偏移，转速设置为25rad/s。</p>\n<p><img src=\"/old_images/2020/08/502004202.png\" alt=\"13.PNG\"></p>\n<p>下一步就是进行初始化，选择Hybrid Initialization，初始化后的步骤就是preview，及观察叶轮是否转动，保证我们的计算是有效的。在preview中，设置步长0.01s，先跑10步。</p>\n<p><img src=\"/old_images/2020/08/4228770977.png\" alt=\"14.PNG\"></p>\n<p>preview验证 - 知乎<br><a href=\"https://www.zhihu.com/zvideo/1277979482393960448\">https://www.zhihu.com/zvideo/1277979482393960448</a></p>\n<p>从preview的视频中看出，叶轮的转动是正常，我们就可以开始仿真了，由于仿真时间太长，收敛后是十分密的锯齿曲线，直接上结果，速度场变化的动画。从仿真视频中可以看出，水是可以从离心泵中流出来，但是流域不是很理想，这就需要后面慢慢改导流机构啦！（由于这个Blog添加不了视频，我就把视频放到了知乎上，后面的连接复制打开一下就能看到结果啦！）</p>\n<p>速度场结果 - 知乎<br><a href=\"https://www.zhihu.com/zvideo/1277981000899616768\">https://www.zhihu.com/zvideo/1277981000899616768</a></p>\n<p>下次看个人情况更新机器人学或者SLAM十四讲的学习笔记吧！希望对你有用，bye！</p>\n"},{"title":"卡尔曼滤波器家族与观测器","date":"2020-04-16T02:28:00.000Z","toc":true,"_content":"在之前的文章（[现代控制理论总结1——Linear部分][1]）中曾经提到过观测器。\n观测器可以这样理解：\n使用软件构建一个虚拟的系统，使这个系统与实际系统同步更新，并根据给予的输入与传感器测得的输出不断更新、纠正这个虚拟系统，使得系统的状态变量趋近于实际系统，这样我们就能够获得一些测不到的状态变量，来进行状态反馈。\n而卡尔曼滤波器则通过对系统噪声（高斯分布噪声）建立模型，在更新系统状态的同时也在更新系统的方差，也可以看作是同时更新系统的均值与方差，同时考虑状态更新方差与测量方差，得到一个卡尔曼增益K，这个卡尔曼增益则对应着观测器中的观测增益L。使用每次后验的均值作为结果，来不断更新系统。\n\n我们来进一步，仔细地看一看Kalman Filter是如何工作的。\n\n## 卡尔曼滤波KF ##\n\n首先要注意，卡尔曼滤波器只适用于线性系统，并且噪声应为高斯分布的系统。\n既然是一个线性系统，那么我们就可以使用状态方程与测量方程（对于离散系统，使用差分方程）来表示这个系统:\n![Snipaste_2020-04-16_21-19-41.png][2]\n通过以下方程更新一个虚拟系统：\n![Snipaste_2020-04-16_20-05-44.png][3]\n其中参数的含义：\n![Snipaste_2020-04-16_20-06-03.png][4]\n我们先使用上一时刻估计得到的状态变量，通过一个完全理想化的系统（不一定完全准确），得到本时刻先验的状态变量；\n使用同样的系统更新本时刻协方差矩阵的先验，注意由于每次更新都使用了不准确的更新方程，我们要将这个不确定性考虑进去，所以每次都要引入系统更新带来的噪声的协方差；\n由于使用的是理想的系统，没有考虑系统误差、扰动带来的影响，这样的开环观测器一定是无法准确观测的。\n接着使用测量方程，通过先验的状态变量得到先验的测量量；\n同理，使用相同的测量方程得到测量量的协方差，这里同样也要引入一个由于每次测量不准确噪声的协方差；\n使用状态量协方差与测量量协方差计算卡尔曼增益；\n使用卡尔曼增益作为权重，权衡测量量与先验状态量，来更新本时刻的后验状态量。\n至此，一次迭代就完成了，让这个虚拟系统运行下去，就能使估计值趋向于真实值。\n\n**卡尔曼滤波器主要需要调整的参数使Q、R两个协方差矩阵的值，而其他的值都会在迭代中收敛，如何整定Q、R参数呢？**\n我们知道Q、R代表着系统更新引入噪声的协方差与测量引入噪声的协方差，我们很容易想到，Q越大，我们就会越“相信”（“相信”体现在卡尔曼增益上）测量，滤波器收敛变快，但由于测量带来的噪声也随之增大；而R越大我们则越“相信”系统更新，结果更加平滑但收敛变慢。通常我们忽略各个状态变量之间、测量量之间的影响，认为它们使无关的，这样得到的Q、R阵都是对角阵，更方便我们去调参。\n\n**何时该使用卡尔曼滤波器？**\n当系统方程比较清晰，并且单独使用传感器误差难以接受的情况下，使用系统方程辅助获得数据也是一种弥补的方法。\n与此同时，卡尔曼滤波不仅能够对传感器数据进行平滑，还能够得到完整的状态向量，这意味着我们能够通过一个单独的位置传感器得到速度，加速度等等，这样我们就能对目标进行预测，Robomaster比赛中的视觉目标跟踪，射击预瞄提前量利用的就是这样的原理。\n\n## 扩展卡尔曼滤波EKF ##\n\n上面提到的最基本的卡尔曼滤波仅适用于线性系统，假设有非线性系统如下，我们该如何处理呢？\n![Snipaste_2020-04-16_21-32-59.png][5]\n**最简单粗暴的方法就是线性化。**\n如何线性化一个非线性系统，在扩展卡尔曼滤波中，我们使用非线性函数的一阶偏导矩阵来代替线性的系数矩阵，这样来更新那一组方程就可以啦！\n具体怎么做呢？请看下面的式子：\n![Snipaste_2020-04-16_21-31-36.png][6]\n这组方程与上面的有什么区别呢？细心的小伙伴可能发现了，我们合情合理地将先验更新的方程替换为了非线性形式，其他好像都没有改变。但是对于一个非线性系统，我们如何确定这个A矩阵与H矩阵呢？答案上文已经提到了，就是使用（该点处的）一阶偏导矩阵对非线性系统进行一阶线性近似（相当于只取f、h泰勒展开一次项的系数），这个一阶偏导矩阵也就是大名鼎鼎的雅可比矩阵：\n![Snipaste_2020-04-16_21-40-48.png][7]\n注意到A一定还是一个nxn的方阵，H的阶数也没有改变（仍取决于状态变量个数与测量量个数）\n其他步骤均与上面提到的一致。\n\n## 无迹卡尔曼滤波UKF ##\n\n在实际应用中，对于非线性程度比较大的系统，一阶近似往往效果不是很理想，聪明的人们又想到了一种方法来解决非线性系统的卡尔曼滤波，无迹卡尔曼滤波就这样诞生了。\n无迹卡尔曼滤波的本质同它的两个兄弟一样，也是通过协方差从概率角度计算卡尔曼增益K进行迭代的，不同的是，不是像线性系统那样仅根据迭代就能计算出协方差，而是在均值周围取sigma点，让这些点真正的去参与系统运算，再使用这几个sigma点的协方差参与运算，进行迭代。\n![Snipaste_2020-04-16_21-56-12.png][8]\n这些sigma点的个数与位置的选择也是有要求滴！\n\n## 再升级该怎么办？ ##\n再升级？再升级就是粒子滤波啦！相当于有更多的sigma点来还原系统，效果当然也更好，就是计算量更大了。\n粒子滤波是什么？看这儿：[particle filtering---粒子滤波（讲的很通俗易懂）][9]\n\n\n## 总结一下 ##\n\n这篇文章带大家十分粗略的了解了三种卡尔曼滤波的形式，其中少了许多数学推导部分，尤其是概率相关的数学推导，这些部分我不是很熟悉，仅能通过定性的方式去说，如果想要了解本质，大家可以看这篇文章：[Kalman_Intro][10]。\n最后用一张图总结：\n![KF_EKF_UKF.jpg][11]\n\n\n  [1]: http://www.starydy.xyz/index.php/archives/83/\n  [2]: /old_images/2020/04/1549708112.png\n  [3]: /old_images/2020/04/3084410468.png\n  [4]: /old_images/2020/04/1010242782.png\n  [5]: /old_images/2020/04/2063384682.png\n  [6]: /old_images/2020/04/1058342956.png\n  [7]: /old_images/2020/04/3106529428.png\n  [8]: /old_images/2020/04/2303562078.png\n  [9]: https://blog.csdn.net/guo1988kui/article/details/82778293\n  [10]: /old_images/2020/04/193187891.pdf\n  [11]: /old_images/2020/04/781569241.jpg\n","source":"_posts/卡尔曼滤波器家族与观测器.md","raw":"title: 卡尔曼滤波器家族与观测器\ndate: 2020-04-16 10:28:00\ncategories: 控制\ntags: []\ntoc: true\n---\n在之前的文章（[现代控制理论总结1——Linear部分][1]）中曾经提到过观测器。\n观测器可以这样理解：\n使用软件构建一个虚拟的系统，使这个系统与实际系统同步更新，并根据给予的输入与传感器测得的输出不断更新、纠正这个虚拟系统，使得系统的状态变量趋近于实际系统，这样我们就能够获得一些测不到的状态变量，来进行状态反馈。\n而卡尔曼滤波器则通过对系统噪声（高斯分布噪声）建立模型，在更新系统状态的同时也在更新系统的方差，也可以看作是同时更新系统的均值与方差，同时考虑状态更新方差与测量方差，得到一个卡尔曼增益K，这个卡尔曼增益则对应着观测器中的观测增益L。使用每次后验的均值作为结果，来不断更新系统。\n\n我们来进一步，仔细地看一看Kalman Filter是如何工作的。\n\n## 卡尔曼滤波KF ##\n\n首先要注意，卡尔曼滤波器只适用于线性系统，并且噪声应为高斯分布的系统。\n既然是一个线性系统，那么我们就可以使用状态方程与测量方程（对于离散系统，使用差分方程）来表示这个系统:\n![Snipaste_2020-04-16_21-19-41.png][2]\n通过以下方程更新一个虚拟系统：\n![Snipaste_2020-04-16_20-05-44.png][3]\n其中参数的含义：\n![Snipaste_2020-04-16_20-06-03.png][4]\n我们先使用上一时刻估计得到的状态变量，通过一个完全理想化的系统（不一定完全准确），得到本时刻先验的状态变量；\n使用同样的系统更新本时刻协方差矩阵的先验，注意由于每次更新都使用了不准确的更新方程，我们要将这个不确定性考虑进去，所以每次都要引入系统更新带来的噪声的协方差；\n由于使用的是理想的系统，没有考虑系统误差、扰动带来的影响，这样的开环观测器一定是无法准确观测的。\n接着使用测量方程，通过先验的状态变量得到先验的测量量；\n同理，使用相同的测量方程得到测量量的协方差，这里同样也要引入一个由于每次测量不准确噪声的协方差；\n使用状态量协方差与测量量协方差计算卡尔曼增益；\n使用卡尔曼增益作为权重，权衡测量量与先验状态量，来更新本时刻的后验状态量。\n至此，一次迭代就完成了，让这个虚拟系统运行下去，就能使估计值趋向于真实值。\n\n**卡尔曼滤波器主要需要调整的参数使Q、R两个协方差矩阵的值，而其他的值都会在迭代中收敛，如何整定Q、R参数呢？**\n我们知道Q、R代表着系统更新引入噪声的协方差与测量引入噪声的协方差，我们很容易想到，Q越大，我们就会越“相信”（“相信”体现在卡尔曼增益上）测量，滤波器收敛变快，但由于测量带来的噪声也随之增大；而R越大我们则越“相信”系统更新，结果更加平滑但收敛变慢。通常我们忽略各个状态变量之间、测量量之间的影响，认为它们使无关的，这样得到的Q、R阵都是对角阵，更方便我们去调参。\n\n**何时该使用卡尔曼滤波器？**\n当系统方程比较清晰，并且单独使用传感器误差难以接受的情况下，使用系统方程辅助获得数据也是一种弥补的方法。\n与此同时，卡尔曼滤波不仅能够对传感器数据进行平滑，还能够得到完整的状态向量，这意味着我们能够通过一个单独的位置传感器得到速度，加速度等等，这样我们就能对目标进行预测，Robomaster比赛中的视觉目标跟踪，射击预瞄提前量利用的就是这样的原理。\n\n## 扩展卡尔曼滤波EKF ##\n\n上面提到的最基本的卡尔曼滤波仅适用于线性系统，假设有非线性系统如下，我们该如何处理呢？\n![Snipaste_2020-04-16_21-32-59.png][5]\n**最简单粗暴的方法就是线性化。**\n如何线性化一个非线性系统，在扩展卡尔曼滤波中，我们使用非线性函数的一阶偏导矩阵来代替线性的系数矩阵，这样来更新那一组方程就可以啦！\n具体怎么做呢？请看下面的式子：\n![Snipaste_2020-04-16_21-31-36.png][6]\n这组方程与上面的有什么区别呢？细心的小伙伴可能发现了，我们合情合理地将先验更新的方程替换为了非线性形式，其他好像都没有改变。但是对于一个非线性系统，我们如何确定这个A矩阵与H矩阵呢？答案上文已经提到了，就是使用（该点处的）一阶偏导矩阵对非线性系统进行一阶线性近似（相当于只取f、h泰勒展开一次项的系数），这个一阶偏导矩阵也就是大名鼎鼎的雅可比矩阵：\n![Snipaste_2020-04-16_21-40-48.png][7]\n注意到A一定还是一个nxn的方阵，H的阶数也没有改变（仍取决于状态变量个数与测量量个数）\n其他步骤均与上面提到的一致。\n\n## 无迹卡尔曼滤波UKF ##\n\n在实际应用中，对于非线性程度比较大的系统，一阶近似往往效果不是很理想，聪明的人们又想到了一种方法来解决非线性系统的卡尔曼滤波，无迹卡尔曼滤波就这样诞生了。\n无迹卡尔曼滤波的本质同它的两个兄弟一样，也是通过协方差从概率角度计算卡尔曼增益K进行迭代的，不同的是，不是像线性系统那样仅根据迭代就能计算出协方差，而是在均值周围取sigma点，让这些点真正的去参与系统运算，再使用这几个sigma点的协方差参与运算，进行迭代。\n![Snipaste_2020-04-16_21-56-12.png][8]\n这些sigma点的个数与位置的选择也是有要求滴！\n\n## 再升级该怎么办？ ##\n再升级？再升级就是粒子滤波啦！相当于有更多的sigma点来还原系统，效果当然也更好，就是计算量更大了。\n粒子滤波是什么？看这儿：[particle filtering---粒子滤波（讲的很通俗易懂）][9]\n\n\n## 总结一下 ##\n\n这篇文章带大家十分粗略的了解了三种卡尔曼滤波的形式，其中少了许多数学推导部分，尤其是概率相关的数学推导，这些部分我不是很熟悉，仅能通过定性的方式去说，如果想要了解本质，大家可以看这篇文章：[Kalman_Intro][10]。\n最后用一张图总结：\n![KF_EKF_UKF.jpg][11]\n\n\n  [1]: http://www.starydy.xyz/index.php/archives/83/\n  [2]: /old_images/2020/04/1549708112.png\n  [3]: /old_images/2020/04/3084410468.png\n  [4]: /old_images/2020/04/1010242782.png\n  [5]: /old_images/2020/04/2063384682.png\n  [6]: /old_images/2020/04/1058342956.png\n  [7]: /old_images/2020/04/3106529428.png\n  [8]: /old_images/2020/04/2303562078.png\n  [9]: https://blog.csdn.net/guo1988kui/article/details/82778293\n  [10]: /old_images/2020/04/193187891.pdf\n  [11]: /old_images/2020/04/781569241.jpg\n","slug":"卡尔曼滤波器家族与观测器","published":1,"updated":"2020-12-14T12:21:30.917Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0c3001e7p197fam6oqk","content":"<p>在之前的文章（<a href=\"http://www.starydy.xyz/index.php/archives/83/\">现代控制理论总结1——Linear部分</a>）中曾经提到过观测器。<br>观测器可以这样理解：<br>使用软件构建一个虚拟的系统，使这个系统与实际系统同步更新，并根据给予的输入与传感器测得的输出不断更新、纠正这个虚拟系统，使得系统的状态变量趋近于实际系统，这样我们就能够获得一些测不到的状态变量，来进行状态反馈。<br>而卡尔曼滤波器则通过对系统噪声（高斯分布噪声）建立模型，在更新系统状态的同时也在更新系统的方差，也可以看作是同时更新系统的均值与方差，同时考虑状态更新方差与测量方差，得到一个卡尔曼增益K，这个卡尔曼增益则对应着观测器中的观测增益L。使用每次后验的均值作为结果，来不断更新系统。</p>\n<p>我们来进一步，仔细地看一看Kalman Filter是如何工作的。</p>\n<h2 id=\"卡尔曼滤波KF\"><a href=\"#卡尔曼滤波KF\" class=\"headerlink\" title=\"卡尔曼滤波KF\"></a>卡尔曼滤波KF</h2><p>首先要注意，卡尔曼滤波器只适用于线性系统，并且噪声应为高斯分布的系统。<br>既然是一个线性系统，那么我们就可以使用状态方程与测量方程（对于离散系统，使用差分方程）来表示这个系统:<br><img src=\"/old_images/2020/04/1549708112.png\" alt=\"Snipaste_2020-04-16_21-19-41.png\"><br>通过以下方程更新一个虚拟系统：<br><img src=\"/old_images/2020/04/3084410468.png\" alt=\"Snipaste_2020-04-16_20-05-44.png\"><br>其中参数的含义：<br><img src=\"/old_images/2020/04/1010242782.png\" alt=\"Snipaste_2020-04-16_20-06-03.png\"><br>我们先使用上一时刻估计得到的状态变量，通过一个完全理想化的系统（不一定完全准确），得到本时刻先验的状态变量；<br>使用同样的系统更新本时刻协方差矩阵的先验，注意由于每次更新都使用了不准确的更新方程，我们要将这个不确定性考虑进去，所以每次都要引入系统更新带来的噪声的协方差；<br>由于使用的是理想的系统，没有考虑系统误差、扰动带来的影响，这样的开环观测器一定是无法准确观测的。<br>接着使用测量方程，通过先验的状态变量得到先验的测量量；<br>同理，使用相同的测量方程得到测量量的协方差，这里同样也要引入一个由于每次测量不准确噪声的协方差；<br>使用状态量协方差与测量量协方差计算卡尔曼增益；<br>使用卡尔曼增益作为权重，权衡测量量与先验状态量，来更新本时刻的后验状态量。<br>至此，一次迭代就完成了，让这个虚拟系统运行下去，就能使估计值趋向于真实值。</p>\n<p><strong>卡尔曼滤波器主要需要调整的参数使Q、R两个协方差矩阵的值，而其他的值都会在迭代中收敛，如何整定Q、R参数呢？</strong><br>我们知道Q、R代表着系统更新引入噪声的协方差与测量引入噪声的协方差，我们很容易想到，Q越大，我们就会越“相信”（“相信”体现在卡尔曼增益上）测量，滤波器收敛变快，但由于测量带来的噪声也随之增大；而R越大我们则越“相信”系统更新，结果更加平滑但收敛变慢。通常我们忽略各个状态变量之间、测量量之间的影响，认为它们使无关的，这样得到的Q、R阵都是对角阵，更方便我们去调参。</p>\n<p><strong>何时该使用卡尔曼滤波器？</strong><br>当系统方程比较清晰，并且单独使用传感器误差难以接受的情况下，使用系统方程辅助获得数据也是一种弥补的方法。<br>与此同时，卡尔曼滤波不仅能够对传感器数据进行平滑，还能够得到完整的状态向量，这意味着我们能够通过一个单独的位置传感器得到速度，加速度等等，这样我们就能对目标进行预测，Robomaster比赛中的视觉目标跟踪，射击预瞄提前量利用的就是这样的原理。</p>\n<h2 id=\"扩展卡尔曼滤波EKF\"><a href=\"#扩展卡尔曼滤波EKF\" class=\"headerlink\" title=\"扩展卡尔曼滤波EKF\"></a>扩展卡尔曼滤波EKF</h2><p>上面提到的最基本的卡尔曼滤波仅适用于线性系统，假设有非线性系统如下，我们该如何处理呢？<br><img src=\"/old_images/2020/04/2063384682.png\" alt=\"Snipaste_2020-04-16_21-32-59.png\"><br><strong>最简单粗暴的方法就是线性化。</strong><br>如何线性化一个非线性系统，在扩展卡尔曼滤波中，我们使用非线性函数的一阶偏导矩阵来代替线性的系数矩阵，这样来更新那一组方程就可以啦！<br>具体怎么做呢？请看下面的式子：<br><img src=\"/old_images/2020/04/1058342956.png\" alt=\"Snipaste_2020-04-16_21-31-36.png\"><br>这组方程与上面的有什么区别呢？细心的小伙伴可能发现了，我们合情合理地将先验更新的方程替换为了非线性形式，其他好像都没有改变。但是对于一个非线性系统，我们如何确定这个A矩阵与H矩阵呢？答案上文已经提到了，就是使用（该点处的）一阶偏导矩阵对非线性系统进行一阶线性近似（相当于只取f、h泰勒展开一次项的系数），这个一阶偏导矩阵也就是大名鼎鼎的雅可比矩阵：<br><img src=\"/old_images/2020/04/3106529428.png\" alt=\"Snipaste_2020-04-16_21-40-48.png\"><br>注意到A一定还是一个nxn的方阵，H的阶数也没有改变（仍取决于状态变量个数与测量量个数）<br>其他步骤均与上面提到的一致。</p>\n<h2 id=\"无迹卡尔曼滤波UKF\"><a href=\"#无迹卡尔曼滤波UKF\" class=\"headerlink\" title=\"无迹卡尔曼滤波UKF\"></a>无迹卡尔曼滤波UKF</h2><p>在实际应用中，对于非线性程度比较大的系统，一阶近似往往效果不是很理想，聪明的人们又想到了一种方法来解决非线性系统的卡尔曼滤波，无迹卡尔曼滤波就这样诞生了。<br>无迹卡尔曼滤波的本质同它的两个兄弟一样，也是通过协方差从概率角度计算卡尔曼增益K进行迭代的，不同的是，不是像线性系统那样仅根据迭代就能计算出协方差，而是在均值周围取sigma点，让这些点真正的去参与系统运算，再使用这几个sigma点的协方差参与运算，进行迭代。<br><img src=\"/old_images/2020/04/2303562078.png\" alt=\"Snipaste_2020-04-16_21-56-12.png\"><br>这些sigma点的个数与位置的选择也是有要求滴！</p>\n<h2 id=\"再升级该怎么办？\"><a href=\"#再升级该怎么办？\" class=\"headerlink\" title=\"再升级该怎么办？\"></a>再升级该怎么办？</h2><p>再升级？再升级就是粒子滤波啦！相当于有更多的sigma点来还原系统，效果当然也更好，就是计算量更大了。<br>粒子滤波是什么？看这儿：<a href=\"https://blog.csdn.net/guo1988kui/article/details/82778293\">particle filtering—粒子滤波（讲的很通俗易懂）</a></p>\n<h2 id=\"总结一下\"><a href=\"#总结一下\" class=\"headerlink\" title=\"总结一下\"></a>总结一下</h2><p>这篇文章带大家十分粗略的了解了三种卡尔曼滤波的形式，其中少了许多数学推导部分，尤其是概率相关的数学推导，这些部分我不是很熟悉，仅能通过定性的方式去说，如果想要了解本质，大家可以看这篇文章：<a href=\"/old_images/2020/04/193187891.pdf\">Kalman_Intro</a>。<br>最后用一张图总结：<br><img src=\"/old_images/2020/04/781569241.jpg\" alt=\"KF_EKF_UKF.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在之前的文章（<a href=\"http://www.starydy.xyz/index.php/archives/83/\">现代控制理论总结1——Linear部分</a>）中曾经提到过观测器。<br>观测器可以这样理解：<br>使用软件构建一个虚拟的系统，使这个系统与实际系统同步更新，并根据给予的输入与传感器测得的输出不断更新、纠正这个虚拟系统，使得系统的状态变量趋近于实际系统，这样我们就能够获得一些测不到的状态变量，来进行状态反馈。<br>而卡尔曼滤波器则通过对系统噪声（高斯分布噪声）建立模型，在更新系统状态的同时也在更新系统的方差，也可以看作是同时更新系统的均值与方差，同时考虑状态更新方差与测量方差，得到一个卡尔曼增益K，这个卡尔曼增益则对应着观测器中的观测增益L。使用每次后验的均值作为结果，来不断更新系统。</p>\n<p>我们来进一步，仔细地看一看Kalman Filter是如何工作的。</p>\n<h2 id=\"卡尔曼滤波KF\"><a href=\"#卡尔曼滤波KF\" class=\"headerlink\" title=\"卡尔曼滤波KF\"></a>卡尔曼滤波KF</h2><p>首先要注意，卡尔曼滤波器只适用于线性系统，并且噪声应为高斯分布的系统。<br>既然是一个线性系统，那么我们就可以使用状态方程与测量方程（对于离散系统，使用差分方程）来表示这个系统:<br><img src=\"/old_images/2020/04/1549708112.png\" alt=\"Snipaste_2020-04-16_21-19-41.png\"><br>通过以下方程更新一个虚拟系统：<br><img src=\"/old_images/2020/04/3084410468.png\" alt=\"Snipaste_2020-04-16_20-05-44.png\"><br>其中参数的含义：<br><img src=\"/old_images/2020/04/1010242782.png\" alt=\"Snipaste_2020-04-16_20-06-03.png\"><br>我们先使用上一时刻估计得到的状态变量，通过一个完全理想化的系统（不一定完全准确），得到本时刻先验的状态变量；<br>使用同样的系统更新本时刻协方差矩阵的先验，注意由于每次更新都使用了不准确的更新方程，我们要将这个不确定性考虑进去，所以每次都要引入系统更新带来的噪声的协方差；<br>由于使用的是理想的系统，没有考虑系统误差、扰动带来的影响，这样的开环观测器一定是无法准确观测的。<br>接着使用测量方程，通过先验的状态变量得到先验的测量量；<br>同理，使用相同的测量方程得到测量量的协方差，这里同样也要引入一个由于每次测量不准确噪声的协方差；<br>使用状态量协方差与测量量协方差计算卡尔曼增益；<br>使用卡尔曼增益作为权重，权衡测量量与先验状态量，来更新本时刻的后验状态量。<br>至此，一次迭代就完成了，让这个虚拟系统运行下去，就能使估计值趋向于真实值。</p>\n<p><strong>卡尔曼滤波器主要需要调整的参数使Q、R两个协方差矩阵的值，而其他的值都会在迭代中收敛，如何整定Q、R参数呢？</strong><br>我们知道Q、R代表着系统更新引入噪声的协方差与测量引入噪声的协方差，我们很容易想到，Q越大，我们就会越“相信”（“相信”体现在卡尔曼增益上）测量，滤波器收敛变快，但由于测量带来的噪声也随之增大；而R越大我们则越“相信”系统更新，结果更加平滑但收敛变慢。通常我们忽略各个状态变量之间、测量量之间的影响，认为它们使无关的，这样得到的Q、R阵都是对角阵，更方便我们去调参。</p>\n<p><strong>何时该使用卡尔曼滤波器？</strong><br>当系统方程比较清晰，并且单独使用传感器误差难以接受的情况下，使用系统方程辅助获得数据也是一种弥补的方法。<br>与此同时，卡尔曼滤波不仅能够对传感器数据进行平滑，还能够得到完整的状态向量，这意味着我们能够通过一个单独的位置传感器得到速度，加速度等等，这样我们就能对目标进行预测，Robomaster比赛中的视觉目标跟踪，射击预瞄提前量利用的就是这样的原理。</p>\n<h2 id=\"扩展卡尔曼滤波EKF\"><a href=\"#扩展卡尔曼滤波EKF\" class=\"headerlink\" title=\"扩展卡尔曼滤波EKF\"></a>扩展卡尔曼滤波EKF</h2><p>上面提到的最基本的卡尔曼滤波仅适用于线性系统，假设有非线性系统如下，我们该如何处理呢？<br><img src=\"/old_images/2020/04/2063384682.png\" alt=\"Snipaste_2020-04-16_21-32-59.png\"><br><strong>最简单粗暴的方法就是线性化。</strong><br>如何线性化一个非线性系统，在扩展卡尔曼滤波中，我们使用非线性函数的一阶偏导矩阵来代替线性的系数矩阵，这样来更新那一组方程就可以啦！<br>具体怎么做呢？请看下面的式子：<br><img src=\"/old_images/2020/04/1058342956.png\" alt=\"Snipaste_2020-04-16_21-31-36.png\"><br>这组方程与上面的有什么区别呢？细心的小伙伴可能发现了，我们合情合理地将先验更新的方程替换为了非线性形式，其他好像都没有改变。但是对于一个非线性系统，我们如何确定这个A矩阵与H矩阵呢？答案上文已经提到了，就是使用（该点处的）一阶偏导矩阵对非线性系统进行一阶线性近似（相当于只取f、h泰勒展开一次项的系数），这个一阶偏导矩阵也就是大名鼎鼎的雅可比矩阵：<br><img src=\"/old_images/2020/04/3106529428.png\" alt=\"Snipaste_2020-04-16_21-40-48.png\"><br>注意到A一定还是一个nxn的方阵，H的阶数也没有改变（仍取决于状态变量个数与测量量个数）<br>其他步骤均与上面提到的一致。</p>\n<h2 id=\"无迹卡尔曼滤波UKF\"><a href=\"#无迹卡尔曼滤波UKF\" class=\"headerlink\" title=\"无迹卡尔曼滤波UKF\"></a>无迹卡尔曼滤波UKF</h2><p>在实际应用中，对于非线性程度比较大的系统，一阶近似往往效果不是很理想，聪明的人们又想到了一种方法来解决非线性系统的卡尔曼滤波，无迹卡尔曼滤波就这样诞生了。<br>无迹卡尔曼滤波的本质同它的两个兄弟一样，也是通过协方差从概率角度计算卡尔曼增益K进行迭代的，不同的是，不是像线性系统那样仅根据迭代就能计算出协方差，而是在均值周围取sigma点，让这些点真正的去参与系统运算，再使用这几个sigma点的协方差参与运算，进行迭代。<br><img src=\"/old_images/2020/04/2303562078.png\" alt=\"Snipaste_2020-04-16_21-56-12.png\"><br>这些sigma点的个数与位置的选择也是有要求滴！</p>\n<h2 id=\"再升级该怎么办？\"><a href=\"#再升级该怎么办？\" class=\"headerlink\" title=\"再升级该怎么办？\"></a>再升级该怎么办？</h2><p>再升级？再升级就是粒子滤波啦！相当于有更多的sigma点来还原系统，效果当然也更好，就是计算量更大了。<br>粒子滤波是什么？看这儿：<a href=\"https://blog.csdn.net/guo1988kui/article/details/82778293\">particle filtering—粒子滤波（讲的很通俗易懂）</a></p>\n<h2 id=\"总结一下\"><a href=\"#总结一下\" class=\"headerlink\" title=\"总结一下\"></a>总结一下</h2><p>这篇文章带大家十分粗略的了解了三种卡尔曼滤波的形式，其中少了许多数学推导部分，尤其是概率相关的数学推导，这些部分我不是很熟悉，仅能通过定性的方式去说，如果想要了解本质，大家可以看这篇文章：<a href=\"/old_images/2020/04/193187891.pdf\">Kalman_Intro</a>。<br>最后用一张图总结：<br><img src=\"/old_images/2020/04/781569241.jpg\" alt=\"KF_EKF_UKF.jpg\"></p>\n"},{"title":"双系统？虚拟机？Docker？","date":"2020-05-10T00:20:00.000Z","toc":true,"_content":"Linux环境由于它可移植性强，轻量化，底层化的特点，得到了开发者们广泛的应用。\n它在服务器市场，移动嵌入式市场，机器人领域有着重要的应用。\n但是，有的应用对Linux支持很不友好（腾讯，说的就是你！），甚至没有Linux版本，这时候就需要另外一个Windows环境来运行Windows程序，这是，两个环境之间的切换就成了问题。\n\n今天我们来讨论一下在一台机器上运行Windows环境与Linux环境的方法。\n\n## 为什么程序对操作系统环境有要求 ##\n\n首先，我们抛出一个问题，是不是所有程序运行都需要操作系统的支持？\n紧接着，又有几个问题，为什么Linux下编译的程序不能再Windows环境下运行，反之也不行呢？\n\n对于第一个问题，不是所有程序都需要操作系统才能够运行，最常见的，**单片机**里跑的程序，**U-Boot**、**grub**这样的引导操作系统程序，还有**操作系统本身**，这些都是不需要运行在操作系统环境下运行的，我们称之为裸机程序。\n逻辑程序唯一要求的，就是芯片的架构。ARM、x86、RISC-V架构的芯片跑的一定不是相同的程序。这也就是操作系统需要对不同架构芯片做版本移植的原因。\n\n第一点就是编译器的问题。不同的操作系统，有不同的内核提供的系统调用，这就对应着不同的编译器，才能编译不同操作系统下的程序。默认的编译器总是编译自己操作系统的代码，如果想编译运行在其他操作系统的代码，就需要交叉编译工具链（编译器、链接器……）\n![Snipaste_2020-05-10_16-59-38.jpg][1]\n平时一点就ok的按钮，其实就使用了交叉编译工具链，这就是IDE的力量(。・∀・)ノ\n\n还有就是库的问题。Win下动态链接库是.dll文件，静态链接库则是.lib文件，目标文件是.obj，而在Linux下，对应的分别是.so，.a，.o文件。\n最终一点，可执行文件格式也不同，Win是大家耳熟能详的.exe文件，而Linux没有特定的后缀名。\n最后两点本质上也是由于编译器、链接器不同导致生成的文件格式也不同。\n\n## 双系统 ##\n\n解决方案一：双系统，最简单粗暴的方法，在一台电脑中安装两个操作系统。方便的是拥有完整的环境，操作系统可享用完整的计算机资源，缺点则是切换麻烦，文件传输麻烦，多个操作系统不能同时工作。\n这里还要注意的是，操作系统的引导是由引导程序来进行的。BIOS会**按顺序**对每个硬盘分区最前面的区域进行查找，如果找到了引导程序，就执行它。如果不想启动先被找到的操作系统，则由引导程序将启动权交给下个分区内的引导程序。不过，由于Windows自带的引导程序无法启动Linux，但是grub却可以启动Windows，所以需要先安装Windows再安装Linux，否则Linux的引导会被覆盖。\n\n## 虚拟机 ##\n![vm-logo.png][2]\n解决方案二：虚拟机（VMWare）。虚拟机的具体实现需要OS的知识才能够理解，本菜鸡就不做过多解释了，总之可以理解为这是一个应用程序，在应用程序内又跑着一个操作系统。\n虚拟机的优势就在于两个操作系统可以同时运行，交互良好（可以互相传文件），缺点就是两个操作系统共同占有一块计算机资源，性能下降，并且还有虚拟机对显卡支持不好的缺点。\n![v2-ee27d299f5e38ed460218ac087518bba_720w.jpg][3]\n\n## Docker ##\n![u=3999212251,2537480795&fm=74&app=80&f=JPEG&size=f121,90.jpg][4]\n与虚拟机类似，Docker也是跑在宿主OS中的程序（更准确是**容器**）\n这个**容器**能够隔离内部程序与操作系统，且内部不需要安装操作系统，就能跨平台运行程序，上手容易，轻量化，很好用！\n![v2-0d67e01d75d19e227fb44104eca28f43_720w.jpg][5]\n\n对比Docker与虚拟机\n![20180711090727241.png][6]\n![20180711094611205.png][7]\n\n## 基于Docker的人工智能小助手艾拉 ##\n前几天突然心血来潮，拿图灵机器人+酷Q做了一个简单的人工智障小助手，结果发现酷Q只能在Win下运行，想尽一切办法最终发现酷Q有一个on docker版本，赶紧拿来使用。几行命令，这个人工智障就已经跑在我的Linux服务器下了。这个Docker使用VNC远程桌面作为图形界面交互，我把它放在了我服务器的7070端口，进入VNC界面，你就会发现里面是一个实打实的Windows环境。\n\n具体命令见这篇：[酷Q on docker 安装部署、使用及二次开发教程][10]\n\n![Snipaste_2020-05-10_17-35-21.jpg][8]\n![Snipaste_2020-05-10_17-34-58.jpg][9]\n\n顺便吐槽一下，现在的腾讯对QQ的外部接口是越来越不上心了，果然微信才是主流嘛……\n\n  [1]: /old_images/2020/05/3174243626.jpg\n  [2]: /old_images/2020/05/3462557488.png\n  [3]: /old_images/2020/05/904172395.jpg\n  [4]: /old_images/2020/05/1820938573.jpg\n  [5]: /old_images/2020/05/3518464858.jpg\n  [6]: /old_images/2020/05/1170183205.png\n  [7]: /old_images/2020/05/664969895.png\n  [8]: /old_images/2020/05/2761601438.jpg\n  [9]: /old_images/2020/05/1424232658.jpg\n  [10]: https://www.vpsjxw.com/vps_use/kuq_docker/\n","source":"_posts/双系统？虚拟机？Docker？.md","raw":"title: 双系统？虚拟机？Docker？\ndate: 2020-05-10 08:20:00\ncategories: 工具\ntags: []\ntoc: true\n---\nLinux环境由于它可移植性强，轻量化，底层化的特点，得到了开发者们广泛的应用。\n它在服务器市场，移动嵌入式市场，机器人领域有着重要的应用。\n但是，有的应用对Linux支持很不友好（腾讯，说的就是你！），甚至没有Linux版本，这时候就需要另外一个Windows环境来运行Windows程序，这是，两个环境之间的切换就成了问题。\n\n今天我们来讨论一下在一台机器上运行Windows环境与Linux环境的方法。\n\n## 为什么程序对操作系统环境有要求 ##\n\n首先，我们抛出一个问题，是不是所有程序运行都需要操作系统的支持？\n紧接着，又有几个问题，为什么Linux下编译的程序不能再Windows环境下运行，反之也不行呢？\n\n对于第一个问题，不是所有程序都需要操作系统才能够运行，最常见的，**单片机**里跑的程序，**U-Boot**、**grub**这样的引导操作系统程序，还有**操作系统本身**，这些都是不需要运行在操作系统环境下运行的，我们称之为裸机程序。\n逻辑程序唯一要求的，就是芯片的架构。ARM、x86、RISC-V架构的芯片跑的一定不是相同的程序。这也就是操作系统需要对不同架构芯片做版本移植的原因。\n\n第一点就是编译器的问题。不同的操作系统，有不同的内核提供的系统调用，这就对应着不同的编译器，才能编译不同操作系统下的程序。默认的编译器总是编译自己操作系统的代码，如果想编译运行在其他操作系统的代码，就需要交叉编译工具链（编译器、链接器……）\n![Snipaste_2020-05-10_16-59-38.jpg][1]\n平时一点就ok的按钮，其实就使用了交叉编译工具链，这就是IDE的力量(。・∀・)ノ\n\n还有就是库的问题。Win下动态链接库是.dll文件，静态链接库则是.lib文件，目标文件是.obj，而在Linux下，对应的分别是.so，.a，.o文件。\n最终一点，可执行文件格式也不同，Win是大家耳熟能详的.exe文件，而Linux没有特定的后缀名。\n最后两点本质上也是由于编译器、链接器不同导致生成的文件格式也不同。\n\n## 双系统 ##\n\n解决方案一：双系统，最简单粗暴的方法，在一台电脑中安装两个操作系统。方便的是拥有完整的环境，操作系统可享用完整的计算机资源，缺点则是切换麻烦，文件传输麻烦，多个操作系统不能同时工作。\n这里还要注意的是，操作系统的引导是由引导程序来进行的。BIOS会**按顺序**对每个硬盘分区最前面的区域进行查找，如果找到了引导程序，就执行它。如果不想启动先被找到的操作系统，则由引导程序将启动权交给下个分区内的引导程序。不过，由于Windows自带的引导程序无法启动Linux，但是grub却可以启动Windows，所以需要先安装Windows再安装Linux，否则Linux的引导会被覆盖。\n\n## 虚拟机 ##\n![vm-logo.png][2]\n解决方案二：虚拟机（VMWare）。虚拟机的具体实现需要OS的知识才能够理解，本菜鸡就不做过多解释了，总之可以理解为这是一个应用程序，在应用程序内又跑着一个操作系统。\n虚拟机的优势就在于两个操作系统可以同时运行，交互良好（可以互相传文件），缺点就是两个操作系统共同占有一块计算机资源，性能下降，并且还有虚拟机对显卡支持不好的缺点。\n![v2-ee27d299f5e38ed460218ac087518bba_720w.jpg][3]\n\n## Docker ##\n![u=3999212251,2537480795&fm=74&app=80&f=JPEG&size=f121,90.jpg][4]\n与虚拟机类似，Docker也是跑在宿主OS中的程序（更准确是**容器**）\n这个**容器**能够隔离内部程序与操作系统，且内部不需要安装操作系统，就能跨平台运行程序，上手容易，轻量化，很好用！\n![v2-0d67e01d75d19e227fb44104eca28f43_720w.jpg][5]\n\n对比Docker与虚拟机\n![20180711090727241.png][6]\n![20180711094611205.png][7]\n\n## 基于Docker的人工智能小助手艾拉 ##\n前几天突然心血来潮，拿图灵机器人+酷Q做了一个简单的人工智障小助手，结果发现酷Q只能在Win下运行，想尽一切办法最终发现酷Q有一个on docker版本，赶紧拿来使用。几行命令，这个人工智障就已经跑在我的Linux服务器下了。这个Docker使用VNC远程桌面作为图形界面交互，我把它放在了我服务器的7070端口，进入VNC界面，你就会发现里面是一个实打实的Windows环境。\n\n具体命令见这篇：[酷Q on docker 安装部署、使用及二次开发教程][10]\n\n![Snipaste_2020-05-10_17-35-21.jpg][8]\n![Snipaste_2020-05-10_17-34-58.jpg][9]\n\n顺便吐槽一下，现在的腾讯对QQ的外部接口是越来越不上心了，果然微信才是主流嘛……\n\n  [1]: /old_images/2020/05/3174243626.jpg\n  [2]: /old_images/2020/05/3462557488.png\n  [3]: /old_images/2020/05/904172395.jpg\n  [4]: /old_images/2020/05/1820938573.jpg\n  [5]: /old_images/2020/05/3518464858.jpg\n  [6]: /old_images/2020/05/1170183205.png\n  [7]: /old_images/2020/05/664969895.png\n  [8]: /old_images/2020/05/2761601438.jpg\n  [9]: /old_images/2020/05/1424232658.jpg\n  [10]: https://www.vpsjxw.com/vps_use/kuq_docker/\n","slug":"双系统？虚拟机？Docker？","published":1,"updated":"2020-12-14T12:22:09.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0c3001g7p19a1zefph0","content":"<p>Linux环境由于它可移植性强，轻量化，底层化的特点，得到了开发者们广泛的应用。<br>它在服务器市场，移动嵌入式市场，机器人领域有着重要的应用。<br>但是，有的应用对Linux支持很不友好（腾讯，说的就是你！），甚至没有Linux版本，这时候就需要另外一个Windows环境来运行Windows程序，这是，两个环境之间的切换就成了问题。</p>\n<p>今天我们来讨论一下在一台机器上运行Windows环境与Linux环境的方法。</p>\n<h2 id=\"为什么程序对操作系统环境有要求\"><a href=\"#为什么程序对操作系统环境有要求\" class=\"headerlink\" title=\"为什么程序对操作系统环境有要求\"></a>为什么程序对操作系统环境有要求</h2><p>首先，我们抛出一个问题，是不是所有程序运行都需要操作系统的支持？<br>紧接着，又有几个问题，为什么Linux下编译的程序不能再Windows环境下运行，反之也不行呢？</p>\n<p>对于第一个问题，不是所有程序都需要操作系统才能够运行，最常见的，<strong>单片机</strong>里跑的程序，<strong>U-Boot</strong>、<strong>grub</strong>这样的引导操作系统程序，还有<strong>操作系统本身</strong>，这些都是不需要运行在操作系统环境下运行的，我们称之为裸机程序。<br>逻辑程序唯一要求的，就是芯片的架构。ARM、x86、RISC-V架构的芯片跑的一定不是相同的程序。这也就是操作系统需要对不同架构芯片做版本移植的原因。</p>\n<p>第一点就是编译器的问题。不同的操作系统，有不同的内核提供的系统调用，这就对应着不同的编译器，才能编译不同操作系统下的程序。默认的编译器总是编译自己操作系统的代码，如果想编译运行在其他操作系统的代码，就需要交叉编译工具链（编译器、链接器……）<br><img src=\"/old_images/2020/05/3174243626.jpg\" alt=\"Snipaste_2020-05-10_16-59-38.jpg\"><br>平时一点就ok的按钮，其实就使用了交叉编译工具链，这就是IDE的力量(。・∀・)ノ</p>\n<p>还有就是库的问题。Win下动态链接库是.dll文件，静态链接库则是.lib文件，目标文件是.obj，而在Linux下，对应的分别是.so，.a，.o文件。<br>最终一点，可执行文件格式也不同，Win是大家耳熟能详的.exe文件，而Linux没有特定的后缀名。<br>最后两点本质上也是由于编译器、链接器不同导致生成的文件格式也不同。</p>\n<h2 id=\"双系统\"><a href=\"#双系统\" class=\"headerlink\" title=\"双系统\"></a>双系统</h2><p>解决方案一：双系统，最简单粗暴的方法，在一台电脑中安装两个操作系统。方便的是拥有完整的环境，操作系统可享用完整的计算机资源，缺点则是切换麻烦，文件传输麻烦，多个操作系统不能同时工作。<br>这里还要注意的是，操作系统的引导是由引导程序来进行的。BIOS会<strong>按顺序</strong>对每个硬盘分区最前面的区域进行查找，如果找到了引导程序，就执行它。如果不想启动先被找到的操作系统，则由引导程序将启动权交给下个分区内的引导程序。不过，由于Windows自带的引导程序无法启动Linux，但是grub却可以启动Windows，所以需要先安装Windows再安装Linux，否则Linux的引导会被覆盖。</p>\n<h2 id=\"虚拟机\"><a href=\"#虚拟机\" class=\"headerlink\" title=\"虚拟机\"></a>虚拟机</h2><p><img src=\"/old_images/2020/05/3462557488.png\" alt=\"vm-logo.png\"><br>解决方案二：虚拟机（VMWare）。虚拟机的具体实现需要OS的知识才能够理解，本菜鸡就不做过多解释了，总之可以理解为这是一个应用程序，在应用程序内又跑着一个操作系统。<br>虚拟机的优势就在于两个操作系统可以同时运行，交互良好（可以互相传文件），缺点就是两个操作系统共同占有一块计算机资源，性能下降，并且还有虚拟机对显卡支持不好的缺点。<br><img src=\"/old_images/2020/05/904172395.jpg\" alt=\"v2-ee27d299f5e38ed460218ac087518bba_720w.jpg\"></p>\n<h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><p><img src=\"/old_images/2020/05/1820938573.jpg\" alt=\"u=3999212251,2537480795&amp;fm=74&amp;app=80&amp;f=JPEG&amp;size=f121,90.jpg\"><br>与虚拟机类似，Docker也是跑在宿主OS中的程序（更准确是<strong>容器</strong>）<br>这个<strong>容器</strong>能够隔离内部程序与操作系统，且内部不需要安装操作系统，就能跨平台运行程序，上手容易，轻量化，很好用！<br><img src=\"/old_images/2020/05/3518464858.jpg\" alt=\"v2-0d67e01d75d19e227fb44104eca28f43_720w.jpg\"></p>\n<p>对比Docker与虚拟机<br><img src=\"/old_images/2020/05/1170183205.png\" alt=\"20180711090727241.png\"><br><img src=\"/old_images/2020/05/664969895.png\" alt=\"20180711094611205.png\"></p>\n<h2 id=\"基于Docker的人工智能小助手艾拉\"><a href=\"#基于Docker的人工智能小助手艾拉\" class=\"headerlink\" title=\"基于Docker的人工智能小助手艾拉\"></a>基于Docker的人工智能小助手艾拉</h2><p>前几天突然心血来潮，拿图灵机器人+酷Q做了一个简单的人工智障小助手，结果发现酷Q只能在Win下运行，想尽一切办法最终发现酷Q有一个on docker版本，赶紧拿来使用。几行命令，这个人工智障就已经跑在我的Linux服务器下了。这个Docker使用VNC远程桌面作为图形界面交互，我把它放在了我服务器的7070端口，进入VNC界面，你就会发现里面是一个实打实的Windows环境。</p>\n<p>具体命令见这篇：<a href=\"https://www.vpsjxw.com/vps_use/kuq_docker/\">酷Q on docker 安装部署、使用及二次开发教程</a></p>\n<p><img src=\"/old_images/2020/05/2761601438.jpg\" alt=\"Snipaste_2020-05-10_17-35-21.jpg\"><br><img src=\"/old_images/2020/05/1424232658.jpg\" alt=\"Snipaste_2020-05-10_17-34-58.jpg\"></p>\n<p>顺便吐槽一下，现在的腾讯对QQ的外部接口是越来越不上心了，果然微信才是主流嘛……</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Linux环境由于它可移植性强，轻量化，底层化的特点，得到了开发者们广泛的应用。<br>它在服务器市场，移动嵌入式市场，机器人领域有着重要的应用。<br>但是，有的应用对Linux支持很不友好（腾讯，说的就是你！），甚至没有Linux版本，这时候就需要另外一个Windows环境来运行Windows程序，这是，两个环境之间的切换就成了问题。</p>\n<p>今天我们来讨论一下在一台机器上运行Windows环境与Linux环境的方法。</p>\n<h2 id=\"为什么程序对操作系统环境有要求\"><a href=\"#为什么程序对操作系统环境有要求\" class=\"headerlink\" title=\"为什么程序对操作系统环境有要求\"></a>为什么程序对操作系统环境有要求</h2><p>首先，我们抛出一个问题，是不是所有程序运行都需要操作系统的支持？<br>紧接着，又有几个问题，为什么Linux下编译的程序不能再Windows环境下运行，反之也不行呢？</p>\n<p>对于第一个问题，不是所有程序都需要操作系统才能够运行，最常见的，<strong>单片机</strong>里跑的程序，<strong>U-Boot</strong>、<strong>grub</strong>这样的引导操作系统程序，还有<strong>操作系统本身</strong>，这些都是不需要运行在操作系统环境下运行的，我们称之为裸机程序。<br>逻辑程序唯一要求的，就是芯片的架构。ARM、x86、RISC-V架构的芯片跑的一定不是相同的程序。这也就是操作系统需要对不同架构芯片做版本移植的原因。</p>\n<p>第一点就是编译器的问题。不同的操作系统，有不同的内核提供的系统调用，这就对应着不同的编译器，才能编译不同操作系统下的程序。默认的编译器总是编译自己操作系统的代码，如果想编译运行在其他操作系统的代码，就需要交叉编译工具链（编译器、链接器……）<br><img src=\"/old_images/2020/05/3174243626.jpg\" alt=\"Snipaste_2020-05-10_16-59-38.jpg\"><br>平时一点就ok的按钮，其实就使用了交叉编译工具链，这就是IDE的力量(。・∀・)ノ</p>\n<p>还有就是库的问题。Win下动态链接库是.dll文件，静态链接库则是.lib文件，目标文件是.obj，而在Linux下，对应的分别是.so，.a，.o文件。<br>最终一点，可执行文件格式也不同，Win是大家耳熟能详的.exe文件，而Linux没有特定的后缀名。<br>最后两点本质上也是由于编译器、链接器不同导致生成的文件格式也不同。</p>\n<h2 id=\"双系统\"><a href=\"#双系统\" class=\"headerlink\" title=\"双系统\"></a>双系统</h2><p>解决方案一：双系统，最简单粗暴的方法，在一台电脑中安装两个操作系统。方便的是拥有完整的环境，操作系统可享用完整的计算机资源，缺点则是切换麻烦，文件传输麻烦，多个操作系统不能同时工作。<br>这里还要注意的是，操作系统的引导是由引导程序来进行的。BIOS会<strong>按顺序</strong>对每个硬盘分区最前面的区域进行查找，如果找到了引导程序，就执行它。如果不想启动先被找到的操作系统，则由引导程序将启动权交给下个分区内的引导程序。不过，由于Windows自带的引导程序无法启动Linux，但是grub却可以启动Windows，所以需要先安装Windows再安装Linux，否则Linux的引导会被覆盖。</p>\n<h2 id=\"虚拟机\"><a href=\"#虚拟机\" class=\"headerlink\" title=\"虚拟机\"></a>虚拟机</h2><p><img src=\"/old_images/2020/05/3462557488.png\" alt=\"vm-logo.png\"><br>解决方案二：虚拟机（VMWare）。虚拟机的具体实现需要OS的知识才能够理解，本菜鸡就不做过多解释了，总之可以理解为这是一个应用程序，在应用程序内又跑着一个操作系统。<br>虚拟机的优势就在于两个操作系统可以同时运行，交互良好（可以互相传文件），缺点就是两个操作系统共同占有一块计算机资源，性能下降，并且还有虚拟机对显卡支持不好的缺点。<br><img src=\"/old_images/2020/05/904172395.jpg\" alt=\"v2-ee27d299f5e38ed460218ac087518bba_720w.jpg\"></p>\n<h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><p><img src=\"/old_images/2020/05/1820938573.jpg\" alt=\"u=3999212251,2537480795&amp;fm=74&amp;app=80&amp;f=JPEG&amp;size=f121,90.jpg\"><br>与虚拟机类似，Docker也是跑在宿主OS中的程序（更准确是<strong>容器</strong>）<br>这个<strong>容器</strong>能够隔离内部程序与操作系统，且内部不需要安装操作系统，就能跨平台运行程序，上手容易，轻量化，很好用！<br><img src=\"/old_images/2020/05/3518464858.jpg\" alt=\"v2-0d67e01d75d19e227fb44104eca28f43_720w.jpg\"></p>\n<p>对比Docker与虚拟机<br><img src=\"/old_images/2020/05/1170183205.png\" alt=\"20180711090727241.png\"><br><img src=\"/old_images/2020/05/664969895.png\" alt=\"20180711094611205.png\"></p>\n<h2 id=\"基于Docker的人工智能小助手艾拉\"><a href=\"#基于Docker的人工智能小助手艾拉\" class=\"headerlink\" title=\"基于Docker的人工智能小助手艾拉\"></a>基于Docker的人工智能小助手艾拉</h2><p>前几天突然心血来潮，拿图灵机器人+酷Q做了一个简单的人工智障小助手，结果发现酷Q只能在Win下运行，想尽一切办法最终发现酷Q有一个on docker版本，赶紧拿来使用。几行命令，这个人工智障就已经跑在我的Linux服务器下了。这个Docker使用VNC远程桌面作为图形界面交互，我把它放在了我服务器的7070端口，进入VNC界面，你就会发现里面是一个实打实的Windows环境。</p>\n<p>具体命令见这篇：<a href=\"https://www.vpsjxw.com/vps_use/kuq_docker/\">酷Q on docker 安装部署、使用及二次开发教程</a></p>\n<p><img src=\"/old_images/2020/05/2761601438.jpg\" alt=\"Snipaste_2020-05-10_17-35-21.jpg\"><br><img src=\"/old_images/2020/05/1424232658.jpg\" alt=\"Snipaste_2020-05-10_17-34-58.jpg\"></p>\n<p>顺便吐槽一下，现在的腾讯对QQ的外部接口是越来越不上心了，果然微信才是主流嘛……</p>\n"},{"title":"嗯，新的页面！","date":"2020-02-19T00:33:00.000Z","toc":true,"_content":"欢迎新用户加入Star Blog！\n这里有注册地址-->[在这里注册登录哦！][1]\n这里有注册地址-->[在这里注册登录哦！][1]\n这里有注册地址-->[在这里注册登录哦！][1]\n这里有注册地址-->[在这里注册登录哦！][1]\n\n                      \n入坑Blog两周之后，我学了CSS，HTML，JS，PHP，但是都只学了个皮毛，\n为了能快速把Blog搭起来，我放弃了！\n因为这个开源博客框架真是太好用了！\n在这里强烈吹一波Typecho，可以说是能和WordPress比肩的开源网站框架\n也感谢这个Typecho主题Cuckoo的作者Bhao，向大佬学习！\n中国创造，轻量化，社区建设的也很好，源码开放供大家学习，简直良心！\n分享我的日常：\n![IMG_20190914_165923.jpg][2]\n雪中哈工大\n![IMG_20191118_002207.jpg][3]\nRoboMaster实况\n![IMG_20190811_140538.jpg][4]\n大家要是还想看我自制的旧的，丑的不要命的网站，欢迎访问 http://myblog.starydy.xyz \n\n\n  [1]: http://www.starydy.xyz/admin/\n  [2]: /old_images/2020/05/651860426.jpg\n  [3]: /old_images/2020/05/2294227069.jpg\n  [4]: /old_images/2020/05/3913045297.jpg\n","source":"_posts/嗯，新的页面！.md","raw":"title: 嗯，新的页面！\ndate: 2020-02-19 08:33:00\ncategories: 日常\ntags: []\ntoc: true\n---\n欢迎新用户加入Star Blog！\n这里有注册地址-->[在这里注册登录哦！][1]\n这里有注册地址-->[在这里注册登录哦！][1]\n这里有注册地址-->[在这里注册登录哦！][1]\n这里有注册地址-->[在这里注册登录哦！][1]\n\n                      \n入坑Blog两周之后，我学了CSS，HTML，JS，PHP，但是都只学了个皮毛，\n为了能快速把Blog搭起来，我放弃了！\n因为这个开源博客框架真是太好用了！\n在这里强烈吹一波Typecho，可以说是能和WordPress比肩的开源网站框架\n也感谢这个Typecho主题Cuckoo的作者Bhao，向大佬学习！\n中国创造，轻量化，社区建设的也很好，源码开放供大家学习，简直良心！\n分享我的日常：\n![IMG_20190914_165923.jpg][2]\n雪中哈工大\n![IMG_20191118_002207.jpg][3]\nRoboMaster实况\n![IMG_20190811_140538.jpg][4]\n大家要是还想看我自制的旧的，丑的不要命的网站，欢迎访问 http://myblog.starydy.xyz \n\n\n  [1]: http://www.starydy.xyz/admin/\n  [2]: /old_images/2020/05/651860426.jpg\n  [3]: /old_images/2020/05/2294227069.jpg\n  [4]: /old_images/2020/05/3913045297.jpg\n","slug":"嗯，新的页面！","published":1,"updated":"2020-12-14T12:21:53.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0c4001i7p19b5vpf1pe","content":"<p>欢迎新用户加入Star Blog！<br>这里有注册地址–&gt;<a href=\"http://www.starydy.xyz/admin/\">在这里注册登录哦！</a><br>这里有注册地址–&gt;<a href=\"http://www.starydy.xyz/admin/\">在这里注册登录哦！</a><br>这里有注册地址–&gt;<a href=\"http://www.starydy.xyz/admin/\">在这里注册登录哦！</a><br>这里有注册地址–&gt;<a href=\"http://www.starydy.xyz/admin/\">在这里注册登录哦！</a></p>\n<p>入坑Blog两周之后，我学了CSS，HTML，JS，PHP，但是都只学了个皮毛，<br>为了能快速把Blog搭起来，我放弃了！<br>因为这个开源博客框架真是太好用了！<br>在这里强烈吹一波Typecho，可以说是能和WordPress比肩的开源网站框架<br>也感谢这个Typecho主题Cuckoo的作者Bhao，向大佬学习！<br>中国创造，轻量化，社区建设的也很好，源码开放供大家学习，简直良心！<br>分享我的日常：<br><img src=\"/old_images/2020/05/651860426.jpg\" alt=\"IMG_20190914_165923.jpg\"><br>雪中哈工大<br><img src=\"/old_images/2020/05/2294227069.jpg\" alt=\"IMG_20191118_002207.jpg\"><br>RoboMaster实况<br><img src=\"/old_images/2020/05/3913045297.jpg\" alt=\"IMG_20190811_140538.jpg\"><br>大家要是还想看我自制的旧的，丑的不要命的网站，欢迎访问 <a href=\"http://myblog.starydy.xyz/\">http://myblog.starydy.xyz</a> </p>\n","site":{"data":{}},"excerpt":"","more":"<p>欢迎新用户加入Star Blog！<br>这里有注册地址–&gt;<a href=\"http://www.starydy.xyz/admin/\">在这里注册登录哦！</a><br>这里有注册地址–&gt;<a href=\"http://www.starydy.xyz/admin/\">在这里注册登录哦！</a><br>这里有注册地址–&gt;<a href=\"http://www.starydy.xyz/admin/\">在这里注册登录哦！</a><br>这里有注册地址–&gt;<a href=\"http://www.starydy.xyz/admin/\">在这里注册登录哦！</a></p>\n<p>入坑Blog两周之后，我学了CSS，HTML，JS，PHP，但是都只学了个皮毛，<br>为了能快速把Blog搭起来，我放弃了！<br>因为这个开源博客框架真是太好用了！<br>在这里强烈吹一波Typecho，可以说是能和WordPress比肩的开源网站框架<br>也感谢这个Typecho主题Cuckoo的作者Bhao，向大佬学习！<br>中国创造，轻量化，社区建设的也很好，源码开放供大家学习，简直良心！<br>分享我的日常：<br><img src=\"/old_images/2020/05/651860426.jpg\" alt=\"IMG_20190914_165923.jpg\"><br>雪中哈工大<br><img src=\"/old_images/2020/05/2294227069.jpg\" alt=\"IMG_20191118_002207.jpg\"><br>RoboMaster实况<br><img src=\"/old_images/2020/05/3913045297.jpg\" alt=\"IMG_20190811_140538.jpg\"><br>大家要是还想看我自制的旧的，丑的不要命的网站，欢迎访问 <a href=\"http://myblog.starydy.xyz/\">http://myblog.starydy.xyz</a> </p>\n"},{"title":"对比ARM与x86的boot过程","date":"2020-02-20T02:30:00.000Z","toc":true,"_content":"大家都应该熟悉x86架构cpu的启动方式\n**首先是BIOS芯片，是一个固化了程序的CMOS芯片：**\n作为设备上电第一个被执行的程序，无论是BIOS还是UEFI都会先取得设备的硬件信息，其中重要的就包括启动设备的查找顺序！下一步，BIOS会按照这个顺序检测到第一个设备的MBR区（BootSector），其中就存放着bootloader，BIOS会把bootloader加载到内存运行。\n**bootloader：**\n最常见的bootloader就是grub了，bootloader的最重要的作用是识别操作系统的文件系统格式，并且加载到内存中去运行，每个操作系统都应该有对应的bootloader。另外，bootloader还有另外一个作用，就是可以将启动管理的功能交给其他系统的bootloader，这也就是我们能在同一台电脑上同时安装Windows和Linux两个操作系统的原因了。当然加载完内核后还有初始化虚拟根目录，配置驱动程序，挂载根目录和systemd服务开启的诸多任务。\n\n而对于经常玩STM32的我，bootloader一般是芯片厂商固化在芯片中的一段程序。由于STM32不需要把程序加载到内存中运行，而是在flash中直接被运行，bootloader可以被直接执行。bootloader的作用就是：1、选择启动方式；2、初始化芯片的一些基本功能能保证程序在flash中运。，之后，就可以把cpu使用权转交给程序了。当然，如果厂商提供的内嵌bootloader不能满足你的需求（比如需要在线升级固件的产品，即IAP），你也可以自己写 bootloader，将其烧在flash的某个特定区域，用自己的bootloader去引导程序执行。同时，我们熟知的startup启动文件也属于这个bootloader\n\n最近一段时间看到了嵌入式Linux的启动方式，正是结合了上面两种启动方式的来的，最长用的嵌入式Linux的bootloader是U-Boot，相当于一段裸机程序，链接到第一个执行的位置，当然在启动时会被拿到ram中第一个执行。它的作用也是为Linux开路，配置Linux所需外设，初始化DDR，并且把Linux内核程序加载到ram中。之后的过程就与x86架构大同小异了。\n\n由此可见，U-Boot可以说是发挥了BIOS与boootloader的作用，主要作用就是1、配置；2、加载内核。\n","source":"_posts/对比ARM与x86的boot过程.md","raw":"title: 对比ARM与x86的boot过程\ndate: 2020-02-20 10:30:00\ncategories: 开发\ntags: []\ntoc: true\n---\n大家都应该熟悉x86架构cpu的启动方式\n**首先是BIOS芯片，是一个固化了程序的CMOS芯片：**\n作为设备上电第一个被执行的程序，无论是BIOS还是UEFI都会先取得设备的硬件信息，其中重要的就包括启动设备的查找顺序！下一步，BIOS会按照这个顺序检测到第一个设备的MBR区（BootSector），其中就存放着bootloader，BIOS会把bootloader加载到内存运行。\n**bootloader：**\n最常见的bootloader就是grub了，bootloader的最重要的作用是识别操作系统的文件系统格式，并且加载到内存中去运行，每个操作系统都应该有对应的bootloader。另外，bootloader还有另外一个作用，就是可以将启动管理的功能交给其他系统的bootloader，这也就是我们能在同一台电脑上同时安装Windows和Linux两个操作系统的原因了。当然加载完内核后还有初始化虚拟根目录，配置驱动程序，挂载根目录和systemd服务开启的诸多任务。\n\n而对于经常玩STM32的我，bootloader一般是芯片厂商固化在芯片中的一段程序。由于STM32不需要把程序加载到内存中运行，而是在flash中直接被运行，bootloader可以被直接执行。bootloader的作用就是：1、选择启动方式；2、初始化芯片的一些基本功能能保证程序在flash中运。，之后，就可以把cpu使用权转交给程序了。当然，如果厂商提供的内嵌bootloader不能满足你的需求（比如需要在线升级固件的产品，即IAP），你也可以自己写 bootloader，将其烧在flash的某个特定区域，用自己的bootloader去引导程序执行。同时，我们熟知的startup启动文件也属于这个bootloader\n\n最近一段时间看到了嵌入式Linux的启动方式，正是结合了上面两种启动方式的来的，最长用的嵌入式Linux的bootloader是U-Boot，相当于一段裸机程序，链接到第一个执行的位置，当然在启动时会被拿到ram中第一个执行。它的作用也是为Linux开路，配置Linux所需外设，初始化DDR，并且把Linux内核程序加载到ram中。之后的过程就与x86架构大同小异了。\n\n由此可见，U-Boot可以说是发挥了BIOS与boootloader的作用，主要作用就是1、配置；2、加载内核。\n","slug":"对比ARM与x86的boot过程","published":1,"updated":"2020-12-14T12:21:02.342Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0c4001k7p19enmj9ci1","content":"<p>大家都应该熟悉x86架构cpu的启动方式<br><strong>首先是BIOS芯片，是一个固化了程序的CMOS芯片：</strong><br>作为设备上电第一个被执行的程序，无论是BIOS还是UEFI都会先取得设备的硬件信息，其中重要的就包括启动设备的查找顺序！下一步，BIOS会按照这个顺序检测到第一个设备的MBR区（BootSector），其中就存放着bootloader，BIOS会把bootloader加载到内存运行。<br><strong>bootloader：</strong><br>最常见的bootloader就是grub了，bootloader的最重要的作用是识别操作系统的文件系统格式，并且加载到内存中去运行，每个操作系统都应该有对应的bootloader。另外，bootloader还有另外一个作用，就是可以将启动管理的功能交给其他系统的bootloader，这也就是我们能在同一台电脑上同时安装Windows和Linux两个操作系统的原因了。当然加载完内核后还有初始化虚拟根目录，配置驱动程序，挂载根目录和systemd服务开启的诸多任务。</p>\n<p>而对于经常玩STM32的我，bootloader一般是芯片厂商固化在芯片中的一段程序。由于STM32不需要把程序加载到内存中运行，而是在flash中直接被运行，bootloader可以被直接执行。bootloader的作用就是：1、选择启动方式；2、初始化芯片的一些基本功能能保证程序在flash中运。，之后，就可以把cpu使用权转交给程序了。当然，如果厂商提供的内嵌bootloader不能满足你的需求（比如需要在线升级固件的产品，即IAP），你也可以自己写 bootloader，将其烧在flash的某个特定区域，用自己的bootloader去引导程序执行。同时，我们熟知的startup启动文件也属于这个bootloader</p>\n<p>最近一段时间看到了嵌入式Linux的启动方式，正是结合了上面两种启动方式的来的，最长用的嵌入式Linux的bootloader是U-Boot，相当于一段裸机程序，链接到第一个执行的位置，当然在启动时会被拿到ram中第一个执行。它的作用也是为Linux开路，配置Linux所需外设，初始化DDR，并且把Linux内核程序加载到ram中。之后的过程就与x86架构大同小异了。</p>\n<p>由此可见，U-Boot可以说是发挥了BIOS与boootloader的作用，主要作用就是1、配置；2、加载内核。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>大家都应该熟悉x86架构cpu的启动方式<br><strong>首先是BIOS芯片，是一个固化了程序的CMOS芯片：</strong><br>作为设备上电第一个被执行的程序，无论是BIOS还是UEFI都会先取得设备的硬件信息，其中重要的就包括启动设备的查找顺序！下一步，BIOS会按照这个顺序检测到第一个设备的MBR区（BootSector），其中就存放着bootloader，BIOS会把bootloader加载到内存运行。<br><strong>bootloader：</strong><br>最常见的bootloader就是grub了，bootloader的最重要的作用是识别操作系统的文件系统格式，并且加载到内存中去运行，每个操作系统都应该有对应的bootloader。另外，bootloader还有另外一个作用，就是可以将启动管理的功能交给其他系统的bootloader，这也就是我们能在同一台电脑上同时安装Windows和Linux两个操作系统的原因了。当然加载完内核后还有初始化虚拟根目录，配置驱动程序，挂载根目录和systemd服务开启的诸多任务。</p>\n<p>而对于经常玩STM32的我，bootloader一般是芯片厂商固化在芯片中的一段程序。由于STM32不需要把程序加载到内存中运行，而是在flash中直接被运行，bootloader可以被直接执行。bootloader的作用就是：1、选择启动方式；2、初始化芯片的一些基本功能能保证程序在flash中运。，之后，就可以把cpu使用权转交给程序了。当然，如果厂商提供的内嵌bootloader不能满足你的需求（比如需要在线升级固件的产品，即IAP），你也可以自己写 bootloader，将其烧在flash的某个特定区域，用自己的bootloader去引导程序执行。同时，我们熟知的startup启动文件也属于这个bootloader</p>\n<p>最近一段时间看到了嵌入式Linux的启动方式，正是结合了上面两种启动方式的来的，最长用的嵌入式Linux的bootloader是U-Boot，相当于一段裸机程序，链接到第一个执行的位置，当然在启动时会被拿到ram中第一个执行。它的作用也是为Linux开路，配置Linux所需外设，初始化DDR，并且把Linux内核程序加载到ram中。之后的过程就与x86架构大同小异了。</p>\n<p>由此可见，U-Boot可以说是发挥了BIOS与boootloader的作用，主要作用就是1、配置；2、加载内核。</p>\n"},{"title":"开启新的旅程！","top":true,"date":"2020-12-14T09:33:41.000Z","pic":null,"toc":true,"_content":"\n转眼间，从我搭建第一个博客已经过去了一年，服务器到期，现在将博客转移到了github下进行托管，在此对对本博客做出贡献的大家说声谢谢！，现在本博客失去了投稿功能，但是我们还是能在评论区相见！域名我会续费，还请大家持续关注starydy.xyz，关注Star Blog！\n\n谢谢大家！\n\n![thanku](/images/2020/开启新的旅程/thanku.png)\n\n\n\n\n\n以下是测试！\n\n{% alertbox success \"成功啦o(*￣▽￣*)ブ\" %}\n{% alertbox danger \"有危险Σ(っ °Д °;)っ\" %}\n{% alertbox info \"有消息(・∀・(・∀・(・∀・*)\" %}\n{% alertbox warning \"当心哦≧ ﹏ ≦\" %}\n\n{% collapse 折叠框的标题 %}\n被折叠的内容 1\n被折叠的内容 2\n{% endcollapse %}\n\n{% colorpanel TYPE 面板框的标题 %}\n面板里的内容 1\n面板里的内容 2\n{% endcolorpanel %}\n\n```\ncodes\n```\n\n","source":"_posts/开启新的旅程！.md","raw":"---\ntitle: 开启新的旅程！\ntop: true\ndate: 2020-12-14 17:33:41\ncategories: 日常\ntags:\npic:\ntoc: true\n---\n\n转眼间，从我搭建第一个博客已经过去了一年，服务器到期，现在将博客转移到了github下进行托管，在此对对本博客做出贡献的大家说声谢谢！，现在本博客失去了投稿功能，但是我们还是能在评论区相见！域名我会续费，还请大家持续关注starydy.xyz，关注Star Blog！\n\n谢谢大家！\n\n![thanku](/images/2020/开启新的旅程/thanku.png)\n\n\n\n\n\n以下是测试！\n\n{% alertbox success \"成功啦o(*￣▽￣*)ブ\" %}\n{% alertbox danger \"有危险Σ(っ °Д °;)っ\" %}\n{% alertbox info \"有消息(・∀・(・∀・(・∀・*)\" %}\n{% alertbox warning \"当心哦≧ ﹏ ≦\" %}\n\n{% collapse 折叠框的标题 %}\n被折叠的内容 1\n被折叠的内容 2\n{% endcollapse %}\n\n{% colorpanel TYPE 面板框的标题 %}\n面板里的内容 1\n面板里的内容 2\n{% endcolorpanel %}\n\n```\ncodes\n```\n\n","slug":"开启新的旅程！","published":1,"updated":"2020-12-14T12:21:38.765Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0c5001m7p197x34h05t","content":"<p>转眼间，从我搭建第一个博客已经过去了一年，服务器到期，现在将博客转移到了github下进行托管，在此对对本博客做出贡献的大家说声谢谢！，现在本博客失去了投稿功能，但是我们还是能在评论区相见！域名我会续费，还请大家持续关注starydy.xyz，关注Star Blog！</p>\n<p>谢谢大家！</p>\n<p><img src=\"/images/2020/%E5%BC%80%E5%90%AF%E6%96%B0%E7%9A%84%E6%97%85%E7%A8%8B/thanku.png\" alt=\"thanku\"></p>\n<p>以下是测试！</p>\n<div class=\"alert alert-success\">成功啦o(*￣▽￣*)ブ</div>\n<div class=\"alert alert-danger\">有危险Σ(っ °Д °;)っ</div>\n<div class=\"alert alert-info\">有消息(・∀・(・∀・(・∀・*)</div>\n<div class=\"alert alert-warning\">当心哦≧ ﹏ ≦</div>\n\n<div class=\"xControl\">\n    <div class=\"xHeading\"><div class=\"xIcon\"><i class=\"fa fa-plus\"></i></div><span>折叠框的标题</span></div>\n    <div class=\"xContent\"><div class=\"inner\">\n        <p>被折叠的内容 1<br>被折叠的内容 2</p>\n \n    </div></div>\n    </div>\n\n<div class=\"panel panel-TYPE\">\n    <div class=\"panel-title\">面板框的标题</div>\n    <div class=\"panel-body\">\n        <p>面板里的内容 1<br>面板里的内容 2</p>\n\n    </div>\n    </div>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">codes</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>转眼间，从我搭建第一个博客已经过去了一年，服务器到期，现在将博客转移到了github下进行托管，在此对对本博客做出贡献的大家说声谢谢！，现在本博客失去了投稿功能，但是我们还是能在评论区相见！域名我会续费，还请大家持续关注starydy.xyz，关注Star Blog！</p>\n<p>谢谢大家！</p>\n<p><img src=\"/images/2020/%E5%BC%80%E5%90%AF%E6%96%B0%E7%9A%84%E6%97%85%E7%A8%8B/thanku.png\" alt=\"thanku\"></p>\n<p>以下是测试！</p>\n<div class=\"alert alert-success\">成功啦o(*￣▽￣*)ブ</div>\n<div class=\"alert alert-danger\">有危险Σ(っ °Д °;)っ</div>\n<div class=\"alert alert-info\">有消息(・∀・(・∀・(・∀・*)</div>\n<div class=\"alert alert-warning\">当心哦≧ ﹏ ≦</div>\n\n<div class=\"xControl\">\n    <div class=\"xHeading\"><div class=\"xIcon\"><i class=\"fa fa-plus\"></i></div><span>折叠框的标题</span></div>\n    <div class=\"xContent\"><div class=\"inner\">\n        <p>被折叠的内容 1<br>被折叠的内容 2</p>\n \n    </div></div>\n    </div>\n\n<div class=\"panel panel-TYPE\">\n    <div class=\"panel-title\">面板框的标题</div>\n    <div class=\"panel-body\">\n        <p>面板里的内容 1<br>面板里的内容 2</p>\n\n    </div>\n    </div>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">codes</span><br></pre></td></tr></table></figure>\n\n"},{"title":"技术传承——永磁同步电机驱动1","date":"2020-02-21T04:16:00.000Z","toc":true,"_content":"记得当时是2018年寒假，加入机器人队不满半年，老余前辈开发出了机器人队历史上第一款好用的永磁同步电机驱动，当时的我也是真的懵，电机种类也不懂，电机原理也不会，恰巧哨兵需要一款新的yaw轴云台电机，而我又是哨兵控制的负责人，顺理成章的我就成了这款驱动的第一个实验品。\n一开始我是把他当作一个产品来用的，但是在使用过程中难免不会产生一些问题，我要到了源码，开启了我无刷驱动研究的大坑\n在这一年间，我从开始的一点也不会，到中间的 啥都懂一点，啥都不明白，到现在的初识foc算法，逆变器原理等基础知识，真的是历尽千辛万苦，十分感谢老余带我走上了这条控制的不归路。\n这次我主要讲一下 永磁同步电机中坐标变换的部分，有错误希望大家指出！\n首先问大家个问题：为什么要坐标变换？\n 1. Clark变换是为了将三相电流变换为两相正交电流，为Park变换做准备\n 2. Park变换是为了将定子电流坐标变换到转子上，最终我们的所有控制都是在转子上的\n 3. 反Park变换时为了将控制量（电压）反推回定子端，以便进行SVPWM调制\n由此可见，坐标变换体现在驱动的方方面面。\n## Clark变换 ##\nClark变换又分为两种形式：1、等幅值变换；2、等功率变换\n为什么会这样分呢，我们先来看一下他们俩的不同。\n![Clark1.PNG][1]\n等幅值变换\n![clark.PNG][2]\n等功率变换\n\n**原来只是矩阵前面的系数有差别啊！**\n我们能发现，Clark变换大体就是把三相电流都向alpha、beta两正交轴投影，再将其相加。但是这前面这个系数又是怎么来的呢？\n但实际上，这个变换就是把原本存在三相上的电流抽象成了两项正交电流，而且为了保证抽象前后幅值不变，它带了一个系数2/3（由三相脉振磁场合成的旋转磁场幅值是原来的3/2），这就是等幅值变换\n等功率变换又是什么呢？为了使变换前后功率相等，即电压*电流相等，最终变换的系数变为了sqrt(2/3),这就是等功率变换。\n等幅值变换与等功率变换仅仅是两种不同的坐标变换，得到的电流有着不同的比例，其中等幅值变换拥有与测量电流同样的比例，所以我们一般使用等幅值变换。还要注意的是，使用两种变换由于电流比例不同，得到的力矩常数也不同，甚至永磁体磁链也不同，它们之间的都差一个常数sqrt（2/3）！\n## Park变换 ##\n**相对于Clark变换，Park变换就更加容易理解了!**\n![Park.PNG][3]\n如上图所示，Park变换仅仅就是把定子坐标系变换到转子坐标系上，方便我们做控制（直接在定子上做其实也不是不行。。。），随后再用反变换变换到定子来输出电压。\n要注意的一点是公式中的theta指的是电角度thetaP，即实际机械角度的p倍（p为电机极对数）\n为什么要用thetP做变换呢？\n对于p对极的电机，磁场的变化是每360°/p的机械角度变化一周期，也就是360°电角度变化一周期，\n所以，永磁体磁链总是相对于转子静止的，力矩、强弱磁也仅仅是与q、d轴上的电流有关，所以我们要把电流变换到转子上。\n\n**今天这期我们主要讨论了基础的坐标变换理论，下期我们来讲解一下永磁电机中转子坐标下的控制方法。**\n\n  [1]: /old_images/2020/02/2324103181.png\n  [2]: /old_images/2020/02/3086867647.png\n  [3]: /old_images/2020/02/4018005133.png\n","source":"_posts/技术传承——永磁同步电机驱动1.md","raw":"title: 技术传承——永磁同步电机驱动1\ndate: 2020-02-21 12:16:00\ncategories: 控制\ntags: []\ntoc: true\n---\n记得当时是2018年寒假，加入机器人队不满半年，老余前辈开发出了机器人队历史上第一款好用的永磁同步电机驱动，当时的我也是真的懵，电机种类也不懂，电机原理也不会，恰巧哨兵需要一款新的yaw轴云台电机，而我又是哨兵控制的负责人，顺理成章的我就成了这款驱动的第一个实验品。\n一开始我是把他当作一个产品来用的，但是在使用过程中难免不会产生一些问题，我要到了源码，开启了我无刷驱动研究的大坑\n在这一年间，我从开始的一点也不会，到中间的 啥都懂一点，啥都不明白，到现在的初识foc算法，逆变器原理等基础知识，真的是历尽千辛万苦，十分感谢老余带我走上了这条控制的不归路。\n这次我主要讲一下 永磁同步电机中坐标变换的部分，有错误希望大家指出！\n首先问大家个问题：为什么要坐标变换？\n 1. Clark变换是为了将三相电流变换为两相正交电流，为Park变换做准备\n 2. Park变换是为了将定子电流坐标变换到转子上，最终我们的所有控制都是在转子上的\n 3. 反Park变换时为了将控制量（电压）反推回定子端，以便进行SVPWM调制\n由此可见，坐标变换体现在驱动的方方面面。\n## Clark变换 ##\nClark变换又分为两种形式：1、等幅值变换；2、等功率变换\n为什么会这样分呢，我们先来看一下他们俩的不同。\n![Clark1.PNG][1]\n等幅值变换\n![clark.PNG][2]\n等功率变换\n\n**原来只是矩阵前面的系数有差别啊！**\n我们能发现，Clark变换大体就是把三相电流都向alpha、beta两正交轴投影，再将其相加。但是这前面这个系数又是怎么来的呢？\n但实际上，这个变换就是把原本存在三相上的电流抽象成了两项正交电流，而且为了保证抽象前后幅值不变，它带了一个系数2/3（由三相脉振磁场合成的旋转磁场幅值是原来的3/2），这就是等幅值变换\n等功率变换又是什么呢？为了使变换前后功率相等，即电压*电流相等，最终变换的系数变为了sqrt(2/3),这就是等功率变换。\n等幅值变换与等功率变换仅仅是两种不同的坐标变换，得到的电流有着不同的比例，其中等幅值变换拥有与测量电流同样的比例，所以我们一般使用等幅值变换。还要注意的是，使用两种变换由于电流比例不同，得到的力矩常数也不同，甚至永磁体磁链也不同，它们之间的都差一个常数sqrt（2/3）！\n## Park变换 ##\n**相对于Clark变换，Park变换就更加容易理解了!**\n![Park.PNG][3]\n如上图所示，Park变换仅仅就是把定子坐标系变换到转子坐标系上，方便我们做控制（直接在定子上做其实也不是不行。。。），随后再用反变换变换到定子来输出电压。\n要注意的一点是公式中的theta指的是电角度thetaP，即实际机械角度的p倍（p为电机极对数）\n为什么要用thetP做变换呢？\n对于p对极的电机，磁场的变化是每360°/p的机械角度变化一周期，也就是360°电角度变化一周期，\n所以，永磁体磁链总是相对于转子静止的，力矩、强弱磁也仅仅是与q、d轴上的电流有关，所以我们要把电流变换到转子上。\n\n**今天这期我们主要讨论了基础的坐标变换理论，下期我们来讲解一下永磁电机中转子坐标下的控制方法。**\n\n  [1]: /old_images/2020/02/2324103181.png\n  [2]: /old_images/2020/02/3086867647.png\n  [3]: /old_images/2020/02/4018005133.png\n","slug":"技术传承——永磁同步电机驱动1","published":1,"updated":"2020-12-14T12:21:13.157Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0c6001o7p19daib5vrj","content":"<p>记得当时是2018年寒假，加入机器人队不满半年，老余前辈开发出了机器人队历史上第一款好用的永磁同步电机驱动，当时的我也是真的懵，电机种类也不懂，电机原理也不会，恰巧哨兵需要一款新的yaw轴云台电机，而我又是哨兵控制的负责人，顺理成章的我就成了这款驱动的第一个实验品。<br>一开始我是把他当作一个产品来用的，但是在使用过程中难免不会产生一些问题，我要到了源码，开启了我无刷驱动研究的大坑<br>在这一年间，我从开始的一点也不会，到中间的 啥都懂一点，啥都不明白，到现在的初识foc算法，逆变器原理等基础知识，真的是历尽千辛万苦，十分感谢老余带我走上了这条控制的不归路。<br>这次我主要讲一下 永磁同步电机中坐标变换的部分，有错误希望大家指出！<br>首先问大家个问题：为什么要坐标变换？</p>\n<ol>\n<li>Clark变换是为了将三相电流变换为两相正交电流，为Park变换做准备</li>\n<li>Park变换是为了将定子电流坐标变换到转子上，最终我们的所有控制都是在转子上的</li>\n<li>反Park变换时为了将控制量（电压）反推回定子端，以便进行SVPWM调制<br>由此可见，坐标变换体现在驱动的方方面面。<h2 id=\"Clark变换\"><a href=\"#Clark变换\" class=\"headerlink\" title=\"Clark变换\"></a>Clark变换</h2>Clark变换又分为两种形式：1、等幅值变换；2、等功率变换<br>为什么会这样分呢，我们先来看一下他们俩的不同。<br><img src=\"/old_images/2020/02/2324103181.png\" alt=\"Clark1.PNG\"><br>等幅值变换<br><img src=\"/old_images/2020/02/3086867647.png\" alt=\"clark.PNG\"><br>等功率变换</li>\n</ol>\n<p><strong>原来只是矩阵前面的系数有差别啊！</strong><br>我们能发现，Clark变换大体就是把三相电流都向alpha、beta两正交轴投影，再将其相加。但是这前面这个系数又是怎么来的呢？<br>但实际上，这个变换就是把原本存在三相上的电流抽象成了两项正交电流，而且为了保证抽象前后幅值不变，它带了一个系数2/3（由三相脉振磁场合成的旋转磁场幅值是原来的3/2），这就是等幅值变换<br>等功率变换又是什么呢？为了使变换前后功率相等，即电压*电流相等，最终变换的系数变为了sqrt(2/3),这就是等功率变换。<br>等幅值变换与等功率变换仅仅是两种不同的坐标变换，得到的电流有着不同的比例，其中等幅值变换拥有与测量电流同样的比例，所以我们一般使用等幅值变换。还要注意的是，使用两种变换由于电流比例不同，得到的力矩常数也不同，甚至永磁体磁链也不同，它们之间的都差一个常数sqrt（2/3）！</p>\n<h2 id=\"Park变换\"><a href=\"#Park变换\" class=\"headerlink\" title=\"Park变换\"></a>Park变换</h2><p><strong>相对于Clark变换，Park变换就更加容易理解了!</strong><br><img src=\"/old_images/2020/02/4018005133.png\" alt=\"Park.PNG\"><br>如上图所示，Park变换仅仅就是把定子坐标系变换到转子坐标系上，方便我们做控制（直接在定子上做其实也不是不行。。。），随后再用反变换变换到定子来输出电压。<br>要注意的一点是公式中的theta指的是电角度thetaP，即实际机械角度的p倍（p为电机极对数）<br>为什么要用thetP做变换呢？<br>对于p对极的电机，磁场的变化是每360°/p的机械角度变化一周期，也就是360°电角度变化一周期，<br>所以，永磁体磁链总是相对于转子静止的，力矩、强弱磁也仅仅是与q、d轴上的电流有关，所以我们要把电流变换到转子上。</p>\n<p><strong>今天这期我们主要讨论了基础的坐标变换理论，下期我们来讲解一下永磁电机中转子坐标下的控制方法。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>记得当时是2018年寒假，加入机器人队不满半年，老余前辈开发出了机器人队历史上第一款好用的永磁同步电机驱动，当时的我也是真的懵，电机种类也不懂，电机原理也不会，恰巧哨兵需要一款新的yaw轴云台电机，而我又是哨兵控制的负责人，顺理成章的我就成了这款驱动的第一个实验品。<br>一开始我是把他当作一个产品来用的，但是在使用过程中难免不会产生一些问题，我要到了源码，开启了我无刷驱动研究的大坑<br>在这一年间，我从开始的一点也不会，到中间的 啥都懂一点，啥都不明白，到现在的初识foc算法，逆变器原理等基础知识，真的是历尽千辛万苦，十分感谢老余带我走上了这条控制的不归路。<br>这次我主要讲一下 永磁同步电机中坐标变换的部分，有错误希望大家指出！<br>首先问大家个问题：为什么要坐标变换？</p>\n<ol>\n<li>Clark变换是为了将三相电流变换为两相正交电流，为Park变换做准备</li>\n<li>Park变换是为了将定子电流坐标变换到转子上，最终我们的所有控制都是在转子上的</li>\n<li>反Park变换时为了将控制量（电压）反推回定子端，以便进行SVPWM调制<br>由此可见，坐标变换体现在驱动的方方面面。<h2 id=\"Clark变换\"><a href=\"#Clark变换\" class=\"headerlink\" title=\"Clark变换\"></a>Clark变换</h2>Clark变换又分为两种形式：1、等幅值变换；2、等功率变换<br>为什么会这样分呢，我们先来看一下他们俩的不同。<br><img src=\"/old_images/2020/02/2324103181.png\" alt=\"Clark1.PNG\"><br>等幅值变换<br><img src=\"/old_images/2020/02/3086867647.png\" alt=\"clark.PNG\"><br>等功率变换</li>\n</ol>\n<p><strong>原来只是矩阵前面的系数有差别啊！</strong><br>我们能发现，Clark变换大体就是把三相电流都向alpha、beta两正交轴投影，再将其相加。但是这前面这个系数又是怎么来的呢？<br>但实际上，这个变换就是把原本存在三相上的电流抽象成了两项正交电流，而且为了保证抽象前后幅值不变，它带了一个系数2/3（由三相脉振磁场合成的旋转磁场幅值是原来的3/2），这就是等幅值变换<br>等功率变换又是什么呢？为了使变换前后功率相等，即电压*电流相等，最终变换的系数变为了sqrt(2/3),这就是等功率变换。<br>等幅值变换与等功率变换仅仅是两种不同的坐标变换，得到的电流有着不同的比例，其中等幅值变换拥有与测量电流同样的比例，所以我们一般使用等幅值变换。还要注意的是，使用两种变换由于电流比例不同，得到的力矩常数也不同，甚至永磁体磁链也不同，它们之间的都差一个常数sqrt（2/3）！</p>\n<h2 id=\"Park变换\"><a href=\"#Park变换\" class=\"headerlink\" title=\"Park变换\"></a>Park变换</h2><p><strong>相对于Clark变换，Park变换就更加容易理解了!</strong><br><img src=\"/old_images/2020/02/4018005133.png\" alt=\"Park.PNG\"><br>如上图所示，Park变换仅仅就是把定子坐标系变换到转子坐标系上，方便我们做控制（直接在定子上做其实也不是不行。。。），随后再用反变换变换到定子来输出电压。<br>要注意的一点是公式中的theta指的是电角度thetaP，即实际机械角度的p倍（p为电机极对数）<br>为什么要用thetP做变换呢？<br>对于p对极的电机，磁场的变化是每360°/p的机械角度变化一周期，也就是360°电角度变化一周期，<br>所以，永磁体磁链总是相对于转子静止的，力矩、强弱磁也仅仅是与q、d轴上的电流有关，所以我们要把电流变换到转子上。</p>\n<p><strong>今天这期我们主要讨论了基础的坐标变换理论，下期我们来讲解一下永磁电机中转子坐标下的控制方法。</strong></p>\n"},{"title":"技术传承——永磁同步电机驱动2","date":"2020-02-23T21:25:00.000Z","toc":true,"_content":"万众期待的P2来啦，这次为大家更新电流环与无感部分\n正好和要申的一个专利相关，就白嫖了一点过来\n自己白嫖自己应该不算什么侵权吧/笑哭\n\n----------\n## 电流环控制——复矢量解耦 ##\n首先，电流采样得到电机三相线上的交变电流，依次经过Clark变换、Park’变换，得到相对转子静止的旋转坐标系下电流，即Iq（q轴电流）与Id（d轴电流），通过复矢量解耦与PI控制器的方法计算出当前应加载在q、d轴上的电压Uq与Ud，进一步，再使用反Park变换计算出静止坐标系下交变电压Uα、Uβ，即可通过SVPWM调制得到三相方波占空比，控制永磁同步电机的电流，进而控制电机力矩。\n**复矢量控制器的构造方法如下:**\n![ses1.PNG][1]\n对于隐极电机，有Ld=Lq=L\n可以看到q、d轴电压方程之间互相包含对方的电流，明显是一个耦合的系统。传统控制方法通过前馈的方法进行解耦，即在最终输入电机系统之前在输出电压值上补偿数学模型中![ses17.PNG][2]这一项，系统就可以得到解耦。然而，前馈解耦的方法过渡依赖于电机参数，即我们必须得到准确的Ld、Lq以及![ses18.PNG][3]才能够较好地消除耦合影响。由此导致采用前馈解耦控制方法的电机存在电流波动，相应慢的缺陷。\n本专利采用一种新型的复矢量解耦的方法进行电流环控制：\n首先构造控制量，构造电流复矢量i_S，其实部由id构成，虚部由iq构成，则有:\n![ses2.PNG][4]\n同理，我们可以构造电压复矢量U_S，其实部u_d由构成，虚部由u_q构成，则有:\n![ses3.PNG][5]\n将上述方程与电机数学模型联立，可得到由电流、电压复矢量构成的新的电压方程如下：\n![ses4.PNG][6]\n由此可见，我们已经将两个互相耦合的系统变为一个整体，此时我们只需输出电压Us，即可控制电流is，在控制is的同时，id与iq也就得到了控制。\n\n**采取PI控制器控制:**\n![ses5.PNG][7]\n其中PI参数可选取![ses19.PNG][8]控制系统带宽，有alpha越大，带宽越大，电流响应速度越快。但alpha不可无限制地增加，应考虑控制器输出电压的范围合理设计alpha的值。\n最后在最终输出的uq部分可以前馈补偿上![ses20.PNG][9]![ses18.PNG][10]，使模型更加拟合真实模型。\n\n## 角度观测——扩张+龙伯格（Extended Luenberger Observer） ##\n电流环控制器设计完成后，我们考虑无传感器设计方案。传统无传感器算法通常采用六步换向法，即通过检测三相线上的反电动势来估计转子位置，通过控制逆变器的六种状态来实现电机的无传感器运行。但这种方法无法精确控制电流，且最终电流波形为方波而非正弦波，就可能导致电机运行不平稳，调速不灵活等问题。本专利采取无传感器FOC控制算法，可以精确控制电流，实现电机平稳运行。使用龙伯格观测器观测电机的位置与速度，为FOC算法提供位置参考。\n无传感器算法运行原理如下：\n启动前首先通过控制恒定的A相电流，电流产生的磁场使得电机转子转动到固定的启动位置，随后开启开环启动流程。\n开环启动时通过控制电流矢量的转动带动转子进行旋转，其中电流矢量旋转的速度与我们想要控制电机的速度相同\n当电机达到一定速度时，停止增大电流适量转速，此时电机会保持恒定的转速，此时产生的转矩与阻力相等，电流矢量一部分是q轴电流，一部分是d轴电流。适当降低电流大小使得转子角度更接近设定的电流矢量的角度。\n最后开启观测器，待观测器收敛，FOC算法使用观测到的角度，再由速度开环切换到速度闭环即可完成一次无传感器启动。\n**龙伯格观测器算法原理：**\n首先建立静止坐标系下电机模型:\n![ses6.PNG][11]\n其中:\n![ses7.PNG][12]\n把扰动E当作一个状态变量，则得到状态向量为:\n![ses8.PNG][13]\n扩张后的状态方程为:\n![ses9.PNG][14]\n其中：\n![ses10.PNG][15]\n此处假设了![ses21.PNG][16]的倒数均为0，即![ses21.PNG][16]变化率为零。\n构建龙伯格观测器:\n![ses11.PNG][17]\n其中K为观测器增益，是一个四行一列的矩阵，且应该有![ses12.PNG][18]的形式。\n在满足能观性的前提下，通过调节K的值，可以设定观测器的带宽。\n最终即可得到![ses21.PNG][16]的观测值。\n根据电机数学模型，有:![ses13.PNG][19]，可由反三角函数计算出电角度的值:\n![ses14.PNG][20]\n微分可计算出电角速度:\n![ses15.PNG][21]\n观测器模型的改进:\n此前我们假设了![ses21.PNG][16]变化率为零，但由上式我们得知，![ses21.PNG][16]存在明显的微积分关系，可进一步改进观测器模型为\n![ses16.PNG][22]\n可以进一步提升观测器跟随效果。\n\n## 框图 ##\n具体的系统框图如下：\n![elob.jpg][23]\n![complexV.jpg][24]\n\n\n**下期应该会出SVPWM和逆变器部分！**\n计网也在好好看啦（才怪）\n\n  [1]: /old_images/2020/02/701335943.png\n  [2]: /old_images/2020/02/2322548764.png\n  [3]: /old_images/2020/02/17198532.png\n  [4]: /old_images/2020/02/3215796440.png\n  [5]: /old_images/2020/02/3576370167.png\n  [6]: /old_images/2020/02/1328380167.png\n  [7]: /old_images/2020/02/1502540671.png\n  [8]: /old_images/2020/02/1919880935.png\n  [9]: /old_images/2020/02/3577136343.png\n  [10]: /old_images/2020/02/17198532.png\n  [11]: /old_images/2020/02/462653967.png\n  [12]: /old_images/2020/02/3108166881.png\n  [13]: /old_images/2020/02/1004013066.png\n  [14]: /old_images/2020/02/2865477902.png\n  [15]: /old_images/2020/02/1782312365.png\n  [16]: /old_images/2020/02/3694597941.png\n  [17]: /old_images/2020/02/3056175988.png\n  [18]: /old_images/2020/02/1298152153.png\n  [19]: /old_images/2020/02/2677382250.png\n  [20]: /old_images/2020/02/1013716568.png\n  [21]: /old_images/2020/02/2670368623.png\n  [22]: /old_images/2020/02/698813314.png\n  [23]: /old_images/2020/02/2260242333.jpg\n  [24]: /old_images/2020/02/915343109.jpg\n","source":"_posts/技术传承——永磁同步电机驱动2.md","raw":"title: 技术传承——永磁同步电机驱动2\ndate: 2020-02-24 05:25:00\ncategories: 控制\ntags: []\ntoc: true\n---\n万众期待的P2来啦，这次为大家更新电流环与无感部分\n正好和要申的一个专利相关，就白嫖了一点过来\n自己白嫖自己应该不算什么侵权吧/笑哭\n\n----------\n## 电流环控制——复矢量解耦 ##\n首先，电流采样得到电机三相线上的交变电流，依次经过Clark变换、Park’变换，得到相对转子静止的旋转坐标系下电流，即Iq（q轴电流）与Id（d轴电流），通过复矢量解耦与PI控制器的方法计算出当前应加载在q、d轴上的电压Uq与Ud，进一步，再使用反Park变换计算出静止坐标系下交变电压Uα、Uβ，即可通过SVPWM调制得到三相方波占空比，控制永磁同步电机的电流，进而控制电机力矩。\n**复矢量控制器的构造方法如下:**\n![ses1.PNG][1]\n对于隐极电机，有Ld=Lq=L\n可以看到q、d轴电压方程之间互相包含对方的电流，明显是一个耦合的系统。传统控制方法通过前馈的方法进行解耦，即在最终输入电机系统之前在输出电压值上补偿数学模型中![ses17.PNG][2]这一项，系统就可以得到解耦。然而，前馈解耦的方法过渡依赖于电机参数，即我们必须得到准确的Ld、Lq以及![ses18.PNG][3]才能够较好地消除耦合影响。由此导致采用前馈解耦控制方法的电机存在电流波动，相应慢的缺陷。\n本专利采用一种新型的复矢量解耦的方法进行电流环控制：\n首先构造控制量，构造电流复矢量i_S，其实部由id构成，虚部由iq构成，则有:\n![ses2.PNG][4]\n同理，我们可以构造电压复矢量U_S，其实部u_d由构成，虚部由u_q构成，则有:\n![ses3.PNG][5]\n将上述方程与电机数学模型联立，可得到由电流、电压复矢量构成的新的电压方程如下：\n![ses4.PNG][6]\n由此可见，我们已经将两个互相耦合的系统变为一个整体，此时我们只需输出电压Us，即可控制电流is，在控制is的同时，id与iq也就得到了控制。\n\n**采取PI控制器控制:**\n![ses5.PNG][7]\n其中PI参数可选取![ses19.PNG][8]控制系统带宽，有alpha越大，带宽越大，电流响应速度越快。但alpha不可无限制地增加，应考虑控制器输出电压的范围合理设计alpha的值。\n最后在最终输出的uq部分可以前馈补偿上![ses20.PNG][9]![ses18.PNG][10]，使模型更加拟合真实模型。\n\n## 角度观测——扩张+龙伯格（Extended Luenberger Observer） ##\n电流环控制器设计完成后，我们考虑无传感器设计方案。传统无传感器算法通常采用六步换向法，即通过检测三相线上的反电动势来估计转子位置，通过控制逆变器的六种状态来实现电机的无传感器运行。但这种方法无法精确控制电流，且最终电流波形为方波而非正弦波，就可能导致电机运行不平稳，调速不灵活等问题。本专利采取无传感器FOC控制算法，可以精确控制电流，实现电机平稳运行。使用龙伯格观测器观测电机的位置与速度，为FOC算法提供位置参考。\n无传感器算法运行原理如下：\n启动前首先通过控制恒定的A相电流，电流产生的磁场使得电机转子转动到固定的启动位置，随后开启开环启动流程。\n开环启动时通过控制电流矢量的转动带动转子进行旋转，其中电流矢量旋转的速度与我们想要控制电机的速度相同\n当电机达到一定速度时，停止增大电流适量转速，此时电机会保持恒定的转速，此时产生的转矩与阻力相等，电流矢量一部分是q轴电流，一部分是d轴电流。适当降低电流大小使得转子角度更接近设定的电流矢量的角度。\n最后开启观测器，待观测器收敛，FOC算法使用观测到的角度，再由速度开环切换到速度闭环即可完成一次无传感器启动。\n**龙伯格观测器算法原理：**\n首先建立静止坐标系下电机模型:\n![ses6.PNG][11]\n其中:\n![ses7.PNG][12]\n把扰动E当作一个状态变量，则得到状态向量为:\n![ses8.PNG][13]\n扩张后的状态方程为:\n![ses9.PNG][14]\n其中：\n![ses10.PNG][15]\n此处假设了![ses21.PNG][16]的倒数均为0，即![ses21.PNG][16]变化率为零。\n构建龙伯格观测器:\n![ses11.PNG][17]\n其中K为观测器增益，是一个四行一列的矩阵，且应该有![ses12.PNG][18]的形式。\n在满足能观性的前提下，通过调节K的值，可以设定观测器的带宽。\n最终即可得到![ses21.PNG][16]的观测值。\n根据电机数学模型，有:![ses13.PNG][19]，可由反三角函数计算出电角度的值:\n![ses14.PNG][20]\n微分可计算出电角速度:\n![ses15.PNG][21]\n观测器模型的改进:\n此前我们假设了![ses21.PNG][16]变化率为零，但由上式我们得知，![ses21.PNG][16]存在明显的微积分关系，可进一步改进观测器模型为\n![ses16.PNG][22]\n可以进一步提升观测器跟随效果。\n\n## 框图 ##\n具体的系统框图如下：\n![elob.jpg][23]\n![complexV.jpg][24]\n\n\n**下期应该会出SVPWM和逆变器部分！**\n计网也在好好看啦（才怪）\n\n  [1]: /old_images/2020/02/701335943.png\n  [2]: /old_images/2020/02/2322548764.png\n  [3]: /old_images/2020/02/17198532.png\n  [4]: /old_images/2020/02/3215796440.png\n  [5]: /old_images/2020/02/3576370167.png\n  [6]: /old_images/2020/02/1328380167.png\n  [7]: /old_images/2020/02/1502540671.png\n  [8]: /old_images/2020/02/1919880935.png\n  [9]: /old_images/2020/02/3577136343.png\n  [10]: /old_images/2020/02/17198532.png\n  [11]: /old_images/2020/02/462653967.png\n  [12]: /old_images/2020/02/3108166881.png\n  [13]: /old_images/2020/02/1004013066.png\n  [14]: /old_images/2020/02/2865477902.png\n  [15]: /old_images/2020/02/1782312365.png\n  [16]: /old_images/2020/02/3694597941.png\n  [17]: /old_images/2020/02/3056175988.png\n  [18]: /old_images/2020/02/1298152153.png\n  [19]: /old_images/2020/02/2677382250.png\n  [20]: /old_images/2020/02/1013716568.png\n  [21]: /old_images/2020/02/2670368623.png\n  [22]: /old_images/2020/02/698813314.png\n  [23]: /old_images/2020/02/2260242333.jpg\n  [24]: /old_images/2020/02/915343109.jpg\n","slug":"技术传承——永磁同步电机驱动2","published":1,"updated":"2020-12-14T12:21:15.337Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0c6001q7p19hl9w1eda","content":"<p>万众期待的P2来啦，这次为大家更新电流环与无感部分<br>正好和要申的一个专利相关，就白嫖了一点过来<br>自己白嫖自己应该不算什么侵权吧/笑哭</p>\n<hr>\n<h2 id=\"电流环控制——复矢量解耦\"><a href=\"#电流环控制——复矢量解耦\" class=\"headerlink\" title=\"电流环控制——复矢量解耦\"></a>电流环控制——复矢量解耦</h2><p>首先，电流采样得到电机三相线上的交变电流，依次经过Clark变换、Park’变换，得到相对转子静止的旋转坐标系下电流，即Iq（q轴电流）与Id（d轴电流），通过复矢量解耦与PI控制器的方法计算出当前应加载在q、d轴上的电压Uq与Ud，进一步，再使用反Park变换计算出静止坐标系下交变电压Uα、Uβ，即可通过SVPWM调制得到三相方波占空比，控制永磁同步电机的电流，进而控制电机力矩。<br><strong>复矢量控制器的构造方法如下:</strong><br><img src=\"/old_images/2020/02/701335943.png\" alt=\"ses1.PNG\"><br>对于隐极电机，有Ld=Lq=L<br>可以看到q、d轴电压方程之间互相包含对方的电流，明显是一个耦合的系统。传统控制方法通过前馈的方法进行解耦，即在最终输入电机系统之前在输出电压值上补偿数学模型中<img src=\"/old_images/2020/02/2322548764.png\" alt=\"ses17.PNG\">这一项，系统就可以得到解耦。然而，前馈解耦的方法过渡依赖于电机参数，即我们必须得到准确的Ld、Lq以及<img src=\"/old_images/2020/02/17198532.png\" alt=\"ses18.PNG\">才能够较好地消除耦合影响。由此导致采用前馈解耦控制方法的电机存在电流波动，相应慢的缺陷。<br>本专利采用一种新型的复矢量解耦的方法进行电流环控制：<br>首先构造控制量，构造电流复矢量i_S，其实部由id构成，虚部由iq构成，则有:<br><img src=\"/old_images/2020/02/3215796440.png\" alt=\"ses2.PNG\"><br>同理，我们可以构造电压复矢量U_S，其实部u_d由构成，虚部由u_q构成，则有:<br><img src=\"/old_images/2020/02/3576370167.png\" alt=\"ses3.PNG\"><br>将上述方程与电机数学模型联立，可得到由电流、电压复矢量构成的新的电压方程如下：<br><img src=\"/old_images/2020/02/1328380167.png\" alt=\"ses4.PNG\"><br>由此可见，我们已经将两个互相耦合的系统变为一个整体，此时我们只需输出电压Us，即可控制电流is，在控制is的同时，id与iq也就得到了控制。</p>\n<p><strong>采取PI控制器控制:</strong><br><img src=\"/old_images/2020/02/1502540671.png\" alt=\"ses5.PNG\"><br>其中PI参数可选取<img src=\"/old_images/2020/02/1919880935.png\" alt=\"ses19.PNG\">控制系统带宽，有alpha越大，带宽越大，电流响应速度越快。但alpha不可无限制地增加，应考虑控制器输出电压的范围合理设计alpha的值。<br>最后在最终输出的uq部分可以前馈补偿上<img src=\"/old_images/2020/02/3577136343.png\" alt=\"ses20.PNG\"><img src=\"/old_images/2020/02/17198532.png\" alt=\"ses18.PNG\">，使模型更加拟合真实模型。</p>\n<h2 id=\"角度观测——扩张-龙伯格（Extended-Luenberger-Observer）\"><a href=\"#角度观测——扩张-龙伯格（Extended-Luenberger-Observer）\" class=\"headerlink\" title=\"角度观测——扩张+龙伯格（Extended Luenberger Observer）\"></a>角度观测——扩张+龙伯格（Extended Luenberger Observer）</h2><p>电流环控制器设计完成后，我们考虑无传感器设计方案。传统无传感器算法通常采用六步换向法，即通过检测三相线上的反电动势来估计转子位置，通过控制逆变器的六种状态来实现电机的无传感器运行。但这种方法无法精确控制电流，且最终电流波形为方波而非正弦波，就可能导致电机运行不平稳，调速不灵活等问题。本专利采取无传感器FOC控制算法，可以精确控制电流，实现电机平稳运行。使用龙伯格观测器观测电机的位置与速度，为FOC算法提供位置参考。<br>无传感器算法运行原理如下：<br>启动前首先通过控制恒定的A相电流，电流产生的磁场使得电机转子转动到固定的启动位置，随后开启开环启动流程。<br>开环启动时通过控制电流矢量的转动带动转子进行旋转，其中电流矢量旋转的速度与我们想要控制电机的速度相同<br>当电机达到一定速度时，停止增大电流适量转速，此时电机会保持恒定的转速，此时产生的转矩与阻力相等，电流矢量一部分是q轴电流，一部分是d轴电流。适当降低电流大小使得转子角度更接近设定的电流矢量的角度。<br>最后开启观测器，待观测器收敛，FOC算法使用观测到的角度，再由速度开环切换到速度闭环即可完成一次无传感器启动。<br><strong>龙伯格观测器算法原理：</strong><br>首先建立静止坐标系下电机模型:<br><img src=\"/old_images/2020/02/462653967.png\" alt=\"ses6.PNG\"><br>其中:<br><img src=\"/old_images/2020/02/3108166881.png\" alt=\"ses7.PNG\"><br>把扰动E当作一个状态变量，则得到状态向量为:<br><img src=\"/old_images/2020/02/1004013066.png\" alt=\"ses8.PNG\"><br>扩张后的状态方程为:<br><img src=\"/old_images/2020/02/2865477902.png\" alt=\"ses9.PNG\"><br>其中：<br><img src=\"/old_images/2020/02/1782312365.png\" alt=\"ses10.PNG\"><br>此处假设了<img src=\"/old_images/2020/02/3694597941.png\" alt=\"ses21.PNG\">的倒数均为0，即<img src=\"/old_images/2020/02/3694597941.png\" alt=\"ses21.PNG\">变化率为零。<br>构建龙伯格观测器:<br><img src=\"/old_images/2020/02/3056175988.png\" alt=\"ses11.PNG\"><br>其中K为观测器增益，是一个四行一列的矩阵，且应该有<img src=\"/old_images/2020/02/1298152153.png\" alt=\"ses12.PNG\">的形式。<br>在满足能观性的前提下，通过调节K的值，可以设定观测器的带宽。<br>最终即可得到<img src=\"/old_images/2020/02/3694597941.png\" alt=\"ses21.PNG\">的观测值。<br>根据电机数学模型，有:<img src=\"/old_images/2020/02/2677382250.png\" alt=\"ses13.PNG\">，可由反三角函数计算出电角度的值:<br><img src=\"/old_images/2020/02/1013716568.png\" alt=\"ses14.PNG\"><br>微分可计算出电角速度:<br><img src=\"/old_images/2020/02/2670368623.png\" alt=\"ses15.PNG\"><br>观测器模型的改进:<br>此前我们假设了<img src=\"/old_images/2020/02/3694597941.png\" alt=\"ses21.PNG\">变化率为零，但由上式我们得知，<img src=\"/old_images/2020/02/3694597941.png\" alt=\"ses21.PNG\">存在明显的微积分关系，可进一步改进观测器模型为<br><img src=\"/old_images/2020/02/698813314.png\" alt=\"ses16.PNG\"><br>可以进一步提升观测器跟随效果。</p>\n<h2 id=\"框图\"><a href=\"#框图\" class=\"headerlink\" title=\"框图\"></a>框图</h2><p>具体的系统框图如下：<br><img src=\"/old_images/2020/02/2260242333.jpg\" alt=\"elob.jpg\"><br><img src=\"/old_images/2020/02/915343109.jpg\" alt=\"complexV.jpg\"></p>\n<p><strong>下期应该会出SVPWM和逆变器部分！</strong><br>计网也在好好看啦（才怪）</p>\n","site":{"data":{}},"excerpt":"","more":"<p>万众期待的P2来啦，这次为大家更新电流环与无感部分<br>正好和要申的一个专利相关，就白嫖了一点过来<br>自己白嫖自己应该不算什么侵权吧/笑哭</p>\n<hr>\n<h2 id=\"电流环控制——复矢量解耦\"><a href=\"#电流环控制——复矢量解耦\" class=\"headerlink\" title=\"电流环控制——复矢量解耦\"></a>电流环控制——复矢量解耦</h2><p>首先，电流采样得到电机三相线上的交变电流，依次经过Clark变换、Park’变换，得到相对转子静止的旋转坐标系下电流，即Iq（q轴电流）与Id（d轴电流），通过复矢量解耦与PI控制器的方法计算出当前应加载在q、d轴上的电压Uq与Ud，进一步，再使用反Park变换计算出静止坐标系下交变电压Uα、Uβ，即可通过SVPWM调制得到三相方波占空比，控制永磁同步电机的电流，进而控制电机力矩。<br><strong>复矢量控制器的构造方法如下:</strong><br><img src=\"/old_images/2020/02/701335943.png\" alt=\"ses1.PNG\"><br>对于隐极电机，有Ld=Lq=L<br>可以看到q、d轴电压方程之间互相包含对方的电流，明显是一个耦合的系统。传统控制方法通过前馈的方法进行解耦，即在最终输入电机系统之前在输出电压值上补偿数学模型中<img src=\"/old_images/2020/02/2322548764.png\" alt=\"ses17.PNG\">这一项，系统就可以得到解耦。然而，前馈解耦的方法过渡依赖于电机参数，即我们必须得到准确的Ld、Lq以及<img src=\"/old_images/2020/02/17198532.png\" alt=\"ses18.PNG\">才能够较好地消除耦合影响。由此导致采用前馈解耦控制方法的电机存在电流波动，相应慢的缺陷。<br>本专利采用一种新型的复矢量解耦的方法进行电流环控制：<br>首先构造控制量，构造电流复矢量i_S，其实部由id构成，虚部由iq构成，则有:<br><img src=\"/old_images/2020/02/3215796440.png\" alt=\"ses2.PNG\"><br>同理，我们可以构造电压复矢量U_S，其实部u_d由构成，虚部由u_q构成，则有:<br><img src=\"/old_images/2020/02/3576370167.png\" alt=\"ses3.PNG\"><br>将上述方程与电机数学模型联立，可得到由电流、电压复矢量构成的新的电压方程如下：<br><img src=\"/old_images/2020/02/1328380167.png\" alt=\"ses4.PNG\"><br>由此可见，我们已经将两个互相耦合的系统变为一个整体，此时我们只需输出电压Us，即可控制电流is，在控制is的同时，id与iq也就得到了控制。</p>\n<p><strong>采取PI控制器控制:</strong><br><img src=\"/old_images/2020/02/1502540671.png\" alt=\"ses5.PNG\"><br>其中PI参数可选取<img src=\"/old_images/2020/02/1919880935.png\" alt=\"ses19.PNG\">控制系统带宽，有alpha越大，带宽越大，电流响应速度越快。但alpha不可无限制地增加，应考虑控制器输出电压的范围合理设计alpha的值。<br>最后在最终输出的uq部分可以前馈补偿上<img src=\"/old_images/2020/02/3577136343.png\" alt=\"ses20.PNG\"><img src=\"/old_images/2020/02/17198532.png\" alt=\"ses18.PNG\">，使模型更加拟合真实模型。</p>\n<h2 id=\"角度观测——扩张-龙伯格（Extended-Luenberger-Observer）\"><a href=\"#角度观测——扩张-龙伯格（Extended-Luenberger-Observer）\" class=\"headerlink\" title=\"角度观测——扩张+龙伯格（Extended Luenberger Observer）\"></a>角度观测——扩张+龙伯格（Extended Luenberger Observer）</h2><p>电流环控制器设计完成后，我们考虑无传感器设计方案。传统无传感器算法通常采用六步换向法，即通过检测三相线上的反电动势来估计转子位置，通过控制逆变器的六种状态来实现电机的无传感器运行。但这种方法无法精确控制电流，且最终电流波形为方波而非正弦波，就可能导致电机运行不平稳，调速不灵活等问题。本专利采取无传感器FOC控制算法，可以精确控制电流，实现电机平稳运行。使用龙伯格观测器观测电机的位置与速度，为FOC算法提供位置参考。<br>无传感器算法运行原理如下：<br>启动前首先通过控制恒定的A相电流，电流产生的磁场使得电机转子转动到固定的启动位置，随后开启开环启动流程。<br>开环启动时通过控制电流矢量的转动带动转子进行旋转，其中电流矢量旋转的速度与我们想要控制电机的速度相同<br>当电机达到一定速度时，停止增大电流适量转速，此时电机会保持恒定的转速，此时产生的转矩与阻力相等，电流矢量一部分是q轴电流，一部分是d轴电流。适当降低电流大小使得转子角度更接近设定的电流矢量的角度。<br>最后开启观测器，待观测器收敛，FOC算法使用观测到的角度，再由速度开环切换到速度闭环即可完成一次无传感器启动。<br><strong>龙伯格观测器算法原理：</strong><br>首先建立静止坐标系下电机模型:<br><img src=\"/old_images/2020/02/462653967.png\" alt=\"ses6.PNG\"><br>其中:<br><img src=\"/old_images/2020/02/3108166881.png\" alt=\"ses7.PNG\"><br>把扰动E当作一个状态变量，则得到状态向量为:<br><img src=\"/old_images/2020/02/1004013066.png\" alt=\"ses8.PNG\"><br>扩张后的状态方程为:<br><img src=\"/old_images/2020/02/2865477902.png\" alt=\"ses9.PNG\"><br>其中：<br><img src=\"/old_images/2020/02/1782312365.png\" alt=\"ses10.PNG\"><br>此处假设了<img src=\"/old_images/2020/02/3694597941.png\" alt=\"ses21.PNG\">的倒数均为0，即<img src=\"/old_images/2020/02/3694597941.png\" alt=\"ses21.PNG\">变化率为零。<br>构建龙伯格观测器:<br><img src=\"/old_images/2020/02/3056175988.png\" alt=\"ses11.PNG\"><br>其中K为观测器增益，是一个四行一列的矩阵，且应该有<img src=\"/old_images/2020/02/1298152153.png\" alt=\"ses12.PNG\">的形式。<br>在满足能观性的前提下，通过调节K的值，可以设定观测器的带宽。<br>最终即可得到<img src=\"/old_images/2020/02/3694597941.png\" alt=\"ses21.PNG\">的观测值。<br>根据电机数学模型，有:<img src=\"/old_images/2020/02/2677382250.png\" alt=\"ses13.PNG\">，可由反三角函数计算出电角度的值:<br><img src=\"/old_images/2020/02/1013716568.png\" alt=\"ses14.PNG\"><br>微分可计算出电角速度:<br><img src=\"/old_images/2020/02/2670368623.png\" alt=\"ses15.PNG\"><br>观测器模型的改进:<br>此前我们假设了<img src=\"/old_images/2020/02/3694597941.png\" alt=\"ses21.PNG\">变化率为零，但由上式我们得知，<img src=\"/old_images/2020/02/3694597941.png\" alt=\"ses21.PNG\">存在明显的微积分关系，可进一步改进观测器模型为<br><img src=\"/old_images/2020/02/698813314.png\" alt=\"ses16.PNG\"><br>可以进一步提升观测器跟随效果。</p>\n<h2 id=\"框图\"><a href=\"#框图\" class=\"headerlink\" title=\"框图\"></a>框图</h2><p>具体的系统框图如下：<br><img src=\"/old_images/2020/02/2260242333.jpg\" alt=\"elob.jpg\"><br><img src=\"/old_images/2020/02/915343109.jpg\" alt=\"complexV.jpg\"></p>\n<p><strong>下期应该会出SVPWM和逆变器部分！</strong><br>计网也在好好看啦（才怪）</p>\n"},{"title":"技术传承——永磁同步电机驱动3","date":"2020-02-26T05:07:00.000Z","toc":true,"_content":"上回我们讲完了驱动中电流闭环的问题，这次我们讲一下如何将我们得到的控制量输入给电机！\n也就是SVPWM调制与逆变器的那些事。\n前方高能，请握紧扶好，准备发车！\n## 逆变器 ##\n学过电力电子的同学肯定都听说过逆变器，为什么叫逆变呢？就是因为我们平常说的电的变换都是讨论的交流整流后变直流，而逆变器能将直流电变换为交流电，所以称其为逆变。\n最常见的三相逆变器结构如图所示：\n![converter.PNG][1]\n可见，逆变器的电路结构很简单，由三个半桥构成，每个半桥都通过控制开关管的开通关断来控制输出电平高低，\n通过控制占空比，即可控制输出任意大小的电压，为SVPWM电压调制提供了硬件基础。\n关于逆变器的能量变化，可以通过忽略开关管压降，近似认为两端功率相同，\n即直流部分的母线电压*母线电流=交流部分的电功率=alpha、beta轴（同时d、q轴）上的电压电流矢量积=上的电压电流矢量积，\n注意这个功率可正可负，所以电流反向回灌母线是完全可能的（比如电机回馈制动时）。\n而通过能量分析得到的这个母线电流的方向仅仅是个最终的表象（平均值），实际上的电流可能在不停地变化（由于电感的作用，电流不能突变，导致切换瞬间电流不变，母线电流方向就可能变化），到底如何变化这方面分析就涉及到电力电子方面的知识了。\n\n----------\n## SVPWM ##\n终于到了永磁同步电机的重头戏：SVPWM\n首先明确，SVPWM的目的在于将Ualpha、Ubet两输出量输出给电机，需要把他们变成成三相电压；\n同时，它也是为了把操纵逆变器，把直流电变成交流电。在逆变器上，这两个任务同时完成了。\n我们先来了解一下SVPWM的调制过程，\n我们想要输出任意方向、任意大小的电压矢量，就要通过相差120°的三相电压合成的方式来做到\n三相全部关断，自然是零电压，记为0；\n三相中一相开通时，会产生一个沿abc轴向的电压，记为1；\n三相中两相开通时，会产生一个沿abc轴中线方向的电压，记为2；\n三相全部开通时，互相抵消，则也相当于没有电压，记为3；\nSVPWM基于软件的调制方式如下图：\n![svpwm.PNG][2]\n我们可以看到，这种方法总是按照0-1-2-3-3-2-1-0的顺序打开、关断开关管，这样做的原因是这样可以最低限度地减少开关管开关的次数，提高效率。\n其中有效的仅有开一个和开两个的时候，只要我们计算出这两段的时间，并将垃圾时间用等长的0与3填充，就可以完成了，1、2的长度由矢量分解的方法来计算，如下图：\n![vector.PNG][3]\n\n\n**SVPWM的具体步骤如下：**\n第一步，我们要将360°的电角度分成六份，以方便我们选择合适的输出方式。\n如何判断一个向量在那个分区呢，我们当然可以麻烦地计算角度，也可以用用的更多的方法——计算特征电压：\n特征电压是指目标电压向量在三个垂直于abc轴得直线上的投影的长度，这个长度的正负决定了向量在abc三轴的哪一侧，得到了三个正负信息，组合起来就会有六种可能（两种不可能存在），这便对应着分区表的六个扇区。\n![IMG_20200226_205945.jpg][4]\n分区表如下：\n![sector.PNG][5]\n例如，在一号分区中，我们能使用的向量即a（1）与ab和（2）（同时确定能够使用的特征向量是+Uref2和+Uref1，正负号很重要！），我们根据分区就能确定所需要的向量。\n之后，根据一个几何关系，再次利用特征电压得出占空比的分配，通过电压的值确定占空比的大小，完成一次SVPWM调制。\n上面提到的几何关系如图，不太好解释：\n![IMG_20200226_210427.jpg][6]\n\n\n  [1]: /old_images/2020/02/4095688085.png\n  [2]: /old_images/2020/02/2697564545.png\n  [3]: /old_images/2020/02/3647791761.png\n  [4]: /old_images/2020/02/2461771289.jpg\n  [5]: /old_images/2020/02/423865379.png\n  [6]: /old_images/2020/02/42703606.jpg\n","source":"_posts/技术传承——永磁同步电机驱动3.md","raw":"title: 技术传承——永磁同步电机驱动3\ndate: 2020-02-26 13:07:00\ncategories: 控制\ntags: []\ntoc: true\n---\n上回我们讲完了驱动中电流闭环的问题，这次我们讲一下如何将我们得到的控制量输入给电机！\n也就是SVPWM调制与逆变器的那些事。\n前方高能，请握紧扶好，准备发车！\n## 逆变器 ##\n学过电力电子的同学肯定都听说过逆变器，为什么叫逆变呢？就是因为我们平常说的电的变换都是讨论的交流整流后变直流，而逆变器能将直流电变换为交流电，所以称其为逆变。\n最常见的三相逆变器结构如图所示：\n![converter.PNG][1]\n可见，逆变器的电路结构很简单，由三个半桥构成，每个半桥都通过控制开关管的开通关断来控制输出电平高低，\n通过控制占空比，即可控制输出任意大小的电压，为SVPWM电压调制提供了硬件基础。\n关于逆变器的能量变化，可以通过忽略开关管压降，近似认为两端功率相同，\n即直流部分的母线电压*母线电流=交流部分的电功率=alpha、beta轴（同时d、q轴）上的电压电流矢量积=上的电压电流矢量积，\n注意这个功率可正可负，所以电流反向回灌母线是完全可能的（比如电机回馈制动时）。\n而通过能量分析得到的这个母线电流的方向仅仅是个最终的表象（平均值），实际上的电流可能在不停地变化（由于电感的作用，电流不能突变，导致切换瞬间电流不变，母线电流方向就可能变化），到底如何变化这方面分析就涉及到电力电子方面的知识了。\n\n----------\n## SVPWM ##\n终于到了永磁同步电机的重头戏：SVPWM\n首先明确，SVPWM的目的在于将Ualpha、Ubet两输出量输出给电机，需要把他们变成成三相电压；\n同时，它也是为了把操纵逆变器，把直流电变成交流电。在逆变器上，这两个任务同时完成了。\n我们先来了解一下SVPWM的调制过程，\n我们想要输出任意方向、任意大小的电压矢量，就要通过相差120°的三相电压合成的方式来做到\n三相全部关断，自然是零电压，记为0；\n三相中一相开通时，会产生一个沿abc轴向的电压，记为1；\n三相中两相开通时，会产生一个沿abc轴中线方向的电压，记为2；\n三相全部开通时，互相抵消，则也相当于没有电压，记为3；\nSVPWM基于软件的调制方式如下图：\n![svpwm.PNG][2]\n我们可以看到，这种方法总是按照0-1-2-3-3-2-1-0的顺序打开、关断开关管，这样做的原因是这样可以最低限度地减少开关管开关的次数，提高效率。\n其中有效的仅有开一个和开两个的时候，只要我们计算出这两段的时间，并将垃圾时间用等长的0与3填充，就可以完成了，1、2的长度由矢量分解的方法来计算，如下图：\n![vector.PNG][3]\n\n\n**SVPWM的具体步骤如下：**\n第一步，我们要将360°的电角度分成六份，以方便我们选择合适的输出方式。\n如何判断一个向量在那个分区呢，我们当然可以麻烦地计算角度，也可以用用的更多的方法——计算特征电压：\n特征电压是指目标电压向量在三个垂直于abc轴得直线上的投影的长度，这个长度的正负决定了向量在abc三轴的哪一侧，得到了三个正负信息，组合起来就会有六种可能（两种不可能存在），这便对应着分区表的六个扇区。\n![IMG_20200226_205945.jpg][4]\n分区表如下：\n![sector.PNG][5]\n例如，在一号分区中，我们能使用的向量即a（1）与ab和（2）（同时确定能够使用的特征向量是+Uref2和+Uref1，正负号很重要！），我们根据分区就能确定所需要的向量。\n之后，根据一个几何关系，再次利用特征电压得出占空比的分配，通过电压的值确定占空比的大小，完成一次SVPWM调制。\n上面提到的几何关系如图，不太好解释：\n![IMG_20200226_210427.jpg][6]\n\n\n  [1]: /old_images/2020/02/4095688085.png\n  [2]: /old_images/2020/02/2697564545.png\n  [3]: /old_images/2020/02/3647791761.png\n  [4]: /old_images/2020/02/2461771289.jpg\n  [5]: /old_images/2020/02/423865379.png\n  [6]: /old_images/2020/02/42703606.jpg\n","slug":"技术传承——永磁同步电机驱动3","published":1,"updated":"2020-12-14T12:21:19.641Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0c7001s7p19bc4g1294","content":"<p>上回我们讲完了驱动中电流闭环的问题，这次我们讲一下如何将我们得到的控制量输入给电机！<br>也就是SVPWM调制与逆变器的那些事。<br>前方高能，请握紧扶好，准备发车！</p>\n<h2 id=\"逆变器\"><a href=\"#逆变器\" class=\"headerlink\" title=\"逆变器\"></a>逆变器</h2><p>学过电力电子的同学肯定都听说过逆变器，为什么叫逆变呢？就是因为我们平常说的电的变换都是讨论的交流整流后变直流，而逆变器能将直流电变换为交流电，所以称其为逆变。<br>最常见的三相逆变器结构如图所示：<br><img src=\"/old_images/2020/02/4095688085.png\" alt=\"converter.PNG\"><br>可见，逆变器的电路结构很简单，由三个半桥构成，每个半桥都通过控制开关管的开通关断来控制输出电平高低，<br>通过控制占空比，即可控制输出任意大小的电压，为SVPWM电压调制提供了硬件基础。<br>关于逆变器的能量变化，可以通过忽略开关管压降，近似认为两端功率相同，<br>即直流部分的母线电压*母线电流=交流部分的电功率=alpha、beta轴（同时d、q轴）上的电压电流矢量积=上的电压电流矢量积，<br>注意这个功率可正可负，所以电流反向回灌母线是完全可能的（比如电机回馈制动时）。<br>而通过能量分析得到的这个母线电流的方向仅仅是个最终的表象（平均值），实际上的电流可能在不停地变化（由于电感的作用，电流不能突变，导致切换瞬间电流不变，母线电流方向就可能变化），到底如何变化这方面分析就涉及到电力电子方面的知识了。</p>\n<hr>\n<h2 id=\"SVPWM\"><a href=\"#SVPWM\" class=\"headerlink\" title=\"SVPWM\"></a>SVPWM</h2><p>终于到了永磁同步电机的重头戏：SVPWM<br>首先明确，SVPWM的目的在于将Ualpha、Ubet两输出量输出给电机，需要把他们变成成三相电压；<br>同时，它也是为了把操纵逆变器，把直流电变成交流电。在逆变器上，这两个任务同时完成了。<br>我们先来了解一下SVPWM的调制过程，<br>我们想要输出任意方向、任意大小的电压矢量，就要通过相差120°的三相电压合成的方式来做到<br>三相全部关断，自然是零电压，记为0；<br>三相中一相开通时，会产生一个沿abc轴向的电压，记为1；<br>三相中两相开通时，会产生一个沿abc轴中线方向的电压，记为2；<br>三相全部开通时，互相抵消，则也相当于没有电压，记为3；<br>SVPWM基于软件的调制方式如下图：<br><img src=\"/old_images/2020/02/2697564545.png\" alt=\"svpwm.PNG\"><br>我们可以看到，这种方法总是按照0-1-2-3-3-2-1-0的顺序打开、关断开关管，这样做的原因是这样可以最低限度地减少开关管开关的次数，提高效率。<br>其中有效的仅有开一个和开两个的时候，只要我们计算出这两段的时间，并将垃圾时间用等长的0与3填充，就可以完成了，1、2的长度由矢量分解的方法来计算，如下图：<br><img src=\"/old_images/2020/02/3647791761.png\" alt=\"vector.PNG\"></p>\n<p><strong>SVPWM的具体步骤如下：</strong><br>第一步，我们要将360°的电角度分成六份，以方便我们选择合适的输出方式。<br>如何判断一个向量在那个分区呢，我们当然可以麻烦地计算角度，也可以用用的更多的方法——计算特征电压：<br>特征电压是指目标电压向量在三个垂直于abc轴得直线上的投影的长度，这个长度的正负决定了向量在abc三轴的哪一侧，得到了三个正负信息，组合起来就会有六种可能（两种不可能存在），这便对应着分区表的六个扇区。<br><img src=\"/old_images/2020/02/2461771289.jpg\" alt=\"IMG_20200226_205945.jpg\"><br>分区表如下：<br><img src=\"/old_images/2020/02/423865379.png\" alt=\"sector.PNG\"><br>例如，在一号分区中，我们能使用的向量即a（1）与ab和（2）（同时确定能够使用的特征向量是+Uref2和+Uref1，正负号很重要！），我们根据分区就能确定所需要的向量。<br>之后，根据一个几何关系，再次利用特征电压得出占空比的分配，通过电压的值确定占空比的大小，完成一次SVPWM调制。<br>上面提到的几何关系如图，不太好解释：<br><img src=\"/old_images/2020/02/42703606.jpg\" alt=\"IMG_20200226_210427.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>上回我们讲完了驱动中电流闭环的问题，这次我们讲一下如何将我们得到的控制量输入给电机！<br>也就是SVPWM调制与逆变器的那些事。<br>前方高能，请握紧扶好，准备发车！</p>\n<h2 id=\"逆变器\"><a href=\"#逆变器\" class=\"headerlink\" title=\"逆变器\"></a>逆变器</h2><p>学过电力电子的同学肯定都听说过逆变器，为什么叫逆变呢？就是因为我们平常说的电的变换都是讨论的交流整流后变直流，而逆变器能将直流电变换为交流电，所以称其为逆变。<br>最常见的三相逆变器结构如图所示：<br><img src=\"/old_images/2020/02/4095688085.png\" alt=\"converter.PNG\"><br>可见，逆变器的电路结构很简单，由三个半桥构成，每个半桥都通过控制开关管的开通关断来控制输出电平高低，<br>通过控制占空比，即可控制输出任意大小的电压，为SVPWM电压调制提供了硬件基础。<br>关于逆变器的能量变化，可以通过忽略开关管压降，近似认为两端功率相同，<br>即直流部分的母线电压*母线电流=交流部分的电功率=alpha、beta轴（同时d、q轴）上的电压电流矢量积=上的电压电流矢量积，<br>注意这个功率可正可负，所以电流反向回灌母线是完全可能的（比如电机回馈制动时）。<br>而通过能量分析得到的这个母线电流的方向仅仅是个最终的表象（平均值），实际上的电流可能在不停地变化（由于电感的作用，电流不能突变，导致切换瞬间电流不变，母线电流方向就可能变化），到底如何变化这方面分析就涉及到电力电子方面的知识了。</p>\n<hr>\n<h2 id=\"SVPWM\"><a href=\"#SVPWM\" class=\"headerlink\" title=\"SVPWM\"></a>SVPWM</h2><p>终于到了永磁同步电机的重头戏：SVPWM<br>首先明确，SVPWM的目的在于将Ualpha、Ubet两输出量输出给电机，需要把他们变成成三相电压；<br>同时，它也是为了把操纵逆变器，把直流电变成交流电。在逆变器上，这两个任务同时完成了。<br>我们先来了解一下SVPWM的调制过程，<br>我们想要输出任意方向、任意大小的电压矢量，就要通过相差120°的三相电压合成的方式来做到<br>三相全部关断，自然是零电压，记为0；<br>三相中一相开通时，会产生一个沿abc轴向的电压，记为1；<br>三相中两相开通时，会产生一个沿abc轴中线方向的电压，记为2；<br>三相全部开通时，互相抵消，则也相当于没有电压，记为3；<br>SVPWM基于软件的调制方式如下图：<br><img src=\"/old_images/2020/02/2697564545.png\" alt=\"svpwm.PNG\"><br>我们可以看到，这种方法总是按照0-1-2-3-3-2-1-0的顺序打开、关断开关管，这样做的原因是这样可以最低限度地减少开关管开关的次数，提高效率。<br>其中有效的仅有开一个和开两个的时候，只要我们计算出这两段的时间，并将垃圾时间用等长的0与3填充，就可以完成了，1、2的长度由矢量分解的方法来计算，如下图：<br><img src=\"/old_images/2020/02/3647791761.png\" alt=\"vector.PNG\"></p>\n<p><strong>SVPWM的具体步骤如下：</strong><br>第一步，我们要将360°的电角度分成六份，以方便我们选择合适的输出方式。<br>如何判断一个向量在那个分区呢，我们当然可以麻烦地计算角度，也可以用用的更多的方法——计算特征电压：<br>特征电压是指目标电压向量在三个垂直于abc轴得直线上的投影的长度，这个长度的正负决定了向量在abc三轴的哪一侧，得到了三个正负信息，组合起来就会有六种可能（两种不可能存在），这便对应着分区表的六个扇区。<br><img src=\"/old_images/2020/02/2461771289.jpg\" alt=\"IMG_20200226_205945.jpg\"><br>分区表如下：<br><img src=\"/old_images/2020/02/423865379.png\" alt=\"sector.PNG\"><br>例如，在一号分区中，我们能使用的向量即a（1）与ab和（2）（同时确定能够使用的特征向量是+Uref2和+Uref1，正负号很重要！），我们根据分区就能确定所需要的向量。<br>之后，根据一个几何关系，再次利用特征电压得出占空比的分配，通过电压的值确定占空比的大小，完成一次SVPWM调制。<br>上面提到的几何关系如图，不太好解释：<br><img src=\"/old_images/2020/02/42703606.jpg\" alt=\"IMG_20200226_210427.jpg\"></p>\n"},{"title":"揭开积分变换的面纱","date":"2020-03-29T22:26:00.000Z","toc":true,"_content":"从刚上大学开始，积分变换就无时无刻地萦绕在我们身旁，什么傅里叶变换。拉普拉斯变换，甚至小波变换等等。\n这些变换有什么意义？他们又是怎样实现的呢？这次我们多花点时间来理一理。\n\n## 积分变换即基变换 ##\n\n就如同线性代数所说那样，空间中任意一个向量都可由一组完备（个数充满R^n）的正交的基的线性组合来表示。\n如果把一个函数（信号）看作这个任意的向量（属于R^∞空间），那么这个函数也可以由R^∞空间下的一系列正交的基（也是函数、信号）来表示，这就是信号的基变换，也就是我们说的积分变换。这组正交基的选择，就是积分变换产生区别的地方，如何选择一组好用的基就成了我们要动脑筋的地方。\n傅里叶、拉普拉斯等人选择到了一系列合适的正交基函数，使得进行基变换后表示的函数有着很好的性质（比如能量集中、方便微积分运算等等），于是成为了一系列经典的积分变换。由此我们看出，积分变换即基变换。\n\n**我们以傅里叶变换为例来进行研究**\n\n## 连续周期信号的变换 ##\n\n对于连续周期信号，傅里叶选择用一组正交函数基来表示他们，可以获得由时域转移到频域的优秀性质。这组基就是三角函数集（也可以用复指数集来表示）\n![Snipaste_2020-03-30_14-40-45.png][1]\n这样我们可以得到一组长度为无穷的级数，就是傅里叶级数。\n注意到这里选择的基函数的频率为nω0，也就是原周期信号的整数倍，也就是说连续周期信号的频谱是离散的。\n傅里叶级数这样来表示：\n![Snipaste_2020-03-30_18-05-26.png][2]\n也可以表示成复指数形式：\n![Snipaste_2020-03-30_18-03-00.png][3]\n![Snipaste_2020-03-30_18-02-48.png][4]\n![Snipaste_2020-03-30_18-03-32.png][5]\ncn可通过基正交的性质求得：\n![Snipaste_2020-03-30_18-02-33.png][6]\n这个cn也就是输入函数的频谱，它的实数部分代表cos值，虚部代表sin值，也可以看作表示的是幅值与相位，如图：\n![Snipaste_2020-03-30_18-04-03.png][7]\n注！对于定义在有限区间的函数，将其进行周期延拓，也可将其看作周期信号，进行傅里叶级数展开。\n看来基的选择还与原始信号有关，但当我输入一个非周期信号时，应该怎么选择这组基呢？\n\n## 连续非周期信号的变换 ##\n\n对于非周期信号，我们可以把它看作一个周期->∞的信号，此时的ω0->0。\n由于T->∞，Fn->0，不再适合描述频率特性，因此我们选择TFn = F(nω0)作为描述频率特性的函数.\n这代表什么呢？这代表着非周期信号的频谱间隔很小，也就可以看作是连续的，此时nω0就退化成了ω，就与傅里叶变换如下：\n![Snipaste_2020-03-30_18-13-20.png][8]\n同样刻画了输入信号的频率特性。\n因此得到傅里叶变换与反变换\n![Snipaste_2020-04-01_09-40-58.png][9]\n![Snipaste_2020-04-01_09-41-43.png][10]\n可以看出来，此时的F(ω)不再代表着频谱，而是表示频谱的密度。\n也就是说，非周期函数不能表示成cos、sin的线性组合（由于系数->0），但是可以使用傅里叶变换衡量其中各个频率的成分多少。\n\n## 离散非周期信号的变换 ##\n\n上述连续信号的傅里叶变换适用于模拟信号。随着数字控制的普及，我们如果想在一个离散的数字系统中进行傅里叶变换，必须进行离散的采样，采样可以用原信号*冲激序列来表示：\n![Snipaste_2020-04-24_12-00-02.png][11]\n注意这个信号仍属于连续的信号，只不过他有了一个可以对应的离散序列也就是x[n]\n我们当让可以对这个连续的信号进行**连续的**傅里叶变换：\n![Snipaste_2020-04-24_12-01-37.png][12]\n这里交换积分号与求和号，化简可以得到：\n![Snipaste_2020-04-24_12-02-28.png][13]\n这里的离散序列x[n]就是由与之对应的冲激序列积分得来的，有x[n] = x(nTs)\n这样一来我们就得到了离散信号的傅里叶变换，但是这个信号在频域上还是连续的，没办法用在数字处理器中：\n一是因为这个求和是从-∞到+∞项的求和，需要知道信号时域的全部信息，这对于实时系统是不可能实现的；\n二是由于频域上这个ω是连续的，也就是得到了频域上的全部信息（由于使用了信号时域的全部信息），离散系统ω是离散的，只能使用其中的一部分信息，造成了信息的冗余。\n我们既然不能利用频域的全部信息，而却要求知道信号时域的全部信息，能否做一妥协，这时离散傅里叶变换出来救场了。\n\n## 离散周期信号（有限长信号周期延拓）的变换 ##\n\n有限的时域信息表示有限的（离散的）频域信息，我们很自然地想到了周期函数的傅里叶级数。\n同理，对于一个非无限长的信号（一张图片），或者是无限长信号的一段截取（实时数字系统本时刻的前N个采样周期信号的截取），我们可以对其进行延拓，这样就得到了一个无限长的周期信号。对这个周期信号进行傅里叶展开，就可以得到离散的频域表达了：\n对这个离散的周期延拓进行傅里叶展开\n![Snipaste_2020-04-24_12-32-14.png][14]\n还是一样的计算方法，交换积分号与求和号，且有T = N*Ts，化简得到：\n![Snipaste_2020-04-24_12-35-37.png][15]\n这就是N点离散傅里叶变换DFT的表达式，并且这个离散序列是以N为周期的，我们只取第一个周期即可。\n其中第k个点表示的是k*ω0/N频率分量，其中ω0 = 1/Ts。\n可以看出，这就是DTFT的离散化表示！\n当然对于本来就是周期序列的信号，可以直接进行离散傅里叶级数展开DFS。\n\n从上面的例子，我们看出，这种**信息**的守恒十分的美观：\n时域的信息完备性体现在是否需要知道信号从出生到入死的全部（是否是周期的），而频域的信息完备性体现在频域表示是否是连续的。\n或许这就是数学之美吧！！！！！\n\n总结一下时域频域函数的对应关系：\n 1. 时域连续->频域非周期\n 2. 时域离散->频域周期\n 3. 时域周期->频域离散\n 4. 时域非周期->频域连续\n是不是也很美呢？\n\n## 二维离散信号（图片）的变换 ##\n\n待更新!\n\n\n  [1]: /old_images/2020/03/1699646663.png\n  [2]: /old_images/2020/03/3703168680.png\n  [3]: /old_images/2020/03/1630131877.png\n  [4]: /old_images/2020/03/133748069.png\n  [5]: /old_images/2020/03/1878500351.png\n  [6]: /old_images/2020/03/1580985861.png\n  [7]: /old_images/2020/03/2845666079.png\n  [8]: /old_images/2020/03/1453260522.png\n  [9]: /old_images/2020/04/2789109287.png\n  [10]: /old_images/2020/04/359761650.png\n  [11]: /old_images/2020/04/1463504003.png\n  [12]: /old_images/2020/04/2297105551.png\n  [13]: /old_images/2020/04/1469852139.png\n  [14]: /old_images/2020/04/536799533.png\n  [15]: /old_images/2020/04/2586712878.png\n","source":"_posts/揭开积分变换的面纱.md","raw":"title: 揭开积分变换的面纱\ndate: 2020-03-30 06:26:00\ncategories: 物数\ntags: []\ntoc: true\n---\n从刚上大学开始，积分变换就无时无刻地萦绕在我们身旁，什么傅里叶变换。拉普拉斯变换，甚至小波变换等等。\n这些变换有什么意义？他们又是怎样实现的呢？这次我们多花点时间来理一理。\n\n## 积分变换即基变换 ##\n\n就如同线性代数所说那样，空间中任意一个向量都可由一组完备（个数充满R^n）的正交的基的线性组合来表示。\n如果把一个函数（信号）看作这个任意的向量（属于R^∞空间），那么这个函数也可以由R^∞空间下的一系列正交的基（也是函数、信号）来表示，这就是信号的基变换，也就是我们说的积分变换。这组正交基的选择，就是积分变换产生区别的地方，如何选择一组好用的基就成了我们要动脑筋的地方。\n傅里叶、拉普拉斯等人选择到了一系列合适的正交基函数，使得进行基变换后表示的函数有着很好的性质（比如能量集中、方便微积分运算等等），于是成为了一系列经典的积分变换。由此我们看出，积分变换即基变换。\n\n**我们以傅里叶变换为例来进行研究**\n\n## 连续周期信号的变换 ##\n\n对于连续周期信号，傅里叶选择用一组正交函数基来表示他们，可以获得由时域转移到频域的优秀性质。这组基就是三角函数集（也可以用复指数集来表示）\n![Snipaste_2020-03-30_14-40-45.png][1]\n这样我们可以得到一组长度为无穷的级数，就是傅里叶级数。\n注意到这里选择的基函数的频率为nω0，也就是原周期信号的整数倍，也就是说连续周期信号的频谱是离散的。\n傅里叶级数这样来表示：\n![Snipaste_2020-03-30_18-05-26.png][2]\n也可以表示成复指数形式：\n![Snipaste_2020-03-30_18-03-00.png][3]\n![Snipaste_2020-03-30_18-02-48.png][4]\n![Snipaste_2020-03-30_18-03-32.png][5]\ncn可通过基正交的性质求得：\n![Snipaste_2020-03-30_18-02-33.png][6]\n这个cn也就是输入函数的频谱，它的实数部分代表cos值，虚部代表sin值，也可以看作表示的是幅值与相位，如图：\n![Snipaste_2020-03-30_18-04-03.png][7]\n注！对于定义在有限区间的函数，将其进行周期延拓，也可将其看作周期信号，进行傅里叶级数展开。\n看来基的选择还与原始信号有关，但当我输入一个非周期信号时，应该怎么选择这组基呢？\n\n## 连续非周期信号的变换 ##\n\n对于非周期信号，我们可以把它看作一个周期->∞的信号，此时的ω0->0。\n由于T->∞，Fn->0，不再适合描述频率特性，因此我们选择TFn = F(nω0)作为描述频率特性的函数.\n这代表什么呢？这代表着非周期信号的频谱间隔很小，也就可以看作是连续的，此时nω0就退化成了ω，就与傅里叶变换如下：\n![Snipaste_2020-03-30_18-13-20.png][8]\n同样刻画了输入信号的频率特性。\n因此得到傅里叶变换与反变换\n![Snipaste_2020-04-01_09-40-58.png][9]\n![Snipaste_2020-04-01_09-41-43.png][10]\n可以看出来，此时的F(ω)不再代表着频谱，而是表示频谱的密度。\n也就是说，非周期函数不能表示成cos、sin的线性组合（由于系数->0），但是可以使用傅里叶变换衡量其中各个频率的成分多少。\n\n## 离散非周期信号的变换 ##\n\n上述连续信号的傅里叶变换适用于模拟信号。随着数字控制的普及，我们如果想在一个离散的数字系统中进行傅里叶变换，必须进行离散的采样，采样可以用原信号*冲激序列来表示：\n![Snipaste_2020-04-24_12-00-02.png][11]\n注意这个信号仍属于连续的信号，只不过他有了一个可以对应的离散序列也就是x[n]\n我们当让可以对这个连续的信号进行**连续的**傅里叶变换：\n![Snipaste_2020-04-24_12-01-37.png][12]\n这里交换积分号与求和号，化简可以得到：\n![Snipaste_2020-04-24_12-02-28.png][13]\n这里的离散序列x[n]就是由与之对应的冲激序列积分得来的，有x[n] = x(nTs)\n这样一来我们就得到了离散信号的傅里叶变换，但是这个信号在频域上还是连续的，没办法用在数字处理器中：\n一是因为这个求和是从-∞到+∞项的求和，需要知道信号时域的全部信息，这对于实时系统是不可能实现的；\n二是由于频域上这个ω是连续的，也就是得到了频域上的全部信息（由于使用了信号时域的全部信息），离散系统ω是离散的，只能使用其中的一部分信息，造成了信息的冗余。\n我们既然不能利用频域的全部信息，而却要求知道信号时域的全部信息，能否做一妥协，这时离散傅里叶变换出来救场了。\n\n## 离散周期信号（有限长信号周期延拓）的变换 ##\n\n有限的时域信息表示有限的（离散的）频域信息，我们很自然地想到了周期函数的傅里叶级数。\n同理，对于一个非无限长的信号（一张图片），或者是无限长信号的一段截取（实时数字系统本时刻的前N个采样周期信号的截取），我们可以对其进行延拓，这样就得到了一个无限长的周期信号。对这个周期信号进行傅里叶展开，就可以得到离散的频域表达了：\n对这个离散的周期延拓进行傅里叶展开\n![Snipaste_2020-04-24_12-32-14.png][14]\n还是一样的计算方法，交换积分号与求和号，且有T = N*Ts，化简得到：\n![Snipaste_2020-04-24_12-35-37.png][15]\n这就是N点离散傅里叶变换DFT的表达式，并且这个离散序列是以N为周期的，我们只取第一个周期即可。\n其中第k个点表示的是k*ω0/N频率分量，其中ω0 = 1/Ts。\n可以看出，这就是DTFT的离散化表示！\n当然对于本来就是周期序列的信号，可以直接进行离散傅里叶级数展开DFS。\n\n从上面的例子，我们看出，这种**信息**的守恒十分的美观：\n时域的信息完备性体现在是否需要知道信号从出生到入死的全部（是否是周期的），而频域的信息完备性体现在频域表示是否是连续的。\n或许这就是数学之美吧！！！！！\n\n总结一下时域频域函数的对应关系：\n 1. 时域连续->频域非周期\n 2. 时域离散->频域周期\n 3. 时域周期->频域离散\n 4. 时域非周期->频域连续\n是不是也很美呢？\n\n## 二维离散信号（图片）的变换 ##\n\n待更新!\n\n\n  [1]: /old_images/2020/03/1699646663.png\n  [2]: /old_images/2020/03/3703168680.png\n  [3]: /old_images/2020/03/1630131877.png\n  [4]: /old_images/2020/03/133748069.png\n  [5]: /old_images/2020/03/1878500351.png\n  [6]: /old_images/2020/03/1580985861.png\n  [7]: /old_images/2020/03/2845666079.png\n  [8]: /old_images/2020/03/1453260522.png\n  [9]: /old_images/2020/04/2789109287.png\n  [10]: /old_images/2020/04/359761650.png\n  [11]: /old_images/2020/04/1463504003.png\n  [12]: /old_images/2020/04/2297105551.png\n  [13]: /old_images/2020/04/1469852139.png\n  [14]: /old_images/2020/04/536799533.png\n  [15]: /old_images/2020/04/2586712878.png\n","slug":"揭开积分变换的面纱","published":1,"updated":"2020-12-14T12:21:26.389Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0c7001u7p195dxn1j57","content":"<p>从刚上大学开始，积分变换就无时无刻地萦绕在我们身旁，什么傅里叶变换。拉普拉斯变换，甚至小波变换等等。<br>这些变换有什么意义？他们又是怎样实现的呢？这次我们多花点时间来理一理。</p>\n<h2 id=\"积分变换即基变换\"><a href=\"#积分变换即基变换\" class=\"headerlink\" title=\"积分变换即基变换\"></a>积分变换即基变换</h2><p>就如同线性代数所说那样，空间中任意一个向量都可由一组完备（个数充满R^n）的正交的基的线性组合来表示。<br>如果把一个函数（信号）看作这个任意的向量（属于R^∞空间），那么这个函数也可以由R^∞空间下的一系列正交的基（也是函数、信号）来表示，这就是信号的基变换，也就是我们说的积分变换。这组正交基的选择，就是积分变换产生区别的地方，如何选择一组好用的基就成了我们要动脑筋的地方。<br>傅里叶、拉普拉斯等人选择到了一系列合适的正交基函数，使得进行基变换后表示的函数有着很好的性质（比如能量集中、方便微积分运算等等），于是成为了一系列经典的积分变换。由此我们看出，积分变换即基变换。</p>\n<p><strong>我们以傅里叶变换为例来进行研究</strong></p>\n<h2 id=\"连续周期信号的变换\"><a href=\"#连续周期信号的变换\" class=\"headerlink\" title=\"连续周期信号的变换\"></a>连续周期信号的变换</h2><p>对于连续周期信号，傅里叶选择用一组正交函数基来表示他们，可以获得由时域转移到频域的优秀性质。这组基就是三角函数集（也可以用复指数集来表示）<br><img src=\"/old_images/2020/03/1699646663.png\" alt=\"Snipaste_2020-03-30_14-40-45.png\"><br>这样我们可以得到一组长度为无穷的级数，就是傅里叶级数。<br>注意到这里选择的基函数的频率为nω0，也就是原周期信号的整数倍，也就是说连续周期信号的频谱是离散的。<br>傅里叶级数这样来表示：<br><img src=\"/old_images/2020/03/3703168680.png\" alt=\"Snipaste_2020-03-30_18-05-26.png\"><br>也可以表示成复指数形式：<br><img src=\"/old_images/2020/03/1630131877.png\" alt=\"Snipaste_2020-03-30_18-03-00.png\"><br><img src=\"/old_images/2020/03/133748069.png\" alt=\"Snipaste_2020-03-30_18-02-48.png\"><br><img src=\"/old_images/2020/03/1878500351.png\" alt=\"Snipaste_2020-03-30_18-03-32.png\"><br>cn可通过基正交的性质求得：<br><img src=\"/old_images/2020/03/1580985861.png\" alt=\"Snipaste_2020-03-30_18-02-33.png\"><br>这个cn也就是输入函数的频谱，它的实数部分代表cos值，虚部代表sin值，也可以看作表示的是幅值与相位，如图：<br><img src=\"/old_images/2020/03/2845666079.png\" alt=\"Snipaste_2020-03-30_18-04-03.png\"><br>注！对于定义在有限区间的函数，将其进行周期延拓，也可将其看作周期信号，进行傅里叶级数展开。<br>看来基的选择还与原始信号有关，但当我输入一个非周期信号时，应该怎么选择这组基呢？</p>\n<h2 id=\"连续非周期信号的变换\"><a href=\"#连续非周期信号的变换\" class=\"headerlink\" title=\"连续非周期信号的变换\"></a>连续非周期信号的变换</h2><p>对于非周期信号，我们可以把它看作一个周期-&gt;∞的信号，此时的ω0-&gt;0。<br>由于T-&gt;∞，Fn-&gt;0，不再适合描述频率特性，因此我们选择TFn = F(nω0)作为描述频率特性的函数.<br>这代表什么呢？这代表着非周期信号的频谱间隔很小，也就可以看作是连续的，此时nω0就退化成了ω，就与傅里叶变换如下：<br><img src=\"/old_images/2020/03/1453260522.png\" alt=\"Snipaste_2020-03-30_18-13-20.png\"><br>同样刻画了输入信号的频率特性。<br>因此得到傅里叶变换与反变换<br><img src=\"/old_images/2020/04/2789109287.png\" alt=\"Snipaste_2020-04-01_09-40-58.png\"><br><img src=\"/old_images/2020/04/359761650.png\" alt=\"Snipaste_2020-04-01_09-41-43.png\"><br>可以看出来，此时的F(ω)不再代表着频谱，而是表示频谱的密度。<br>也就是说，非周期函数不能表示成cos、sin的线性组合（由于系数-&gt;0），但是可以使用傅里叶变换衡量其中各个频率的成分多少。</p>\n<h2 id=\"离散非周期信号的变换\"><a href=\"#离散非周期信号的变换\" class=\"headerlink\" title=\"离散非周期信号的变换\"></a>离散非周期信号的变换</h2><p>上述连续信号的傅里叶变换适用于模拟信号。随着数字控制的普及，我们如果想在一个离散的数字系统中进行傅里叶变换，必须进行离散的采样，采样可以用原信号*冲激序列来表示：<br><img src=\"/old_images/2020/04/1463504003.png\" alt=\"Snipaste_2020-04-24_12-00-02.png\"><br>注意这个信号仍属于连续的信号，只不过他有了一个可以对应的离散序列也就是x[n]<br>我们当让可以对这个连续的信号进行<strong>连续的</strong>傅里叶变换：<br><img src=\"/old_images/2020/04/2297105551.png\" alt=\"Snipaste_2020-04-24_12-01-37.png\"><br>这里交换积分号与求和号，化简可以得到：<br><img src=\"/old_images/2020/04/1469852139.png\" alt=\"Snipaste_2020-04-24_12-02-28.png\"><br>这里的离散序列x[n]就是由与之对应的冲激序列积分得来的，有x[n] = x(nTs)<br>这样一来我们就得到了离散信号的傅里叶变换，但是这个信号在频域上还是连续的，没办法用在数字处理器中：<br>一是因为这个求和是从-∞到+∞项的求和，需要知道信号时域的全部信息，这对于实时系统是不可能实现的；<br>二是由于频域上这个ω是连续的，也就是得到了频域上的全部信息（由于使用了信号时域的全部信息），离散系统ω是离散的，只能使用其中的一部分信息，造成了信息的冗余。<br>我们既然不能利用频域的全部信息，而却要求知道信号时域的全部信息，能否做一妥协，这时离散傅里叶变换出来救场了。</p>\n<h2 id=\"离散周期信号（有限长信号周期延拓）的变换\"><a href=\"#离散周期信号（有限长信号周期延拓）的变换\" class=\"headerlink\" title=\"离散周期信号（有限长信号周期延拓）的变换\"></a>离散周期信号（有限长信号周期延拓）的变换</h2><p>有限的时域信息表示有限的（离散的）频域信息，我们很自然地想到了周期函数的傅里叶级数。<br>同理，对于一个非无限长的信号（一张图片），或者是无限长信号的一段截取（实时数字系统本时刻的前N个采样周期信号的截取），我们可以对其进行延拓，这样就得到了一个无限长的周期信号。对这个周期信号进行傅里叶展开，就可以得到离散的频域表达了：<br>对这个离散的周期延拓进行傅里叶展开<br><img src=\"/old_images/2020/04/536799533.png\" alt=\"Snipaste_2020-04-24_12-32-14.png\"><br>还是一样的计算方法，交换积分号与求和号，且有T = N<em>Ts，化简得到：<br><img src=\"/old_images/2020/04/2586712878.png\" alt=\"Snipaste_2020-04-24_12-35-37.png\"><br>这就是N点离散傅里叶变换DFT的表达式，并且这个离散序列是以N为周期的，我们只取第一个周期即可。<br>其中第k个点表示的是k</em>ω0/N频率分量，其中ω0 = 1/Ts。<br>可以看出，这就是DTFT的离散化表示！<br>当然对于本来就是周期序列的信号，可以直接进行离散傅里叶级数展开DFS。</p>\n<p>从上面的例子，我们看出，这种<strong>信息</strong>的守恒十分的美观：<br>时域的信息完备性体现在是否需要知道信号从出生到入死的全部（是否是周期的），而频域的信息完备性体现在频域表示是否是连续的。<br>或许这就是数学之美吧！！！！！</p>\n<p>总结一下时域频域函数的对应关系：</p>\n<ol>\n<li>时域连续-&gt;频域非周期</li>\n<li>时域离散-&gt;频域周期</li>\n<li>时域周期-&gt;频域离散</li>\n<li>时域非周期-&gt;频域连续<br>是不是也很美呢？</li>\n</ol>\n<h2 id=\"二维离散信号（图片）的变换\"><a href=\"#二维离散信号（图片）的变换\" class=\"headerlink\" title=\"二维离散信号（图片）的变换\"></a>二维离散信号（图片）的变换</h2><p>待更新!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>从刚上大学开始，积分变换就无时无刻地萦绕在我们身旁，什么傅里叶变换。拉普拉斯变换，甚至小波变换等等。<br>这些变换有什么意义？他们又是怎样实现的呢？这次我们多花点时间来理一理。</p>\n<h2 id=\"积分变换即基变换\"><a href=\"#积分变换即基变换\" class=\"headerlink\" title=\"积分变换即基变换\"></a>积分变换即基变换</h2><p>就如同线性代数所说那样，空间中任意一个向量都可由一组完备（个数充满R^n）的正交的基的线性组合来表示。<br>如果把一个函数（信号）看作这个任意的向量（属于R^∞空间），那么这个函数也可以由R^∞空间下的一系列正交的基（也是函数、信号）来表示，这就是信号的基变换，也就是我们说的积分变换。这组正交基的选择，就是积分变换产生区别的地方，如何选择一组好用的基就成了我们要动脑筋的地方。<br>傅里叶、拉普拉斯等人选择到了一系列合适的正交基函数，使得进行基变换后表示的函数有着很好的性质（比如能量集中、方便微积分运算等等），于是成为了一系列经典的积分变换。由此我们看出，积分变换即基变换。</p>\n<p><strong>我们以傅里叶变换为例来进行研究</strong></p>\n<h2 id=\"连续周期信号的变换\"><a href=\"#连续周期信号的变换\" class=\"headerlink\" title=\"连续周期信号的变换\"></a>连续周期信号的变换</h2><p>对于连续周期信号，傅里叶选择用一组正交函数基来表示他们，可以获得由时域转移到频域的优秀性质。这组基就是三角函数集（也可以用复指数集来表示）<br><img src=\"/old_images/2020/03/1699646663.png\" alt=\"Snipaste_2020-03-30_14-40-45.png\"><br>这样我们可以得到一组长度为无穷的级数，就是傅里叶级数。<br>注意到这里选择的基函数的频率为nω0，也就是原周期信号的整数倍，也就是说连续周期信号的频谱是离散的。<br>傅里叶级数这样来表示：<br><img src=\"/old_images/2020/03/3703168680.png\" alt=\"Snipaste_2020-03-30_18-05-26.png\"><br>也可以表示成复指数形式：<br><img src=\"/old_images/2020/03/1630131877.png\" alt=\"Snipaste_2020-03-30_18-03-00.png\"><br><img src=\"/old_images/2020/03/133748069.png\" alt=\"Snipaste_2020-03-30_18-02-48.png\"><br><img src=\"/old_images/2020/03/1878500351.png\" alt=\"Snipaste_2020-03-30_18-03-32.png\"><br>cn可通过基正交的性质求得：<br><img src=\"/old_images/2020/03/1580985861.png\" alt=\"Snipaste_2020-03-30_18-02-33.png\"><br>这个cn也就是输入函数的频谱，它的实数部分代表cos值，虚部代表sin值，也可以看作表示的是幅值与相位，如图：<br><img src=\"/old_images/2020/03/2845666079.png\" alt=\"Snipaste_2020-03-30_18-04-03.png\"><br>注！对于定义在有限区间的函数，将其进行周期延拓，也可将其看作周期信号，进行傅里叶级数展开。<br>看来基的选择还与原始信号有关，但当我输入一个非周期信号时，应该怎么选择这组基呢？</p>\n<h2 id=\"连续非周期信号的变换\"><a href=\"#连续非周期信号的变换\" class=\"headerlink\" title=\"连续非周期信号的变换\"></a>连续非周期信号的变换</h2><p>对于非周期信号，我们可以把它看作一个周期-&gt;∞的信号，此时的ω0-&gt;0。<br>由于T-&gt;∞，Fn-&gt;0，不再适合描述频率特性，因此我们选择TFn = F(nω0)作为描述频率特性的函数.<br>这代表什么呢？这代表着非周期信号的频谱间隔很小，也就可以看作是连续的，此时nω0就退化成了ω，就与傅里叶变换如下：<br><img src=\"/old_images/2020/03/1453260522.png\" alt=\"Snipaste_2020-03-30_18-13-20.png\"><br>同样刻画了输入信号的频率特性。<br>因此得到傅里叶变换与反变换<br><img src=\"/old_images/2020/04/2789109287.png\" alt=\"Snipaste_2020-04-01_09-40-58.png\"><br><img src=\"/old_images/2020/04/359761650.png\" alt=\"Snipaste_2020-04-01_09-41-43.png\"><br>可以看出来，此时的F(ω)不再代表着频谱，而是表示频谱的密度。<br>也就是说，非周期函数不能表示成cos、sin的线性组合（由于系数-&gt;0），但是可以使用傅里叶变换衡量其中各个频率的成分多少。</p>\n<h2 id=\"离散非周期信号的变换\"><a href=\"#离散非周期信号的变换\" class=\"headerlink\" title=\"离散非周期信号的变换\"></a>离散非周期信号的变换</h2><p>上述连续信号的傅里叶变换适用于模拟信号。随着数字控制的普及，我们如果想在一个离散的数字系统中进行傅里叶变换，必须进行离散的采样，采样可以用原信号*冲激序列来表示：<br><img src=\"/old_images/2020/04/1463504003.png\" alt=\"Snipaste_2020-04-24_12-00-02.png\"><br>注意这个信号仍属于连续的信号，只不过他有了一个可以对应的离散序列也就是x[n]<br>我们当让可以对这个连续的信号进行<strong>连续的</strong>傅里叶变换：<br><img src=\"/old_images/2020/04/2297105551.png\" alt=\"Snipaste_2020-04-24_12-01-37.png\"><br>这里交换积分号与求和号，化简可以得到：<br><img src=\"/old_images/2020/04/1469852139.png\" alt=\"Snipaste_2020-04-24_12-02-28.png\"><br>这里的离散序列x[n]就是由与之对应的冲激序列积分得来的，有x[n] = x(nTs)<br>这样一来我们就得到了离散信号的傅里叶变换，但是这个信号在频域上还是连续的，没办法用在数字处理器中：<br>一是因为这个求和是从-∞到+∞项的求和，需要知道信号时域的全部信息，这对于实时系统是不可能实现的；<br>二是由于频域上这个ω是连续的，也就是得到了频域上的全部信息（由于使用了信号时域的全部信息），离散系统ω是离散的，只能使用其中的一部分信息，造成了信息的冗余。<br>我们既然不能利用频域的全部信息，而却要求知道信号时域的全部信息，能否做一妥协，这时离散傅里叶变换出来救场了。</p>\n<h2 id=\"离散周期信号（有限长信号周期延拓）的变换\"><a href=\"#离散周期信号（有限长信号周期延拓）的变换\" class=\"headerlink\" title=\"离散周期信号（有限长信号周期延拓）的变换\"></a>离散周期信号（有限长信号周期延拓）的变换</h2><p>有限的时域信息表示有限的（离散的）频域信息，我们很自然地想到了周期函数的傅里叶级数。<br>同理，对于一个非无限长的信号（一张图片），或者是无限长信号的一段截取（实时数字系统本时刻的前N个采样周期信号的截取），我们可以对其进行延拓，这样就得到了一个无限长的周期信号。对这个周期信号进行傅里叶展开，就可以得到离散的频域表达了：<br>对这个离散的周期延拓进行傅里叶展开<br><img src=\"/old_images/2020/04/536799533.png\" alt=\"Snipaste_2020-04-24_12-32-14.png\"><br>还是一样的计算方法，交换积分号与求和号，且有T = N<em>Ts，化简得到：<br><img src=\"/old_images/2020/04/2586712878.png\" alt=\"Snipaste_2020-04-24_12-35-37.png\"><br>这就是N点离散傅里叶变换DFT的表达式，并且这个离散序列是以N为周期的，我们只取第一个周期即可。<br>其中第k个点表示的是k</em>ω0/N频率分量，其中ω0 = 1/Ts。<br>可以看出，这就是DTFT的离散化表示！<br>当然对于本来就是周期序列的信号，可以直接进行离散傅里叶级数展开DFS。</p>\n<p>从上面的例子，我们看出，这种<strong>信息</strong>的守恒十分的美观：<br>时域的信息完备性体现在是否需要知道信号从出生到入死的全部（是否是周期的），而频域的信息完备性体现在频域表示是否是连续的。<br>或许这就是数学之美吧！！！！！</p>\n<p>总结一下时域频域函数的对应关系：</p>\n<ol>\n<li>时域连续-&gt;频域非周期</li>\n<li>时域离散-&gt;频域周期</li>\n<li>时域周期-&gt;频域离散</li>\n<li>时域非周期-&gt;频域连续<br>是不是也很美呢？</li>\n</ol>\n<h2 id=\"二维离散信号（图片）的变换\"><a href=\"#二维离散信号（图片）的变换\" class=\"headerlink\" title=\"二维离散信号（图片）的变换\"></a>二维离散信号（图片）的变换</h2><p>待更新!</p>\n"},{"title":"数字图像处理-课程设计","date":"2020-06-24T01:47:00.000Z","toc":true,"_content":"这是2020年春季学期我选的外专业课“数字图像处理”的课程设计，觉得比较有趣，故拿来记录留念。\n在这门课程中，我第一次对图像处理进行实践，老师讲得非常好，推荐大家选这门课，能学到不少知识。\n\n## 课设题目 ##\n天文摄影师常常用照相机对夜晚的天空进行拍摄。v1.avi和v2.avi是两段持续几秒的夜晚天空景象的视频。可以注意到，夜晚较暗的光照使得视频中有明显的噪声。设计一个算法用于去除这两组图像数据中的噪声。\n根据学过的图像处理知识可知，为了实现通过多帧图像数据获取一幅去除噪声后的图像，一种常用的方法是平均去噪法，即计算多帧图像的平均值。\n分别计算这两组多帧图像数据的平均值，获得两幅去噪图像。\n用上述方法可以发现去噪结果并不令人满意，原因是各帧图像间存在一定的偏移。请设计一个算法克服这种偏移同时获得较好的平均法去噪结果。\n## 实验原理 ##\n以视频中的第一帧为基准，逐帧遍历视频图片，由于图片位移间隔时间小，位移小，可以通过特殊方法获得当前帧图片与第一帧基准图片的相对运动大小，求出变换矩阵，通过变换的逆矩阵反向平移当前帧，即可认为观察者未运动，再使用平均值法去噪即可。\n由于运动时间短，我们忽略运动的旋转部分，仅考虑平移运动。平移运动为二自由度，因此我们只需要找到两张图中一个对应的特征点，即可求得变换矩阵。\n## 涉及的 MATLAB 函数 ##\n**VideoReader**;\n用于读取视频中的内容，将其每一帧都读出来。\n**im2double**；\n将读入的图像转换为浮点形式，便于后期处理。\n**rgb2gray**；\n将rgb图像转化为灰度图，便于后期处理。\n**strel**；\n创建形态学操作的构造元素。\n**imerode**；\n图像形态学腐蚀处理。\n**edge**\n边缘检测。\n**find、max**；\n求得数组最大值并确定最大值的位置。 \n\n## 实验内容与方法 ##\n首先观察两个视频，可以看出，视频中图像含有许多噪声：\n![Snipaste_2020-06-24_17-44-11.jpg][1]\n![Snipaste_2020-06-24_17-44-38.jpg][2]\n这些噪声分布均匀且均值基本为0，可以通过均值滤波的方法消除噪声。但是，由于视频拍摄的抖动导致直接进行多帧均值滤波会使运动物体产生模糊，导致滤波效果变差：\n![3.png][3]\n![4.png][4]\n因此，想到了使用特征点的方法求出前后两帧的相对运动关系，将后一帧移动到前一帧对应的位置，以消除运动产生的影响。\n首先使用im2double与rgb2gray将图像处理为浮点型的单值图，之后对两段视频分别选择寻找特征点的方法。\n对于第一个视频，使用缩小范围的寻找特征点的方法，在原图中找到一个sector区域，作为特征点运动的范围。选取这个位置要保证范围内有且仅有一个比较明亮的点，并且在运动过程中这个点不会跑出这个范围。\nsector = frame(421:472,681:728);\n处理前的sector\n![5.png][5]\n对其进行处理，首先进行形态学的腐蚀处理\n形态学操作可以改变物体形状\n![6.png][6]\n形态学腐蚀就是求局部最小值的操作\nse = strel('disk',1);\nsector = imerode(sector,se);\n之后使用find函数找到图片中幅值最大的像素，以这个点的位置作为特征点。\n[x_1,y_1] = find(sector == max(max(sector)));\n处理后的sector\n![8.png][8]\n选择这个点作为特征点进行唯一判断。\n对于第二个视频，我们使用图中月亮的圆心作为特征点。\n首先对图像进行canny边缘检测：\nresult_frame = edge(frame,'canny',[0.3,0.5]);\n![9.png][9]\nCanny边缘检测包含以下四个步骤：\n1.高斯滤波\n滤波的主要目的是降噪，一般的图像处理算法都需要先进行降噪。而高斯滤波主要使图像变得平滑（模糊），同时也有可能增大了边缘的宽度。\n2.计算图片梯度\n边缘一定就是图像中像素变化较快的区域，因此使用梯度就可以检测出边缘。我们使用sobel算子对图片进行滤波，就可以计算出它的梯度。\n![10.png][10]\n3.过滤非最大值\n在高斯滤波过程中，边缘有可能被放大了。这个步骤使用一个规则来过滤不是边缘的点，使边缘的宽度尽可能为1个像素点：如果一个像素点属于边缘，那么这个像素点在梯度方向上的梯度值是最大的。否则不是边缘，将灰度值设为0。这样就可以使检测到的边缘始终是一个像素。\n4.使用上下阈值确定边缘\n通过给定的上下阈值确定最终哪些地方属于边缘，哪些地方不是。梯度过小的地方不应该是边缘，而梯度过大的地方也不应被视为边缘 。\n\n想要检测图片中的圆首先想到，可以使用Hough圆变换来求解圆的圆心：\n首先理解霍夫线变换。霍夫线变换的基本理论，就是二进制图片中每一个点都可能属于某些线。如果将过(x0,y0)的这些条线参数化为一个斜率为a，截距为b的线，由于这条线过这一点，可以将a，b作为变量，画出这个点对应的所有直线参数，在a，b平面中的形式：\n![Snipaste_2020-06-24_17-49-13.jpg][11]\n也是一条直线，并且斜率与截距都是确定的。对于每一个图像中的非零点，都进行这样的操作，并且在a，b平面表示出来。当所有的非零点都表示出来，并进行累加后，a，b平面上数值比较大的点就是原图中可能的直线的参数。\n同理，霍夫圆变换与直线变换的原理相同，先将圆参数化，只不过这时需要三个参数，得到的参数平面将会是一个三位体中的坐标。这样也是可行的，只不过运算缓慢，通常使用霍夫梯度法来检测圆。圆心是圆所有法线的交汇点，通过梯度，确定这些法线，并求出他们的交点中最有可能的那一个，就能检测到圆心。随后再判断圆心到圆周上点的距离，相同或相近距离数量多，就能确定圆的半径，并且也能检验圆心选择的正确性。\n在思考过程中，又发现进行完canny边缘检测后，这张图像十分完美，故使用运算更为简便的方法进行圆检测。\n使用扫描算法检测这个圆的圆心，具体方法为：\n逐**列**遍历整个图像，若在每一**列**检测到两次白点，计算两个白点之间的距离，所有距离中最长的距离就是圆的直径，这时两个点中间的的那个点就是圆的圆心。\n\n## 实验结果 ##\n实验所使用代码（Matlab）如下：\n对于第一个视频：\n\n    clear,clc;\n    vidobj = VideoReader(['v1' '.avi']);\n    numFrames = vidobj.NumFrames;\n    sum_frame = zeros(533,800,3);\n     \n    origin_frame = im2double(read(vidobj,1));\n    frame = rgb2gray(origin_frame);\n    sector = frame(421:472,681:728);\n    se = strel('disk',1);\n    sector = imerode(sector,se);\n    [x_1,y_1] = find(sector == max(max(sector)));\n    sum_frame = origin_frame;\n     \n    for i = 2:numFrames\n        \n        origin_frame = im2double(read(vidobj,i));\n        frame = rgb2gray(origin_frame);\n        \n        %find offset\n        sector = frame(421:472,681:728);\n        se = strel('disk',1);\n        sector = imerode(sector,se);\n        [x,y] = find(sector == max(max(sector)));\n     \n        x_offset = x - x_1;\n        y_offset = y - y_1;\n        \n        if x_offset > 0 && y_offset > 0\n            origin_frame(1:533-x_offset,1:800-y_offset,:) = origin_frame(x_offset+1:533,y_offset+1:800,:);\n        elseif x_offset < 0 && y_offset > 0\n            origin_frame(-x_offset+1:533,1:800-y_offset,:) = origin_frame(1:533+x_offset,y_offset+1:800,:);\n        elseif x_offset > 0 && y_offset < 0\n            origin_frame(1:533-x_offset,-y_offset+1:800,:) = origin_frame(x_offset+1:533,1:800+y_offset,:);\n        elseif x_offset < 0 && y_offset < 0\n            origin_frame(-x_offset+1:533,-y_offset+1:800,:) = origin_frame(1:533+x_offset,1:800+y_offset,:);\n        end\n     \n        \n        sum_frame = sum_frame + origin_frame;\n    end\n     \n    sum_frame = sum_frame/60;\n    imshow(sum_frame);\n\n \n 对于第二个视频：\n\n    clear,clc;\n    vidobj = VideoReader(['v2' '.avi']);\n    numFrames = vidobj.NumFrames;\n    sum_frame = zeros(600,800,3);\n     \n    origin_frame = im2double(read(vidobj,1));\n    frame = rgb2gray(origin_frame);\n    result_frame = edge(frame,'canny',[0.3,0.5]);\n       \n    %find x,y\n    for j = 1:600\n        n = 0;\n        for k = 1:800\n            if result_frame(j,k) == 1\n                n = n+1;\n                if n == 1\n                    startpoint = k;\n                else\n                    if k - startpoint > 10\n                        maxVal(j,1) = k - startpoint;\n                        maxVal(j,2) = startpoint;\n                    else\n                        n = n-1;\n                    end\n                end\n            end\n            if k == 800 && (n == 1 || n == 0)\n                maxVal(j,1) = 0;\n                maxVal(j,2) = 0;\n            end\n        end\n    end\n    r = max(maxVal(:,1));\n    xpos = find(maxVal(:,1)==r);\n    xpos = int16(median(xpos));\n    ypos = maxVal(xpos,2) + int16(r/2);\n     \n    baseX = xpos;\n    baseY = ypos;\n     \n    sum_frame = origin_frame;\n     \n     \n    for i = 2:numFrames\n        origin_frame = im2double(read(vidobj,i));\n        frame = rgb2gray(origin_frame);\n        result_frame = edge(frame,'canny',[0.3,0.5]);\n       \n       %find x,y\n        for j = 1:600\n            n = 0;\n            for k = 1:800\n                if result_frame(j,k) == 1\n                    n = n+1;\n                    if n == 1\n                        startpoint = k;\n                    else\n                        if k - startpoint > 10\n                            maxVal(j,1) = k - startpoint;\n                            maxVal(j,2) = startpoint;\n                        else\n                            n = n-1;\n                        end\n                    end\n                end\n                if k == 800 && (n == 1 || n == 0)\n                    maxVal(j,1) = 0;\n                    maxVal(j,2) = 0;\n                end\n            end\n        end\n        r = max(maxVal(:,1));\n        xpos = find(maxVal(:,1)==r);\n        xpos = int16(median(xpos));\n        ypos = maxVal(xpos,2) + int16(r/2);\n        \n        x_offset = xpos - baseX;\n        y_offset = ypos - baseY;\n        \n         if x_offset > 0 && y_offset > 0\n            origin_frame(1:600-x_offset,1:800-y_offset,:) = origin_frame(x_offset+1:600,y_offset+1:800,:);\n        elseif x_offset < 0 && y_offset > 0\n            origin_frame(-x_offset+1:600,1:800-y_offset,:) = origin_frame(1:600+x_offset,y_offset+1:800,:);\n        elseif x_offset > 0 && y_offset < 0\n            origin_frame(1:600-x_offset,-y_offset+1:800,:) = origin_frame(x_offset+1:600,1:800+y_offset,:);\n        elseif x_offset < 0 && y_offset < 0\n            origin_frame(-x_offset+1:600,-y_offset+1:800,:) = origin_frame(1:600+x_offset,1:800+y_offset,:);\n        end\n        \n        sum_frame = sum_frame + origin_frame;\n     \n    end\n     \n     \n    sum_frame = sum_frame/60;\n    imshow(sum_frame);\n\n运行结果：\n![11.png][12]\n![12.png][13]\n可以看到，经过处理的图像噪声明显减少，并且并未受到观察者视角移动而出现动态模糊的影响。\n\n\n  [1]: /old_images/2020/06/2065354894.jpg\n  [2]: /old_images/2020/06/1235922839.jpg\n  [3]: /old_images/2020/06/4291764818.png\n  [4]: /old_images/2020/06/4074491988.png\n  [5]: /old_images/2020/06/2270251422.png\n  [6]: /old_images/2020/06/3183017928.png\n  [7]: /old_images/2020/06/3043677073.png\n  [8]: /old_images/2020/06/3043677073.png\n  [9]: /old_images/2020/06/1460216437.png\n  [10]: /old_images/2020/06/385346141.png\n  [11]: /old_images/2020/06/2947829010.jpg\n  [12]: /old_images/2020/06/142298572.png\n  [13]: /old_images/2020/06/2236493176.png\n","source":"_posts/数字图像处理-课程设计.md","raw":"title: 数字图像处理-课程设计\ndate: 2020-06-24 09:47:00\ncategories: 控制\ntags: []\ntoc: true\n---\n这是2020年春季学期我选的外专业课“数字图像处理”的课程设计，觉得比较有趣，故拿来记录留念。\n在这门课程中，我第一次对图像处理进行实践，老师讲得非常好，推荐大家选这门课，能学到不少知识。\n\n## 课设题目 ##\n天文摄影师常常用照相机对夜晚的天空进行拍摄。v1.avi和v2.avi是两段持续几秒的夜晚天空景象的视频。可以注意到，夜晚较暗的光照使得视频中有明显的噪声。设计一个算法用于去除这两组图像数据中的噪声。\n根据学过的图像处理知识可知，为了实现通过多帧图像数据获取一幅去除噪声后的图像，一种常用的方法是平均去噪法，即计算多帧图像的平均值。\n分别计算这两组多帧图像数据的平均值，获得两幅去噪图像。\n用上述方法可以发现去噪结果并不令人满意，原因是各帧图像间存在一定的偏移。请设计一个算法克服这种偏移同时获得较好的平均法去噪结果。\n## 实验原理 ##\n以视频中的第一帧为基准，逐帧遍历视频图片，由于图片位移间隔时间小，位移小，可以通过特殊方法获得当前帧图片与第一帧基准图片的相对运动大小，求出变换矩阵，通过变换的逆矩阵反向平移当前帧，即可认为观察者未运动，再使用平均值法去噪即可。\n由于运动时间短，我们忽略运动的旋转部分，仅考虑平移运动。平移运动为二自由度，因此我们只需要找到两张图中一个对应的特征点，即可求得变换矩阵。\n## 涉及的 MATLAB 函数 ##\n**VideoReader**;\n用于读取视频中的内容，将其每一帧都读出来。\n**im2double**；\n将读入的图像转换为浮点形式，便于后期处理。\n**rgb2gray**；\n将rgb图像转化为灰度图，便于后期处理。\n**strel**；\n创建形态学操作的构造元素。\n**imerode**；\n图像形态学腐蚀处理。\n**edge**\n边缘检测。\n**find、max**；\n求得数组最大值并确定最大值的位置。 \n\n## 实验内容与方法 ##\n首先观察两个视频，可以看出，视频中图像含有许多噪声：\n![Snipaste_2020-06-24_17-44-11.jpg][1]\n![Snipaste_2020-06-24_17-44-38.jpg][2]\n这些噪声分布均匀且均值基本为0，可以通过均值滤波的方法消除噪声。但是，由于视频拍摄的抖动导致直接进行多帧均值滤波会使运动物体产生模糊，导致滤波效果变差：\n![3.png][3]\n![4.png][4]\n因此，想到了使用特征点的方法求出前后两帧的相对运动关系，将后一帧移动到前一帧对应的位置，以消除运动产生的影响。\n首先使用im2double与rgb2gray将图像处理为浮点型的单值图，之后对两段视频分别选择寻找特征点的方法。\n对于第一个视频，使用缩小范围的寻找特征点的方法，在原图中找到一个sector区域，作为特征点运动的范围。选取这个位置要保证范围内有且仅有一个比较明亮的点，并且在运动过程中这个点不会跑出这个范围。\nsector = frame(421:472,681:728);\n处理前的sector\n![5.png][5]\n对其进行处理，首先进行形态学的腐蚀处理\n形态学操作可以改变物体形状\n![6.png][6]\n形态学腐蚀就是求局部最小值的操作\nse = strel('disk',1);\nsector = imerode(sector,se);\n之后使用find函数找到图片中幅值最大的像素，以这个点的位置作为特征点。\n[x_1,y_1] = find(sector == max(max(sector)));\n处理后的sector\n![8.png][8]\n选择这个点作为特征点进行唯一判断。\n对于第二个视频，我们使用图中月亮的圆心作为特征点。\n首先对图像进行canny边缘检测：\nresult_frame = edge(frame,'canny',[0.3,0.5]);\n![9.png][9]\nCanny边缘检测包含以下四个步骤：\n1.高斯滤波\n滤波的主要目的是降噪，一般的图像处理算法都需要先进行降噪。而高斯滤波主要使图像变得平滑（模糊），同时也有可能增大了边缘的宽度。\n2.计算图片梯度\n边缘一定就是图像中像素变化较快的区域，因此使用梯度就可以检测出边缘。我们使用sobel算子对图片进行滤波，就可以计算出它的梯度。\n![10.png][10]\n3.过滤非最大值\n在高斯滤波过程中，边缘有可能被放大了。这个步骤使用一个规则来过滤不是边缘的点，使边缘的宽度尽可能为1个像素点：如果一个像素点属于边缘，那么这个像素点在梯度方向上的梯度值是最大的。否则不是边缘，将灰度值设为0。这样就可以使检测到的边缘始终是一个像素。\n4.使用上下阈值确定边缘\n通过给定的上下阈值确定最终哪些地方属于边缘，哪些地方不是。梯度过小的地方不应该是边缘，而梯度过大的地方也不应被视为边缘 。\n\n想要检测图片中的圆首先想到，可以使用Hough圆变换来求解圆的圆心：\n首先理解霍夫线变换。霍夫线变换的基本理论，就是二进制图片中每一个点都可能属于某些线。如果将过(x0,y0)的这些条线参数化为一个斜率为a，截距为b的线，由于这条线过这一点，可以将a，b作为变量，画出这个点对应的所有直线参数，在a，b平面中的形式：\n![Snipaste_2020-06-24_17-49-13.jpg][11]\n也是一条直线，并且斜率与截距都是确定的。对于每一个图像中的非零点，都进行这样的操作，并且在a，b平面表示出来。当所有的非零点都表示出来，并进行累加后，a，b平面上数值比较大的点就是原图中可能的直线的参数。\n同理，霍夫圆变换与直线变换的原理相同，先将圆参数化，只不过这时需要三个参数，得到的参数平面将会是一个三位体中的坐标。这样也是可行的，只不过运算缓慢，通常使用霍夫梯度法来检测圆。圆心是圆所有法线的交汇点，通过梯度，确定这些法线，并求出他们的交点中最有可能的那一个，就能检测到圆心。随后再判断圆心到圆周上点的距离，相同或相近距离数量多，就能确定圆的半径，并且也能检验圆心选择的正确性。\n在思考过程中，又发现进行完canny边缘检测后，这张图像十分完美，故使用运算更为简便的方法进行圆检测。\n使用扫描算法检测这个圆的圆心，具体方法为：\n逐**列**遍历整个图像，若在每一**列**检测到两次白点，计算两个白点之间的距离，所有距离中最长的距离就是圆的直径，这时两个点中间的的那个点就是圆的圆心。\n\n## 实验结果 ##\n实验所使用代码（Matlab）如下：\n对于第一个视频：\n\n    clear,clc;\n    vidobj = VideoReader(['v1' '.avi']);\n    numFrames = vidobj.NumFrames;\n    sum_frame = zeros(533,800,3);\n     \n    origin_frame = im2double(read(vidobj,1));\n    frame = rgb2gray(origin_frame);\n    sector = frame(421:472,681:728);\n    se = strel('disk',1);\n    sector = imerode(sector,se);\n    [x_1,y_1] = find(sector == max(max(sector)));\n    sum_frame = origin_frame;\n     \n    for i = 2:numFrames\n        \n        origin_frame = im2double(read(vidobj,i));\n        frame = rgb2gray(origin_frame);\n        \n        %find offset\n        sector = frame(421:472,681:728);\n        se = strel('disk',1);\n        sector = imerode(sector,se);\n        [x,y] = find(sector == max(max(sector)));\n     \n        x_offset = x - x_1;\n        y_offset = y - y_1;\n        \n        if x_offset > 0 && y_offset > 0\n            origin_frame(1:533-x_offset,1:800-y_offset,:) = origin_frame(x_offset+1:533,y_offset+1:800,:);\n        elseif x_offset < 0 && y_offset > 0\n            origin_frame(-x_offset+1:533,1:800-y_offset,:) = origin_frame(1:533+x_offset,y_offset+1:800,:);\n        elseif x_offset > 0 && y_offset < 0\n            origin_frame(1:533-x_offset,-y_offset+1:800,:) = origin_frame(x_offset+1:533,1:800+y_offset,:);\n        elseif x_offset < 0 && y_offset < 0\n            origin_frame(-x_offset+1:533,-y_offset+1:800,:) = origin_frame(1:533+x_offset,1:800+y_offset,:);\n        end\n     \n        \n        sum_frame = sum_frame + origin_frame;\n    end\n     \n    sum_frame = sum_frame/60;\n    imshow(sum_frame);\n\n \n 对于第二个视频：\n\n    clear,clc;\n    vidobj = VideoReader(['v2' '.avi']);\n    numFrames = vidobj.NumFrames;\n    sum_frame = zeros(600,800,3);\n     \n    origin_frame = im2double(read(vidobj,1));\n    frame = rgb2gray(origin_frame);\n    result_frame = edge(frame,'canny',[0.3,0.5]);\n       \n    %find x,y\n    for j = 1:600\n        n = 0;\n        for k = 1:800\n            if result_frame(j,k) == 1\n                n = n+1;\n                if n == 1\n                    startpoint = k;\n                else\n                    if k - startpoint > 10\n                        maxVal(j,1) = k - startpoint;\n                        maxVal(j,2) = startpoint;\n                    else\n                        n = n-1;\n                    end\n                end\n            end\n            if k == 800 && (n == 1 || n == 0)\n                maxVal(j,1) = 0;\n                maxVal(j,2) = 0;\n            end\n        end\n    end\n    r = max(maxVal(:,1));\n    xpos = find(maxVal(:,1)==r);\n    xpos = int16(median(xpos));\n    ypos = maxVal(xpos,2) + int16(r/2);\n     \n    baseX = xpos;\n    baseY = ypos;\n     \n    sum_frame = origin_frame;\n     \n     \n    for i = 2:numFrames\n        origin_frame = im2double(read(vidobj,i));\n        frame = rgb2gray(origin_frame);\n        result_frame = edge(frame,'canny',[0.3,0.5]);\n       \n       %find x,y\n        for j = 1:600\n            n = 0;\n            for k = 1:800\n                if result_frame(j,k) == 1\n                    n = n+1;\n                    if n == 1\n                        startpoint = k;\n                    else\n                        if k - startpoint > 10\n                            maxVal(j,1) = k - startpoint;\n                            maxVal(j,2) = startpoint;\n                        else\n                            n = n-1;\n                        end\n                    end\n                end\n                if k == 800 && (n == 1 || n == 0)\n                    maxVal(j,1) = 0;\n                    maxVal(j,2) = 0;\n                end\n            end\n        end\n        r = max(maxVal(:,1));\n        xpos = find(maxVal(:,1)==r);\n        xpos = int16(median(xpos));\n        ypos = maxVal(xpos,2) + int16(r/2);\n        \n        x_offset = xpos - baseX;\n        y_offset = ypos - baseY;\n        \n         if x_offset > 0 && y_offset > 0\n            origin_frame(1:600-x_offset,1:800-y_offset,:) = origin_frame(x_offset+1:600,y_offset+1:800,:);\n        elseif x_offset < 0 && y_offset > 0\n            origin_frame(-x_offset+1:600,1:800-y_offset,:) = origin_frame(1:600+x_offset,y_offset+1:800,:);\n        elseif x_offset > 0 && y_offset < 0\n            origin_frame(1:600-x_offset,-y_offset+1:800,:) = origin_frame(x_offset+1:600,1:800+y_offset,:);\n        elseif x_offset < 0 && y_offset < 0\n            origin_frame(-x_offset+1:600,-y_offset+1:800,:) = origin_frame(1:600+x_offset,1:800+y_offset,:);\n        end\n        \n        sum_frame = sum_frame + origin_frame;\n     \n    end\n     \n     \n    sum_frame = sum_frame/60;\n    imshow(sum_frame);\n\n运行结果：\n![11.png][12]\n![12.png][13]\n可以看到，经过处理的图像噪声明显减少，并且并未受到观察者视角移动而出现动态模糊的影响。\n\n\n  [1]: /old_images/2020/06/2065354894.jpg\n  [2]: /old_images/2020/06/1235922839.jpg\n  [3]: /old_images/2020/06/4291764818.png\n  [4]: /old_images/2020/06/4074491988.png\n  [5]: /old_images/2020/06/2270251422.png\n  [6]: /old_images/2020/06/3183017928.png\n  [7]: /old_images/2020/06/3043677073.png\n  [8]: /old_images/2020/06/3043677073.png\n  [9]: /old_images/2020/06/1460216437.png\n  [10]: /old_images/2020/06/385346141.png\n  [11]: /old_images/2020/06/2947829010.jpg\n  [12]: /old_images/2020/06/142298572.png\n  [13]: /old_images/2020/06/2236493176.png\n","slug":"数字图像处理-课程设计","published":1,"updated":"2020-12-14T12:22:05.992Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0c8001w7p19cgf66d65","content":"<p>这是2020年春季学期我选的外专业课“数字图像处理”的课程设计，觉得比较有趣，故拿来记录留念。<br>在这门课程中，我第一次对图像处理进行实践，老师讲得非常好，推荐大家选这门课，能学到不少知识。</p>\n<h2 id=\"课设题目\"><a href=\"#课设题目\" class=\"headerlink\" title=\"课设题目\"></a>课设题目</h2><p>天文摄影师常常用照相机对夜晚的天空进行拍摄。v1.avi和v2.avi是两段持续几秒的夜晚天空景象的视频。可以注意到，夜晚较暗的光照使得视频中有明显的噪声。设计一个算法用于去除这两组图像数据中的噪声。<br>根据学过的图像处理知识可知，为了实现通过多帧图像数据获取一幅去除噪声后的图像，一种常用的方法是平均去噪法，即计算多帧图像的平均值。<br>分别计算这两组多帧图像数据的平均值，获得两幅去噪图像。<br>用上述方法可以发现去噪结果并不令人满意，原因是各帧图像间存在一定的偏移。请设计一个算法克服这种偏移同时获得较好的平均法去噪结果。</p>\n<h2 id=\"实验原理\"><a href=\"#实验原理\" class=\"headerlink\" title=\"实验原理\"></a>实验原理</h2><p>以视频中的第一帧为基准，逐帧遍历视频图片，由于图片位移间隔时间小，位移小，可以通过特殊方法获得当前帧图片与第一帧基准图片的相对运动大小，求出变换矩阵，通过变换的逆矩阵反向平移当前帧，即可认为观察者未运动，再使用平均值法去噪即可。<br>由于运动时间短，我们忽略运动的旋转部分，仅考虑平移运动。平移运动为二自由度，因此我们只需要找到两张图中一个对应的特征点，即可求得变换矩阵。</p>\n<h2 id=\"涉及的-MATLAB-函数\"><a href=\"#涉及的-MATLAB-函数\" class=\"headerlink\" title=\"涉及的 MATLAB 函数\"></a>涉及的 MATLAB 函数</h2><p><strong>VideoReader</strong>;<br>用于读取视频中的内容，将其每一帧都读出来。<br><strong>im2double</strong>；<br>将读入的图像转换为浮点形式，便于后期处理。<br><strong>rgb2gray</strong>；<br>将rgb图像转化为灰度图，便于后期处理。<br><strong>strel</strong>；<br>创建形态学操作的构造元素。<br><strong>imerode</strong>；<br>图像形态学腐蚀处理。<br><strong>edge</strong><br>边缘检测。<br><strong>find、max</strong>；<br>求得数组最大值并确定最大值的位置。 </p>\n<h2 id=\"实验内容与方法\"><a href=\"#实验内容与方法\" class=\"headerlink\" title=\"实验内容与方法\"></a>实验内容与方法</h2><p>首先观察两个视频，可以看出，视频中图像含有许多噪声：<br><img src=\"/old_images/2020/06/2065354894.jpg\" alt=\"Snipaste_2020-06-24_17-44-11.jpg\"><br><img src=\"/old_images/2020/06/1235922839.jpg\" alt=\"Snipaste_2020-06-24_17-44-38.jpg\"><br>这些噪声分布均匀且均值基本为0，可以通过均值滤波的方法消除噪声。但是，由于视频拍摄的抖动导致直接进行多帧均值滤波会使运动物体产生模糊，导致滤波效果变差：<br><img src=\"/old_images/2020/06/4291764818.png\" alt=\"3.png\"><br><img src=\"/old_images/2020/06/4074491988.png\" alt=\"4.png\"><br>因此，想到了使用特征点的方法求出前后两帧的相对运动关系，将后一帧移动到前一帧对应的位置，以消除运动产生的影响。<br>首先使用im2double与rgb2gray将图像处理为浮点型的单值图，之后对两段视频分别选择寻找特征点的方法。<br>对于第一个视频，使用缩小范围的寻找特征点的方法，在原图中找到一个sector区域，作为特征点运动的范围。选取这个位置要保证范围内有且仅有一个比较明亮的点，并且在运动过程中这个点不会跑出这个范围。<br>sector = frame(421:472,681:728);<br>处理前的sector<br><img src=\"/old_images/2020/06/2270251422.png\" alt=\"5.png\"><br>对其进行处理，首先进行形态学的腐蚀处理<br>形态学操作可以改变物体形状<br><img src=\"/old_images/2020/06/3183017928.png\" alt=\"6.png\"><br>形态学腐蚀就是求局部最小值的操作<br>se = strel(‘disk’,1);<br>sector = imerode(sector,se);<br>之后使用find函数找到图片中幅值最大的像素，以这个点的位置作为特征点。<br>[x_1,y_1] = find(sector == max(max(sector)));<br>处理后的sector<br><img src=\"/old_images/2020/06/3043677073.png\" alt=\"8.png\"><br>选择这个点作为特征点进行唯一判断。<br>对于第二个视频，我们使用图中月亮的圆心作为特征点。<br>首先对图像进行canny边缘检测：<br>result_frame = edge(frame,’canny’,[0.3,0.5]);<br><img src=\"/old_images/2020/06/1460216437.png\" alt=\"9.png\"><br>Canny边缘检测包含以下四个步骤：<br>1.高斯滤波<br>滤波的主要目的是降噪，一般的图像处理算法都需要先进行降噪。而高斯滤波主要使图像变得平滑（模糊），同时也有可能增大了边缘的宽度。<br>2.计算图片梯度<br>边缘一定就是图像中像素变化较快的区域，因此使用梯度就可以检测出边缘。我们使用sobel算子对图片进行滤波，就可以计算出它的梯度。<br><img src=\"/old_images/2020/06/385346141.png\" alt=\"10.png\"><br>3.过滤非最大值<br>在高斯滤波过程中，边缘有可能被放大了。这个步骤使用一个规则来过滤不是边缘的点，使边缘的宽度尽可能为1个像素点：如果一个像素点属于边缘，那么这个像素点在梯度方向上的梯度值是最大的。否则不是边缘，将灰度值设为0。这样就可以使检测到的边缘始终是一个像素。<br>4.使用上下阈值确定边缘<br>通过给定的上下阈值确定最终哪些地方属于边缘，哪些地方不是。梯度过小的地方不应该是边缘，而梯度过大的地方也不应被视为边缘 。</p>\n<p>想要检测图片中的圆首先想到，可以使用Hough圆变换来求解圆的圆心：<br>首先理解霍夫线变换。霍夫线变换的基本理论，就是二进制图片中每一个点都可能属于某些线。如果将过(x0,y0)的这些条线参数化为一个斜率为a，截距为b的线，由于这条线过这一点，可以将a，b作为变量，画出这个点对应的所有直线参数，在a，b平面中的形式：<br><img src=\"/old_images/2020/06/2947829010.jpg\" alt=\"Snipaste_2020-06-24_17-49-13.jpg\"><br>也是一条直线，并且斜率与截距都是确定的。对于每一个图像中的非零点，都进行这样的操作，并且在a，b平面表示出来。当所有的非零点都表示出来，并进行累加后，a，b平面上数值比较大的点就是原图中可能的直线的参数。<br>同理，霍夫圆变换与直线变换的原理相同，先将圆参数化，只不过这时需要三个参数，得到的参数平面将会是一个三位体中的坐标。这样也是可行的，只不过运算缓慢，通常使用霍夫梯度法来检测圆。圆心是圆所有法线的交汇点，通过梯度，确定这些法线，并求出他们的交点中最有可能的那一个，就能检测到圆心。随后再判断圆心到圆周上点的距离，相同或相近距离数量多，就能确定圆的半径，并且也能检验圆心选择的正确性。<br>在思考过程中，又发现进行完canny边缘检测后，这张图像十分完美，故使用运算更为简便的方法进行圆检测。<br>使用扫描算法检测这个圆的圆心，具体方法为：<br>逐<strong>列</strong>遍历整个图像，若在每一<strong>列</strong>检测到两次白点，计算两个白点之间的距离，所有距离中最长的距离就是圆的直径，这时两个点中间的的那个点就是圆的圆心。</p>\n<h2 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h2><p>实验所使用代码（Matlab）如下：<br>对于第一个视频：</p>\n<pre><code>clear,clc;\nvidobj = VideoReader([&#39;v1&#39; &#39;.avi&#39;]);\nnumFrames = vidobj.NumFrames;\nsum_frame = zeros(533,800,3);\n\norigin_frame = im2double(read(vidobj,1));\nframe = rgb2gray(origin_frame);\nsector = frame(421:472,681:728);\nse = strel(&#39;disk&#39;,1);\nsector = imerode(sector,se);\n[x_1,y_1] = find(sector == max(max(sector)));\nsum_frame = origin_frame;\n\nfor i = 2:numFrames\n\n    origin_frame = im2double(read(vidobj,i));\n    frame = rgb2gray(origin_frame);\n\n    %find offset\n    sector = frame(421:472,681:728);\n    se = strel(&#39;disk&#39;,1);\n    sector = imerode(sector,se);\n    [x,y] = find(sector == max(max(sector)));\n\n    x_offset = x - x_1;\n    y_offset = y - y_1;\n\n    if x_offset &gt; 0 &amp;&amp; y_offset &gt; 0\n        origin_frame(1:533-x_offset,1:800-y_offset,:) = origin_frame(x_offset+1:533,y_offset+1:800,:);\n    elseif x_offset &lt; 0 &amp;&amp; y_offset &gt; 0\n        origin_frame(-x_offset+1:533,1:800-y_offset,:) = origin_frame(1:533+x_offset,y_offset+1:800,:);\n    elseif x_offset &gt; 0 &amp;&amp; y_offset &lt; 0\n        origin_frame(1:533-x_offset,-y_offset+1:800,:) = origin_frame(x_offset+1:533,1:800+y_offset,:);\n    elseif x_offset &lt; 0 &amp;&amp; y_offset &lt; 0\n        origin_frame(-x_offset+1:533,-y_offset+1:800,:) = origin_frame(1:533+x_offset,1:800+y_offset,:);\n    end\n\n\n    sum_frame = sum_frame + origin_frame;\nend\n\nsum_frame = sum_frame/60;\nimshow(sum_frame);</code></pre>\n<p> 对于第二个视频：</p>\n<pre><code>clear,clc;\nvidobj = VideoReader([&#39;v2&#39; &#39;.avi&#39;]);\nnumFrames = vidobj.NumFrames;\nsum_frame = zeros(600,800,3);\n\norigin_frame = im2double(read(vidobj,1));\nframe = rgb2gray(origin_frame);\nresult_frame = edge(frame,&#39;canny&#39;,[0.3,0.5]);\n\n%find x,y\nfor j = 1:600\n    n = 0;\n    for k = 1:800\n        if result_frame(j,k) == 1\n            n = n+1;\n            if n == 1\n                startpoint = k;\n            else\n                if k - startpoint &gt; 10\n                    maxVal(j,1) = k - startpoint;\n                    maxVal(j,2) = startpoint;\n                else\n                    n = n-1;\n                end\n            end\n        end\n        if k == 800 &amp;&amp; (n == 1 || n == 0)\n            maxVal(j,1) = 0;\n            maxVal(j,2) = 0;\n        end\n    end\nend\nr = max(maxVal(:,1));\nxpos = find(maxVal(:,1)==r);\nxpos = int16(median(xpos));\nypos = maxVal(xpos,2) + int16(r/2);\n\nbaseX = xpos;\nbaseY = ypos;\n\nsum_frame = origin_frame;\n\n\nfor i = 2:numFrames\n    origin_frame = im2double(read(vidobj,i));\n    frame = rgb2gray(origin_frame);\n    result_frame = edge(frame,&#39;canny&#39;,[0.3,0.5]);\n\n   %find x,y\n    for j = 1:600\n        n = 0;\n        for k = 1:800\n            if result_frame(j,k) == 1\n                n = n+1;\n                if n == 1\n                    startpoint = k;\n                else\n                    if k - startpoint &gt; 10\n                        maxVal(j,1) = k - startpoint;\n                        maxVal(j,2) = startpoint;\n                    else\n                        n = n-1;\n                    end\n                end\n            end\n            if k == 800 &amp;&amp; (n == 1 || n == 0)\n                maxVal(j,1) = 0;\n                maxVal(j,2) = 0;\n            end\n        end\n    end\n    r = max(maxVal(:,1));\n    xpos = find(maxVal(:,1)==r);\n    xpos = int16(median(xpos));\n    ypos = maxVal(xpos,2) + int16(r/2);\n\n    x_offset = xpos - baseX;\n    y_offset = ypos - baseY;\n\n     if x_offset &gt; 0 &amp;&amp; y_offset &gt; 0\n        origin_frame(1:600-x_offset,1:800-y_offset,:) = origin_frame(x_offset+1:600,y_offset+1:800,:);\n    elseif x_offset &lt; 0 &amp;&amp; y_offset &gt; 0\n        origin_frame(-x_offset+1:600,1:800-y_offset,:) = origin_frame(1:600+x_offset,y_offset+1:800,:);\n    elseif x_offset &gt; 0 &amp;&amp; y_offset &lt; 0\n        origin_frame(1:600-x_offset,-y_offset+1:800,:) = origin_frame(x_offset+1:600,1:800+y_offset,:);\n    elseif x_offset &lt; 0 &amp;&amp; y_offset &lt; 0\n        origin_frame(-x_offset+1:600,-y_offset+1:800,:) = origin_frame(1:600+x_offset,1:800+y_offset,:);\n    end\n\n    sum_frame = sum_frame + origin_frame;\n\nend\n\n\nsum_frame = sum_frame/60;\nimshow(sum_frame);</code></pre>\n<p>运行结果：<br><img src=\"/old_images/2020/06/142298572.png\" alt=\"11.png\"><br><img src=\"/old_images/2020/06/2236493176.png\" alt=\"12.png\"><br>可以看到，经过处理的图像噪声明显减少，并且并未受到观察者视角移动而出现动态模糊的影响。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这是2020年春季学期我选的外专业课“数字图像处理”的课程设计，觉得比较有趣，故拿来记录留念。<br>在这门课程中，我第一次对图像处理进行实践，老师讲得非常好，推荐大家选这门课，能学到不少知识。</p>\n<h2 id=\"课设题目\"><a href=\"#课设题目\" class=\"headerlink\" title=\"课设题目\"></a>课设题目</h2><p>天文摄影师常常用照相机对夜晚的天空进行拍摄。v1.avi和v2.avi是两段持续几秒的夜晚天空景象的视频。可以注意到，夜晚较暗的光照使得视频中有明显的噪声。设计一个算法用于去除这两组图像数据中的噪声。<br>根据学过的图像处理知识可知，为了实现通过多帧图像数据获取一幅去除噪声后的图像，一种常用的方法是平均去噪法，即计算多帧图像的平均值。<br>分别计算这两组多帧图像数据的平均值，获得两幅去噪图像。<br>用上述方法可以发现去噪结果并不令人满意，原因是各帧图像间存在一定的偏移。请设计一个算法克服这种偏移同时获得较好的平均法去噪结果。</p>\n<h2 id=\"实验原理\"><a href=\"#实验原理\" class=\"headerlink\" title=\"实验原理\"></a>实验原理</h2><p>以视频中的第一帧为基准，逐帧遍历视频图片，由于图片位移间隔时间小，位移小，可以通过特殊方法获得当前帧图片与第一帧基准图片的相对运动大小，求出变换矩阵，通过变换的逆矩阵反向平移当前帧，即可认为观察者未运动，再使用平均值法去噪即可。<br>由于运动时间短，我们忽略运动的旋转部分，仅考虑平移运动。平移运动为二自由度，因此我们只需要找到两张图中一个对应的特征点，即可求得变换矩阵。</p>\n<h2 id=\"涉及的-MATLAB-函数\"><a href=\"#涉及的-MATLAB-函数\" class=\"headerlink\" title=\"涉及的 MATLAB 函数\"></a>涉及的 MATLAB 函数</h2><p><strong>VideoReader</strong>;<br>用于读取视频中的内容，将其每一帧都读出来。<br><strong>im2double</strong>；<br>将读入的图像转换为浮点形式，便于后期处理。<br><strong>rgb2gray</strong>；<br>将rgb图像转化为灰度图，便于后期处理。<br><strong>strel</strong>；<br>创建形态学操作的构造元素。<br><strong>imerode</strong>；<br>图像形态学腐蚀处理。<br><strong>edge</strong><br>边缘检测。<br><strong>find、max</strong>；<br>求得数组最大值并确定最大值的位置。 </p>\n<h2 id=\"实验内容与方法\"><a href=\"#实验内容与方法\" class=\"headerlink\" title=\"实验内容与方法\"></a>实验内容与方法</h2><p>首先观察两个视频，可以看出，视频中图像含有许多噪声：<br><img src=\"/old_images/2020/06/2065354894.jpg\" alt=\"Snipaste_2020-06-24_17-44-11.jpg\"><br><img src=\"/old_images/2020/06/1235922839.jpg\" alt=\"Snipaste_2020-06-24_17-44-38.jpg\"><br>这些噪声分布均匀且均值基本为0，可以通过均值滤波的方法消除噪声。但是，由于视频拍摄的抖动导致直接进行多帧均值滤波会使运动物体产生模糊，导致滤波效果变差：<br><img src=\"/old_images/2020/06/4291764818.png\" alt=\"3.png\"><br><img src=\"/old_images/2020/06/4074491988.png\" alt=\"4.png\"><br>因此，想到了使用特征点的方法求出前后两帧的相对运动关系，将后一帧移动到前一帧对应的位置，以消除运动产生的影响。<br>首先使用im2double与rgb2gray将图像处理为浮点型的单值图，之后对两段视频分别选择寻找特征点的方法。<br>对于第一个视频，使用缩小范围的寻找特征点的方法，在原图中找到一个sector区域，作为特征点运动的范围。选取这个位置要保证范围内有且仅有一个比较明亮的点，并且在运动过程中这个点不会跑出这个范围。<br>sector = frame(421:472,681:728);<br>处理前的sector<br><img src=\"/old_images/2020/06/2270251422.png\" alt=\"5.png\"><br>对其进行处理，首先进行形态学的腐蚀处理<br>形态学操作可以改变物体形状<br><img src=\"/old_images/2020/06/3183017928.png\" alt=\"6.png\"><br>形态学腐蚀就是求局部最小值的操作<br>se = strel(‘disk’,1);<br>sector = imerode(sector,se);<br>之后使用find函数找到图片中幅值最大的像素，以这个点的位置作为特征点。<br>[x_1,y_1] = find(sector == max(max(sector)));<br>处理后的sector<br><img src=\"/old_images/2020/06/3043677073.png\" alt=\"8.png\"><br>选择这个点作为特征点进行唯一判断。<br>对于第二个视频，我们使用图中月亮的圆心作为特征点。<br>首先对图像进行canny边缘检测：<br>result_frame = edge(frame,’canny’,[0.3,0.5]);<br><img src=\"/old_images/2020/06/1460216437.png\" alt=\"9.png\"><br>Canny边缘检测包含以下四个步骤：<br>1.高斯滤波<br>滤波的主要目的是降噪，一般的图像处理算法都需要先进行降噪。而高斯滤波主要使图像变得平滑（模糊），同时也有可能增大了边缘的宽度。<br>2.计算图片梯度<br>边缘一定就是图像中像素变化较快的区域，因此使用梯度就可以检测出边缘。我们使用sobel算子对图片进行滤波，就可以计算出它的梯度。<br><img src=\"/old_images/2020/06/385346141.png\" alt=\"10.png\"><br>3.过滤非最大值<br>在高斯滤波过程中，边缘有可能被放大了。这个步骤使用一个规则来过滤不是边缘的点，使边缘的宽度尽可能为1个像素点：如果一个像素点属于边缘，那么这个像素点在梯度方向上的梯度值是最大的。否则不是边缘，将灰度值设为0。这样就可以使检测到的边缘始终是一个像素。<br>4.使用上下阈值确定边缘<br>通过给定的上下阈值确定最终哪些地方属于边缘，哪些地方不是。梯度过小的地方不应该是边缘，而梯度过大的地方也不应被视为边缘 。</p>\n<p>想要检测图片中的圆首先想到，可以使用Hough圆变换来求解圆的圆心：<br>首先理解霍夫线变换。霍夫线变换的基本理论，就是二进制图片中每一个点都可能属于某些线。如果将过(x0,y0)的这些条线参数化为一个斜率为a，截距为b的线，由于这条线过这一点，可以将a，b作为变量，画出这个点对应的所有直线参数，在a，b平面中的形式：<br><img src=\"/old_images/2020/06/2947829010.jpg\" alt=\"Snipaste_2020-06-24_17-49-13.jpg\"><br>也是一条直线，并且斜率与截距都是确定的。对于每一个图像中的非零点，都进行这样的操作，并且在a，b平面表示出来。当所有的非零点都表示出来，并进行累加后，a，b平面上数值比较大的点就是原图中可能的直线的参数。<br>同理，霍夫圆变换与直线变换的原理相同，先将圆参数化，只不过这时需要三个参数，得到的参数平面将会是一个三位体中的坐标。这样也是可行的，只不过运算缓慢，通常使用霍夫梯度法来检测圆。圆心是圆所有法线的交汇点，通过梯度，确定这些法线，并求出他们的交点中最有可能的那一个，就能检测到圆心。随后再判断圆心到圆周上点的距离，相同或相近距离数量多，就能确定圆的半径，并且也能检验圆心选择的正确性。<br>在思考过程中，又发现进行完canny边缘检测后，这张图像十分完美，故使用运算更为简便的方法进行圆检测。<br>使用扫描算法检测这个圆的圆心，具体方法为：<br>逐<strong>列</strong>遍历整个图像，若在每一<strong>列</strong>检测到两次白点，计算两个白点之间的距离，所有距离中最长的距离就是圆的直径，这时两个点中间的的那个点就是圆的圆心。</p>\n<h2 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h2><p>实验所使用代码（Matlab）如下：<br>对于第一个视频：</p>\n<pre><code>clear,clc;\nvidobj = VideoReader([&#39;v1&#39; &#39;.avi&#39;]);\nnumFrames = vidobj.NumFrames;\nsum_frame = zeros(533,800,3);\n\norigin_frame = im2double(read(vidobj,1));\nframe = rgb2gray(origin_frame);\nsector = frame(421:472,681:728);\nse = strel(&#39;disk&#39;,1);\nsector = imerode(sector,se);\n[x_1,y_1] = find(sector == max(max(sector)));\nsum_frame = origin_frame;\n\nfor i = 2:numFrames\n\n    origin_frame = im2double(read(vidobj,i));\n    frame = rgb2gray(origin_frame);\n\n    %find offset\n    sector = frame(421:472,681:728);\n    se = strel(&#39;disk&#39;,1);\n    sector = imerode(sector,se);\n    [x,y] = find(sector == max(max(sector)));\n\n    x_offset = x - x_1;\n    y_offset = y - y_1;\n\n    if x_offset &gt; 0 &amp;&amp; y_offset &gt; 0\n        origin_frame(1:533-x_offset,1:800-y_offset,:) = origin_frame(x_offset+1:533,y_offset+1:800,:);\n    elseif x_offset &lt; 0 &amp;&amp; y_offset &gt; 0\n        origin_frame(-x_offset+1:533,1:800-y_offset,:) = origin_frame(1:533+x_offset,y_offset+1:800,:);\n    elseif x_offset &gt; 0 &amp;&amp; y_offset &lt; 0\n        origin_frame(1:533-x_offset,-y_offset+1:800,:) = origin_frame(x_offset+1:533,1:800+y_offset,:);\n    elseif x_offset &lt; 0 &amp;&amp; y_offset &lt; 0\n        origin_frame(-x_offset+1:533,-y_offset+1:800,:) = origin_frame(1:533+x_offset,1:800+y_offset,:);\n    end\n\n\n    sum_frame = sum_frame + origin_frame;\nend\n\nsum_frame = sum_frame/60;\nimshow(sum_frame);</code></pre>\n<p> 对于第二个视频：</p>\n<pre><code>clear,clc;\nvidobj = VideoReader([&#39;v2&#39; &#39;.avi&#39;]);\nnumFrames = vidobj.NumFrames;\nsum_frame = zeros(600,800,3);\n\norigin_frame = im2double(read(vidobj,1));\nframe = rgb2gray(origin_frame);\nresult_frame = edge(frame,&#39;canny&#39;,[0.3,0.5]);\n\n%find x,y\nfor j = 1:600\n    n = 0;\n    for k = 1:800\n        if result_frame(j,k) == 1\n            n = n+1;\n            if n == 1\n                startpoint = k;\n            else\n                if k - startpoint &gt; 10\n                    maxVal(j,1) = k - startpoint;\n                    maxVal(j,2) = startpoint;\n                else\n                    n = n-1;\n                end\n            end\n        end\n        if k == 800 &amp;&amp; (n == 1 || n == 0)\n            maxVal(j,1) = 0;\n            maxVal(j,2) = 0;\n        end\n    end\nend\nr = max(maxVal(:,1));\nxpos = find(maxVal(:,1)==r);\nxpos = int16(median(xpos));\nypos = maxVal(xpos,2) + int16(r/2);\n\nbaseX = xpos;\nbaseY = ypos;\n\nsum_frame = origin_frame;\n\n\nfor i = 2:numFrames\n    origin_frame = im2double(read(vidobj,i));\n    frame = rgb2gray(origin_frame);\n    result_frame = edge(frame,&#39;canny&#39;,[0.3,0.5]);\n\n   %find x,y\n    for j = 1:600\n        n = 0;\n        for k = 1:800\n            if result_frame(j,k) == 1\n                n = n+1;\n                if n == 1\n                    startpoint = k;\n                else\n                    if k - startpoint &gt; 10\n                        maxVal(j,1) = k - startpoint;\n                        maxVal(j,2) = startpoint;\n                    else\n                        n = n-1;\n                    end\n                end\n            end\n            if k == 800 &amp;&amp; (n == 1 || n == 0)\n                maxVal(j,1) = 0;\n                maxVal(j,2) = 0;\n            end\n        end\n    end\n    r = max(maxVal(:,1));\n    xpos = find(maxVal(:,1)==r);\n    xpos = int16(median(xpos));\n    ypos = maxVal(xpos,2) + int16(r/2);\n\n    x_offset = xpos - baseX;\n    y_offset = ypos - baseY;\n\n     if x_offset &gt; 0 &amp;&amp; y_offset &gt; 0\n        origin_frame(1:600-x_offset,1:800-y_offset,:) = origin_frame(x_offset+1:600,y_offset+1:800,:);\n    elseif x_offset &lt; 0 &amp;&amp; y_offset &gt; 0\n        origin_frame(-x_offset+1:600,1:800-y_offset,:) = origin_frame(1:600+x_offset,y_offset+1:800,:);\n    elseif x_offset &gt; 0 &amp;&amp; y_offset &lt; 0\n        origin_frame(1:600-x_offset,-y_offset+1:800,:) = origin_frame(x_offset+1:600,1:800+y_offset,:);\n    elseif x_offset &lt; 0 &amp;&amp; y_offset &lt; 0\n        origin_frame(-x_offset+1:600,-y_offset+1:800,:) = origin_frame(1:600+x_offset,1:800+y_offset,:);\n    end\n\n    sum_frame = sum_frame + origin_frame;\n\nend\n\n\nsum_frame = sum_frame/60;\nimshow(sum_frame);</code></pre>\n<p>运行结果：<br><img src=\"/old_images/2020/06/142298572.png\" alt=\"11.png\"><br><img src=\"/old_images/2020/06/2236493176.png\" alt=\"12.png\"><br>可以看到，经过处理的图像噪声明显减少，并且并未受到观察者视角移动而出现动态模糊的影响。</p>\n"},{"title":"欢迎新的小伙伴加入Star Blog，这里有注册方法哦！","date":"2020-06-11T03:14:00.000Z","toc":true,"_content":"欢迎新的小伙伴加入，在这里成为贡献者，分享自己的学习历程，心得体会，感想感言，任何人都可以在这里注册发文哦!\n当然身为网站管理员，我也会定期检查站内违法言论进行封禁，请大家注意语言文明！\n由于这是一个阿里学生服务器搭起来的网站，可能会面临资金问题\n（没错，就是我供不起了（＞人＜；）），到时候会把服务器硬盘内的数据存为硬盘快照分享出来，大家不必担心数据丢失的问题。\n还有就是本人学识尚浅，对这些问题仍处于学习阶段，在文章中难免有错误之处，如果大家认为内容有误，欢迎前来指正，如果大家在学习中遇到问题，欢迎与我一起讨论。\n\n大家记得在文章中写出文章的作者是谁哦o(*￣▽￣*)o\n\n之后就是最重要的注册方式，看这里！！\n\n[点我注册！(❤ ω ❤)][1]\n[点我注册！(❤ ω ❤)][1]\n[点我注册！(❤ ω ❤)][1]\n[点我注册！(❤ ω ❤)][1]\n\n\n  [1]: http://www.starydy.xyz/admin/\n","source":"_posts/欢迎新的小伙伴加入Star Blog，这里有注册方法哦！.md","raw":"title: 欢迎新的小伙伴加入Star Blog，这里有注册方法哦！\ndate: 2020-06-11 11:14:00\ncategories: 日常\ntags: []\ntoc: true\n---\n欢迎新的小伙伴加入，在这里成为贡献者，分享自己的学习历程，心得体会，感想感言，任何人都可以在这里注册发文哦!\n当然身为网站管理员，我也会定期检查站内违法言论进行封禁，请大家注意语言文明！\n由于这是一个阿里学生服务器搭起来的网站，可能会面临资金问题\n（没错，就是我供不起了（＞人＜；）），到时候会把服务器硬盘内的数据存为硬盘快照分享出来，大家不必担心数据丢失的问题。\n还有就是本人学识尚浅，对这些问题仍处于学习阶段，在文章中难免有错误之处，如果大家认为内容有误，欢迎前来指正，如果大家在学习中遇到问题，欢迎与我一起讨论。\n\n大家记得在文章中写出文章的作者是谁哦o(*￣▽￣*)o\n\n之后就是最重要的注册方式，看这里！！\n\n[点我注册！(❤ ω ❤)][1]\n[点我注册！(❤ ω ❤)][1]\n[点我注册！(❤ ω ❤)][1]\n[点我注册！(❤ ω ❤)][1]\n\n\n  [1]: http://www.starydy.xyz/admin/\n","slug":"欢迎新的小伙伴加入Star Blog，这里有注册方法哦！","published":1,"updated":"2020-12-14T12:21:10.549Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0c8001y7p19b3ez5k4b","content":"<p>欢迎新的小伙伴加入，在这里成为贡献者，分享自己的学习历程，心得体会，感想感言，任何人都可以在这里注册发文哦!<br>当然身为网站管理员，我也会定期检查站内违法言论进行封禁，请大家注意语言文明！<br>由于这是一个阿里学生服务器搭起来的网站，可能会面临资金问题<br>（没错，就是我供不起了（＞人＜；）），到时候会把服务器硬盘内的数据存为硬盘快照分享出来，大家不必担心数据丢失的问题。<br>还有就是本人学识尚浅，对这些问题仍处于学习阶段，在文章中难免有错误之处，如果大家认为内容有误，欢迎前来指正，如果大家在学习中遇到问题，欢迎与我一起讨论。</p>\n<p>大家记得在文章中写出文章的作者是谁哦o(<em>￣▽￣</em>)o</p>\n<p>之后就是最重要的注册方式，看这里！！</p>\n<p><a href=\"http://www.starydy.xyz/admin/\">点我注册！(❤ ω ❤)</a><br><a href=\"http://www.starydy.xyz/admin/\">点我注册！(❤ ω ❤)</a><br><a href=\"http://www.starydy.xyz/admin/\">点我注册！(❤ ω ❤)</a><br><a href=\"http://www.starydy.xyz/admin/\">点我注册！(❤ ω ❤)</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>欢迎新的小伙伴加入，在这里成为贡献者，分享自己的学习历程，心得体会，感想感言，任何人都可以在这里注册发文哦!<br>当然身为网站管理员，我也会定期检查站内违法言论进行封禁，请大家注意语言文明！<br>由于这是一个阿里学生服务器搭起来的网站，可能会面临资金问题<br>（没错，就是我供不起了（＞人＜；）），到时候会把服务器硬盘内的数据存为硬盘快照分享出来，大家不必担心数据丢失的问题。<br>还有就是本人学识尚浅，对这些问题仍处于学习阶段，在文章中难免有错误之处，如果大家认为内容有误，欢迎前来指正，如果大家在学习中遇到问题，欢迎与我一起讨论。</p>\n<p>大家记得在文章中写出文章的作者是谁哦o(<em>￣▽￣</em>)o</p>\n<p>之后就是最重要的注册方式，看这里！！</p>\n<p><a href=\"http://www.starydy.xyz/admin/\">点我注册！(❤ ω ❤)</a><br><a href=\"http://www.starydy.xyz/admin/\">点我注册！(❤ ω ❤)</a><br><a href=\"http://www.starydy.xyz/admin/\">点我注册！(❤ ω ❤)</a><br><a href=\"http://www.starydy.xyz/admin/\">点我注册！(❤ ω ❤)</a></p>\n"},{"title":"毕设开坑，欢迎大家关注","date":"2020-11-28T23:14:00.000Z","top":true,"toc":true,"_content":"好久没更新，这次开了毕设坑，欢迎大家关注我的github项目：\n[SSVIO][1]\n![2020-11-29 15-12-45 的屏幕截图.png][2]\n\n\n  [1]: https://github.com/StarRealMan/SSVIO\n  [2]: /old_images/2020/11/1735837242.png\n","source":"_posts/毕设开坑，欢迎大家关注.md","raw":"title: 毕设开坑，欢迎大家关注\ndate: 2020-11-29 07:14:00\ncategories: 日常\ntags: []\ntop: true\ntoc: true\n---\n好久没更新，这次开了毕设坑，欢迎大家关注我的github项目：\n[SSVIO][1]\n![2020-11-29 15-12-45 的屏幕截图.png][2]\n\n\n  [1]: https://github.com/StarRealMan/SSVIO\n  [2]: /old_images/2020/11/1735837242.png\n","slug":"毕设开坑，欢迎大家关注","published":1,"updated":"2020-12-14T12:20:39.386Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0c900207p19h9vthrsh","content":"<p>好久没更新，这次开了毕设坑，欢迎大家关注我的github项目：<br><a href=\"https://github.com/StarRealMan/SSVIO\">SSVIO</a><br><img src=\"/old_images/2020/11/1735837242.png\" alt=\"2020-11-29 15-12-45 的屏幕截图.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>好久没更新，这次开了毕设坑，欢迎大家关注我的github项目：<br><a href=\"https://github.com/StarRealMan/SSVIO\">SSVIO</a><br><img src=\"/old_images/2020/11/1735837242.png\" alt=\"2020-11-29 15-12-45 的屏幕截图.png\"></p>\n"},{"title":"浅浅浅浅浅谈计算机求数值解的方法","date":"2020-05-08T23:01:00.000Z","toc":true,"_content":"## 梯度下降法 ##\n\n之前最小二乘的那篇文章中，我们知道了最优化的最基本方法就是求出cost function的极值点。\n对于简单的、已知表达式的cost function（就比如最小二乘），我们可以直接通过偏导数等零的方法求得极值点。\n但是对于表达式复杂、甚至无法获取表达式的cost function，求偏导的方法就无能为力了，我们只能借助计算机这个不是很聪明但是算的很快的工具，通过迭代的方法，求出极值点的近似解。\n\n怎么个迭代法呢？\n极小值点，就是附近一片区域中函数值最小的那一个点，将函数看作一块地面，我们如果在极小值附近区域放上一个小球，小球一定可以滚落到极小值点的位置。如果我们使用计算机来模拟这个小球的行为，不就能够得到极小值点了吗\n伟大的科学家们利用这个原理，发明了梯度下降的方法来求解极小值点：\n\n 1. 将一个初始点送入梯度下降算法（小球放在初始某个位置）\n 2. 使用差分代替微分，求出初始点位置函数的梯度（地面的梯度方向即为小球下降趋势的方向）\n 3. 使当前这个点向梯度**反方向**前进，速度为梯度大小，时间为步长τ，得到一个新的点（**近似**模拟小球下降的过程）\n 4. 将新得到的点作为起始点，重复执行此过程，直到梯度大小小于某个阈值δ，停止迭代，得到结果（小球稳定在地面的最低点处）\n![v2-05bafbc0557270f96773e544b2ae683e_hd (1).gif][1]\n\n实际上这是一个很简单的算法，我们只需要规定步长τ与阈值δ就能求出函数的极值点\n其中，步长τ越大，算法收敛的也就越快，但是在步长过大时可能出现在极值点附近震荡而无法进入阈值范围而陷入死循环；\n而阈值δ越大，限制条件相当于越宽松，收敛也会更容易，但是精度相对变差，δ越小则反之。\n\n这个简单的算法也有着诸多限制条件：\n\n 1. 目标函数的点的细度一定要足够，否则求取梯度会不精确，极值点的精度也会变差，必要时可能需要插值\n 2. 目标函数在一定范围内一定要平滑，即梯度函数要连续，不能出现梯度的突变，否则不能收敛\n 3. 目标函数在一定范围内一定要连续\n 4. 没有全局性。可能会求得局部极小值，即最优化问题中的局部最优解\n\n![无标题.png][2]\n\n\n## 牛顿迭代法 ##\n\n同梯度下降法一样得思路，牛顿迭代法是用来解决方程的解的问题的\n\n我们通过对f(x)的迭代，可以的出一元方程f(x) = 0的近似数值解，方法如下：\n\n 1. 同样，选取起始点\n 2. 求出起始点位置函数f(x)导数\n 3. 向着导数反方向移动该点，步长τ，得到新的点\n 4. 将新点当作初始点，迭代运算，直至新点处函数值小于阈值δ，得到方程近似解\n![f703738da97739126a4f98f3ff198618367ae233.jpg][3]\n\n可以看到梯度下降与牛顿迭代具有很强的相似性，二者的方法与性质也大体类似，本质上，二者都是通过对f(x)泰勒展开式进行近似（取一阶导数项），通过近似式进行迭代求解。这种迭代求数值解的思想值得我们借鉴与学习。\n\n\n\n  [1]: /old_images/2020/05/4174507093.gif\n  [2]: /old_images/2020/05/3433924516.png\n  [3]: /old_images/2020/05/557249455.jpg\n","source":"_posts/浅浅浅浅浅谈计算机求数值解的方法.md","raw":"title: 浅浅浅浅浅谈计算机求数值解的方法\ndate: 2020-05-09 07:01:00\ncategories: 物数\ntags: []\ntoc: true\n---\n## 梯度下降法 ##\n\n之前最小二乘的那篇文章中，我们知道了最优化的最基本方法就是求出cost function的极值点。\n对于简单的、已知表达式的cost function（就比如最小二乘），我们可以直接通过偏导数等零的方法求得极值点。\n但是对于表达式复杂、甚至无法获取表达式的cost function，求偏导的方法就无能为力了，我们只能借助计算机这个不是很聪明但是算的很快的工具，通过迭代的方法，求出极值点的近似解。\n\n怎么个迭代法呢？\n极小值点，就是附近一片区域中函数值最小的那一个点，将函数看作一块地面，我们如果在极小值附近区域放上一个小球，小球一定可以滚落到极小值点的位置。如果我们使用计算机来模拟这个小球的行为，不就能够得到极小值点了吗\n伟大的科学家们利用这个原理，发明了梯度下降的方法来求解极小值点：\n\n 1. 将一个初始点送入梯度下降算法（小球放在初始某个位置）\n 2. 使用差分代替微分，求出初始点位置函数的梯度（地面的梯度方向即为小球下降趋势的方向）\n 3. 使当前这个点向梯度**反方向**前进，速度为梯度大小，时间为步长τ，得到一个新的点（**近似**模拟小球下降的过程）\n 4. 将新得到的点作为起始点，重复执行此过程，直到梯度大小小于某个阈值δ，停止迭代，得到结果（小球稳定在地面的最低点处）\n![v2-05bafbc0557270f96773e544b2ae683e_hd (1).gif][1]\n\n实际上这是一个很简单的算法，我们只需要规定步长τ与阈值δ就能求出函数的极值点\n其中，步长τ越大，算法收敛的也就越快，但是在步长过大时可能出现在极值点附近震荡而无法进入阈值范围而陷入死循环；\n而阈值δ越大，限制条件相当于越宽松，收敛也会更容易，但是精度相对变差，δ越小则反之。\n\n这个简单的算法也有着诸多限制条件：\n\n 1. 目标函数的点的细度一定要足够，否则求取梯度会不精确，极值点的精度也会变差，必要时可能需要插值\n 2. 目标函数在一定范围内一定要平滑，即梯度函数要连续，不能出现梯度的突变，否则不能收敛\n 3. 目标函数在一定范围内一定要连续\n 4. 没有全局性。可能会求得局部极小值，即最优化问题中的局部最优解\n\n![无标题.png][2]\n\n\n## 牛顿迭代法 ##\n\n同梯度下降法一样得思路，牛顿迭代法是用来解决方程的解的问题的\n\n我们通过对f(x)的迭代，可以的出一元方程f(x) = 0的近似数值解，方法如下：\n\n 1. 同样，选取起始点\n 2. 求出起始点位置函数f(x)导数\n 3. 向着导数反方向移动该点，步长τ，得到新的点\n 4. 将新点当作初始点，迭代运算，直至新点处函数值小于阈值δ，得到方程近似解\n![f703738da97739126a4f98f3ff198618367ae233.jpg][3]\n\n可以看到梯度下降与牛顿迭代具有很强的相似性，二者的方法与性质也大体类似，本质上，二者都是通过对f(x)泰勒展开式进行近似（取一阶导数项），通过近似式进行迭代求解。这种迭代求数值解的思想值得我们借鉴与学习。\n\n\n\n  [1]: /old_images/2020/05/4174507093.gif\n  [2]: /old_images/2020/05/3433924516.png\n  [3]: /old_images/2020/05/557249455.jpg\n","slug":"浅浅浅浅浅谈计算机求数值解的方法","published":1,"updated":"2020-12-14T12:21:59.848Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0ca00227p199rleb1h5","content":"<h2 id=\"梯度下降法\"><a href=\"#梯度下降法\" class=\"headerlink\" title=\"梯度下降法\"></a>梯度下降法</h2><p>之前最小二乘的那篇文章中，我们知道了最优化的最基本方法就是求出cost function的极值点。<br>对于简单的、已知表达式的cost function（就比如最小二乘），我们可以直接通过偏导数等零的方法求得极值点。<br>但是对于表达式复杂、甚至无法获取表达式的cost function，求偏导的方法就无能为力了，我们只能借助计算机这个不是很聪明但是算的很快的工具，通过迭代的方法，求出极值点的近似解。</p>\n<p>怎么个迭代法呢？<br>极小值点，就是附近一片区域中函数值最小的那一个点，将函数看作一块地面，我们如果在极小值附近区域放上一个小球，小球一定可以滚落到极小值点的位置。如果我们使用计算机来模拟这个小球的行为，不就能够得到极小值点了吗<br>伟大的科学家们利用这个原理，发明了梯度下降的方法来求解极小值点：</p>\n<ol>\n<li>将一个初始点送入梯度下降算法（小球放在初始某个位置）</li>\n<li>使用差分代替微分，求出初始点位置函数的梯度（地面的梯度方向即为小球下降趋势的方向）</li>\n<li>使当前这个点向梯度<strong>反方向</strong>前进，速度为梯度大小，时间为步长τ，得到一个新的点（<strong>近似</strong>模拟小球下降的过程）</li>\n<li>将新得到的点作为起始点，重复执行此过程，直到梯度大小小于某个阈值δ，停止迭代，得到结果（小球稳定在地面的最低点处）<br><img src=\"/old_images/2020/05/4174507093.gif\" alt=\"v2-05bafbc0557270f96773e544b2ae683e_hd (1).gif\"></li>\n</ol>\n<p>实际上这是一个很简单的算法，我们只需要规定步长τ与阈值δ就能求出函数的极值点<br>其中，步长τ越大，算法收敛的也就越快，但是在步长过大时可能出现在极值点附近震荡而无法进入阈值范围而陷入死循环；<br>而阈值δ越大，限制条件相当于越宽松，收敛也会更容易，但是精度相对变差，δ越小则反之。</p>\n<p>这个简单的算法也有着诸多限制条件：</p>\n<ol>\n<li>目标函数的点的细度一定要足够，否则求取梯度会不精确，极值点的精度也会变差，必要时可能需要插值</li>\n<li>目标函数在一定范围内一定要平滑，即梯度函数要连续，不能出现梯度的突变，否则不能收敛</li>\n<li>目标函数在一定范围内一定要连续</li>\n<li>没有全局性。可能会求得局部极小值，即最优化问题中的局部最优解</li>\n</ol>\n<p><img src=\"/old_images/2020/05/3433924516.png\" alt=\"无标题.png\"></p>\n<h2 id=\"牛顿迭代法\"><a href=\"#牛顿迭代法\" class=\"headerlink\" title=\"牛顿迭代法\"></a>牛顿迭代法</h2><p>同梯度下降法一样得思路，牛顿迭代法是用来解决方程的解的问题的</p>\n<p>我们通过对f(x)的迭代，可以的出一元方程f(x) = 0的近似数值解，方法如下：</p>\n<ol>\n<li>同样，选取起始点</li>\n<li>求出起始点位置函数f(x)导数</li>\n<li>向着导数反方向移动该点，步长τ，得到新的点</li>\n<li>将新点当作初始点，迭代运算，直至新点处函数值小于阈值δ，得到方程近似解<br><img src=\"/old_images/2020/05/557249455.jpg\" alt=\"f703738da97739126a4f98f3ff198618367ae233.jpg\"></li>\n</ol>\n<p>可以看到梯度下降与牛顿迭代具有很强的相似性，二者的方法与性质也大体类似，本质上，二者都是通过对f(x)泰勒展开式进行近似（取一阶导数项），通过近似式进行迭代求解。这种迭代求数值解的思想值得我们借鉴与学习。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"梯度下降法\"><a href=\"#梯度下降法\" class=\"headerlink\" title=\"梯度下降法\"></a>梯度下降法</h2><p>之前最小二乘的那篇文章中，我们知道了最优化的最基本方法就是求出cost function的极值点。<br>对于简单的、已知表达式的cost function（就比如最小二乘），我们可以直接通过偏导数等零的方法求得极值点。<br>但是对于表达式复杂、甚至无法获取表达式的cost function，求偏导的方法就无能为力了，我们只能借助计算机这个不是很聪明但是算的很快的工具，通过迭代的方法，求出极值点的近似解。</p>\n<p>怎么个迭代法呢？<br>极小值点，就是附近一片区域中函数值最小的那一个点，将函数看作一块地面，我们如果在极小值附近区域放上一个小球，小球一定可以滚落到极小值点的位置。如果我们使用计算机来模拟这个小球的行为，不就能够得到极小值点了吗<br>伟大的科学家们利用这个原理，发明了梯度下降的方法来求解极小值点：</p>\n<ol>\n<li>将一个初始点送入梯度下降算法（小球放在初始某个位置）</li>\n<li>使用差分代替微分，求出初始点位置函数的梯度（地面的梯度方向即为小球下降趋势的方向）</li>\n<li>使当前这个点向梯度<strong>反方向</strong>前进，速度为梯度大小，时间为步长τ，得到一个新的点（<strong>近似</strong>模拟小球下降的过程）</li>\n<li>将新得到的点作为起始点，重复执行此过程，直到梯度大小小于某个阈值δ，停止迭代，得到结果（小球稳定在地面的最低点处）<br><img src=\"/old_images/2020/05/4174507093.gif\" alt=\"v2-05bafbc0557270f96773e544b2ae683e_hd (1).gif\"></li>\n</ol>\n<p>实际上这是一个很简单的算法，我们只需要规定步长τ与阈值δ就能求出函数的极值点<br>其中，步长τ越大，算法收敛的也就越快，但是在步长过大时可能出现在极值点附近震荡而无法进入阈值范围而陷入死循环；<br>而阈值δ越大，限制条件相当于越宽松，收敛也会更容易，但是精度相对变差，δ越小则反之。</p>\n<p>这个简单的算法也有着诸多限制条件：</p>\n<ol>\n<li>目标函数的点的细度一定要足够，否则求取梯度会不精确，极值点的精度也会变差，必要时可能需要插值</li>\n<li>目标函数在一定范围内一定要平滑，即梯度函数要连续，不能出现梯度的突变，否则不能收敛</li>\n<li>目标函数在一定范围内一定要连续</li>\n<li>没有全局性。可能会求得局部极小值，即最优化问题中的局部最优解</li>\n</ol>\n<p><img src=\"/old_images/2020/05/3433924516.png\" alt=\"无标题.png\"></p>\n<h2 id=\"牛顿迭代法\"><a href=\"#牛顿迭代法\" class=\"headerlink\" title=\"牛顿迭代法\"></a>牛顿迭代法</h2><p>同梯度下降法一样得思路，牛顿迭代法是用来解决方程的解的问题的</p>\n<p>我们通过对f(x)的迭代，可以的出一元方程f(x) = 0的近似数值解，方法如下：</p>\n<ol>\n<li>同样，选取起始点</li>\n<li>求出起始点位置函数f(x)导数</li>\n<li>向着导数反方向移动该点，步长τ，得到新的点</li>\n<li>将新点当作初始点，迭代运算，直至新点处函数值小于阈值δ，得到方程近似解<br><img src=\"/old_images/2020/05/557249455.jpg\" alt=\"f703738da97739126a4f98f3ff198618367ae233.jpg\"></li>\n</ol>\n<p>可以看到梯度下降与牛顿迭代具有很强的相似性，二者的方法与性质也大体类似，本质上，二者都是通过对f(x)泰勒展开式进行近似（取一阶导数项），通过近似式进行迭代求解。这种迭代求数值解的思想值得我们借鉴与学习。</p>\n"},{"title":"现代控制理论总结1——Linear部分","date":"2020-03-06T20:34:00.000Z","toc":true,"_content":"从去年这时候第一次从老余那儿听说到[DR_CAN][1]这个人，开始看他的视频，到现在，我已经把这部分内容反复看了4遍了，没有什么额外的原因，纯粹就是因为看不懂，看懂了就忘( ´･･)ﾉ(._.`),所以现在来这里总结一下！\n这里超级感谢DR_CAN先生，这个up是真真正正的宝藏up，人帅，又有才华（特别推荐[爱情中的数学][2]这一期，老少皆宜），他也算是帮助我半只脚进入控制世界的大门的引路人吧ヾ(≧▽≦*)o\n![drcan.PNG][3]\n![mathinlove.PNG][4]\n经典之作——love and math\n\n这期内容分两篇文章，分别对应LTI与Non-Linear，期待期待！\n\n\n## 状态方程与传递函数 ##\n学过经典控制理论的肯定对传递函数有所了解，传递函数描述了一个系统的性质，系统是否稳定，有没有震荡，收敛的快慢都可以由传递函数分析得出。\n而在现代控制理论中，和传函同等地位的就数状态方程了，状态方程也可以描述这个系统。\n状态方程的形式是这样的：\n![zhuangtai1.PNG][5]\n状态方程\n![zhuangtai2.PNG][6]\n输出方程\n\n其中，决定系统性质的，有着和传递函数分母相同作用的，就是A矩阵，它的特征值就是对应传函的极点，这条性质十分重要！\n我们以二阶系统为例，若将X进行坐标变化，X=PY,使得Xdot=AX变换为Ydot=P^-1APY,使得P^（-1）AP为一个对角矩阵，这个对角矩阵的两个非零元素就是A的特征值，X变到Y，即完成了一个解耦，方便了我们分析，X，Y变化趋势相同，仅仅相差一个坐标变换，就像下面这样：\n![trans.PNG][7]\n解耦后的系统相图一般有以下几种形式，对应不同的特征值：\n![pplane.PNG][8]\n\n\n## 稳定性 ##\n在了解稳定性之前，我们先来理解一下平衡点的概念——\n平衡点也是个很重要的概念：Xdot=0，即为平衡点，若系统初始在了平衡点，它的状态就永远不会变换，并且系统若是稳定，最终一定会趋近平衡点\n![stability.PNG][9]\n等幅振荡——不稳定——最终收敛的情况。\n\n稳定性的数学定义如下：\n![stable.PNG][10]\n第一种，也就是李雅普诺夫稳定（Lyapunov Stable），简单地理解就是将等幅振荡也算作稳定了，即最终x有界\n第二种，也就是渐近稳定（Asymptotic Stable），简单地理解就是x最终必须收敛。\n对于线性系统来讲，判断稳定性的方法很简单，就是观察A阵特征值的正负，全部小于等于0，则可以达到李雅普诺夫稳定，而若是全部小于0，则达到了渐近稳定的要求。\n而对于非线性系统，就比较麻烦了，分为李雅普诺夫第一方法（解系统的微分方程，比较难）与李雅普诺夫第二方法（直接方法，通过寻找李雅普诺夫函数来判定），这方面我们将在下一篇中仔细理解。\n\n\n## 可控性与控制器 ##\n上面我们讨论了在零输入的状态下，系统的稳定性，可见，对于任意的一个系统，稳定性是不能确定的，即使稳定，平衡点可能也不能满足我们的要求，于是我们就要加入控制变量来使得系统能够稳定，甚至能够改变系统的平衡点。\n引入最简单的反馈控制器U = -kX，其中k = [k1,k2]，这样我们新的系统就变成了Xdot=(A-Bk)X，我们就可以配置(A-Bk)的特征值，来计算k，使得新的系统满足我们的要求。\n另外，控制器k的设计不仅能够由特征值配置（在经典理论中称为极点配置）得到，在最优控制（Optimal Control）中，考虑输入的情况下，通过使Cost Function最小而计算出k1、k2的值，我们称这种方法为LQR Control。\n\n但是这样做有一个前提，即保证k有解，这就需要我们的系统满足可控性，系统具有可控性，就是系统状态变量在相平面上可以在输入的作用下达到任意的点，具体推导公式是DR_CAN用离散的方法推出来的，连续的方法我这里也不太会，希望知道的同学能来教教我，(≧∇≦)ﾉ\n**直接给出可控性的条件**\n当Co = [B AB A^2B ……A^nB]满秩时（即Rank = n时），即可证明k有解，也就是系统可控！\n注意！！在相平面上，可控指的是点对点的可控，而不是轨迹上的可控！\n\n可以控制系统稳定性之后，我们就想着要控制系统的轨迹，进行轨迹跟踪，也就是改变系统的平衡点！\n引入误差变量e，有\n\ne = x1d - x1\nedot = x1ddot - x1dot\n\n用新的状态变量e来表示系统方程则会得到：\n![IMG_20200307_151604 (2).jpg][11]\n此时，只需要我们调节输入U，使得BU在抵消最后面一个矩阵后还能够做到反馈控制调节系统特征值的作用，就需要U = -kX - a/e*x1d。须注意三点：\n 1. 这里的X是新的包含误差的状态变量；\n 2. 仅有在e、f，a、c成比例，或者对应有0的时候才能完全消去常数，我大胆猜测，这里就对应着经典控制理论中的稳态误差；\n 3. x1ddot这一项的补偿就相当于速度前馈！\n这样我们就能够做到轨迹跟踪了！\n\n\n## 能观性与观测器 ##\n**上面内容全部建立在状态向量能够通过传感器测量的前提下，在我们不能够通过传感器获取到一些变量时，我们该如何进行反馈控制？使用观测器！**\n观测器首先构造一个虚拟的系统进行更新：\n![observer.PNG][12]\n与实际系统做差，可得到如下方程\nE_dot = (A-LC)E\n其中E = X_hat - X\n我们又构造出这样一种形式，同样，只要配置矩阵的特征值，计算出相应的L，即可使E收敛到0，也就是X_hat收敛到X。\n这样我们成功观测了状态变量X。\n与控制器相同，观测器也需要满足能观性，就是要使L有解，\nO = [C CA CA^2 …… CA^n]^T，需要满足O满秩（即Rank = n）\n根据分离原理，我们可以使用观测到的值来做状态反馈控制，这样做的时候控制器与观测器特征值不互相影响，仍与原本设计相同！（但我们仍希望能使观测器时间常数小于控制器！）\n\n\n\n## 总结下来，现代控制理论要实现的就是通过变换使系统状态方程变为Xdot = AclX 的形式，通过配置Acl的特征值，使系统具有所需性质！ ##\n\n  [1]: https://space.bilibili.com/230105574?spm_id_from=333.788.b_765f7570696e666f.1\n  [2]: https://www.bilibili.com/video/av15795540\n  [3]: /old_images/2020/03/9722286.png\n  [4]: /old_images/2020/03/1272507004.png\n  [5]: /old_images/2020/03/1837004197.png\n  [6]: /old_images/2020/03/1797764618.png\n  [7]: /old_images/2020/03/1201115831.png\n  [8]: /old_images/2020/03/691907800.png\n  [9]: /old_images/2020/03/2233313056.png\n  [10]: /old_images/2020/03/2313483864.png\n  [11]: /old_images/2020/03/3142260807.jpg\n  [12]: /old_images/2020/03/4226968886.png\n","source":"_posts/现代控制理论总结1——Linear部分.md","raw":"title: 现代控制理论总结1——Linear部分\ndate: 2020-03-07 04:34:00\ncategories: 控制\ntags: []\ntoc: true\n---\n从去年这时候第一次从老余那儿听说到[DR_CAN][1]这个人，开始看他的视频，到现在，我已经把这部分内容反复看了4遍了，没有什么额外的原因，纯粹就是因为看不懂，看懂了就忘( ´･･)ﾉ(._.`),所以现在来这里总结一下！\n这里超级感谢DR_CAN先生，这个up是真真正正的宝藏up，人帅，又有才华（特别推荐[爱情中的数学][2]这一期，老少皆宜），他也算是帮助我半只脚进入控制世界的大门的引路人吧ヾ(≧▽≦*)o\n![drcan.PNG][3]\n![mathinlove.PNG][4]\n经典之作——love and math\n\n这期内容分两篇文章，分别对应LTI与Non-Linear，期待期待！\n\n\n## 状态方程与传递函数 ##\n学过经典控制理论的肯定对传递函数有所了解，传递函数描述了一个系统的性质，系统是否稳定，有没有震荡，收敛的快慢都可以由传递函数分析得出。\n而在现代控制理论中，和传函同等地位的就数状态方程了，状态方程也可以描述这个系统。\n状态方程的形式是这样的：\n![zhuangtai1.PNG][5]\n状态方程\n![zhuangtai2.PNG][6]\n输出方程\n\n其中，决定系统性质的，有着和传递函数分母相同作用的，就是A矩阵，它的特征值就是对应传函的极点，这条性质十分重要！\n我们以二阶系统为例，若将X进行坐标变化，X=PY,使得Xdot=AX变换为Ydot=P^-1APY,使得P^（-1）AP为一个对角矩阵，这个对角矩阵的两个非零元素就是A的特征值，X变到Y，即完成了一个解耦，方便了我们分析，X，Y变化趋势相同，仅仅相差一个坐标变换，就像下面这样：\n![trans.PNG][7]\n解耦后的系统相图一般有以下几种形式，对应不同的特征值：\n![pplane.PNG][8]\n\n\n## 稳定性 ##\n在了解稳定性之前，我们先来理解一下平衡点的概念——\n平衡点也是个很重要的概念：Xdot=0，即为平衡点，若系统初始在了平衡点，它的状态就永远不会变换，并且系统若是稳定，最终一定会趋近平衡点\n![stability.PNG][9]\n等幅振荡——不稳定——最终收敛的情况。\n\n稳定性的数学定义如下：\n![stable.PNG][10]\n第一种，也就是李雅普诺夫稳定（Lyapunov Stable），简单地理解就是将等幅振荡也算作稳定了，即最终x有界\n第二种，也就是渐近稳定（Asymptotic Stable），简单地理解就是x最终必须收敛。\n对于线性系统来讲，判断稳定性的方法很简单，就是观察A阵特征值的正负，全部小于等于0，则可以达到李雅普诺夫稳定，而若是全部小于0，则达到了渐近稳定的要求。\n而对于非线性系统，就比较麻烦了，分为李雅普诺夫第一方法（解系统的微分方程，比较难）与李雅普诺夫第二方法（直接方法，通过寻找李雅普诺夫函数来判定），这方面我们将在下一篇中仔细理解。\n\n\n## 可控性与控制器 ##\n上面我们讨论了在零输入的状态下，系统的稳定性，可见，对于任意的一个系统，稳定性是不能确定的，即使稳定，平衡点可能也不能满足我们的要求，于是我们就要加入控制变量来使得系统能够稳定，甚至能够改变系统的平衡点。\n引入最简单的反馈控制器U = -kX，其中k = [k1,k2]，这样我们新的系统就变成了Xdot=(A-Bk)X，我们就可以配置(A-Bk)的特征值，来计算k，使得新的系统满足我们的要求。\n另外，控制器k的设计不仅能够由特征值配置（在经典理论中称为极点配置）得到，在最优控制（Optimal Control）中，考虑输入的情况下，通过使Cost Function最小而计算出k1、k2的值，我们称这种方法为LQR Control。\n\n但是这样做有一个前提，即保证k有解，这就需要我们的系统满足可控性，系统具有可控性，就是系统状态变量在相平面上可以在输入的作用下达到任意的点，具体推导公式是DR_CAN用离散的方法推出来的，连续的方法我这里也不太会，希望知道的同学能来教教我，(≧∇≦)ﾉ\n**直接给出可控性的条件**\n当Co = [B AB A^2B ……A^nB]满秩时（即Rank = n时），即可证明k有解，也就是系统可控！\n注意！！在相平面上，可控指的是点对点的可控，而不是轨迹上的可控！\n\n可以控制系统稳定性之后，我们就想着要控制系统的轨迹，进行轨迹跟踪，也就是改变系统的平衡点！\n引入误差变量e，有\n\ne = x1d - x1\nedot = x1ddot - x1dot\n\n用新的状态变量e来表示系统方程则会得到：\n![IMG_20200307_151604 (2).jpg][11]\n此时，只需要我们调节输入U，使得BU在抵消最后面一个矩阵后还能够做到反馈控制调节系统特征值的作用，就需要U = -kX - a/e*x1d。须注意三点：\n 1. 这里的X是新的包含误差的状态变量；\n 2. 仅有在e、f，a、c成比例，或者对应有0的时候才能完全消去常数，我大胆猜测，这里就对应着经典控制理论中的稳态误差；\n 3. x1ddot这一项的补偿就相当于速度前馈！\n这样我们就能够做到轨迹跟踪了！\n\n\n## 能观性与观测器 ##\n**上面内容全部建立在状态向量能够通过传感器测量的前提下，在我们不能够通过传感器获取到一些变量时，我们该如何进行反馈控制？使用观测器！**\n观测器首先构造一个虚拟的系统进行更新：\n![observer.PNG][12]\n与实际系统做差，可得到如下方程\nE_dot = (A-LC)E\n其中E = X_hat - X\n我们又构造出这样一种形式，同样，只要配置矩阵的特征值，计算出相应的L，即可使E收敛到0，也就是X_hat收敛到X。\n这样我们成功观测了状态变量X。\n与控制器相同，观测器也需要满足能观性，就是要使L有解，\nO = [C CA CA^2 …… CA^n]^T，需要满足O满秩（即Rank = n）\n根据分离原理，我们可以使用观测到的值来做状态反馈控制，这样做的时候控制器与观测器特征值不互相影响，仍与原本设计相同！（但我们仍希望能使观测器时间常数小于控制器！）\n\n\n\n## 总结下来，现代控制理论要实现的就是通过变换使系统状态方程变为Xdot = AclX 的形式，通过配置Acl的特征值，使系统具有所需性质！ ##\n\n  [1]: https://space.bilibili.com/230105574?spm_id_from=333.788.b_765f7570696e666f.1\n  [2]: https://www.bilibili.com/video/av15795540\n  [3]: /old_images/2020/03/9722286.png\n  [4]: /old_images/2020/03/1272507004.png\n  [5]: /old_images/2020/03/1837004197.png\n  [6]: /old_images/2020/03/1797764618.png\n  [7]: /old_images/2020/03/1201115831.png\n  [8]: /old_images/2020/03/691907800.png\n  [9]: /old_images/2020/03/2233313056.png\n  [10]: /old_images/2020/03/2313483864.png\n  [11]: /old_images/2020/03/3142260807.jpg\n  [12]: /old_images/2020/03/4226968886.png\n","slug":"现代控制理论总结1——Linear部分","published":1,"updated":"2020-12-14T12:22:19.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0ca00247p19c7g07nis","content":"<p>从去年这时候第一次从老余那儿听说到<a href=\"https://space.bilibili.com/230105574?spm_id_from=333.788.b_765f7570696e666f.1\">DR_CAN</a>这个人，开始看他的视频，到现在，我已经把这部分内容反复看了4遍了，没有什么额外的原因，纯粹就是因为看不懂，看懂了就忘( ´･･)ﾉ(._.`),所以现在来这里总结一下！<br>这里超级感谢DR_CAN先生，这个up是真真正正的宝藏up，人帅，又有才华（特别推荐<a href=\"https://www.bilibili.com/video/av15795540\">爱情中的数学</a>这一期，老少皆宜），他也算是帮助我半只脚进入控制世界的大门的引路人吧ヾ(≧▽≦*)o<br><img src=\"/old_images/2020/03/9722286.png\" alt=\"drcan.PNG\"><br><img src=\"/old_images/2020/03/1272507004.png\" alt=\"mathinlove.PNG\"><br>经典之作——love and math</p>\n<p>这期内容分两篇文章，分别对应LTI与Non-Linear，期待期待！</p>\n<h2 id=\"状态方程与传递函数\"><a href=\"#状态方程与传递函数\" class=\"headerlink\" title=\"状态方程与传递函数\"></a>状态方程与传递函数</h2><p>学过经典控制理论的肯定对传递函数有所了解，传递函数描述了一个系统的性质，系统是否稳定，有没有震荡，收敛的快慢都可以由传递函数分析得出。<br>而在现代控制理论中，和传函同等地位的就数状态方程了，状态方程也可以描述这个系统。<br>状态方程的形式是这样的：<br><img src=\"/old_images/2020/03/1837004197.png\" alt=\"zhuangtai1.PNG\"><br>状态方程<br><img src=\"/old_images/2020/03/1797764618.png\" alt=\"zhuangtai2.PNG\"><br>输出方程</p>\n<p>其中，决定系统性质的，有着和传递函数分母相同作用的，就是A矩阵，它的特征值就是对应传函的极点，这条性质十分重要！<br>我们以二阶系统为例，若将X进行坐标变化，X=PY,使得Xdot=AX变换为Ydot=P^-1APY,使得P^（-1）AP为一个对角矩阵，这个对角矩阵的两个非零元素就是A的特征值，X变到Y，即完成了一个解耦，方便了我们分析，X，Y变化趋势相同，仅仅相差一个坐标变换，就像下面这样：<br><img src=\"/old_images/2020/03/1201115831.png\" alt=\"trans.PNG\"><br>解耦后的系统相图一般有以下几种形式，对应不同的特征值：<br><img src=\"/old_images/2020/03/691907800.png\" alt=\"pplane.PNG\"></p>\n<h2 id=\"稳定性\"><a href=\"#稳定性\" class=\"headerlink\" title=\"稳定性\"></a>稳定性</h2><p>在了解稳定性之前，我们先来理解一下平衡点的概念——<br>平衡点也是个很重要的概念：Xdot=0，即为平衡点，若系统初始在了平衡点，它的状态就永远不会变换，并且系统若是稳定，最终一定会趋近平衡点<br><img src=\"/old_images/2020/03/2233313056.png\" alt=\"stability.PNG\"><br>等幅振荡——不稳定——最终收敛的情况。</p>\n<p>稳定性的数学定义如下：<br><img src=\"/old_images/2020/03/2313483864.png\" alt=\"stable.PNG\"><br>第一种，也就是李雅普诺夫稳定（Lyapunov Stable），简单地理解就是将等幅振荡也算作稳定了，即最终x有界<br>第二种，也就是渐近稳定（Asymptotic Stable），简单地理解就是x最终必须收敛。<br>对于线性系统来讲，判断稳定性的方法很简单，就是观察A阵特征值的正负，全部小于等于0，则可以达到李雅普诺夫稳定，而若是全部小于0，则达到了渐近稳定的要求。<br>而对于非线性系统，就比较麻烦了，分为李雅普诺夫第一方法（解系统的微分方程，比较难）与李雅普诺夫第二方法（直接方法，通过寻找李雅普诺夫函数来判定），这方面我们将在下一篇中仔细理解。</p>\n<h2 id=\"可控性与控制器\"><a href=\"#可控性与控制器\" class=\"headerlink\" title=\"可控性与控制器\"></a>可控性与控制器</h2><p>上面我们讨论了在零输入的状态下，系统的稳定性，可见，对于任意的一个系统，稳定性是不能确定的，即使稳定，平衡点可能也不能满足我们的要求，于是我们就要加入控制变量来使得系统能够稳定，甚至能够改变系统的平衡点。<br>引入最简单的反馈控制器U = -kX，其中k = [k1,k2]，这样我们新的系统就变成了Xdot=(A-Bk)X，我们就可以配置(A-Bk)的特征值，来计算k，使得新的系统满足我们的要求。<br>另外，控制器k的设计不仅能够由特征值配置（在经典理论中称为极点配置）得到，在最优控制（Optimal Control）中，考虑输入的情况下，通过使Cost Function最小而计算出k1、k2的值，我们称这种方法为LQR Control。</p>\n<p>但是这样做有一个前提，即保证k有解，这就需要我们的系统满足可控性，系统具有可控性，就是系统状态变量在相平面上可以在输入的作用下达到任意的点，具体推导公式是DR_CAN用离散的方法推出来的，连续的方法我这里也不太会，希望知道的同学能来教教我，(≧∇≦)ﾉ<br><strong>直接给出可控性的条件</strong><br>当Co = [B AB A^2B ……A^nB]满秩时（即Rank = n时），即可证明k有解，也就是系统可控！<br>注意！！在相平面上，可控指的是点对点的可控，而不是轨迹上的可控！</p>\n<p>可以控制系统稳定性之后，我们就想着要控制系统的轨迹，进行轨迹跟踪，也就是改变系统的平衡点！<br>引入误差变量e，有</p>\n<p>e = x1d - x1<br>edot = x1ddot - x1dot</p>\n<p>用新的状态变量e来表示系统方程则会得到：<br><img src=\"/old_images/2020/03/3142260807.jpg\" alt=\"IMG_20200307_151604 (2).jpg\"><br>此时，只需要我们调节输入U，使得BU在抵消最后面一个矩阵后还能够做到反馈控制调节系统特征值的作用，就需要U = -kX - a/e*x1d。须注意三点：</p>\n<ol>\n<li>这里的X是新的包含误差的状态变量；</li>\n<li>仅有在e、f，a、c成比例，或者对应有0的时候才能完全消去常数，我大胆猜测，这里就对应着经典控制理论中的稳态误差；</li>\n<li>x1ddot这一项的补偿就相当于速度前馈！<br>这样我们就能够做到轨迹跟踪了！</li>\n</ol>\n<h2 id=\"能观性与观测器\"><a href=\"#能观性与观测器\" class=\"headerlink\" title=\"能观性与观测器\"></a>能观性与观测器</h2><p><strong>上面内容全部建立在状态向量能够通过传感器测量的前提下，在我们不能够通过传感器获取到一些变量时，我们该如何进行反馈控制？使用观测器！</strong><br>观测器首先构造一个虚拟的系统进行更新：<br><img src=\"/old_images/2020/03/4226968886.png\" alt=\"observer.PNG\"><br>与实际系统做差，可得到如下方程<br>E_dot = (A-LC)E<br>其中E = X_hat - X<br>我们又构造出这样一种形式，同样，只要配置矩阵的特征值，计算出相应的L，即可使E收敛到0，也就是X_hat收敛到X。<br>这样我们成功观测了状态变量X。<br>与控制器相同，观测器也需要满足能观性，就是要使L有解，<br>O = [C CA CA^2 …… CA^n]^T，需要满足O满秩（即Rank = n）<br>根据分离原理，我们可以使用观测到的值来做状态反馈控制，这样做的时候控制器与观测器特征值不互相影响，仍与原本设计相同！（但我们仍希望能使观测器时间常数小于控制器！）</p>\n<h2 id=\"总结下来，现代控制理论要实现的就是通过变换使系统状态方程变为Xdot-AclX-的形式，通过配置Acl的特征值，使系统具有所需性质！\"><a href=\"#总结下来，现代控制理论要实现的就是通过变换使系统状态方程变为Xdot-AclX-的形式，通过配置Acl的特征值，使系统具有所需性质！\" class=\"headerlink\" title=\"总结下来，现代控制理论要实现的就是通过变换使系统状态方程变为Xdot = AclX 的形式，通过配置Acl的特征值，使系统具有所需性质！\"></a>总结下来，现代控制理论要实现的就是通过变换使系统状态方程变为Xdot = AclX 的形式，通过配置Acl的特征值，使系统具有所需性质！</h2>","site":{"data":{}},"excerpt":"","more":"<p>从去年这时候第一次从老余那儿听说到<a href=\"https://space.bilibili.com/230105574?spm_id_from=333.788.b_765f7570696e666f.1\">DR_CAN</a>这个人，开始看他的视频，到现在，我已经把这部分内容反复看了4遍了，没有什么额外的原因，纯粹就是因为看不懂，看懂了就忘( ´･･)ﾉ(._.`),所以现在来这里总结一下！<br>这里超级感谢DR_CAN先生，这个up是真真正正的宝藏up，人帅，又有才华（特别推荐<a href=\"https://www.bilibili.com/video/av15795540\">爱情中的数学</a>这一期，老少皆宜），他也算是帮助我半只脚进入控制世界的大门的引路人吧ヾ(≧▽≦*)o<br><img src=\"/old_images/2020/03/9722286.png\" alt=\"drcan.PNG\"><br><img src=\"/old_images/2020/03/1272507004.png\" alt=\"mathinlove.PNG\"><br>经典之作——love and math</p>\n<p>这期内容分两篇文章，分别对应LTI与Non-Linear，期待期待！</p>\n<h2 id=\"状态方程与传递函数\"><a href=\"#状态方程与传递函数\" class=\"headerlink\" title=\"状态方程与传递函数\"></a>状态方程与传递函数</h2><p>学过经典控制理论的肯定对传递函数有所了解，传递函数描述了一个系统的性质，系统是否稳定，有没有震荡，收敛的快慢都可以由传递函数分析得出。<br>而在现代控制理论中，和传函同等地位的就数状态方程了，状态方程也可以描述这个系统。<br>状态方程的形式是这样的：<br><img src=\"/old_images/2020/03/1837004197.png\" alt=\"zhuangtai1.PNG\"><br>状态方程<br><img src=\"/old_images/2020/03/1797764618.png\" alt=\"zhuangtai2.PNG\"><br>输出方程</p>\n<p>其中，决定系统性质的，有着和传递函数分母相同作用的，就是A矩阵，它的特征值就是对应传函的极点，这条性质十分重要！<br>我们以二阶系统为例，若将X进行坐标变化，X=PY,使得Xdot=AX变换为Ydot=P^-1APY,使得P^（-1）AP为一个对角矩阵，这个对角矩阵的两个非零元素就是A的特征值，X变到Y，即完成了一个解耦，方便了我们分析，X，Y变化趋势相同，仅仅相差一个坐标变换，就像下面这样：<br><img src=\"/old_images/2020/03/1201115831.png\" alt=\"trans.PNG\"><br>解耦后的系统相图一般有以下几种形式，对应不同的特征值：<br><img src=\"/old_images/2020/03/691907800.png\" alt=\"pplane.PNG\"></p>\n<h2 id=\"稳定性\"><a href=\"#稳定性\" class=\"headerlink\" title=\"稳定性\"></a>稳定性</h2><p>在了解稳定性之前，我们先来理解一下平衡点的概念——<br>平衡点也是个很重要的概念：Xdot=0，即为平衡点，若系统初始在了平衡点，它的状态就永远不会变换，并且系统若是稳定，最终一定会趋近平衡点<br><img src=\"/old_images/2020/03/2233313056.png\" alt=\"stability.PNG\"><br>等幅振荡——不稳定——最终收敛的情况。</p>\n<p>稳定性的数学定义如下：<br><img src=\"/old_images/2020/03/2313483864.png\" alt=\"stable.PNG\"><br>第一种，也就是李雅普诺夫稳定（Lyapunov Stable），简单地理解就是将等幅振荡也算作稳定了，即最终x有界<br>第二种，也就是渐近稳定（Asymptotic Stable），简单地理解就是x最终必须收敛。<br>对于线性系统来讲，判断稳定性的方法很简单，就是观察A阵特征值的正负，全部小于等于0，则可以达到李雅普诺夫稳定，而若是全部小于0，则达到了渐近稳定的要求。<br>而对于非线性系统，就比较麻烦了，分为李雅普诺夫第一方法（解系统的微分方程，比较难）与李雅普诺夫第二方法（直接方法，通过寻找李雅普诺夫函数来判定），这方面我们将在下一篇中仔细理解。</p>\n<h2 id=\"可控性与控制器\"><a href=\"#可控性与控制器\" class=\"headerlink\" title=\"可控性与控制器\"></a>可控性与控制器</h2><p>上面我们讨论了在零输入的状态下，系统的稳定性，可见，对于任意的一个系统，稳定性是不能确定的，即使稳定，平衡点可能也不能满足我们的要求，于是我们就要加入控制变量来使得系统能够稳定，甚至能够改变系统的平衡点。<br>引入最简单的反馈控制器U = -kX，其中k = [k1,k2]，这样我们新的系统就变成了Xdot=(A-Bk)X，我们就可以配置(A-Bk)的特征值，来计算k，使得新的系统满足我们的要求。<br>另外，控制器k的设计不仅能够由特征值配置（在经典理论中称为极点配置）得到，在最优控制（Optimal Control）中，考虑输入的情况下，通过使Cost Function最小而计算出k1、k2的值，我们称这种方法为LQR Control。</p>\n<p>但是这样做有一个前提，即保证k有解，这就需要我们的系统满足可控性，系统具有可控性，就是系统状态变量在相平面上可以在输入的作用下达到任意的点，具体推导公式是DR_CAN用离散的方法推出来的，连续的方法我这里也不太会，希望知道的同学能来教教我，(≧∇≦)ﾉ<br><strong>直接给出可控性的条件</strong><br>当Co = [B AB A^2B ……A^nB]满秩时（即Rank = n时），即可证明k有解，也就是系统可控！<br>注意！！在相平面上，可控指的是点对点的可控，而不是轨迹上的可控！</p>\n<p>可以控制系统稳定性之后，我们就想着要控制系统的轨迹，进行轨迹跟踪，也就是改变系统的平衡点！<br>引入误差变量e，有</p>\n<p>e = x1d - x1<br>edot = x1ddot - x1dot</p>\n<p>用新的状态变量e来表示系统方程则会得到：<br><img src=\"/old_images/2020/03/3142260807.jpg\" alt=\"IMG_20200307_151604 (2).jpg\"><br>此时，只需要我们调节输入U，使得BU在抵消最后面一个矩阵后还能够做到反馈控制调节系统特征值的作用，就需要U = -kX - a/e*x1d。须注意三点：</p>\n<ol>\n<li>这里的X是新的包含误差的状态变量；</li>\n<li>仅有在e、f，a、c成比例，或者对应有0的时候才能完全消去常数，我大胆猜测，这里就对应着经典控制理论中的稳态误差；</li>\n<li>x1ddot这一项的补偿就相当于速度前馈！<br>这样我们就能够做到轨迹跟踪了！</li>\n</ol>\n<h2 id=\"能观性与观测器\"><a href=\"#能观性与观测器\" class=\"headerlink\" title=\"能观性与观测器\"></a>能观性与观测器</h2><p><strong>上面内容全部建立在状态向量能够通过传感器测量的前提下，在我们不能够通过传感器获取到一些变量时，我们该如何进行反馈控制？使用观测器！</strong><br>观测器首先构造一个虚拟的系统进行更新：<br><img src=\"/old_images/2020/03/4226968886.png\" alt=\"observer.PNG\"><br>与实际系统做差，可得到如下方程<br>E_dot = (A-LC)E<br>其中E = X_hat - X<br>我们又构造出这样一种形式，同样，只要配置矩阵的特征值，计算出相应的L，即可使E收敛到0，也就是X_hat收敛到X。<br>这样我们成功观测了状态变量X。<br>与控制器相同，观测器也需要满足能观性，就是要使L有解，<br>O = [C CA CA^2 …… CA^n]^T，需要满足O满秩（即Rank = n）<br>根据分离原理，我们可以使用观测到的值来做状态反馈控制，这样做的时候控制器与观测器特征值不互相影响，仍与原本设计相同！（但我们仍希望能使观测器时间常数小于控制器！）</p>\n<h2 id=\"总结下来，现代控制理论要实现的就是通过变换使系统状态方程变为Xdot-AclX-的形式，通过配置Acl的特征值，使系统具有所需性质！\"><a href=\"#总结下来，现代控制理论要实现的就是通过变换使系统状态方程变为Xdot-AclX-的形式，通过配置Acl的特征值，使系统具有所需性质！\" class=\"headerlink\" title=\"总结下来，现代控制理论要实现的就是通过变换使系统状态方程变为Xdot = AclX 的形式，通过配置Acl的特征值，使系统具有所需性质！\"></a>总结下来，现代控制理论要实现的就是通过变换使系统状态方程变为Xdot = AclX 的形式，通过配置Acl的特征值，使系统具有所需性质！</h2>"},{"title":"现代控制理论总结2——NonLinear部分","date":"2020-03-08T15:56:00.000Z","toc":true,"_content":"学习完了比较简单的线性部分，我们来进一步探讨非线性系统的特性！\n本片所讲内容完全可以用在线性系统上，因为线性系统也算是一种特殊的非线性系统，这篇讲的是一种普适的方法！\n\n\n## 李雅普诺夫直接方法 ##\n也叫做第二方法（第一方法是直接解微分方程）\n第二方法是这样判断一个系统稳定的：\n![lyapu.PNG][1]\n这样可以证明李雅普诺夫稳定（即有界稳定）\n![assym.PNG][2]\n这样可以证明渐进稳定\n\n**可以看到，二者仅仅区别于V_dot是半正定的还是正定的。**\n那么这个V到底是什么呢？他是怎么来的呢？这个V将是贯穿整个非线性控制理论的一个东西。\n我们把V叫做李雅普诺夫函数，这个V是自己选的，自己选择V来证明稳定，有些微妙呢（￣。。￣）\n同样，我们也是要判断平衡点，即X_dot = 0 的点，一定要记住，在u = 0的情况下，稳定系统一定会收敛到平衡点上。\n在加入控制量u之后，我们比较方便的能够把平衡点控制在0，所以当想要移动原来变量平衡点时，一般会转换状态变量到e或delta这样的误差变量上，最终就能达到移动原来变量平衡点的作用。\n一般我们选择的V是包含需要稳定的量的，即V是e、δ……的函数V(e,δ)\nV_dot = ![V_dot.PNG][3]，其中f(x)表示x的微分的函数\n通常设计的V为系统在某个维度的能量，那么就表明能量大于0，能量衰减的系统就是稳定的！\n这里要注意，x=0，指的是x1、x2、全部=0，这里判断ND、NSD时要注意！\n\n## 拉塞尔不变性原理 ##\n**为了扩大直接方法判断渐进稳定的适用条件，引出拉塞尔不变性原理：**\n 1. 满足李雅普诺夫稳定\n 2. 除了x = 0，没有其他轨迹能够使V_dot = 0\n判断方法也很简单，直接令V_dot = 0，计算满足的轨迹，如果除了x=0外还有满足的轨迹，那么就不符合，若仅有x=0这一条，则整个系统也是渐近稳定的。\n\n## 非线性控制中心思想 ##\n对于x_dot = f(x) + u这种形式，简单粗暴滴构造一个u = f(x) - kx，就可以构造出x_dot = -kx这个线性的，必定稳定的系统。我们称之为反馈线性化（Feedback Linearization），是最简单证明稳定性的方法。\n但有时反馈线性化不是最佳的，我们可以通过寻找V(x)来设计u，使得V与V_dot满足PD ND的条件即可\n\n## 反步法 ##\n对于二阶系统，我们常用反步法（Back Stepping）来解决控制问题。微分表达式x_dot = f(x)，代表着x的变化受到f(x)的控制，这点是我们控制x的重要思想。当二阶系统构成一个Chain of Integrator，即x2在f1中，而u又在f2中，我们就可以通过控制u来控制x2，再通过控制x2来控制x1。（设计控制器时还是用上面的中心思想来实现）\n反步法则与这个顺序相反，它先设计出x2控制x1的方法，找到一个x2d，再通过设计u来控制x2->x2d，最终实现目标。\n在这两步中，第二步同时包含了x1与x2，我们在设计时要同时引入两个状态变量e与δ，而第一步就仅需要一个e，因为我们把其中的x2已经当作了输入量。并且，如果这两步中有一步是线性系统，我们完全可以用线性系统的思路来设计！\n下面是反步法的具体设计步骤的一个例子：\n![backstep.PNG][4]\n\n## 自适应控制 ##\n有时我们再设计控制器时，总是要用到一些系统的参数，但当我们很难测得这些参数时，控制器就很难设计。\n于是我们引入自适应控制（Adaptive Control）用一个p_hat来测量这个参数p（前提要有p_dot = 0），不妨设p_e = p_hat - p，我们把这个p_e也当作一个状态变量，就能够使p_hat->p，最终我们在u中使用p_hat代替p来做控制即可。（这里要先设计出一个假定已知p的输入u）\n将含有x与p的f看作是由两个变量组成的系统，最终用包含p_e与e的李雅普诺夫函数V()满足PD ND，同时代入已设计好的u，即可得到a_hat或a_hat_dot的式子，大功告成！\n\n## 鲁棒控制 ##\n上面的自适应控制用于p_dot = 0的情况，但当p不是一个定值，在随时间变换但却有界（ρ(x)，这个界可以是与x有关的，但是在非线性部分整体也有界的情况下通常取为一个常数ρ），我们就不能使用Adaptive的方法，这时就要使用鲁棒控制器（Robust Control）\n鲁棒控制器有一个通用的形式：\nu = -ke + xd_dot + uaux\n**最常见的三种鲁棒控制器：**\n\n 1. Sliding Mode：  uaux = ρ(x)sgn(x) （也就是大家经常听说的滑模控制器）\n 2. High Gain：     uaux = 1/(ε)ρ(x)^2 * e\n 3. High Frequency：uaux =  ρ(x)^2e/(ρ(x)abs(e) + ε)\n\n**这三个鲁棒控制器各有特点：**\nSMC静差为零，而其他两个控制器都有与k和ε相关的静差\nHGC收敛是最快的\nHFC输入是最小的\n我们也能够很简单地使用直接方法证明这三种控制器的稳定性。\n\n## 总结一下，非线性控制的思想就是设计合适的u使得选择的李雅普诺夫函数V能够满足稳定条件，就是这么简单！ ##\n\n  [1]: /old_images/2020/03/1765616617.png\n  [2]: /old_images/2020/03/2569806803.png\n  [3]: /old_images/2020/03/2883180973.png\n  [4]: /old_images/2020/03/3099420731.png\n","source":"_posts/现代控制理论总结2——NonLinear部分.md","raw":"title: 现代控制理论总结2——NonLinear部分\ndate: 2020-03-08 23:56:00\ncategories: 控制\ntags: []\ntoc: true\n---\n学习完了比较简单的线性部分，我们来进一步探讨非线性系统的特性！\n本片所讲内容完全可以用在线性系统上，因为线性系统也算是一种特殊的非线性系统，这篇讲的是一种普适的方法！\n\n\n## 李雅普诺夫直接方法 ##\n也叫做第二方法（第一方法是直接解微分方程）\n第二方法是这样判断一个系统稳定的：\n![lyapu.PNG][1]\n这样可以证明李雅普诺夫稳定（即有界稳定）\n![assym.PNG][2]\n这样可以证明渐进稳定\n\n**可以看到，二者仅仅区别于V_dot是半正定的还是正定的。**\n那么这个V到底是什么呢？他是怎么来的呢？这个V将是贯穿整个非线性控制理论的一个东西。\n我们把V叫做李雅普诺夫函数，这个V是自己选的，自己选择V来证明稳定，有些微妙呢（￣。。￣）\n同样，我们也是要判断平衡点，即X_dot = 0 的点，一定要记住，在u = 0的情况下，稳定系统一定会收敛到平衡点上。\n在加入控制量u之后，我们比较方便的能够把平衡点控制在0，所以当想要移动原来变量平衡点时，一般会转换状态变量到e或delta这样的误差变量上，最终就能达到移动原来变量平衡点的作用。\n一般我们选择的V是包含需要稳定的量的，即V是e、δ……的函数V(e,δ)\nV_dot = ![V_dot.PNG][3]，其中f(x)表示x的微分的函数\n通常设计的V为系统在某个维度的能量，那么就表明能量大于0，能量衰减的系统就是稳定的！\n这里要注意，x=0，指的是x1、x2、全部=0，这里判断ND、NSD时要注意！\n\n## 拉塞尔不变性原理 ##\n**为了扩大直接方法判断渐进稳定的适用条件，引出拉塞尔不变性原理：**\n 1. 满足李雅普诺夫稳定\n 2. 除了x = 0，没有其他轨迹能够使V_dot = 0\n判断方法也很简单，直接令V_dot = 0，计算满足的轨迹，如果除了x=0外还有满足的轨迹，那么就不符合，若仅有x=0这一条，则整个系统也是渐近稳定的。\n\n## 非线性控制中心思想 ##\n对于x_dot = f(x) + u这种形式，简单粗暴滴构造一个u = f(x) - kx，就可以构造出x_dot = -kx这个线性的，必定稳定的系统。我们称之为反馈线性化（Feedback Linearization），是最简单证明稳定性的方法。\n但有时反馈线性化不是最佳的，我们可以通过寻找V(x)来设计u，使得V与V_dot满足PD ND的条件即可\n\n## 反步法 ##\n对于二阶系统，我们常用反步法（Back Stepping）来解决控制问题。微分表达式x_dot = f(x)，代表着x的变化受到f(x)的控制，这点是我们控制x的重要思想。当二阶系统构成一个Chain of Integrator，即x2在f1中，而u又在f2中，我们就可以通过控制u来控制x2，再通过控制x2来控制x1。（设计控制器时还是用上面的中心思想来实现）\n反步法则与这个顺序相反，它先设计出x2控制x1的方法，找到一个x2d，再通过设计u来控制x2->x2d，最终实现目标。\n在这两步中，第二步同时包含了x1与x2，我们在设计时要同时引入两个状态变量e与δ，而第一步就仅需要一个e，因为我们把其中的x2已经当作了输入量。并且，如果这两步中有一步是线性系统，我们完全可以用线性系统的思路来设计！\n下面是反步法的具体设计步骤的一个例子：\n![backstep.PNG][4]\n\n## 自适应控制 ##\n有时我们再设计控制器时，总是要用到一些系统的参数，但当我们很难测得这些参数时，控制器就很难设计。\n于是我们引入自适应控制（Adaptive Control）用一个p_hat来测量这个参数p（前提要有p_dot = 0），不妨设p_e = p_hat - p，我们把这个p_e也当作一个状态变量，就能够使p_hat->p，最终我们在u中使用p_hat代替p来做控制即可。（这里要先设计出一个假定已知p的输入u）\n将含有x与p的f看作是由两个变量组成的系统，最终用包含p_e与e的李雅普诺夫函数V()满足PD ND，同时代入已设计好的u，即可得到a_hat或a_hat_dot的式子，大功告成！\n\n## 鲁棒控制 ##\n上面的自适应控制用于p_dot = 0的情况，但当p不是一个定值，在随时间变换但却有界（ρ(x)，这个界可以是与x有关的，但是在非线性部分整体也有界的情况下通常取为一个常数ρ），我们就不能使用Adaptive的方法，这时就要使用鲁棒控制器（Robust Control）\n鲁棒控制器有一个通用的形式：\nu = -ke + xd_dot + uaux\n**最常见的三种鲁棒控制器：**\n\n 1. Sliding Mode：  uaux = ρ(x)sgn(x) （也就是大家经常听说的滑模控制器）\n 2. High Gain：     uaux = 1/(ε)ρ(x)^2 * e\n 3. High Frequency：uaux =  ρ(x)^2e/(ρ(x)abs(e) + ε)\n\n**这三个鲁棒控制器各有特点：**\nSMC静差为零，而其他两个控制器都有与k和ε相关的静差\nHGC收敛是最快的\nHFC输入是最小的\n我们也能够很简单地使用直接方法证明这三种控制器的稳定性。\n\n## 总结一下，非线性控制的思想就是设计合适的u使得选择的李雅普诺夫函数V能够满足稳定条件，就是这么简单！ ##\n\n  [1]: /old_images/2020/03/1765616617.png\n  [2]: /old_images/2020/03/2569806803.png\n  [3]: /old_images/2020/03/2883180973.png\n  [4]: /old_images/2020/03/3099420731.png\n","slug":"现代控制理论总结2——NonLinear部分","published":1,"updated":"2020-12-14T12:22:21.476Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0cb00267p1953u42o98","content":"<p>学习完了比较简单的线性部分，我们来进一步探讨非线性系统的特性！<br>本片所讲内容完全可以用在线性系统上，因为线性系统也算是一种特殊的非线性系统，这篇讲的是一种普适的方法！</p>\n<h2 id=\"李雅普诺夫直接方法\"><a href=\"#李雅普诺夫直接方法\" class=\"headerlink\" title=\"李雅普诺夫直接方法\"></a>李雅普诺夫直接方法</h2><p>也叫做第二方法（第一方法是直接解微分方程）<br>第二方法是这样判断一个系统稳定的：<br><img src=\"/old_images/2020/03/1765616617.png\" alt=\"lyapu.PNG\"><br>这样可以证明李雅普诺夫稳定（即有界稳定）<br><img src=\"/old_images/2020/03/2569806803.png\" alt=\"assym.PNG\"><br>这样可以证明渐进稳定</p>\n<p><strong>可以看到，二者仅仅区别于V_dot是半正定的还是正定的。</strong><br>那么这个V到底是什么呢？他是怎么来的呢？这个V将是贯穿整个非线性控制理论的一个东西。<br>我们把V叫做李雅普诺夫函数，这个V是自己选的，自己选择V来证明稳定，有些微妙呢（￣。。￣）<br>同样，我们也是要判断平衡点，即X_dot = 0 的点，一定要记住，在u = 0的情况下，稳定系统一定会收敛到平衡点上。<br>在加入控制量u之后，我们比较方便的能够把平衡点控制在0，所以当想要移动原来变量平衡点时，一般会转换状态变量到e或delta这样的误差变量上，最终就能达到移动原来变量平衡点的作用。<br>一般我们选择的V是包含需要稳定的量的，即V是e、δ……的函数V(e,δ)<br>V_dot = <img src=\"/old_images/2020/03/2883180973.png\" alt=\"V_dot.PNG\">，其中f(x)表示x的微分的函数<br>通常设计的V为系统在某个维度的能量，那么就表明能量大于0，能量衰减的系统就是稳定的！<br>这里要注意，x=0，指的是x1、x2、全部=0，这里判断ND、NSD时要注意！</p>\n<h2 id=\"拉塞尔不变性原理\"><a href=\"#拉塞尔不变性原理\" class=\"headerlink\" title=\"拉塞尔不变性原理\"></a>拉塞尔不变性原理</h2><p><strong>为了扩大直接方法判断渐进稳定的适用条件，引出拉塞尔不变性原理：</strong></p>\n<ol>\n<li>满足李雅普诺夫稳定</li>\n<li>除了x = 0，没有其他轨迹能够使V_dot = 0<br>判断方法也很简单，直接令V_dot = 0，计算满足的轨迹，如果除了x=0外还有满足的轨迹，那么就不符合，若仅有x=0这一条，则整个系统也是渐近稳定的。</li>\n</ol>\n<h2 id=\"非线性控制中心思想\"><a href=\"#非线性控制中心思想\" class=\"headerlink\" title=\"非线性控制中心思想\"></a>非线性控制中心思想</h2><p>对于x_dot = f(x) + u这种形式，简单粗暴滴构造一个u = f(x) - kx，就可以构造出x_dot = -kx这个线性的，必定稳定的系统。我们称之为反馈线性化（Feedback Linearization），是最简单证明稳定性的方法。<br>但有时反馈线性化不是最佳的，我们可以通过寻找V(x)来设计u，使得V与V_dot满足PD ND的条件即可</p>\n<h2 id=\"反步法\"><a href=\"#反步法\" class=\"headerlink\" title=\"反步法\"></a>反步法</h2><p>对于二阶系统，我们常用反步法（Back Stepping）来解决控制问题。微分表达式x_dot = f(x)，代表着x的变化受到f(x)的控制，这点是我们控制x的重要思想。当二阶系统构成一个Chain of Integrator，即x2在f1中，而u又在f2中，我们就可以通过控制u来控制x2，再通过控制x2来控制x1。（设计控制器时还是用上面的中心思想来实现）<br>反步法则与这个顺序相反，它先设计出x2控制x1的方法，找到一个x2d，再通过设计u来控制x2-&gt;x2d，最终实现目标。<br>在这两步中，第二步同时包含了x1与x2，我们在设计时要同时引入两个状态变量e与δ，而第一步就仅需要一个e，因为我们把其中的x2已经当作了输入量。并且，如果这两步中有一步是线性系统，我们完全可以用线性系统的思路来设计！<br>下面是反步法的具体设计步骤的一个例子：<br><img src=\"/old_images/2020/03/3099420731.png\" alt=\"backstep.PNG\"></p>\n<h2 id=\"自适应控制\"><a href=\"#自适应控制\" class=\"headerlink\" title=\"自适应控制\"></a>自适应控制</h2><p>有时我们再设计控制器时，总是要用到一些系统的参数，但当我们很难测得这些参数时，控制器就很难设计。<br>于是我们引入自适应控制（Adaptive Control）用一个p_hat来测量这个参数p（前提要有p_dot = 0），不妨设p_e = p_hat - p，我们把这个p_e也当作一个状态变量，就能够使p_hat-&gt;p，最终我们在u中使用p_hat代替p来做控制即可。（这里要先设计出一个假定已知p的输入u）<br>将含有x与p的f看作是由两个变量组成的系统，最终用包含p_e与e的李雅普诺夫函数V()满足PD ND，同时代入已设计好的u，即可得到a_hat或a_hat_dot的式子，大功告成！</p>\n<h2 id=\"鲁棒控制\"><a href=\"#鲁棒控制\" class=\"headerlink\" title=\"鲁棒控制\"></a>鲁棒控制</h2><p>上面的自适应控制用于p_dot = 0的情况，但当p不是一个定值，在随时间变换但却有界（ρ(x)，这个界可以是与x有关的，但是在非线性部分整体也有界的情况下通常取为一个常数ρ），我们就不能使用Adaptive的方法，这时就要使用鲁棒控制器（Robust Control）<br>鲁棒控制器有一个通用的形式：<br>u = -ke + xd_dot + uaux<br><strong>最常见的三种鲁棒控制器：</strong></p>\n<ol>\n<li>Sliding Mode：  uaux = ρ(x)sgn(x) （也就是大家经常听说的滑模控制器）</li>\n<li>High Gain：     uaux = 1/(ε)ρ(x)^2 * e</li>\n<li>High Frequency：uaux =  ρ(x)^2e/(ρ(x)abs(e) + ε)</li>\n</ol>\n<p><strong>这三个鲁棒控制器各有特点：</strong><br>SMC静差为零，而其他两个控制器都有与k和ε相关的静差<br>HGC收敛是最快的<br>HFC输入是最小的<br>我们也能够很简单地使用直接方法证明这三种控制器的稳定性。</p>\n<h2 id=\"总结一下，非线性控制的思想就是设计合适的u使得选择的李雅普诺夫函数V能够满足稳定条件，就是这么简单！\"><a href=\"#总结一下，非线性控制的思想就是设计合适的u使得选择的李雅普诺夫函数V能够满足稳定条件，就是这么简单！\" class=\"headerlink\" title=\"总结一下，非线性控制的思想就是设计合适的u使得选择的李雅普诺夫函数V能够满足稳定条件，就是这么简单！\"></a>总结一下，非线性控制的思想就是设计合适的u使得选择的李雅普诺夫函数V能够满足稳定条件，就是这么简单！</h2>","site":{"data":{}},"excerpt":"","more":"<p>学习完了比较简单的线性部分，我们来进一步探讨非线性系统的特性！<br>本片所讲内容完全可以用在线性系统上，因为线性系统也算是一种特殊的非线性系统，这篇讲的是一种普适的方法！</p>\n<h2 id=\"李雅普诺夫直接方法\"><a href=\"#李雅普诺夫直接方法\" class=\"headerlink\" title=\"李雅普诺夫直接方法\"></a>李雅普诺夫直接方法</h2><p>也叫做第二方法（第一方法是直接解微分方程）<br>第二方法是这样判断一个系统稳定的：<br><img src=\"/old_images/2020/03/1765616617.png\" alt=\"lyapu.PNG\"><br>这样可以证明李雅普诺夫稳定（即有界稳定）<br><img src=\"/old_images/2020/03/2569806803.png\" alt=\"assym.PNG\"><br>这样可以证明渐进稳定</p>\n<p><strong>可以看到，二者仅仅区别于V_dot是半正定的还是正定的。</strong><br>那么这个V到底是什么呢？他是怎么来的呢？这个V将是贯穿整个非线性控制理论的一个东西。<br>我们把V叫做李雅普诺夫函数，这个V是自己选的，自己选择V来证明稳定，有些微妙呢（￣。。￣）<br>同样，我们也是要判断平衡点，即X_dot = 0 的点，一定要记住，在u = 0的情况下，稳定系统一定会收敛到平衡点上。<br>在加入控制量u之后，我们比较方便的能够把平衡点控制在0，所以当想要移动原来变量平衡点时，一般会转换状态变量到e或delta这样的误差变量上，最终就能达到移动原来变量平衡点的作用。<br>一般我们选择的V是包含需要稳定的量的，即V是e、δ……的函数V(e,δ)<br>V_dot = <img src=\"/old_images/2020/03/2883180973.png\" alt=\"V_dot.PNG\">，其中f(x)表示x的微分的函数<br>通常设计的V为系统在某个维度的能量，那么就表明能量大于0，能量衰减的系统就是稳定的！<br>这里要注意，x=0，指的是x1、x2、全部=0，这里判断ND、NSD时要注意！</p>\n<h2 id=\"拉塞尔不变性原理\"><a href=\"#拉塞尔不变性原理\" class=\"headerlink\" title=\"拉塞尔不变性原理\"></a>拉塞尔不变性原理</h2><p><strong>为了扩大直接方法判断渐进稳定的适用条件，引出拉塞尔不变性原理：</strong></p>\n<ol>\n<li>满足李雅普诺夫稳定</li>\n<li>除了x = 0，没有其他轨迹能够使V_dot = 0<br>判断方法也很简单，直接令V_dot = 0，计算满足的轨迹，如果除了x=0外还有满足的轨迹，那么就不符合，若仅有x=0这一条，则整个系统也是渐近稳定的。</li>\n</ol>\n<h2 id=\"非线性控制中心思想\"><a href=\"#非线性控制中心思想\" class=\"headerlink\" title=\"非线性控制中心思想\"></a>非线性控制中心思想</h2><p>对于x_dot = f(x) + u这种形式，简单粗暴滴构造一个u = f(x) - kx，就可以构造出x_dot = -kx这个线性的，必定稳定的系统。我们称之为反馈线性化（Feedback Linearization），是最简单证明稳定性的方法。<br>但有时反馈线性化不是最佳的，我们可以通过寻找V(x)来设计u，使得V与V_dot满足PD ND的条件即可</p>\n<h2 id=\"反步法\"><a href=\"#反步法\" class=\"headerlink\" title=\"反步法\"></a>反步法</h2><p>对于二阶系统，我们常用反步法（Back Stepping）来解决控制问题。微分表达式x_dot = f(x)，代表着x的变化受到f(x)的控制，这点是我们控制x的重要思想。当二阶系统构成一个Chain of Integrator，即x2在f1中，而u又在f2中，我们就可以通过控制u来控制x2，再通过控制x2来控制x1。（设计控制器时还是用上面的中心思想来实现）<br>反步法则与这个顺序相反，它先设计出x2控制x1的方法，找到一个x2d，再通过设计u来控制x2-&gt;x2d，最终实现目标。<br>在这两步中，第二步同时包含了x1与x2，我们在设计时要同时引入两个状态变量e与δ，而第一步就仅需要一个e，因为我们把其中的x2已经当作了输入量。并且，如果这两步中有一步是线性系统，我们完全可以用线性系统的思路来设计！<br>下面是反步法的具体设计步骤的一个例子：<br><img src=\"/old_images/2020/03/3099420731.png\" alt=\"backstep.PNG\"></p>\n<h2 id=\"自适应控制\"><a href=\"#自适应控制\" class=\"headerlink\" title=\"自适应控制\"></a>自适应控制</h2><p>有时我们再设计控制器时，总是要用到一些系统的参数，但当我们很难测得这些参数时，控制器就很难设计。<br>于是我们引入自适应控制（Adaptive Control）用一个p_hat来测量这个参数p（前提要有p_dot = 0），不妨设p_e = p_hat - p，我们把这个p_e也当作一个状态变量，就能够使p_hat-&gt;p，最终我们在u中使用p_hat代替p来做控制即可。（这里要先设计出一个假定已知p的输入u）<br>将含有x与p的f看作是由两个变量组成的系统，最终用包含p_e与e的李雅普诺夫函数V()满足PD ND，同时代入已设计好的u，即可得到a_hat或a_hat_dot的式子，大功告成！</p>\n<h2 id=\"鲁棒控制\"><a href=\"#鲁棒控制\" class=\"headerlink\" title=\"鲁棒控制\"></a>鲁棒控制</h2><p>上面的自适应控制用于p_dot = 0的情况，但当p不是一个定值，在随时间变换但却有界（ρ(x)，这个界可以是与x有关的，但是在非线性部分整体也有界的情况下通常取为一个常数ρ），我们就不能使用Adaptive的方法，这时就要使用鲁棒控制器（Robust Control）<br>鲁棒控制器有一个通用的形式：<br>u = -ke + xd_dot + uaux<br><strong>最常见的三种鲁棒控制器：</strong></p>\n<ol>\n<li>Sliding Mode：  uaux = ρ(x)sgn(x) （也就是大家经常听说的滑模控制器）</li>\n<li>High Gain：     uaux = 1/(ε)ρ(x)^2 * e</li>\n<li>High Frequency：uaux =  ρ(x)^2e/(ρ(x)abs(e) + ε)</li>\n</ol>\n<p><strong>这三个鲁棒控制器各有特点：</strong><br>SMC静差为零，而其他两个控制器都有与k和ε相关的静差<br>HGC收敛是最快的<br>HFC输入是最小的<br>我们也能够很简单地使用直接方法证明这三种控制器的稳定性。</p>\n<h2 id=\"总结一下，非线性控制的思想就是设计合适的u使得选择的李雅普诺夫函数V能够满足稳定条件，就是这么简单！\"><a href=\"#总结一下，非线性控制的思想就是设计合适的u使得选择的李雅普诺夫函数V能够满足稳定条件，就是这么简单！\" class=\"headerlink\" title=\"总结一下，非线性控制的思想就是设计合适的u使得选择的李雅普诺夫函数V能够满足稳定条件，就是这么简单！\"></a>总结一下，非线性控制的思想就是设计合适的u使得选择的李雅普诺夫函数V能够满足稳定条件，就是这么简单！</h2>"},{"title":"由LIT MOTORS平衡车获得的理力知识","date":"2020-06-18T04:02:00.000Z","toc":true,"_content":"第一次听到Lit Motors平衡车，是在东大四足机器人研讨会上，东大向我们介绍四足平衡的灵感，正是源于Lit Motors。\n第一次看到，实在是震惊！于是今天再次补习了一下理论力学的知识，希望能给大家讲明白其中的原理。\n\n## 角动量与力矩 ##\n\n根据牛顿第二定律，物体不受力就会保持原有动量，物体受力就会改变动量。\n在描述刚体平动时，这时十分好用的，因为所有的力都作用在质点上，不会产生旋转，此时刚体每一个微元具有相同的运动形式，所以我们可以把它们看作整体，使用牛顿第二定律进行分析。\n但是我们发现，当其中有些力作用在质点上时，物体就（可能）会旋转，这时，如果还使用牛顿第二定律，由于每一个微元有不同的运动（速度的大小与方向），再使用牛顿第二定律时会变得十分麻烦（并不是说它就不成立了），物理学家们将旋转的部分单独拿出来，就出现了角动量、力矩的概念：（X代表向量叉乘）\n角动量：L = J*ω；\n力矩：  M = r X F；\n旋转起来的牛顿第二定律就成了物体不受力矩就会保持角动量，物体受到力矩就会改变角动量。\n\n假设我们有一块土豆，我们怎么对它进行动力学分析呢？\n首先，这块土豆可能受很多个力，它们大小不同，方向各异。\n![Snipaste_2020-06-18_20-24-53.jpg][1]\n（红色代表质心，蓝色代表力）\n作用在刚体上的力，在考虑了旋转的情况下，是不能够轻易移动的！我们通过力的合成原理，移动一个力，就会产生一个力偶，也就产生了一个力矩:M = r X F（r为位移向量）\n我们把力全都移动到土豆的质心，并且将力矩叠加（力矩是可以叠加的！）\n![Snipaste_2020-06-25_19-45-31.jpg][2]\n（粉色是合成之后的力矩）\n作用在一点的力，也可通过力的合成原理，得到一个合力（大概）\n![Snipaste_2020-06-18_20-41-47.jpg][3]\n这个作用在质心的力，确定了质心的平动运动，而这个作用在物体上的力矩，决定了物体的转动运动，我们把土豆的运动**解耦**了！\n注意，这个旋转是绕质心的旋转，如果旋转时偏心旋转，如下面这个被插了的土豆：\n![Snipaste_2020-06-18_20-46-38.jpg][4]\n本身并没有绕着质心旋转，只是质心本身在绕着转轴旋转，这时就只需要考虑质心平动就行了(每个质点都在做圆周运动)。\n\n## 角动量守恒与Lit Motors ##\n大家先看一段视频感受一下：[神奇的自平衡两轮汽车 Lit Motors][5]\n是不是很神奇？学过理论力学的人一定明白它的原理——角动量守恒。\n\n首先我们来考虑一个简单的问题，为什么陀螺不会倒？\n静止的陀螺，受到重力与支持力合成产生的力矩，最终一定会倒下：\n![Snipaste_2020-06-18_20-52-48.jpg][6]\n究其根本，正是力矩改变角动量，使其产生了旋转。\n但是，当陀螺转起来，事情变得有点不一样了!\n难道转了起来，它的角动量就不变了吗？不是的，无论如何，牛二是不会出错的！\n只不过，角动量大小没有变（忽略损耗），而是方向变化了，这样也会有一个ΔL！\n![Snipaste_2020-06-18_20-57-29.jpg][7]\n这样，力矩的作用没有使陀螺倒下，而是让陀螺产生了进动！\n这个例子生动形象地展现了三维世界中角动量定理为我们带来的无限可能与不可思议！\n\n接着，我们来看Lit Motors的例子\n先让我们看一看它的主要结构：\n![Snipaste_2020-06-18_21-00-47.jpg][8]\n两个反向旋转的陀螺（飞轮），构成了使其平衡的主要结构。\n![Snipaste_2020-06-18_21-03-10.jpg][9]\n由角动量守恒我们知道，在不受外力矩的情况下，整个系统的角动量是不变的。\n当我们用内力改变系统某些部分的角动量时，必然会产生另外一个力矩，维持这个角动量不变！\n我们是用内力（电机）偏转其中一个飞轮，就会产生一个飞轮力矩：\n![Snipaste_2020-06-18_21-31-16.jpg][10]\n两个反向旋转的飞轮同时反向偏转，则抵消掉竖直方向上的力矩，和力矩在前进方向上，就可以防止Roll轴的倾覆！\n![Snipaste_2020-06-18_21-33-32.jpg][11]\n通常使用角度反馈进行闭环控制，实现平衡的功能。\n这样一想，稚晖君做的这个动量轮倒立摆，其中的原理（动量轮），也是通过内力改变角动量（只不过这次是改变角动量的大小而不是方向），来产生力矩，实现平衡的。\n![Snipaste_2020-06-18_21-16-14.jpg][12]\n只不过这个方法只能抵御周期性扰动，如果扰动带有直流分量，那么系统会一直旋转（加速）。\n\n东大的四足机器人，则是使用了正交的两套Lit Motors的飞轮装置，使其可以同时保持Roll、Pitch两轴的平衡：\n![Snipaste_2020-06-18_21-24-03.jpg][13]\n\n角动量定理真的能为我们带来许多意想不到的点子，又发现了下面这个好玩的东西，也是这个原理：\n[神奇立方体 - 可以跳起来、保持平衡和自我运动 @柚子木字幕组][14]\n\n\n  [1]: /old_images/2020/06/2328185984.jpg\n  [2]: /old_images/2020/06/679760522.jpg\n  [3]: /old_images/2020/06/2743383745.jpg\n  [4]: /old_images/2020/06/334535609.jpg\n  [5]: https://www.bilibili.com/video/BV1Ps411U7dM?from=search&seid=13553174638326717597\n  [6]: /old_images/2020/06/1785132415.jpg\n  [7]: /old_images/2020/06/1821389100.jpg\n  [8]: /old_images/2020/06/3567944637.jpg\n  [9]: /old_images/2020/06/1955986387.jpg\n  [10]: /old_images/2020/06/2792304263.jpg\n  [11]: /old_images/2020/06/3236832836.jpg\n  [12]: /old_images/2020/06/2780367333.jpg\n  [13]: /old_images/2020/06/1911627333.jpg\n  [14]: https://www.bilibili.com/video/BV1qW411i7Mj/?spm_id_from=333.788.videocard.1\n","source":"_posts/由LIT MOTORS平衡车获得的理力知识.md","raw":"title: 由LIT MOTORS平衡车获得的理力知识\ndate: 2020-06-18 12:02:00\ncategories: 物数\ntags: []\ntoc: true\n---\n第一次听到Lit Motors平衡车，是在东大四足机器人研讨会上，东大向我们介绍四足平衡的灵感，正是源于Lit Motors。\n第一次看到，实在是震惊！于是今天再次补习了一下理论力学的知识，希望能给大家讲明白其中的原理。\n\n## 角动量与力矩 ##\n\n根据牛顿第二定律，物体不受力就会保持原有动量，物体受力就会改变动量。\n在描述刚体平动时，这时十分好用的，因为所有的力都作用在质点上，不会产生旋转，此时刚体每一个微元具有相同的运动形式，所以我们可以把它们看作整体，使用牛顿第二定律进行分析。\n但是我们发现，当其中有些力作用在质点上时，物体就（可能）会旋转，这时，如果还使用牛顿第二定律，由于每一个微元有不同的运动（速度的大小与方向），再使用牛顿第二定律时会变得十分麻烦（并不是说它就不成立了），物理学家们将旋转的部分单独拿出来，就出现了角动量、力矩的概念：（X代表向量叉乘）\n角动量：L = J*ω；\n力矩：  M = r X F；\n旋转起来的牛顿第二定律就成了物体不受力矩就会保持角动量，物体受到力矩就会改变角动量。\n\n假设我们有一块土豆，我们怎么对它进行动力学分析呢？\n首先，这块土豆可能受很多个力，它们大小不同，方向各异。\n![Snipaste_2020-06-18_20-24-53.jpg][1]\n（红色代表质心，蓝色代表力）\n作用在刚体上的力，在考虑了旋转的情况下，是不能够轻易移动的！我们通过力的合成原理，移动一个力，就会产生一个力偶，也就产生了一个力矩:M = r X F（r为位移向量）\n我们把力全都移动到土豆的质心，并且将力矩叠加（力矩是可以叠加的！）\n![Snipaste_2020-06-25_19-45-31.jpg][2]\n（粉色是合成之后的力矩）\n作用在一点的力，也可通过力的合成原理，得到一个合力（大概）\n![Snipaste_2020-06-18_20-41-47.jpg][3]\n这个作用在质心的力，确定了质心的平动运动，而这个作用在物体上的力矩，决定了物体的转动运动，我们把土豆的运动**解耦**了！\n注意，这个旋转是绕质心的旋转，如果旋转时偏心旋转，如下面这个被插了的土豆：\n![Snipaste_2020-06-18_20-46-38.jpg][4]\n本身并没有绕着质心旋转，只是质心本身在绕着转轴旋转，这时就只需要考虑质心平动就行了(每个质点都在做圆周运动)。\n\n## 角动量守恒与Lit Motors ##\n大家先看一段视频感受一下：[神奇的自平衡两轮汽车 Lit Motors][5]\n是不是很神奇？学过理论力学的人一定明白它的原理——角动量守恒。\n\n首先我们来考虑一个简单的问题，为什么陀螺不会倒？\n静止的陀螺，受到重力与支持力合成产生的力矩，最终一定会倒下：\n![Snipaste_2020-06-18_20-52-48.jpg][6]\n究其根本，正是力矩改变角动量，使其产生了旋转。\n但是，当陀螺转起来，事情变得有点不一样了!\n难道转了起来，它的角动量就不变了吗？不是的，无论如何，牛二是不会出错的！\n只不过，角动量大小没有变（忽略损耗），而是方向变化了，这样也会有一个ΔL！\n![Snipaste_2020-06-18_20-57-29.jpg][7]\n这样，力矩的作用没有使陀螺倒下，而是让陀螺产生了进动！\n这个例子生动形象地展现了三维世界中角动量定理为我们带来的无限可能与不可思议！\n\n接着，我们来看Lit Motors的例子\n先让我们看一看它的主要结构：\n![Snipaste_2020-06-18_21-00-47.jpg][8]\n两个反向旋转的陀螺（飞轮），构成了使其平衡的主要结构。\n![Snipaste_2020-06-18_21-03-10.jpg][9]\n由角动量守恒我们知道，在不受外力矩的情况下，整个系统的角动量是不变的。\n当我们用内力改变系统某些部分的角动量时，必然会产生另外一个力矩，维持这个角动量不变！\n我们是用内力（电机）偏转其中一个飞轮，就会产生一个飞轮力矩：\n![Snipaste_2020-06-18_21-31-16.jpg][10]\n两个反向旋转的飞轮同时反向偏转，则抵消掉竖直方向上的力矩，和力矩在前进方向上，就可以防止Roll轴的倾覆！\n![Snipaste_2020-06-18_21-33-32.jpg][11]\n通常使用角度反馈进行闭环控制，实现平衡的功能。\n这样一想，稚晖君做的这个动量轮倒立摆，其中的原理（动量轮），也是通过内力改变角动量（只不过这次是改变角动量的大小而不是方向），来产生力矩，实现平衡的。\n![Snipaste_2020-06-18_21-16-14.jpg][12]\n只不过这个方法只能抵御周期性扰动，如果扰动带有直流分量，那么系统会一直旋转（加速）。\n\n东大的四足机器人，则是使用了正交的两套Lit Motors的飞轮装置，使其可以同时保持Roll、Pitch两轴的平衡：\n![Snipaste_2020-06-18_21-24-03.jpg][13]\n\n角动量定理真的能为我们带来许多意想不到的点子，又发现了下面这个好玩的东西，也是这个原理：\n[神奇立方体 - 可以跳起来、保持平衡和自我运动 @柚子木字幕组][14]\n\n\n  [1]: /old_images/2020/06/2328185984.jpg\n  [2]: /old_images/2020/06/679760522.jpg\n  [3]: /old_images/2020/06/2743383745.jpg\n  [4]: /old_images/2020/06/334535609.jpg\n  [5]: https://www.bilibili.com/video/BV1Ps411U7dM?from=search&seid=13553174638326717597\n  [6]: /old_images/2020/06/1785132415.jpg\n  [7]: /old_images/2020/06/1821389100.jpg\n  [8]: /old_images/2020/06/3567944637.jpg\n  [9]: /old_images/2020/06/1955986387.jpg\n  [10]: /old_images/2020/06/2792304263.jpg\n  [11]: /old_images/2020/06/3236832836.jpg\n  [12]: /old_images/2020/06/2780367333.jpg\n  [13]: /old_images/2020/06/1911627333.jpg\n  [14]: https://www.bilibili.com/video/BV1qW411i7Mj/?spm_id_from=333.788.videocard.1\n","slug":"由LIT MOTORS平衡车获得的理力知识","published":1,"updated":"2020-12-14T12:22:29.556Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0cc00287p195ud20drz","content":"<p>第一次听到Lit Motors平衡车，是在东大四足机器人研讨会上，东大向我们介绍四足平衡的灵感，正是源于Lit Motors。<br>第一次看到，实在是震惊！于是今天再次补习了一下理论力学的知识，希望能给大家讲明白其中的原理。</p>\n<h2 id=\"角动量与力矩\"><a href=\"#角动量与力矩\" class=\"headerlink\" title=\"角动量与力矩\"></a>角动量与力矩</h2><p>根据牛顿第二定律，物体不受力就会保持原有动量，物体受力就会改变动量。<br>在描述刚体平动时，这时十分好用的，因为所有的力都作用在质点上，不会产生旋转，此时刚体每一个微元具有相同的运动形式，所以我们可以把它们看作整体，使用牛顿第二定律进行分析。<br>但是我们发现，当其中有些力作用在质点上时，物体就（可能）会旋转，这时，如果还使用牛顿第二定律，由于每一个微元有不同的运动（速度的大小与方向），再使用牛顿第二定律时会变得十分麻烦（并不是说它就不成立了），物理学家们将旋转的部分单独拿出来，就出现了角动量、力矩的概念：（X代表向量叉乘）<br>角动量：L = J*ω；<br>力矩：  M = r X F；<br>旋转起来的牛顿第二定律就成了物体不受力矩就会保持角动量，物体受到力矩就会改变角动量。</p>\n<p>假设我们有一块土豆，我们怎么对它进行动力学分析呢？<br>首先，这块土豆可能受很多个力，它们大小不同，方向各异。<br><img src=\"/old_images/2020/06/2328185984.jpg\" alt=\"Snipaste_2020-06-18_20-24-53.jpg\"><br>（红色代表质心，蓝色代表力）<br>作用在刚体上的力，在考虑了旋转的情况下，是不能够轻易移动的！我们通过力的合成原理，移动一个力，就会产生一个力偶，也就产生了一个力矩:M = r X F（r为位移向量）<br>我们把力全都移动到土豆的质心，并且将力矩叠加（力矩是可以叠加的！）<br><img src=\"/old_images/2020/06/679760522.jpg\" alt=\"Snipaste_2020-06-25_19-45-31.jpg\"><br>（粉色是合成之后的力矩）<br>作用在一点的力，也可通过力的合成原理，得到一个合力（大概）<br><img src=\"/old_images/2020/06/2743383745.jpg\" alt=\"Snipaste_2020-06-18_20-41-47.jpg\"><br>这个作用在质心的力，确定了质心的平动运动，而这个作用在物体上的力矩，决定了物体的转动运动，我们把土豆的运动<strong>解耦</strong>了！<br>注意，这个旋转是绕质心的旋转，如果旋转时偏心旋转，如下面这个被插了的土豆：<br><img src=\"/old_images/2020/06/334535609.jpg\" alt=\"Snipaste_2020-06-18_20-46-38.jpg\"><br>本身并没有绕着质心旋转，只是质心本身在绕着转轴旋转，这时就只需要考虑质心平动就行了(每个质点都在做圆周运动)。</p>\n<h2 id=\"角动量守恒与Lit-Motors\"><a href=\"#角动量守恒与Lit-Motors\" class=\"headerlink\" title=\"角动量守恒与Lit Motors\"></a>角动量守恒与Lit Motors</h2><p>大家先看一段视频感受一下：<a href=\"https://www.bilibili.com/video/BV1Ps411U7dM?from=search&seid=13553174638326717597\">神奇的自平衡两轮汽车 Lit Motors</a><br>是不是很神奇？学过理论力学的人一定明白它的原理——角动量守恒。</p>\n<p>首先我们来考虑一个简单的问题，为什么陀螺不会倒？<br>静止的陀螺，受到重力与支持力合成产生的力矩，最终一定会倒下：<br><img src=\"/old_images/2020/06/1785132415.jpg\" alt=\"Snipaste_2020-06-18_20-52-48.jpg\"><br>究其根本，正是力矩改变角动量，使其产生了旋转。<br>但是，当陀螺转起来，事情变得有点不一样了!<br>难道转了起来，它的角动量就不变了吗？不是的，无论如何，牛二是不会出错的！<br>只不过，角动量大小没有变（忽略损耗），而是方向变化了，这样也会有一个ΔL！<br><img src=\"/old_images/2020/06/1821389100.jpg\" alt=\"Snipaste_2020-06-18_20-57-29.jpg\"><br>这样，力矩的作用没有使陀螺倒下，而是让陀螺产生了进动！<br>这个例子生动形象地展现了三维世界中角动量定理为我们带来的无限可能与不可思议！</p>\n<p>接着，我们来看Lit Motors的例子<br>先让我们看一看它的主要结构：<br><img src=\"/old_images/2020/06/3567944637.jpg\" alt=\"Snipaste_2020-06-18_21-00-47.jpg\"><br>两个反向旋转的陀螺（飞轮），构成了使其平衡的主要结构。<br><img src=\"/old_images/2020/06/1955986387.jpg\" alt=\"Snipaste_2020-06-18_21-03-10.jpg\"><br>由角动量守恒我们知道，在不受外力矩的情况下，整个系统的角动量是不变的。<br>当我们用内力改变系统某些部分的角动量时，必然会产生另外一个力矩，维持这个角动量不变！<br>我们是用内力（电机）偏转其中一个飞轮，就会产生一个飞轮力矩：<br><img src=\"/old_images/2020/06/2792304263.jpg\" alt=\"Snipaste_2020-06-18_21-31-16.jpg\"><br>两个反向旋转的飞轮同时反向偏转，则抵消掉竖直方向上的力矩，和力矩在前进方向上，就可以防止Roll轴的倾覆！<br><img src=\"/old_images/2020/06/3236832836.jpg\" alt=\"Snipaste_2020-06-18_21-33-32.jpg\"><br>通常使用角度反馈进行闭环控制，实现平衡的功能。<br>这样一想，稚晖君做的这个动量轮倒立摆，其中的原理（动量轮），也是通过内力改变角动量（只不过这次是改变角动量的大小而不是方向），来产生力矩，实现平衡的。<br><img src=\"/old_images/2020/06/2780367333.jpg\" alt=\"Snipaste_2020-06-18_21-16-14.jpg\"><br>只不过这个方法只能抵御周期性扰动，如果扰动带有直流分量，那么系统会一直旋转（加速）。</p>\n<p>东大的四足机器人，则是使用了正交的两套Lit Motors的飞轮装置，使其可以同时保持Roll、Pitch两轴的平衡：<br><img src=\"/old_images/2020/06/1911627333.jpg\" alt=\"Snipaste_2020-06-18_21-24-03.jpg\"></p>\n<p>角动量定理真的能为我们带来许多意想不到的点子，又发现了下面这个好玩的东西，也是这个原理：<br><a href=\"https://www.bilibili.com/video/BV1qW411i7Mj/?spm_id_from=333.788.videocard.1\">神奇立方体 - 可以跳起来、保持平衡和自我运动 @柚子木字幕组</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>第一次听到Lit Motors平衡车，是在东大四足机器人研讨会上，东大向我们介绍四足平衡的灵感，正是源于Lit Motors。<br>第一次看到，实在是震惊！于是今天再次补习了一下理论力学的知识，希望能给大家讲明白其中的原理。</p>\n<h2 id=\"角动量与力矩\"><a href=\"#角动量与力矩\" class=\"headerlink\" title=\"角动量与力矩\"></a>角动量与力矩</h2><p>根据牛顿第二定律，物体不受力就会保持原有动量，物体受力就会改变动量。<br>在描述刚体平动时，这时十分好用的，因为所有的力都作用在质点上，不会产生旋转，此时刚体每一个微元具有相同的运动形式，所以我们可以把它们看作整体，使用牛顿第二定律进行分析。<br>但是我们发现，当其中有些力作用在质点上时，物体就（可能）会旋转，这时，如果还使用牛顿第二定律，由于每一个微元有不同的运动（速度的大小与方向），再使用牛顿第二定律时会变得十分麻烦（并不是说它就不成立了），物理学家们将旋转的部分单独拿出来，就出现了角动量、力矩的概念：（X代表向量叉乘）<br>角动量：L = J*ω；<br>力矩：  M = r X F；<br>旋转起来的牛顿第二定律就成了物体不受力矩就会保持角动量，物体受到力矩就会改变角动量。</p>\n<p>假设我们有一块土豆，我们怎么对它进行动力学分析呢？<br>首先，这块土豆可能受很多个力，它们大小不同，方向各异。<br><img src=\"/old_images/2020/06/2328185984.jpg\" alt=\"Snipaste_2020-06-18_20-24-53.jpg\"><br>（红色代表质心，蓝色代表力）<br>作用在刚体上的力，在考虑了旋转的情况下，是不能够轻易移动的！我们通过力的合成原理，移动一个力，就会产生一个力偶，也就产生了一个力矩:M = r X F（r为位移向量）<br>我们把力全都移动到土豆的质心，并且将力矩叠加（力矩是可以叠加的！）<br><img src=\"/old_images/2020/06/679760522.jpg\" alt=\"Snipaste_2020-06-25_19-45-31.jpg\"><br>（粉色是合成之后的力矩）<br>作用在一点的力，也可通过力的合成原理，得到一个合力（大概）<br><img src=\"/old_images/2020/06/2743383745.jpg\" alt=\"Snipaste_2020-06-18_20-41-47.jpg\"><br>这个作用在质心的力，确定了质心的平动运动，而这个作用在物体上的力矩，决定了物体的转动运动，我们把土豆的运动<strong>解耦</strong>了！<br>注意，这个旋转是绕质心的旋转，如果旋转时偏心旋转，如下面这个被插了的土豆：<br><img src=\"/old_images/2020/06/334535609.jpg\" alt=\"Snipaste_2020-06-18_20-46-38.jpg\"><br>本身并没有绕着质心旋转，只是质心本身在绕着转轴旋转，这时就只需要考虑质心平动就行了(每个质点都在做圆周运动)。</p>\n<h2 id=\"角动量守恒与Lit-Motors\"><a href=\"#角动量守恒与Lit-Motors\" class=\"headerlink\" title=\"角动量守恒与Lit Motors\"></a>角动量守恒与Lit Motors</h2><p>大家先看一段视频感受一下：<a href=\"https://www.bilibili.com/video/BV1Ps411U7dM?from=search&seid=13553174638326717597\">神奇的自平衡两轮汽车 Lit Motors</a><br>是不是很神奇？学过理论力学的人一定明白它的原理——角动量守恒。</p>\n<p>首先我们来考虑一个简单的问题，为什么陀螺不会倒？<br>静止的陀螺，受到重力与支持力合成产生的力矩，最终一定会倒下：<br><img src=\"/old_images/2020/06/1785132415.jpg\" alt=\"Snipaste_2020-06-18_20-52-48.jpg\"><br>究其根本，正是力矩改变角动量，使其产生了旋转。<br>但是，当陀螺转起来，事情变得有点不一样了!<br>难道转了起来，它的角动量就不变了吗？不是的，无论如何，牛二是不会出错的！<br>只不过，角动量大小没有变（忽略损耗），而是方向变化了，这样也会有一个ΔL！<br><img src=\"/old_images/2020/06/1821389100.jpg\" alt=\"Snipaste_2020-06-18_20-57-29.jpg\"><br>这样，力矩的作用没有使陀螺倒下，而是让陀螺产生了进动！<br>这个例子生动形象地展现了三维世界中角动量定理为我们带来的无限可能与不可思议！</p>\n<p>接着，我们来看Lit Motors的例子<br>先让我们看一看它的主要结构：<br><img src=\"/old_images/2020/06/3567944637.jpg\" alt=\"Snipaste_2020-06-18_21-00-47.jpg\"><br>两个反向旋转的陀螺（飞轮），构成了使其平衡的主要结构。<br><img src=\"/old_images/2020/06/1955986387.jpg\" alt=\"Snipaste_2020-06-18_21-03-10.jpg\"><br>由角动量守恒我们知道，在不受外力矩的情况下，整个系统的角动量是不变的。<br>当我们用内力改变系统某些部分的角动量时，必然会产生另外一个力矩，维持这个角动量不变！<br>我们是用内力（电机）偏转其中一个飞轮，就会产生一个飞轮力矩：<br><img src=\"/old_images/2020/06/2792304263.jpg\" alt=\"Snipaste_2020-06-18_21-31-16.jpg\"><br>两个反向旋转的飞轮同时反向偏转，则抵消掉竖直方向上的力矩，和力矩在前进方向上，就可以防止Roll轴的倾覆！<br><img src=\"/old_images/2020/06/3236832836.jpg\" alt=\"Snipaste_2020-06-18_21-33-32.jpg\"><br>通常使用角度反馈进行闭环控制，实现平衡的功能。<br>这样一想，稚晖君做的这个动量轮倒立摆，其中的原理（动量轮），也是通过内力改变角动量（只不过这次是改变角动量的大小而不是方向），来产生力矩，实现平衡的。<br><img src=\"/old_images/2020/06/2780367333.jpg\" alt=\"Snipaste_2020-06-18_21-16-14.jpg\"><br>只不过这个方法只能抵御周期性扰动，如果扰动带有直流分量，那么系统会一直旋转（加速）。</p>\n<p>东大的四足机器人，则是使用了正交的两套Lit Motors的飞轮装置，使其可以同时保持Roll、Pitch两轴的平衡：<br><img src=\"/old_images/2020/06/1911627333.jpg\" alt=\"Snipaste_2020-06-18_21-24-03.jpg\"></p>\n<p>角动量定理真的能为我们带来许多意想不到的点子，又发现了下面这个好玩的东西，也是这个原理：<br><a href=\"https://www.bilibili.com/video/BV1qW411i7Mj/?spm_id_from=333.788.videocard.1\">神奇立方体 - 可以跳起来、保持平衡和自我运动 @柚子木字幕组</a></p>\n"},{"title":"电磁学中的物理量","date":"2020-06-10T23:11:00.000Z","toc":true,"_content":"感谢6系电机专业的**刘逸舟**同学用生动形象的例子为我讲解了电磁学的基础知识，没有他就没有这篇文章。\n\n电路中的物理量我们十分熟悉，在电阻上施加电压，就会形成电流。\n但是对于磁场的各种物理量，能否用类似的“磁路”来进行描述呢？答案是肯定的！\n\n首先，电能来源于电场，是电子具有的电势能（这个电势能可能来自于化学能——电池，也可能源自于机械能——发电机……等等）进行的释放所产生的能量。那么磁场的能量来自于哪里？\n![Snipaste_2020-06-11_19-05-22.jpg][1]\n由安培环路定律，我们可以发现，电流是产生磁场的方法之一，我们把这个产生磁场的能力定义为磁动势F（永磁体当然也能够产生磁场，因此也具有磁动势），磁动势在磁路中的定位就如同电动势在电路中的定位，具有给予磁场应力的属性。\n![Snipaste_2020-06-11_18-16-23.jpg][2]\n其中I表示电流，N表示线圈匝数，它的单位是 安*匝。\n![Snipaste_2020-06-11_18-26-45.jpg][3]\n有了磁动势，磁场中就会产生出类似电路中电流的东西，这就是磁通Φ；同样能够描述的还有磁感应强度B，它表示单位面积的磁通，更能够描述磁场的散布情况，磁通的单位是韦伯Wb，磁感应强度的单位是特斯拉T。\n![Snipaste_2020-06-11_18-27-07.jpg][4]\n有了电压（磁动势）电流（磁通），磁路中电阻的概念就是磁阻，与电阻类似，可表示成：\n其中L表示磁路长度，μ表示磁场的，S表示磁通流过的面积。\n![Snipaste_2020-06-11_18-39-42.jpg][5]\n又由于介质的存在，实际磁**场**强度H与磁**感应**强度B相差一个系数μ（正是之前的μ），H=μB\n这样一来，磁动势方程又可以写成：\n![Snipaste_2020-06-11_18-41-34.jpg][6]\n\n磁路是怎样向外界回馈能量的呢？这就涉及到一个电机中经常说到的量了——反电动势\n我们知道一根通有电流的导线在磁场中会产生力的作用，事实上大部分电机的工作原理就是这个简单的原理。\n![Snipaste_2020-06-11_18-49-27.jpg][7]\n但是如果这根导线仅拥有电流就能产生能量，那岂不是能量不守恒了？为了能让能量守恒，磁场会在移动中的导线（也就是常说的切割磁感线）两端加上一个反电动势，这样一来电流与电动势所产生的功率就是导线受力运动所消耗的功率。\n![Snipaste_2020-06-11_18-50-15.jpg][8]\n后来我们进一步拓展这个公式，就变成了人们熟知的反电势公式：\n![Snipaste_2020-06-11_18-53-47.jpg][9]\n（未归定方向，按一般规定的正方向的话确实应该加一个负号）\n这个公式说明了反电动势取决于磁通变化率，N代表的仍是线圈匝数，在多匝线圈中，产生的电动势叠加起来，就会产生N倍的效果。\n研究电机的人觉得这很麻烦，于是就把匝数与磁通合体，就有了我们常提到的磁链ψ。\n![Snipaste_2020-06-11_18-57-42.jpg][10]\n于是反电势就与磁链变化率相等了。\n磁链与电流成正比，这个比例关系就是我们熟知的电感。\n![Snipaste_2020-07-15_11-24-28.jpg][11]\n\n总结一下！\n磁动势由电流而产生   ————   外界产生磁场的方法（安培环路定律）\n\n经过磁路中的磁阻生成了磁通  ————  磁场内部的磁芯特性\n\n磁场与导线相对运动  ————  外界感受磁场存在（法拉第电磁感应定律）\n\n\n  [1]: /old_images/2020/06/2730705132.jpg\n  [2]: /old_images/2020/06/3332546483.jpg\n  [3]: /old_images/2020/06/4143798911.jpg\n  [4]: /old_images/2020/06/3579642186.jpg\n  [5]: /old_images/2020/06/275706257.jpg\n  [6]: /old_images/2020/06/3831150800.jpg\n  [7]: /old_images/2020/06/1085139085.jpg\n  [8]: /old_images/2020/06/3795421197.jpg\n  [9]: /old_images/2020/06/1930281352.jpg\n  [10]: /old_images/2020/06/348952594.jpg\n  [11]: /old_images/2020/07/3570375741.jpg\n","source":"_posts/电磁学中的物理量.md","raw":"title: 电磁学中的物理量\ndate: 2020-06-11 07:11:00\ncategories: 物数\ntags: []\ntoc: true\n---\n感谢6系电机专业的**刘逸舟**同学用生动形象的例子为我讲解了电磁学的基础知识，没有他就没有这篇文章。\n\n电路中的物理量我们十分熟悉，在电阻上施加电压，就会形成电流。\n但是对于磁场的各种物理量，能否用类似的“磁路”来进行描述呢？答案是肯定的！\n\n首先，电能来源于电场，是电子具有的电势能（这个电势能可能来自于化学能——电池，也可能源自于机械能——发电机……等等）进行的释放所产生的能量。那么磁场的能量来自于哪里？\n![Snipaste_2020-06-11_19-05-22.jpg][1]\n由安培环路定律，我们可以发现，电流是产生磁场的方法之一，我们把这个产生磁场的能力定义为磁动势F（永磁体当然也能够产生磁场，因此也具有磁动势），磁动势在磁路中的定位就如同电动势在电路中的定位，具有给予磁场应力的属性。\n![Snipaste_2020-06-11_18-16-23.jpg][2]\n其中I表示电流，N表示线圈匝数，它的单位是 安*匝。\n![Snipaste_2020-06-11_18-26-45.jpg][3]\n有了磁动势，磁场中就会产生出类似电路中电流的东西，这就是磁通Φ；同样能够描述的还有磁感应强度B，它表示单位面积的磁通，更能够描述磁场的散布情况，磁通的单位是韦伯Wb，磁感应强度的单位是特斯拉T。\n![Snipaste_2020-06-11_18-27-07.jpg][4]\n有了电压（磁动势）电流（磁通），磁路中电阻的概念就是磁阻，与电阻类似，可表示成：\n其中L表示磁路长度，μ表示磁场的，S表示磁通流过的面积。\n![Snipaste_2020-06-11_18-39-42.jpg][5]\n又由于介质的存在，实际磁**场**强度H与磁**感应**强度B相差一个系数μ（正是之前的μ），H=μB\n这样一来，磁动势方程又可以写成：\n![Snipaste_2020-06-11_18-41-34.jpg][6]\n\n磁路是怎样向外界回馈能量的呢？这就涉及到一个电机中经常说到的量了——反电动势\n我们知道一根通有电流的导线在磁场中会产生力的作用，事实上大部分电机的工作原理就是这个简单的原理。\n![Snipaste_2020-06-11_18-49-27.jpg][7]\n但是如果这根导线仅拥有电流就能产生能量，那岂不是能量不守恒了？为了能让能量守恒，磁场会在移动中的导线（也就是常说的切割磁感线）两端加上一个反电动势，这样一来电流与电动势所产生的功率就是导线受力运动所消耗的功率。\n![Snipaste_2020-06-11_18-50-15.jpg][8]\n后来我们进一步拓展这个公式，就变成了人们熟知的反电势公式：\n![Snipaste_2020-06-11_18-53-47.jpg][9]\n（未归定方向，按一般规定的正方向的话确实应该加一个负号）\n这个公式说明了反电动势取决于磁通变化率，N代表的仍是线圈匝数，在多匝线圈中，产生的电动势叠加起来，就会产生N倍的效果。\n研究电机的人觉得这很麻烦，于是就把匝数与磁通合体，就有了我们常提到的磁链ψ。\n![Snipaste_2020-06-11_18-57-42.jpg][10]\n于是反电势就与磁链变化率相等了。\n磁链与电流成正比，这个比例关系就是我们熟知的电感。\n![Snipaste_2020-07-15_11-24-28.jpg][11]\n\n总结一下！\n磁动势由电流而产生   ————   外界产生磁场的方法（安培环路定律）\n\n经过磁路中的磁阻生成了磁通  ————  磁场内部的磁芯特性\n\n磁场与导线相对运动  ————  外界感受磁场存在（法拉第电磁感应定律）\n\n\n  [1]: /old_images/2020/06/2730705132.jpg\n  [2]: /old_images/2020/06/3332546483.jpg\n  [3]: /old_images/2020/06/4143798911.jpg\n  [4]: /old_images/2020/06/3579642186.jpg\n  [5]: /old_images/2020/06/275706257.jpg\n  [6]: /old_images/2020/06/3831150800.jpg\n  [7]: /old_images/2020/06/1085139085.jpg\n  [8]: /old_images/2020/06/3795421197.jpg\n  [9]: /old_images/2020/06/1930281352.jpg\n  [10]: /old_images/2020/06/348952594.jpg\n  [11]: /old_images/2020/07/3570375741.jpg\n","slug":"电磁学中的物理量","published":1,"updated":"2020-12-14T12:21:00.102Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0cf002a7p196irzeeb3","content":"<p>感谢6系电机专业的<strong>刘逸舟</strong>同学用生动形象的例子为我讲解了电磁学的基础知识，没有他就没有这篇文章。</p>\n<p>电路中的物理量我们十分熟悉，在电阻上施加电压，就会形成电流。<br>但是对于磁场的各种物理量，能否用类似的“磁路”来进行描述呢？答案是肯定的！</p>\n<p>首先，电能来源于电场，是电子具有的电势能（这个电势能可能来自于化学能——电池，也可能源自于机械能——发电机……等等）进行的释放所产生的能量。那么磁场的能量来自于哪里？<br><img src=\"/old_images/2020/06/2730705132.jpg\" alt=\"Snipaste_2020-06-11_19-05-22.jpg\"><br>由安培环路定律，我们可以发现，电流是产生磁场的方法之一，我们把这个产生磁场的能力定义为磁动势F（永磁体当然也能够产生磁场，因此也具有磁动势），磁动势在磁路中的定位就如同电动势在电路中的定位，具有给予磁场应力的属性。<br><img src=\"/old_images/2020/06/3332546483.jpg\" alt=\"Snipaste_2020-06-11_18-16-23.jpg\"><br>其中I表示电流，N表示线圈匝数，它的单位是 安*匝。<br><img src=\"/old_images/2020/06/4143798911.jpg\" alt=\"Snipaste_2020-06-11_18-26-45.jpg\"><br>有了磁动势，磁场中就会产生出类似电路中电流的东西，这就是磁通Φ；同样能够描述的还有磁感应强度B，它表示单位面积的磁通，更能够描述磁场的散布情况，磁通的单位是韦伯Wb，磁感应强度的单位是特斯拉T。<br><img src=\"/old_images/2020/06/3579642186.jpg\" alt=\"Snipaste_2020-06-11_18-27-07.jpg\"><br>有了电压（磁动势）电流（磁通），磁路中电阻的概念就是磁阻，与电阻类似，可表示成：<br>其中L表示磁路长度，μ表示磁场的，S表示磁通流过的面积。<br><img src=\"/old_images/2020/06/275706257.jpg\" alt=\"Snipaste_2020-06-11_18-39-42.jpg\"><br>又由于介质的存在，实际磁<strong>场</strong>强度H与磁<strong>感应</strong>强度B相差一个系数μ（正是之前的μ），H=μB<br>这样一来，磁动势方程又可以写成：<br><img src=\"/old_images/2020/06/3831150800.jpg\" alt=\"Snipaste_2020-06-11_18-41-34.jpg\"></p>\n<p>磁路是怎样向外界回馈能量的呢？这就涉及到一个电机中经常说到的量了——反电动势<br>我们知道一根通有电流的导线在磁场中会产生力的作用，事实上大部分电机的工作原理就是这个简单的原理。<br><img src=\"/old_images/2020/06/1085139085.jpg\" alt=\"Snipaste_2020-06-11_18-49-27.jpg\"><br>但是如果这根导线仅拥有电流就能产生能量，那岂不是能量不守恒了？为了能让能量守恒，磁场会在移动中的导线（也就是常说的切割磁感线）两端加上一个反电动势，这样一来电流与电动势所产生的功率就是导线受力运动所消耗的功率。<br><img src=\"/old_images/2020/06/3795421197.jpg\" alt=\"Snipaste_2020-06-11_18-50-15.jpg\"><br>后来我们进一步拓展这个公式，就变成了人们熟知的反电势公式：<br><img src=\"/old_images/2020/06/1930281352.jpg\" alt=\"Snipaste_2020-06-11_18-53-47.jpg\"><br>（未归定方向，按一般规定的正方向的话确实应该加一个负号）<br>这个公式说明了反电动势取决于磁通变化率，N代表的仍是线圈匝数，在多匝线圈中，产生的电动势叠加起来，就会产生N倍的效果。<br>研究电机的人觉得这很麻烦，于是就把匝数与磁通合体，就有了我们常提到的磁链ψ。<br><img src=\"/old_images/2020/06/348952594.jpg\" alt=\"Snipaste_2020-06-11_18-57-42.jpg\"><br>于是反电势就与磁链变化率相等了。<br>磁链与电流成正比，这个比例关系就是我们熟知的电感。<br><img src=\"/old_images/2020/07/3570375741.jpg\" alt=\"Snipaste_2020-07-15_11-24-28.jpg\"></p>\n<p>总结一下！<br>磁动势由电流而产生   ————   外界产生磁场的方法（安培环路定律）</p>\n<p>经过磁路中的磁阻生成了磁通  ————  磁场内部的磁芯特性</p>\n<p>磁场与导线相对运动  ————  外界感受磁场存在（法拉第电磁感应定律）</p>\n","site":{"data":{}},"excerpt":"","more":"<p>感谢6系电机专业的<strong>刘逸舟</strong>同学用生动形象的例子为我讲解了电磁学的基础知识，没有他就没有这篇文章。</p>\n<p>电路中的物理量我们十分熟悉，在电阻上施加电压，就会形成电流。<br>但是对于磁场的各种物理量，能否用类似的“磁路”来进行描述呢？答案是肯定的！</p>\n<p>首先，电能来源于电场，是电子具有的电势能（这个电势能可能来自于化学能——电池，也可能源自于机械能——发电机……等等）进行的释放所产生的能量。那么磁场的能量来自于哪里？<br><img src=\"/old_images/2020/06/2730705132.jpg\" alt=\"Snipaste_2020-06-11_19-05-22.jpg\"><br>由安培环路定律，我们可以发现，电流是产生磁场的方法之一，我们把这个产生磁场的能力定义为磁动势F（永磁体当然也能够产生磁场，因此也具有磁动势），磁动势在磁路中的定位就如同电动势在电路中的定位，具有给予磁场应力的属性。<br><img src=\"/old_images/2020/06/3332546483.jpg\" alt=\"Snipaste_2020-06-11_18-16-23.jpg\"><br>其中I表示电流，N表示线圈匝数，它的单位是 安*匝。<br><img src=\"/old_images/2020/06/4143798911.jpg\" alt=\"Snipaste_2020-06-11_18-26-45.jpg\"><br>有了磁动势，磁场中就会产生出类似电路中电流的东西，这就是磁通Φ；同样能够描述的还有磁感应强度B，它表示单位面积的磁通，更能够描述磁场的散布情况，磁通的单位是韦伯Wb，磁感应强度的单位是特斯拉T。<br><img src=\"/old_images/2020/06/3579642186.jpg\" alt=\"Snipaste_2020-06-11_18-27-07.jpg\"><br>有了电压（磁动势）电流（磁通），磁路中电阻的概念就是磁阻，与电阻类似，可表示成：<br>其中L表示磁路长度，μ表示磁场的，S表示磁通流过的面积。<br><img src=\"/old_images/2020/06/275706257.jpg\" alt=\"Snipaste_2020-06-11_18-39-42.jpg\"><br>又由于介质的存在，实际磁<strong>场</strong>强度H与磁<strong>感应</strong>强度B相差一个系数μ（正是之前的μ），H=μB<br>这样一来，磁动势方程又可以写成：<br><img src=\"/old_images/2020/06/3831150800.jpg\" alt=\"Snipaste_2020-06-11_18-41-34.jpg\"></p>\n<p>磁路是怎样向外界回馈能量的呢？这就涉及到一个电机中经常说到的量了——反电动势<br>我们知道一根通有电流的导线在磁场中会产生力的作用，事实上大部分电机的工作原理就是这个简单的原理。<br><img src=\"/old_images/2020/06/1085139085.jpg\" alt=\"Snipaste_2020-06-11_18-49-27.jpg\"><br>但是如果这根导线仅拥有电流就能产生能量，那岂不是能量不守恒了？为了能让能量守恒，磁场会在移动中的导线（也就是常说的切割磁感线）两端加上一个反电动势，这样一来电流与电动势所产生的功率就是导线受力运动所消耗的功率。<br><img src=\"/old_images/2020/06/3795421197.jpg\" alt=\"Snipaste_2020-06-11_18-50-15.jpg\"><br>后来我们进一步拓展这个公式，就变成了人们熟知的反电势公式：<br><img src=\"/old_images/2020/06/1930281352.jpg\" alt=\"Snipaste_2020-06-11_18-53-47.jpg\"><br>（未归定方向，按一般规定的正方向的话确实应该加一个负号）<br>这个公式说明了反电动势取决于磁通变化率，N代表的仍是线圈匝数，在多匝线圈中，产生的电动势叠加起来，就会产生N倍的效果。<br>研究电机的人觉得这很麻烦，于是就把匝数与磁通合体，就有了我们常提到的磁链ψ。<br><img src=\"/old_images/2020/06/348952594.jpg\" alt=\"Snipaste_2020-06-11_18-57-42.jpg\"><br>于是反电势就与磁链变化率相等了。<br>磁链与电流成正比，这个比例关系就是我们熟知的电感。<br><img src=\"/old_images/2020/07/3570375741.jpg\" alt=\"Snipaste_2020-07-15_11-24-28.jpg\"></p>\n<p>总结一下！<br>磁动势由电流而产生   ————   外界产生磁场的方法（安培环路定律）</p>\n<p>经过磁路中的磁阻生成了磁通  ————  磁场内部的磁芯特性</p>\n<p>磁场与导线相对运动  ————  外界感受磁场存在（法拉第电磁感应定律）</p>\n"},{"title":"留数。。。也太难了吧","date":"2020-05-06T04:49:00.000Z","toc":true,"_content":"学习复变函数时，我们一定曾被它折磨得死去活来，但是在实际应用中，这个家伙还算有点用处，今天就来介绍一下这个令人又爱又恨的家伙——留数。主要搬运一下华中科技大学复变函数MOOC的内容。\n\n\n首先我们要了解复变函数的一个重要概念——孤立奇点：\n![Snipaste_2020-05-06_21-00-24.jpg][1]\n我们最常见的孤立奇点当属极点了，极点在判别系统稳定，系统微分方程以及差分方程的求解都有重要的作用，所以研究这些特殊的孤立奇点也很有必要。\n\n首先我们需要知道一个复变函数积分的重要性质：\n![Snipaste_2020-05-06_21-31-56.jpg][2]\n\n留数是对复变函数f(z)洛朗级数展开后闭路积分唯一剩余的洛朗系数，它的定义如下：\n![Snipaste_2020-05-06_21-29-51.jpg][3]\n\n根据那个闭路积分，引出留数定理：\n![Snipaste_2020-05-06_21-32-47.jpg][4]\n\n对于极点这一类型的孤立奇点，留数有如下的计算法则：\n![Snipaste_2020-05-06_21-35-43.jpg][5]\n对于一阶极点，有如下法则求取留数：\n![Snipaste_2020-05-06_21-37-42.jpg][6]\n\n说了这么多关于留数的性质，留数以及留数定理有什么用呢？\n\n留数定理的应用：\n在求取z逆变换时，就可以使用留数法：\n![Snipaste_2020-05-06_21-59-25.jpg][8]\n![Snipaste_2020-05-06_21-59-37.jpg][9]\n\n其实，留数定理化简了闭路积分的运算，我们如果能将实函数的定积分表示成闭路积分，那么就可以利用留数简化定积分的运算。\n![Snipaste_2020-05-06_21-42-59.jpg][7]\n\n\n  [1]: /old_images/2020/05/3062393400.jpg\n  [2]: /old_images/2020/05/3326287196.jpg\n  [3]: /old_images/2020/05/3310307667.jpg\n  [4]: /old_images/2020/05/1571959298.jpg\n  [5]: /old_images/2020/05/4002000137.jpg\n  [6]: /old_images/2020/05/1353804718.jpg\n  [7]: /old_images/2020/05/2541652972.jpg\n  [8]: /old_images/2020/05/133193778.jpg\n  [9]: /old_images/2020/05/999634898.jpg\n","source":"_posts/留数。。。也太难了吧.md","raw":"title: 留数。。。也太难了吧\ndate: 2020-05-06 12:49:00\ncategories: 物数\ntags: []\ntoc: true\n---\n学习复变函数时，我们一定曾被它折磨得死去活来，但是在实际应用中，这个家伙还算有点用处，今天就来介绍一下这个令人又爱又恨的家伙——留数。主要搬运一下华中科技大学复变函数MOOC的内容。\n\n\n首先我们要了解复变函数的一个重要概念——孤立奇点：\n![Snipaste_2020-05-06_21-00-24.jpg][1]\n我们最常见的孤立奇点当属极点了，极点在判别系统稳定，系统微分方程以及差分方程的求解都有重要的作用，所以研究这些特殊的孤立奇点也很有必要。\n\n首先我们需要知道一个复变函数积分的重要性质：\n![Snipaste_2020-05-06_21-31-56.jpg][2]\n\n留数是对复变函数f(z)洛朗级数展开后闭路积分唯一剩余的洛朗系数，它的定义如下：\n![Snipaste_2020-05-06_21-29-51.jpg][3]\n\n根据那个闭路积分，引出留数定理：\n![Snipaste_2020-05-06_21-32-47.jpg][4]\n\n对于极点这一类型的孤立奇点，留数有如下的计算法则：\n![Snipaste_2020-05-06_21-35-43.jpg][5]\n对于一阶极点，有如下法则求取留数：\n![Snipaste_2020-05-06_21-37-42.jpg][6]\n\n说了这么多关于留数的性质，留数以及留数定理有什么用呢？\n\n留数定理的应用：\n在求取z逆变换时，就可以使用留数法：\n![Snipaste_2020-05-06_21-59-25.jpg][8]\n![Snipaste_2020-05-06_21-59-37.jpg][9]\n\n其实，留数定理化简了闭路积分的运算，我们如果能将实函数的定积分表示成闭路积分，那么就可以利用留数简化定积分的运算。\n![Snipaste_2020-05-06_21-42-59.jpg][7]\n\n\n  [1]: /old_images/2020/05/3062393400.jpg\n  [2]: /old_images/2020/05/3326287196.jpg\n  [3]: /old_images/2020/05/3310307667.jpg\n  [4]: /old_images/2020/05/1571959298.jpg\n  [5]: /old_images/2020/05/4002000137.jpg\n  [6]: /old_images/2020/05/1353804718.jpg\n  [7]: /old_images/2020/05/2541652972.jpg\n  [8]: /old_images/2020/05/133193778.jpg\n  [9]: /old_images/2020/05/999634898.jpg\n","slug":"留数。。。也太难了吧","published":1,"updated":"2020-12-14T12:21:51.209Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0cg002c7p19hvmb5106","content":"<p>学习复变函数时，我们一定曾被它折磨得死去活来，但是在实际应用中，这个家伙还算有点用处，今天就来介绍一下这个令人又爱又恨的家伙——留数。主要搬运一下华中科技大学复变函数MOOC的内容。</p>\n<p>首先我们要了解复变函数的一个重要概念——孤立奇点：<br><img src=\"/old_images/2020/05/3062393400.jpg\" alt=\"Snipaste_2020-05-06_21-00-24.jpg\"><br>我们最常见的孤立奇点当属极点了，极点在判别系统稳定，系统微分方程以及差分方程的求解都有重要的作用，所以研究这些特殊的孤立奇点也很有必要。</p>\n<p>首先我们需要知道一个复变函数积分的重要性质：<br><img src=\"/old_images/2020/05/3326287196.jpg\" alt=\"Snipaste_2020-05-06_21-31-56.jpg\"></p>\n<p>留数是对复变函数f(z)洛朗级数展开后闭路积分唯一剩余的洛朗系数，它的定义如下：<br><img src=\"/old_images/2020/05/3310307667.jpg\" alt=\"Snipaste_2020-05-06_21-29-51.jpg\"></p>\n<p>根据那个闭路积分，引出留数定理：<br><img src=\"/old_images/2020/05/1571959298.jpg\" alt=\"Snipaste_2020-05-06_21-32-47.jpg\"></p>\n<p>对于极点这一类型的孤立奇点，留数有如下的计算法则：<br><img src=\"/old_images/2020/05/4002000137.jpg\" alt=\"Snipaste_2020-05-06_21-35-43.jpg\"><br>对于一阶极点，有如下法则求取留数：<br><img src=\"/old_images/2020/05/1353804718.jpg\" alt=\"Snipaste_2020-05-06_21-37-42.jpg\"></p>\n<p>说了这么多关于留数的性质，留数以及留数定理有什么用呢？</p>\n<p>留数定理的应用：<br>在求取z逆变换时，就可以使用留数法：<br><img src=\"/old_images/2020/05/133193778.jpg\" alt=\"Snipaste_2020-05-06_21-59-25.jpg\"><br><img src=\"/old_images/2020/05/999634898.jpg\" alt=\"Snipaste_2020-05-06_21-59-37.jpg\"></p>\n<p>其实，留数定理化简了闭路积分的运算，我们如果能将实函数的定积分表示成闭路积分，那么就可以利用留数简化定积分的运算。<br><img src=\"/old_images/2020/05/2541652972.jpg\" alt=\"Snipaste_2020-05-06_21-42-59.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>学习复变函数时，我们一定曾被它折磨得死去活来，但是在实际应用中，这个家伙还算有点用处，今天就来介绍一下这个令人又爱又恨的家伙——留数。主要搬运一下华中科技大学复变函数MOOC的内容。</p>\n<p>首先我们要了解复变函数的一个重要概念——孤立奇点：<br><img src=\"/old_images/2020/05/3062393400.jpg\" alt=\"Snipaste_2020-05-06_21-00-24.jpg\"><br>我们最常见的孤立奇点当属极点了，极点在判别系统稳定，系统微分方程以及差分方程的求解都有重要的作用，所以研究这些特殊的孤立奇点也很有必要。</p>\n<p>首先我们需要知道一个复变函数积分的重要性质：<br><img src=\"/old_images/2020/05/3326287196.jpg\" alt=\"Snipaste_2020-05-06_21-31-56.jpg\"></p>\n<p>留数是对复变函数f(z)洛朗级数展开后闭路积分唯一剩余的洛朗系数，它的定义如下：<br><img src=\"/old_images/2020/05/3310307667.jpg\" alt=\"Snipaste_2020-05-06_21-29-51.jpg\"></p>\n<p>根据那个闭路积分，引出留数定理：<br><img src=\"/old_images/2020/05/1571959298.jpg\" alt=\"Snipaste_2020-05-06_21-32-47.jpg\"></p>\n<p>对于极点这一类型的孤立奇点，留数有如下的计算法则：<br><img src=\"/old_images/2020/05/4002000137.jpg\" alt=\"Snipaste_2020-05-06_21-35-43.jpg\"><br>对于一阶极点，有如下法则求取留数：<br><img src=\"/old_images/2020/05/1353804718.jpg\" alt=\"Snipaste_2020-05-06_21-37-42.jpg\"></p>\n<p>说了这么多关于留数的性质，留数以及留数定理有什么用呢？</p>\n<p>留数定理的应用：<br>在求取z逆变换时，就可以使用留数法：<br><img src=\"/old_images/2020/05/133193778.jpg\" alt=\"Snipaste_2020-05-06_21-59-25.jpg\"><br><img src=\"/old_images/2020/05/999634898.jpg\" alt=\"Snipaste_2020-05-06_21-59-37.jpg\"></p>\n<p>其实，留数定理化简了闭路积分的运算，我们如果能将实函数的定积分表示成闭路积分，那么就可以利用留数简化定积分的运算。<br><img src=\"/old_images/2020/05/2541652972.jpg\" alt=\"Snipaste_2020-05-06_21-42-59.jpg\"></p>\n"},{"title":"立FLAG专用帖！","date":"2020-03-02T19:04:00.000Z","toc":true,"_content":"把想做的事情放到这里来！\n\n## 想学的东西 ##\n\n 1. 数学基础\n 2. Linux驱动开发\n 3. Numpy and Matlab\n 4. 数字信号处理\n 5. ROS\n 6. 概率机器人\n\n## 想写的文章 ##\n \n 1. 高频注入法\n 2. MPC\n 3. FIR与IIR\n 4. SVM、马尔可夫\n 5. 强化学习\n\n保证不鸽！！！\n(oﾟvﾟ)ノ\n(oﾟvﾟ)ノ\n(oﾟvﾟ)ノ\n(oﾟvﾟ)ノ\n(oﾟvﾟ)ノ\n加油加油！\n","source":"_posts/立FLAG专用帖！.md","raw":"title: 立FLAG专用帖！\ndate: 2020-03-03 03:04:00\ncategories: 日常\ntags: []\ntoc: true\n---\n把想做的事情放到这里来！\n\n## 想学的东西 ##\n\n 1. 数学基础\n 2. Linux驱动开发\n 3. Numpy and Matlab\n 4. 数字信号处理\n 5. ROS\n 6. 概率机器人\n\n## 想写的文章 ##\n \n 1. 高频注入法\n 2. MPC\n 3. FIR与IIR\n 4. SVM、马尔可夫\n 5. 强化学习\n\n保证不鸽！！！\n(oﾟvﾟ)ノ\n(oﾟvﾟ)ノ\n(oﾟvﾟ)ノ\n(oﾟvﾟ)ノ\n(oﾟvﾟ)ノ\n加油加油！\n","slug":"立FLAG专用帖！","published":1,"updated":"2020-12-14T12:21:48.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0cg002e7p19eeev0qb5","content":"<p>把想做的事情放到这里来！</p>\n<h2 id=\"想学的东西\"><a href=\"#想学的东西\" class=\"headerlink\" title=\"想学的东西\"></a>想学的东西</h2><ol>\n<li>数学基础</li>\n<li>Linux驱动开发</li>\n<li>Numpy and Matlab</li>\n<li>数字信号处理</li>\n<li>ROS</li>\n<li>概率机器人</li>\n</ol>\n<h2 id=\"想写的文章\"><a href=\"#想写的文章\" class=\"headerlink\" title=\"想写的文章\"></a>想写的文章</h2><ol>\n<li>高频注入法</li>\n<li>MPC</li>\n<li>FIR与IIR</li>\n<li>SVM、马尔可夫</li>\n<li>强化学习</li>\n</ol>\n<p>保证不鸽！！！<br>(oﾟvﾟ)ノ<br>(oﾟvﾟ)ノ<br>(oﾟvﾟ)ノ<br>(oﾟvﾟ)ノ<br>(oﾟvﾟ)ノ<br>加油加油！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>把想做的事情放到这里来！</p>\n<h2 id=\"想学的东西\"><a href=\"#想学的东西\" class=\"headerlink\" title=\"想学的东西\"></a>想学的东西</h2><ol>\n<li>数学基础</li>\n<li>Linux驱动开发</li>\n<li>Numpy and Matlab</li>\n<li>数字信号处理</li>\n<li>ROS</li>\n<li>概率机器人</li>\n</ol>\n<h2 id=\"想写的文章\"><a href=\"#想写的文章\" class=\"headerlink\" title=\"想写的文章\"></a>想写的文章</h2><ol>\n<li>高频注入法</li>\n<li>MPC</li>\n<li>FIR与IIR</li>\n<li>SVM、马尔可夫</li>\n<li>强化学习</li>\n</ol>\n<p>保证不鸽！！！<br>(oﾟvﾟ)ノ<br>(oﾟvﾟ)ノ<br>(oﾟvﾟ)ノ<br>(oﾟvﾟ)ノ<br>(oﾟvﾟ)ノ<br>加油加油！</p>\n"},{"title":"第二次硬件尝试之开关电源","date":"2020-09-12T19:45:00.000Z","toc":true,"_content":"为了能使树莓派脱离有线的束缚，我这次就做一个简单的锂电池充放电电路来练练手(●ˇ∀ˇ●)\n（第一次做了更为简单的STM32-UARTHUB）\n电源芯片选择的是珠海智融科技有限公司的SW6124，SW6124是一款高度集成的电源管理IC，适用于快速充电移动电源应用。 它集成了4A开关充电器，18W同步升压，PD / QC / FCP / PE / SFCP快速充电协议，电量计和电源控制器。 SW6124借助简单的外部组件，为快速充电电池管理提供了交钥匙的高效解决方案。\n\n手册最后给出了电池管理充放电应用电路图：\n![Snipaste_2020-09-13_15-05-50.jpg][1]\n已经比较符合我们的需求了，我们在其之上稍作更改，去掉了USB-A和Micro USB的接口，仅保留USB Type-C接口。并且使用一个单刀双置开关切换USB供电与电池供电。\n原理很简单，在插入USB TypeC时，使用开关将5V输出直接与TypeC电源连接，直接向树莓派供电，与此同时，TypeC电源也向电池充电。在未插入USB时，使5V输出与Boost电路输出端相连接，使用电池进行供电。\n画出原理图：\n![Snipaste_2020-09-13_15-10-15.jpg][2]\nTypeC接口部分；\n![Snipaste_2020-09-13_15-10-54.jpg][3]\n开关，树莓派插针部分；\n![Snipaste_2020-09-13_15-11-29.jpg][4]\n芯片电量显示部分；\n![Snipaste_2020-09-13_15-11-48.jpg][5]\n芯片Boost电路（3.7V->5V）及控制部分。\n这个电路最重要的部分就是开关电源部分，好在SW6124集成了开关管以及控制电路，我们只需要外加一个电感就能实现Boost升压的功能。\n\n最后就是PCB绘制：\n首先进行布局布线。简单的PCB布局可以按照原理图的分布进行，并且要合理设计接口位置，注意芯片手册上的说明和注意事项。布线过程中注意根据线所流经的电流大小调整线的粗细，上层下层横纵交错，GND网络使用覆铜进行连接。\n![Snipaste_2020-09-13_15-23-20.jpg][7]\n\n接下来是覆铜。对于信号要求较高的板子，最好分离信号地与电源地，并且在覆铜结束后检查是否留有未接通的GND网络，进行微调（比如打过孔）。\n最终一个简单的锂电池充放电电路板就绘制完成了，接下来就是焊接和调试啦！\n![Snipaste_2020-09-13_15-27-03.jpg][6]\n\n\n\n\n  [1]: /old_images/2020/09/2522050574.jpg\n  [2]: /old_images/2020/09/1356202506.jpg\n  [3]: /old_images/2020/09/2234319971.jpg\n  [4]: /old_images/2020/09/2393108645.jpg\n  [5]: /old_images/2020/09/2995037215.jpg\n  [6]: /old_images/2020/09/1988211125.jpg\n  [7]: /old_images/2020/09/2369037501.jpg\n","source":"_posts/第二次硬件尝试之开关电源.md","raw":"title: 第二次硬件尝试之开关电源\ndate: 2020-09-13 03:45:00\ncategories: 开发\ntags: []\ntoc: true\n---\n为了能使树莓派脱离有线的束缚，我这次就做一个简单的锂电池充放电电路来练练手(●ˇ∀ˇ●)\n（第一次做了更为简单的STM32-UARTHUB）\n电源芯片选择的是珠海智融科技有限公司的SW6124，SW6124是一款高度集成的电源管理IC，适用于快速充电移动电源应用。 它集成了4A开关充电器，18W同步升压，PD / QC / FCP / PE / SFCP快速充电协议，电量计和电源控制器。 SW6124借助简单的外部组件，为快速充电电池管理提供了交钥匙的高效解决方案。\n\n手册最后给出了电池管理充放电应用电路图：\n![Snipaste_2020-09-13_15-05-50.jpg][1]\n已经比较符合我们的需求了，我们在其之上稍作更改，去掉了USB-A和Micro USB的接口，仅保留USB Type-C接口。并且使用一个单刀双置开关切换USB供电与电池供电。\n原理很简单，在插入USB TypeC时，使用开关将5V输出直接与TypeC电源连接，直接向树莓派供电，与此同时，TypeC电源也向电池充电。在未插入USB时，使5V输出与Boost电路输出端相连接，使用电池进行供电。\n画出原理图：\n![Snipaste_2020-09-13_15-10-15.jpg][2]\nTypeC接口部分；\n![Snipaste_2020-09-13_15-10-54.jpg][3]\n开关，树莓派插针部分；\n![Snipaste_2020-09-13_15-11-29.jpg][4]\n芯片电量显示部分；\n![Snipaste_2020-09-13_15-11-48.jpg][5]\n芯片Boost电路（3.7V->5V）及控制部分。\n这个电路最重要的部分就是开关电源部分，好在SW6124集成了开关管以及控制电路，我们只需要外加一个电感就能实现Boost升压的功能。\n\n最后就是PCB绘制：\n首先进行布局布线。简单的PCB布局可以按照原理图的分布进行，并且要合理设计接口位置，注意芯片手册上的说明和注意事项。布线过程中注意根据线所流经的电流大小调整线的粗细，上层下层横纵交错，GND网络使用覆铜进行连接。\n![Snipaste_2020-09-13_15-23-20.jpg][7]\n\n接下来是覆铜。对于信号要求较高的板子，最好分离信号地与电源地，并且在覆铜结束后检查是否留有未接通的GND网络，进行微调（比如打过孔）。\n最终一个简单的锂电池充放电电路板就绘制完成了，接下来就是焊接和调试啦！\n![Snipaste_2020-09-13_15-27-03.jpg][6]\n\n\n\n\n  [1]: /old_images/2020/09/2522050574.jpg\n  [2]: /old_images/2020/09/1356202506.jpg\n  [3]: /old_images/2020/09/2234319971.jpg\n  [4]: /old_images/2020/09/2393108645.jpg\n  [5]: /old_images/2020/09/2995037215.jpg\n  [6]: /old_images/2020/09/1988211125.jpg\n  [7]: /old_images/2020/09/2369037501.jpg\n","slug":"第二次硬件尝试之开关电源","published":1,"updated":"2020-12-14T12:20:57.326Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0ch002g7p19fw8w0ni7","content":"<p>为了能使树莓派脱离有线的束缚，我这次就做一个简单的锂电池充放电电路来练练手(●ˇ∀ˇ●)<br>（第一次做了更为简单的STM32-UARTHUB）<br>电源芯片选择的是珠海智融科技有限公司的SW6124，SW6124是一款高度集成的电源管理IC，适用于快速充电移动电源应用。 它集成了4A开关充电器，18W同步升压，PD / QC / FCP / PE / SFCP快速充电协议，电量计和电源控制器。 SW6124借助简单的外部组件，为快速充电电池管理提供了交钥匙的高效解决方案。</p>\n<p>手册最后给出了电池管理充放电应用电路图：<br><img src=\"/old_images/2020/09/2522050574.jpg\" alt=\"Snipaste_2020-09-13_15-05-50.jpg\"><br>已经比较符合我们的需求了，我们在其之上稍作更改，去掉了USB-A和Micro USB的接口，仅保留USB Type-C接口。并且使用一个单刀双置开关切换USB供电与电池供电。<br>原理很简单，在插入USB TypeC时，使用开关将5V输出直接与TypeC电源连接，直接向树莓派供电，与此同时，TypeC电源也向电池充电。在未插入USB时，使5V输出与Boost电路输出端相连接，使用电池进行供电。<br>画出原理图：<br><img src=\"/old_images/2020/09/1356202506.jpg\" alt=\"Snipaste_2020-09-13_15-10-15.jpg\"><br>TypeC接口部分；<br><img src=\"/old_images/2020/09/2234319971.jpg\" alt=\"Snipaste_2020-09-13_15-10-54.jpg\"><br>开关，树莓派插针部分；<br><img src=\"/old_images/2020/09/2393108645.jpg\" alt=\"Snipaste_2020-09-13_15-11-29.jpg\"><br>芯片电量显示部分；<br><img src=\"/old_images/2020/09/2995037215.jpg\" alt=\"Snipaste_2020-09-13_15-11-48.jpg\"><br>芯片Boost电路（3.7V-&gt;5V）及控制部分。<br>这个电路最重要的部分就是开关电源部分，好在SW6124集成了开关管以及控制电路，我们只需要外加一个电感就能实现Boost升压的功能。</p>\n<p>最后就是PCB绘制：<br>首先进行布局布线。简单的PCB布局可以按照原理图的分布进行，并且要合理设计接口位置，注意芯片手册上的说明和注意事项。布线过程中注意根据线所流经的电流大小调整线的粗细，上层下层横纵交错，GND网络使用覆铜进行连接。<br><img src=\"/old_images/2020/09/2369037501.jpg\" alt=\"Snipaste_2020-09-13_15-23-20.jpg\"></p>\n<p>接下来是覆铜。对于信号要求较高的板子，最好分离信号地与电源地，并且在覆铜结束后检查是否留有未接通的GND网络，进行微调（比如打过孔）。<br>最终一个简单的锂电池充放电电路板就绘制完成了，接下来就是焊接和调试啦！<br><img src=\"/old_images/2020/09/1988211125.jpg\" alt=\"Snipaste_2020-09-13_15-27-03.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>为了能使树莓派脱离有线的束缚，我这次就做一个简单的锂电池充放电电路来练练手(●ˇ∀ˇ●)<br>（第一次做了更为简单的STM32-UARTHUB）<br>电源芯片选择的是珠海智融科技有限公司的SW6124，SW6124是一款高度集成的电源管理IC，适用于快速充电移动电源应用。 它集成了4A开关充电器，18W同步升压，PD / QC / FCP / PE / SFCP快速充电协议，电量计和电源控制器。 SW6124借助简单的外部组件，为快速充电电池管理提供了交钥匙的高效解决方案。</p>\n<p>手册最后给出了电池管理充放电应用电路图：<br><img src=\"/old_images/2020/09/2522050574.jpg\" alt=\"Snipaste_2020-09-13_15-05-50.jpg\"><br>已经比较符合我们的需求了，我们在其之上稍作更改，去掉了USB-A和Micro USB的接口，仅保留USB Type-C接口。并且使用一个单刀双置开关切换USB供电与电池供电。<br>原理很简单，在插入USB TypeC时，使用开关将5V输出直接与TypeC电源连接，直接向树莓派供电，与此同时，TypeC电源也向电池充电。在未插入USB时，使5V输出与Boost电路输出端相连接，使用电池进行供电。<br>画出原理图：<br><img src=\"/old_images/2020/09/1356202506.jpg\" alt=\"Snipaste_2020-09-13_15-10-15.jpg\"><br>TypeC接口部分；<br><img src=\"/old_images/2020/09/2234319971.jpg\" alt=\"Snipaste_2020-09-13_15-10-54.jpg\"><br>开关，树莓派插针部分；<br><img src=\"/old_images/2020/09/2393108645.jpg\" alt=\"Snipaste_2020-09-13_15-11-29.jpg\"><br>芯片电量显示部分；<br><img src=\"/old_images/2020/09/2995037215.jpg\" alt=\"Snipaste_2020-09-13_15-11-48.jpg\"><br>芯片Boost电路（3.7V-&gt;5V）及控制部分。<br>这个电路最重要的部分就是开关电源部分，好在SW6124集成了开关管以及控制电路，我们只需要外加一个电感就能实现Boost升压的功能。</p>\n<p>最后就是PCB绘制：<br>首先进行布局布线。简单的PCB布局可以按照原理图的分布进行，并且要合理设计接口位置，注意芯片手册上的说明和注意事项。布线过程中注意根据线所流经的电流大小调整线的粗细，上层下层横纵交错，GND网络使用覆铜进行连接。<br><img src=\"/old_images/2020/09/2369037501.jpg\" alt=\"Snipaste_2020-09-13_15-23-20.jpg\"></p>\n<p>接下来是覆铜。对于信号要求较高的板子，最好分离信号地与电源地，并且在覆铜结束后检查是否留有未接通的GND网络，进行微调（比如打过孔）。<br>最终一个简单的锂电池充放电电路板就绘制完成了，接下来就是焊接和调试啦！<br><img src=\"/old_images/2020/09/1988211125.jpg\" alt=\"Snipaste_2020-09-13_15-27-03.jpg\"></p>\n"},{"title":"简简单单锁相环PLL","date":"2020-04-22T17:20:00.000Z","toc":true,"_content":"玩过单片机的同学们一定听说过锁相环（PLL）这个东西，就是这个锁相环的倍频作用使得我们能够仅仅使用8MHz或者12MHz的晶振获得几百甚至上千兆Hz的主频。\n但是，你是否真的了解锁相环背后的原理？\n锁相环除了这样倍频的作用，又有那些其他的作用呢？\n\n今天我们来简简单单地介绍一下锁相环\n\n## 传统意义上的锁相环 ##\n\n百科上这样说：\n锁相环通常由鉴相器（PD，Phase Detector）、滤波器（LF，Loop Filter）和压控振荡器（VCO，Voltage Controlled Oscillator）3部分组成前向通路，由分频器组成频率相位的反馈通路，如图所示。\n![738b4710b912c8fc470d82a3f8039245d78821e5.jpg][1]\n根据锁相环的框图，可以看出，锁相环输入信号与反馈得到的信号送入鉴相器，鉴相器通过比较二者相位，输出相位差送入滤波器，随后滤波器输出控制压控振荡器来产生一定频率的信号。本质上讲，这就是一个反馈控制系统，鉴相器输出相位差如果构成负反馈的话，这个系统就能使输出信号平稳跟踪输入信号，二者频率是相同的。\n那锁相环又是如何做到倍频的呢？\n\n还是利用自动控制原理的知识来解释，如果我们反馈输出信号的本身，由于系统想要收敛使得误差为0，那么系统输出信号就会跟随输入信号；但当我们反馈输出信号的N分频，系统还想要收敛使得误差为0，这时反馈信号会跟随输入信号，最终的输出信号就会变成输入信号的N倍频。直接分频是很容易做到的，但直接倍频却很难，我们通过一个简单的反馈控制系统和分频器就实现了一个倍频器，这就是控制理论的魅力所在。\n\n了解了锁相环倍频的原理，大家会不会提出一个疑问，就是为什么锁相环不能有非整数的倍频？其实这是因为锁相环处理反馈的鉴相器是通过比较两个信号的相位来计算误差的，而并不是比较频率（个人认为比较频率是很难实现的），非整数倍频就需要非整数分频，这可能会导致相位差不能收敛使得系统失控，只有整数倍频率能够使得相位差收敛至0。\n\n## 锁相环的妙用 ##\n\n锁相环除了能够实现平稳跟踪信号频率，倍频，还有其他的妙用：\n在电机无传感器估计电角度时，我们通过扩张状态观测器可以观测到α、β两相的反电动势大小，到了这一步该如何获得电角度呢？最简单的方法大家可能已经知道了，就是反三角函数法，直接使用arctan函数即可计算得到对应的电角度。\n但由于观测器参数设置等原因，可能导致电角度不平滑，使得矢量控制不平滑，电机性能下降。这时可以虚拟一个电角度，\n![Snipaste_2020-04-23_11-31-33.png][2]\n使这个电角度跟踪通过观测得到的电角度，可以使电角度得到平滑，如下图：\n![Snipaste_2020-04-23_09-54-28.png][3]\n这里通过ΔE来确定θ_hat向目标收敛的速度，也就是ω。\n不仅是观测器可以利用这种方法使角度收敛，高频注入法也可以使用锁相环获得角度。\n\n本质上讲，锁相环相当于一个低通滤波器！\n\n  [1]: /old_images/2020/04/2133134256.jpg\n  [2]: /old_images/2020/04/691379040.png\n  [3]: /old_images/2020/04/4102771430.png\n","source":"_posts/简简单单锁相环PLL.md","raw":"title: 简简单单锁相环PLL\ndate: 2020-04-23 01:20:00\ncategories: 控制\ntags: []\ntoc: true\n---\n玩过单片机的同学们一定听说过锁相环（PLL）这个东西，就是这个锁相环的倍频作用使得我们能够仅仅使用8MHz或者12MHz的晶振获得几百甚至上千兆Hz的主频。\n但是，你是否真的了解锁相环背后的原理？\n锁相环除了这样倍频的作用，又有那些其他的作用呢？\n\n今天我们来简简单单地介绍一下锁相环\n\n## 传统意义上的锁相环 ##\n\n百科上这样说：\n锁相环通常由鉴相器（PD，Phase Detector）、滤波器（LF，Loop Filter）和压控振荡器（VCO，Voltage Controlled Oscillator）3部分组成前向通路，由分频器组成频率相位的反馈通路，如图所示。\n![738b4710b912c8fc470d82a3f8039245d78821e5.jpg][1]\n根据锁相环的框图，可以看出，锁相环输入信号与反馈得到的信号送入鉴相器，鉴相器通过比较二者相位，输出相位差送入滤波器，随后滤波器输出控制压控振荡器来产生一定频率的信号。本质上讲，这就是一个反馈控制系统，鉴相器输出相位差如果构成负反馈的话，这个系统就能使输出信号平稳跟踪输入信号，二者频率是相同的。\n那锁相环又是如何做到倍频的呢？\n\n还是利用自动控制原理的知识来解释，如果我们反馈输出信号的本身，由于系统想要收敛使得误差为0，那么系统输出信号就会跟随输入信号；但当我们反馈输出信号的N分频，系统还想要收敛使得误差为0，这时反馈信号会跟随输入信号，最终的输出信号就会变成输入信号的N倍频。直接分频是很容易做到的，但直接倍频却很难，我们通过一个简单的反馈控制系统和分频器就实现了一个倍频器，这就是控制理论的魅力所在。\n\n了解了锁相环倍频的原理，大家会不会提出一个疑问，就是为什么锁相环不能有非整数的倍频？其实这是因为锁相环处理反馈的鉴相器是通过比较两个信号的相位来计算误差的，而并不是比较频率（个人认为比较频率是很难实现的），非整数倍频就需要非整数分频，这可能会导致相位差不能收敛使得系统失控，只有整数倍频率能够使得相位差收敛至0。\n\n## 锁相环的妙用 ##\n\n锁相环除了能够实现平稳跟踪信号频率，倍频，还有其他的妙用：\n在电机无传感器估计电角度时，我们通过扩张状态观测器可以观测到α、β两相的反电动势大小，到了这一步该如何获得电角度呢？最简单的方法大家可能已经知道了，就是反三角函数法，直接使用arctan函数即可计算得到对应的电角度。\n但由于观测器参数设置等原因，可能导致电角度不平滑，使得矢量控制不平滑，电机性能下降。这时可以虚拟一个电角度，\n![Snipaste_2020-04-23_11-31-33.png][2]\n使这个电角度跟踪通过观测得到的电角度，可以使电角度得到平滑，如下图：\n![Snipaste_2020-04-23_09-54-28.png][3]\n这里通过ΔE来确定θ_hat向目标收敛的速度，也就是ω。\n不仅是观测器可以利用这种方法使角度收敛，高频注入法也可以使用锁相环获得角度。\n\n本质上讲，锁相环相当于一个低通滤波器！\n\n  [1]: /old_images/2020/04/2133134256.jpg\n  [2]: /old_images/2020/04/691379040.png\n  [3]: /old_images/2020/04/4102771430.png\n","slug":"简简单单锁相环PLL","published":1,"updated":"2020-12-14T12:21:24.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0cj002i7p19aqlf7ozx","content":"<p>玩过单片机的同学们一定听说过锁相环（PLL）这个东西，就是这个锁相环的倍频作用使得我们能够仅仅使用8MHz或者12MHz的晶振获得几百甚至上千兆Hz的主频。<br>但是，你是否真的了解锁相环背后的原理？<br>锁相环除了这样倍频的作用，又有那些其他的作用呢？</p>\n<p>今天我们来简简单单地介绍一下锁相环</p>\n<h2 id=\"传统意义上的锁相环\"><a href=\"#传统意义上的锁相环\" class=\"headerlink\" title=\"传统意义上的锁相环\"></a>传统意义上的锁相环</h2><p>百科上这样说：<br>锁相环通常由鉴相器（PD，Phase Detector）、滤波器（LF，Loop Filter）和压控振荡器（VCO，Voltage Controlled Oscillator）3部分组成前向通路，由分频器组成频率相位的反馈通路，如图所示。<br><img src=\"/old_images/2020/04/2133134256.jpg\" alt=\"738b4710b912c8fc470d82a3f8039245d78821e5.jpg\"><br>根据锁相环的框图，可以看出，锁相环输入信号与反馈得到的信号送入鉴相器，鉴相器通过比较二者相位，输出相位差送入滤波器，随后滤波器输出控制压控振荡器来产生一定频率的信号。本质上讲，这就是一个反馈控制系统，鉴相器输出相位差如果构成负反馈的话，这个系统就能使输出信号平稳跟踪输入信号，二者频率是相同的。<br>那锁相环又是如何做到倍频的呢？</p>\n<p>还是利用自动控制原理的知识来解释，如果我们反馈输出信号的本身，由于系统想要收敛使得误差为0，那么系统输出信号就会跟随输入信号；但当我们反馈输出信号的N分频，系统还想要收敛使得误差为0，这时反馈信号会跟随输入信号，最终的输出信号就会变成输入信号的N倍频。直接分频是很容易做到的，但直接倍频却很难，我们通过一个简单的反馈控制系统和分频器就实现了一个倍频器，这就是控制理论的魅力所在。</p>\n<p>了解了锁相环倍频的原理，大家会不会提出一个疑问，就是为什么锁相环不能有非整数的倍频？其实这是因为锁相环处理反馈的鉴相器是通过比较两个信号的相位来计算误差的，而并不是比较频率（个人认为比较频率是很难实现的），非整数倍频就需要非整数分频，这可能会导致相位差不能收敛使得系统失控，只有整数倍频率能够使得相位差收敛至0。</p>\n<h2 id=\"锁相环的妙用\"><a href=\"#锁相环的妙用\" class=\"headerlink\" title=\"锁相环的妙用\"></a>锁相环的妙用</h2><p>锁相环除了能够实现平稳跟踪信号频率，倍频，还有其他的妙用：<br>在电机无传感器估计电角度时，我们通过扩张状态观测器可以观测到α、β两相的反电动势大小，到了这一步该如何获得电角度呢？最简单的方法大家可能已经知道了，就是反三角函数法，直接使用arctan函数即可计算得到对应的电角度。<br>但由于观测器参数设置等原因，可能导致电角度不平滑，使得矢量控制不平滑，电机性能下降。这时可以虚拟一个电角度，<br><img src=\"/old_images/2020/04/691379040.png\" alt=\"Snipaste_2020-04-23_11-31-33.png\"><br>使这个电角度跟踪通过观测得到的电角度，可以使电角度得到平滑，如下图：<br><img src=\"/old_images/2020/04/4102771430.png\" alt=\"Snipaste_2020-04-23_09-54-28.png\"><br>这里通过ΔE来确定θ_hat向目标收敛的速度，也就是ω。<br>不仅是观测器可以利用这种方法使角度收敛，高频注入法也可以使用锁相环获得角度。</p>\n<p>本质上讲，锁相环相当于一个低通滤波器！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>玩过单片机的同学们一定听说过锁相环（PLL）这个东西，就是这个锁相环的倍频作用使得我们能够仅仅使用8MHz或者12MHz的晶振获得几百甚至上千兆Hz的主频。<br>但是，你是否真的了解锁相环背后的原理？<br>锁相环除了这样倍频的作用，又有那些其他的作用呢？</p>\n<p>今天我们来简简单单地介绍一下锁相环</p>\n<h2 id=\"传统意义上的锁相环\"><a href=\"#传统意义上的锁相环\" class=\"headerlink\" title=\"传统意义上的锁相环\"></a>传统意义上的锁相环</h2><p>百科上这样说：<br>锁相环通常由鉴相器（PD，Phase Detector）、滤波器（LF，Loop Filter）和压控振荡器（VCO，Voltage Controlled Oscillator）3部分组成前向通路，由分频器组成频率相位的反馈通路，如图所示。<br><img src=\"/old_images/2020/04/2133134256.jpg\" alt=\"738b4710b912c8fc470d82a3f8039245d78821e5.jpg\"><br>根据锁相环的框图，可以看出，锁相环输入信号与反馈得到的信号送入鉴相器，鉴相器通过比较二者相位，输出相位差送入滤波器，随后滤波器输出控制压控振荡器来产生一定频率的信号。本质上讲，这就是一个反馈控制系统，鉴相器输出相位差如果构成负反馈的话，这个系统就能使输出信号平稳跟踪输入信号，二者频率是相同的。<br>那锁相环又是如何做到倍频的呢？</p>\n<p>还是利用自动控制原理的知识来解释，如果我们反馈输出信号的本身，由于系统想要收敛使得误差为0，那么系统输出信号就会跟随输入信号；但当我们反馈输出信号的N分频，系统还想要收敛使得误差为0，这时反馈信号会跟随输入信号，最终的输出信号就会变成输入信号的N倍频。直接分频是很容易做到的，但直接倍频却很难，我们通过一个简单的反馈控制系统和分频器就实现了一个倍频器，这就是控制理论的魅力所在。</p>\n<p>了解了锁相环倍频的原理，大家会不会提出一个疑问，就是为什么锁相环不能有非整数的倍频？其实这是因为锁相环处理反馈的鉴相器是通过比较两个信号的相位来计算误差的，而并不是比较频率（个人认为比较频率是很难实现的），非整数倍频就需要非整数分频，这可能会导致相位差不能收敛使得系统失控，只有整数倍频率能够使得相位差收敛至0。</p>\n<h2 id=\"锁相环的妙用\"><a href=\"#锁相环的妙用\" class=\"headerlink\" title=\"锁相环的妙用\"></a>锁相环的妙用</h2><p>锁相环除了能够实现平稳跟踪信号频率，倍频，还有其他的妙用：<br>在电机无传感器估计电角度时，我们通过扩张状态观测器可以观测到α、β两相的反电动势大小，到了这一步该如何获得电角度呢？最简单的方法大家可能已经知道了，就是反三角函数法，直接使用arctan函数即可计算得到对应的电角度。<br>但由于观测器参数设置等原因，可能导致电角度不平滑，使得矢量控制不平滑，电机性能下降。这时可以虚拟一个电角度，<br><img src=\"/old_images/2020/04/691379040.png\" alt=\"Snipaste_2020-04-23_11-31-33.png\"><br>使这个电角度跟踪通过观测得到的电角度，可以使电角度得到平滑，如下图：<br><img src=\"/old_images/2020/04/4102771430.png\" alt=\"Snipaste_2020-04-23_09-54-28.png\"><br>这里通过ΔE来确定θ_hat向目标收敛的速度，也就是ω。<br>不仅是观测器可以利用这种方法使角度收敛，高频注入法也可以使用锁相环获得角度。</p>\n<p>本质上讲，锁相环相当于一个低通滤波器！</p>\n"},{"title":"网络是个什么东西？","date":"2020-02-29T02:39:00.000Z","toc":true,"_content":"假设某一天，世界上没了网络，那就不是你看不到我更新的问题了，生活的各个方面都会受到影响！\n网络可以说是离我们生活很近，但就是看不见摸不着理解不了的东西——我是怎么浏览到全国各地甚至世界范围的网页并且能够下载文件的？我和同学打游戏时，我们是怎么互相看到对方的？SSH是怎么远程链接上云端的主机的？\n带着这些 疑问，我粗浅滴浏览了一遍《计算机网络》这本书，做个很简单很简单的总结吧！\n\n## 计算机网络！ ##\n作为个人用户，我们要上网，就需要连接到本地的网络服务供应商ISP才可以，之后本地的ISP一级一级向上连接直到主干ISP，世界主流的主干ISP都是连接在一起的，他们再根据这些信息的目的地将信息传递到目的地。中国主要几个ISP就是中国电信、中国联通、中国移动等。向这些ISP交钱换来的是连接到ISP的网络中的权利（至于如何连接，则是接下来要讲解的），也获得了相当于与世界上所有其他计算机连接的权力（被墙的不算啊( ఠൠఠ )ﾉ）。\n连接ISP，方式分为ADSL、LAN、FTTH、PON四种。\n![ispdis.PNG][1]\n\n要研究数据如何传送，就要了解网络传输的结构：\n按照TCP/IP五层结构，由浅入深，从最底层到最表层地解释信息在网络中的传播\n![5ceng.PNG][2]\n首先我们要理解为什么构建一个五层结构，这是因为每层的结构既得到了前面一层的支持，又为后面一层提供了服务，最终每一层看起来就像只在本层互相通信而不受其他层干扰一样。可以说分层是对其他层的一个抽象，使得你不用去管其他层是如何完成任务的。\n\n## 物理层 ##\n首先最底层，就是物理层，在这个层次跑的是bit流，也可以理解为表示0与1的物理现象，可以是数字量的高低电平，也可以是被调制后的模拟信号，甚至可以是光信号（光纤网络），这些传播方式作为物理层为上层提供了很完善的信息传播途径。（这些0、1的规范协议也是属于物理层的范畴，类比串口的三根线、TTL电平规范以及传输前后的调制解调）\nxDSL（数字用户线）技术就是属于物理层面上的，这种技术可以利用原本假设好的电话线进行网络通信，只需在电话线两端接上调制解调器（Modem也就是俗称的“猫”），ADSL也是用户连接到ISP（网络服务供应商）的方法之一。\n\n## 数据链路层 ##\n在往上就到了数据链路层，在这一层主要是面对硬件（对网络来说硬件就是网卡）的，主要有两种协议工作在数据链路层，他们是点对点通信的PPP（Peer to Peer Protocol），以及面向局域网（以太网Ethernet）的MAC协议。\nPPP是最常用的点对点通信协议，通常用在广域网通信上（比如ISP之间的通信？），还有大家经常说的PPPoE（PPP on Ethernet，基于以太网的点对点通讯协议），可以实现以太网中没有的身份验证、加密、压缩的功能，也用于ADSL宽带接入。\n重点讨论MAC协议。每个硬件生产就被赋予了一个全世界唯一的编号，称之为硬件地址也就是MAC地址，MAC帧仅可被局域网中目标MAC地址对应的主机、路由器接收，达到使用MAC地址传输的作用。\n![mac.PNG][3]\n\n## 网络层 ##\n接下来我们来到了网络层（IP层），MAC地址用来访问局域网中的硬件，而IP地址则是整个互联网中独有的身份证。我们想要访问到世界上任意一台联网的计算机，必须使用这个32位的数字来确定目标。然而要确定这个目标就需要以下几个重要协议来支持：\nARPA协议，通过IP地址解析下一个目标主机、路由的MAC地址，来添加到MAC帧的首部，所有的设备都应可以从IP解析到MAC，因此ARPA成为数据链路层到网络层的中介；\n路由表，记录在路由器中，在路由表中记录着本网络下的其他路由的信息，可以通过目标网络IP地址解析出下一跳最佳路由，是IP数据报传输的引导者。\n路由器作为两个网络的连接者，拥有两个MAC地址和两个IP地址！\n一个主机要通过局域网发送一封IP数据报，要经历一下步骤：\n0.若通信双方处于同一网络，则可直接交付，不需经过路由。\n1.找到本局域网下的默认路由（即网关gateway），把目标IP、本机IP连同数据一同发送给默认路由；\n2.默认路由根据目标IP查询路由表，寻找下一跳路由的IP，以此类推；\n3.直到路由器若发现目标IP属于同一个局域网，则进行直接交付，完成一次传输。\nIP数据报（IPv4）的结构如图所示：\n![IP.PNG][4]\n上面介绍了局域网中主句的重要参数，IP地址、网关，还有一个重要参数：子网掩码（mask），一般为连续的1与连续的0组合，根据子网掩码可以得到主机所属的网络号和主机号，由此可以判断该主机处在那个网络，进而可以判断是该直接交付还是该查找路由表。\n由于IP地址的紧缺，不能保证每台主机都能够分配到一个IP地址，我们在家上网使用的都是NAT（网络地址转换）技术产生的本地IP地址（内网IP），而不是互联网上的IP地址（公网IP）。如何区分一个IP是公网还是内网呢？IP在分配时已经作了规定，以下这些段的IP都用作内网使用，因此不会出现内网IP与公网IP冲突的情况。\n![zhuanyong.PNG][5]\n只要本地互联网上的其中一个路由器接入到了公网，也就是其中一个IP地址为公网IP，则这个本地网络都能够访问到互联网，方法就是不同的主机占用那个路由器公网IP的不同端口，远程主机就像是在与这个IP的不同端口通信一样。但由于没有公网IP只能使用端口，这些本地网络中的主机不能作为互联网上的服务器使用，因为互联网上的客户无法请求本地网络中的服务器提供服务。\nVPN（虚拟专用网）开始并不是用来“科学上网”的，而是通过使用互联网将多个分布在各地而不互相连接（仅通过互联网连接）的局域网虚拟地连接起来，使得这几个局域网好像在同一个局域网下一样，并且通过加密手段使在互联网上传输的数据也很安全。\n![vpn.PNG][6]\n\n## 运输层 ##\n接着我们来谈运输层，运输层主要讲了两种传输方式，即无连接，尽最大努力交付的UDP与面向连接，可靠交付的TCP。\nUDP就类似于我们在单片机通信中的协议，二者只管尽力发送，就算发送失败也不会做处理。而TCP则确保每一帧的完整接收，首先双方先建立连接，之后开始数据传送，每一帧数据发送后，接收方回复确认则表明收到，否则重新传送，传输完成后断开连接。由此可见，UDP快但不稳，TCP稳但不快，二者的应用方向不同！\n运输层作为连接应用与网络的中介，引入了端口这一工具，通过端口，发送数据时IP地址得到了分用，接收数据时IP地址得到了复用，UDP与TCP都使用了端口，并且为了方便建立连接，TCP使用了套接字（socket）作为连接的端点，套接字就是IP+端口的组合。\n![udp.PNG][7]\n![tcp.PNG][8]\n\n## 应用层 ##\n最后到了应用层，有了前面几层的铺垫，应用层所需要完成的任务很简单，就单纯是建立与目标主机的连接（TCP），将数据封装成UDP或TCP帧，随后发送，就可以完成通信，其余完全是应用程序想干嘛干嘛。常见的应用层协议有FTP、TFTP、HTTP（用于万维网服务）、DHCP（自动配置IP，即插即用网络服务）等等等等。\n\n\n  [1]: http://www.starydy.xyz/usr/uploads/2020/02/1060876639.png\n  [2]: http://www.starydy.xyz/usr/uploads/2020/02/2664873141.png\n  [3]: http://www.starydy.xyz/usr/uploads/2020/02/506917544.png\n  [4]: http://www.starydy.xyz/usr/uploads/2020/02/4023551690.png\n  [5]: http://www.starydy.xyz/usr/uploads/2020/03/2629826971.png\n  [6]: http://www.starydy.xyz/usr/uploads/2020/03/2072343370.png\n  [7]: http://www.starydy.xyz/usr/uploads/2020/02/923726181.png\n  [8]: http://www.starydy.xyz/usr/uploads/2020/02/3787159546.png\n","source":"_posts/网络是个什么东西？.md","raw":"title: 网络是个什么东西？\ndate: 2020-02-29 10:39:00\ncategories: 网络\ntags: []\ntoc: true\n---\n假设某一天，世界上没了网络，那就不是你看不到我更新的问题了，生活的各个方面都会受到影响！\n网络可以说是离我们生活很近，但就是看不见摸不着理解不了的东西——我是怎么浏览到全国各地甚至世界范围的网页并且能够下载文件的？我和同学打游戏时，我们是怎么互相看到对方的？SSH是怎么远程链接上云端的主机的？\n带着这些 疑问，我粗浅滴浏览了一遍《计算机网络》这本书，做个很简单很简单的总结吧！\n\n## 计算机网络！ ##\n作为个人用户，我们要上网，就需要连接到本地的网络服务供应商ISP才可以，之后本地的ISP一级一级向上连接直到主干ISP，世界主流的主干ISP都是连接在一起的，他们再根据这些信息的目的地将信息传递到目的地。中国主要几个ISP就是中国电信、中国联通、中国移动等。向这些ISP交钱换来的是连接到ISP的网络中的权利（至于如何连接，则是接下来要讲解的），也获得了相当于与世界上所有其他计算机连接的权力（被墙的不算啊( ఠൠఠ )ﾉ）。\n连接ISP，方式分为ADSL、LAN、FTTH、PON四种。\n![ispdis.PNG][1]\n\n要研究数据如何传送，就要了解网络传输的结构：\n按照TCP/IP五层结构，由浅入深，从最底层到最表层地解释信息在网络中的传播\n![5ceng.PNG][2]\n首先我们要理解为什么构建一个五层结构，这是因为每层的结构既得到了前面一层的支持，又为后面一层提供了服务，最终每一层看起来就像只在本层互相通信而不受其他层干扰一样。可以说分层是对其他层的一个抽象，使得你不用去管其他层是如何完成任务的。\n\n## 物理层 ##\n首先最底层，就是物理层，在这个层次跑的是bit流，也可以理解为表示0与1的物理现象，可以是数字量的高低电平，也可以是被调制后的模拟信号，甚至可以是光信号（光纤网络），这些传播方式作为物理层为上层提供了很完善的信息传播途径。（这些0、1的规范协议也是属于物理层的范畴，类比串口的三根线、TTL电平规范以及传输前后的调制解调）\nxDSL（数字用户线）技术就是属于物理层面上的，这种技术可以利用原本假设好的电话线进行网络通信，只需在电话线两端接上调制解调器（Modem也就是俗称的“猫”），ADSL也是用户连接到ISP（网络服务供应商）的方法之一。\n\n## 数据链路层 ##\n在往上就到了数据链路层，在这一层主要是面对硬件（对网络来说硬件就是网卡）的，主要有两种协议工作在数据链路层，他们是点对点通信的PPP（Peer to Peer Protocol），以及面向局域网（以太网Ethernet）的MAC协议。\nPPP是最常用的点对点通信协议，通常用在广域网通信上（比如ISP之间的通信？），还有大家经常说的PPPoE（PPP on Ethernet，基于以太网的点对点通讯协议），可以实现以太网中没有的身份验证、加密、压缩的功能，也用于ADSL宽带接入。\n重点讨论MAC协议。每个硬件生产就被赋予了一个全世界唯一的编号，称之为硬件地址也就是MAC地址，MAC帧仅可被局域网中目标MAC地址对应的主机、路由器接收，达到使用MAC地址传输的作用。\n![mac.PNG][3]\n\n## 网络层 ##\n接下来我们来到了网络层（IP层），MAC地址用来访问局域网中的硬件，而IP地址则是整个互联网中独有的身份证。我们想要访问到世界上任意一台联网的计算机，必须使用这个32位的数字来确定目标。然而要确定这个目标就需要以下几个重要协议来支持：\nARPA协议，通过IP地址解析下一个目标主机、路由的MAC地址，来添加到MAC帧的首部，所有的设备都应可以从IP解析到MAC，因此ARPA成为数据链路层到网络层的中介；\n路由表，记录在路由器中，在路由表中记录着本网络下的其他路由的信息，可以通过目标网络IP地址解析出下一跳最佳路由，是IP数据报传输的引导者。\n路由器作为两个网络的连接者，拥有两个MAC地址和两个IP地址！\n一个主机要通过局域网发送一封IP数据报，要经历一下步骤：\n0.若通信双方处于同一网络，则可直接交付，不需经过路由。\n1.找到本局域网下的默认路由（即网关gateway），把目标IP、本机IP连同数据一同发送给默认路由；\n2.默认路由根据目标IP查询路由表，寻找下一跳路由的IP，以此类推；\n3.直到路由器若发现目标IP属于同一个局域网，则进行直接交付，完成一次传输。\nIP数据报（IPv4）的结构如图所示：\n![IP.PNG][4]\n上面介绍了局域网中主句的重要参数，IP地址、网关，还有一个重要参数：子网掩码（mask），一般为连续的1与连续的0组合，根据子网掩码可以得到主机所属的网络号和主机号，由此可以判断该主机处在那个网络，进而可以判断是该直接交付还是该查找路由表。\n由于IP地址的紧缺，不能保证每台主机都能够分配到一个IP地址，我们在家上网使用的都是NAT（网络地址转换）技术产生的本地IP地址（内网IP），而不是互联网上的IP地址（公网IP）。如何区分一个IP是公网还是内网呢？IP在分配时已经作了规定，以下这些段的IP都用作内网使用，因此不会出现内网IP与公网IP冲突的情况。\n![zhuanyong.PNG][5]\n只要本地互联网上的其中一个路由器接入到了公网，也就是其中一个IP地址为公网IP，则这个本地网络都能够访问到互联网，方法就是不同的主机占用那个路由器公网IP的不同端口，远程主机就像是在与这个IP的不同端口通信一样。但由于没有公网IP只能使用端口，这些本地网络中的主机不能作为互联网上的服务器使用，因为互联网上的客户无法请求本地网络中的服务器提供服务。\nVPN（虚拟专用网）开始并不是用来“科学上网”的，而是通过使用互联网将多个分布在各地而不互相连接（仅通过互联网连接）的局域网虚拟地连接起来，使得这几个局域网好像在同一个局域网下一样，并且通过加密手段使在互联网上传输的数据也很安全。\n![vpn.PNG][6]\n\n## 运输层 ##\n接着我们来谈运输层，运输层主要讲了两种传输方式，即无连接，尽最大努力交付的UDP与面向连接，可靠交付的TCP。\nUDP就类似于我们在单片机通信中的协议，二者只管尽力发送，就算发送失败也不会做处理。而TCP则确保每一帧的完整接收，首先双方先建立连接，之后开始数据传送，每一帧数据发送后，接收方回复确认则表明收到，否则重新传送，传输完成后断开连接。由此可见，UDP快但不稳，TCP稳但不快，二者的应用方向不同！\n运输层作为连接应用与网络的中介，引入了端口这一工具，通过端口，发送数据时IP地址得到了分用，接收数据时IP地址得到了复用，UDP与TCP都使用了端口，并且为了方便建立连接，TCP使用了套接字（socket）作为连接的端点，套接字就是IP+端口的组合。\n![udp.PNG][7]\n![tcp.PNG][8]\n\n## 应用层 ##\n最后到了应用层，有了前面几层的铺垫，应用层所需要完成的任务很简单，就单纯是建立与目标主机的连接（TCP），将数据封装成UDP或TCP帧，随后发送，就可以完成通信，其余完全是应用程序想干嘛干嘛。常见的应用层协议有FTP、TFTP、HTTP（用于万维网服务）、DHCP（自动配置IP，即插即用网络服务）等等等等。\n\n\n  [1]: http://www.starydy.xyz/usr/uploads/2020/02/1060876639.png\n  [2]: http://www.starydy.xyz/usr/uploads/2020/02/2664873141.png\n  [3]: http://www.starydy.xyz/usr/uploads/2020/02/506917544.png\n  [4]: http://www.starydy.xyz/usr/uploads/2020/02/4023551690.png\n  [5]: http://www.starydy.xyz/usr/uploads/2020/03/2629826971.png\n  [6]: http://www.starydy.xyz/usr/uploads/2020/03/2072343370.png\n  [7]: http://www.starydy.xyz/usr/uploads/2020/02/923726181.png\n  [8]: http://www.starydy.xyz/usr/uploads/2020/02/3787159546.png\n","slug":"网络是个什么东西？","published":1,"updated":"2020-12-14T12:22:13.284Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0ck002k7p192vad9rtb","content":"<p>假设某一天，世界上没了网络，那就不是你看不到我更新的问题了，生活的各个方面都会受到影响！<br>网络可以说是离我们生活很近，但就是看不见摸不着理解不了的东西——我是怎么浏览到全国各地甚至世界范围的网页并且能够下载文件的？我和同学打游戏时，我们是怎么互相看到对方的？SSH是怎么远程链接上云端的主机的？<br>带着这些 疑问，我粗浅滴浏览了一遍《计算机网络》这本书，做个很简单很简单的总结吧！</p>\n<h2 id=\"计算机网络！\"><a href=\"#计算机网络！\" class=\"headerlink\" title=\"计算机网络！\"></a>计算机网络！</h2><p>作为个人用户，我们要上网，就需要连接到本地的网络服务供应商ISP才可以，之后本地的ISP一级一级向上连接直到主干ISP，世界主流的主干ISP都是连接在一起的，他们再根据这些信息的目的地将信息传递到目的地。中国主要几个ISP就是中国电信、中国联通、中国移动等。向这些ISP交钱换来的是连接到ISP的网络中的权利（至于如何连接，则是接下来要讲解的），也获得了相当于与世界上所有其他计算机连接的权力（被墙的不算啊( ఠൠఠ )ﾉ）。<br>连接ISP，方式分为ADSL、LAN、FTTH、PON四种。<br><img src=\"http://www.starydy.xyz/usr/uploads/2020/02/1060876639.png\" alt=\"ispdis.PNG\"></p>\n<p>要研究数据如何传送，就要了解网络传输的结构：<br>按照TCP/IP五层结构，由浅入深，从最底层到最表层地解释信息在网络中的传播<br><img src=\"http://www.starydy.xyz/usr/uploads/2020/02/2664873141.png\" alt=\"5ceng.PNG\"><br>首先我们要理解为什么构建一个五层结构，这是因为每层的结构既得到了前面一层的支持，又为后面一层提供了服务，最终每一层看起来就像只在本层互相通信而不受其他层干扰一样。可以说分层是对其他层的一个抽象，使得你不用去管其他层是如何完成任务的。</p>\n<h2 id=\"物理层\"><a href=\"#物理层\" class=\"headerlink\" title=\"物理层\"></a>物理层</h2><p>首先最底层，就是物理层，在这个层次跑的是bit流，也可以理解为表示0与1的物理现象，可以是数字量的高低电平，也可以是被调制后的模拟信号，甚至可以是光信号（光纤网络），这些传播方式作为物理层为上层提供了很完善的信息传播途径。（这些0、1的规范协议也是属于物理层的范畴，类比串口的三根线、TTL电平规范以及传输前后的调制解调）<br>xDSL（数字用户线）技术就是属于物理层面上的，这种技术可以利用原本假设好的电话线进行网络通信，只需在电话线两端接上调制解调器（Modem也就是俗称的“猫”），ADSL也是用户连接到ISP（网络服务供应商）的方法之一。</p>\n<h2 id=\"数据链路层\"><a href=\"#数据链路层\" class=\"headerlink\" title=\"数据链路层\"></a>数据链路层</h2><p>在往上就到了数据链路层，在这一层主要是面对硬件（对网络来说硬件就是网卡）的，主要有两种协议工作在数据链路层，他们是点对点通信的PPP（Peer to Peer Protocol），以及面向局域网（以太网Ethernet）的MAC协议。<br>PPP是最常用的点对点通信协议，通常用在广域网通信上（比如ISP之间的通信？），还有大家经常说的PPPoE（PPP on Ethernet，基于以太网的点对点通讯协议），可以实现以太网中没有的身份验证、加密、压缩的功能，也用于ADSL宽带接入。<br>重点讨论MAC协议。每个硬件生产就被赋予了一个全世界唯一的编号，称之为硬件地址也就是MAC地址，MAC帧仅可被局域网中目标MAC地址对应的主机、路由器接收，达到使用MAC地址传输的作用。<br><img src=\"http://www.starydy.xyz/usr/uploads/2020/02/506917544.png\" alt=\"mac.PNG\"></p>\n<h2 id=\"网络层\"><a href=\"#网络层\" class=\"headerlink\" title=\"网络层\"></a>网络层</h2><p>接下来我们来到了网络层（IP层），MAC地址用来访问局域网中的硬件，而IP地址则是整个互联网中独有的身份证。我们想要访问到世界上任意一台联网的计算机，必须使用这个32位的数字来确定目标。然而要确定这个目标就需要以下几个重要协议来支持：<br>ARPA协议，通过IP地址解析下一个目标主机、路由的MAC地址，来添加到MAC帧的首部，所有的设备都应可以从IP解析到MAC，因此ARPA成为数据链路层到网络层的中介；<br>路由表，记录在路由器中，在路由表中记录着本网络下的其他路由的信息，可以通过目标网络IP地址解析出下一跳最佳路由，是IP数据报传输的引导者。<br>路由器作为两个网络的连接者，拥有两个MAC地址和两个IP地址！<br>一个主机要通过局域网发送一封IP数据报，要经历一下步骤：<br>0.若通信双方处于同一网络，则可直接交付，不需经过路由。<br>1.找到本局域网下的默认路由（即网关gateway），把目标IP、本机IP连同数据一同发送给默认路由；<br>2.默认路由根据目标IP查询路由表，寻找下一跳路由的IP，以此类推；<br>3.直到路由器若发现目标IP属于同一个局域网，则进行直接交付，完成一次传输。<br>IP数据报（IPv4）的结构如图所示：<br><img src=\"http://www.starydy.xyz/usr/uploads/2020/02/4023551690.png\" alt=\"IP.PNG\"><br>上面介绍了局域网中主句的重要参数，IP地址、网关，还有一个重要参数：子网掩码（mask），一般为连续的1与连续的0组合，根据子网掩码可以得到主机所属的网络号和主机号，由此可以判断该主机处在那个网络，进而可以判断是该直接交付还是该查找路由表。<br>由于IP地址的紧缺，不能保证每台主机都能够分配到一个IP地址，我们在家上网使用的都是NAT（网络地址转换）技术产生的本地IP地址（内网IP），而不是互联网上的IP地址（公网IP）。如何区分一个IP是公网还是内网呢？IP在分配时已经作了规定，以下这些段的IP都用作内网使用，因此不会出现内网IP与公网IP冲突的情况。<br><img src=\"http://www.starydy.xyz/usr/uploads/2020/03/2629826971.png\" alt=\"zhuanyong.PNG\"><br>只要本地互联网上的其中一个路由器接入到了公网，也就是其中一个IP地址为公网IP，则这个本地网络都能够访问到互联网，方法就是不同的主机占用那个路由器公网IP的不同端口，远程主机就像是在与这个IP的不同端口通信一样。但由于没有公网IP只能使用端口，这些本地网络中的主机不能作为互联网上的服务器使用，因为互联网上的客户无法请求本地网络中的服务器提供服务。<br>VPN（虚拟专用网）开始并不是用来“科学上网”的，而是通过使用互联网将多个分布在各地而不互相连接（仅通过互联网连接）的局域网虚拟地连接起来，使得这几个局域网好像在同一个局域网下一样，并且通过加密手段使在互联网上传输的数据也很安全。<br><img src=\"http://www.starydy.xyz/usr/uploads/2020/03/2072343370.png\" alt=\"vpn.PNG\"></p>\n<h2 id=\"运输层\"><a href=\"#运输层\" class=\"headerlink\" title=\"运输层\"></a>运输层</h2><p>接着我们来谈运输层，运输层主要讲了两种传输方式，即无连接，尽最大努力交付的UDP与面向连接，可靠交付的TCP。<br>UDP就类似于我们在单片机通信中的协议，二者只管尽力发送，就算发送失败也不会做处理。而TCP则确保每一帧的完整接收，首先双方先建立连接，之后开始数据传送，每一帧数据发送后，接收方回复确认则表明收到，否则重新传送，传输完成后断开连接。由此可见，UDP快但不稳，TCP稳但不快，二者的应用方向不同！<br>运输层作为连接应用与网络的中介，引入了端口这一工具，通过端口，发送数据时IP地址得到了分用，接收数据时IP地址得到了复用，UDP与TCP都使用了端口，并且为了方便建立连接，TCP使用了套接字（socket）作为连接的端点，套接字就是IP+端口的组合。<br><img src=\"http://www.starydy.xyz/usr/uploads/2020/02/923726181.png\" alt=\"udp.PNG\"><br><img src=\"http://www.starydy.xyz/usr/uploads/2020/02/3787159546.png\" alt=\"tcp.PNG\"></p>\n<h2 id=\"应用层\"><a href=\"#应用层\" class=\"headerlink\" title=\"应用层\"></a>应用层</h2><p>最后到了应用层，有了前面几层的铺垫，应用层所需要完成的任务很简单，就单纯是建立与目标主机的连接（TCP），将数据封装成UDP或TCP帧，随后发送，就可以完成通信，其余完全是应用程序想干嘛干嘛。常见的应用层协议有FTP、TFTP、HTTP（用于万维网服务）、DHCP（自动配置IP，即插即用网络服务）等等等等。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>假设某一天，世界上没了网络，那就不是你看不到我更新的问题了，生活的各个方面都会受到影响！<br>网络可以说是离我们生活很近，但就是看不见摸不着理解不了的东西——我是怎么浏览到全国各地甚至世界范围的网页并且能够下载文件的？我和同学打游戏时，我们是怎么互相看到对方的？SSH是怎么远程链接上云端的主机的？<br>带着这些 疑问，我粗浅滴浏览了一遍《计算机网络》这本书，做个很简单很简单的总结吧！</p>\n<h2 id=\"计算机网络！\"><a href=\"#计算机网络！\" class=\"headerlink\" title=\"计算机网络！\"></a>计算机网络！</h2><p>作为个人用户，我们要上网，就需要连接到本地的网络服务供应商ISP才可以，之后本地的ISP一级一级向上连接直到主干ISP，世界主流的主干ISP都是连接在一起的，他们再根据这些信息的目的地将信息传递到目的地。中国主要几个ISP就是中国电信、中国联通、中国移动等。向这些ISP交钱换来的是连接到ISP的网络中的权利（至于如何连接，则是接下来要讲解的），也获得了相当于与世界上所有其他计算机连接的权力（被墙的不算啊( ఠൠఠ )ﾉ）。<br>连接ISP，方式分为ADSL、LAN、FTTH、PON四种。<br><img src=\"http://www.starydy.xyz/usr/uploads/2020/02/1060876639.png\" alt=\"ispdis.PNG\"></p>\n<p>要研究数据如何传送，就要了解网络传输的结构：<br>按照TCP/IP五层结构，由浅入深，从最底层到最表层地解释信息在网络中的传播<br><img src=\"http://www.starydy.xyz/usr/uploads/2020/02/2664873141.png\" alt=\"5ceng.PNG\"><br>首先我们要理解为什么构建一个五层结构，这是因为每层的结构既得到了前面一层的支持，又为后面一层提供了服务，最终每一层看起来就像只在本层互相通信而不受其他层干扰一样。可以说分层是对其他层的一个抽象，使得你不用去管其他层是如何完成任务的。</p>\n<h2 id=\"物理层\"><a href=\"#物理层\" class=\"headerlink\" title=\"物理层\"></a>物理层</h2><p>首先最底层，就是物理层，在这个层次跑的是bit流，也可以理解为表示0与1的物理现象，可以是数字量的高低电平，也可以是被调制后的模拟信号，甚至可以是光信号（光纤网络），这些传播方式作为物理层为上层提供了很完善的信息传播途径。（这些0、1的规范协议也是属于物理层的范畴，类比串口的三根线、TTL电平规范以及传输前后的调制解调）<br>xDSL（数字用户线）技术就是属于物理层面上的，这种技术可以利用原本假设好的电话线进行网络通信，只需在电话线两端接上调制解调器（Modem也就是俗称的“猫”），ADSL也是用户连接到ISP（网络服务供应商）的方法之一。</p>\n<h2 id=\"数据链路层\"><a href=\"#数据链路层\" class=\"headerlink\" title=\"数据链路层\"></a>数据链路层</h2><p>在往上就到了数据链路层，在这一层主要是面对硬件（对网络来说硬件就是网卡）的，主要有两种协议工作在数据链路层，他们是点对点通信的PPP（Peer to Peer Protocol），以及面向局域网（以太网Ethernet）的MAC协议。<br>PPP是最常用的点对点通信协议，通常用在广域网通信上（比如ISP之间的通信？），还有大家经常说的PPPoE（PPP on Ethernet，基于以太网的点对点通讯协议），可以实现以太网中没有的身份验证、加密、压缩的功能，也用于ADSL宽带接入。<br>重点讨论MAC协议。每个硬件生产就被赋予了一个全世界唯一的编号，称之为硬件地址也就是MAC地址，MAC帧仅可被局域网中目标MAC地址对应的主机、路由器接收，达到使用MAC地址传输的作用。<br><img src=\"http://www.starydy.xyz/usr/uploads/2020/02/506917544.png\" alt=\"mac.PNG\"></p>\n<h2 id=\"网络层\"><a href=\"#网络层\" class=\"headerlink\" title=\"网络层\"></a>网络层</h2><p>接下来我们来到了网络层（IP层），MAC地址用来访问局域网中的硬件，而IP地址则是整个互联网中独有的身份证。我们想要访问到世界上任意一台联网的计算机，必须使用这个32位的数字来确定目标。然而要确定这个目标就需要以下几个重要协议来支持：<br>ARPA协议，通过IP地址解析下一个目标主机、路由的MAC地址，来添加到MAC帧的首部，所有的设备都应可以从IP解析到MAC，因此ARPA成为数据链路层到网络层的中介；<br>路由表，记录在路由器中，在路由表中记录着本网络下的其他路由的信息，可以通过目标网络IP地址解析出下一跳最佳路由，是IP数据报传输的引导者。<br>路由器作为两个网络的连接者，拥有两个MAC地址和两个IP地址！<br>一个主机要通过局域网发送一封IP数据报，要经历一下步骤：<br>0.若通信双方处于同一网络，则可直接交付，不需经过路由。<br>1.找到本局域网下的默认路由（即网关gateway），把目标IP、本机IP连同数据一同发送给默认路由；<br>2.默认路由根据目标IP查询路由表，寻找下一跳路由的IP，以此类推；<br>3.直到路由器若发现目标IP属于同一个局域网，则进行直接交付，完成一次传输。<br>IP数据报（IPv4）的结构如图所示：<br><img src=\"http://www.starydy.xyz/usr/uploads/2020/02/4023551690.png\" alt=\"IP.PNG\"><br>上面介绍了局域网中主句的重要参数，IP地址、网关，还有一个重要参数：子网掩码（mask），一般为连续的1与连续的0组合，根据子网掩码可以得到主机所属的网络号和主机号，由此可以判断该主机处在那个网络，进而可以判断是该直接交付还是该查找路由表。<br>由于IP地址的紧缺，不能保证每台主机都能够分配到一个IP地址，我们在家上网使用的都是NAT（网络地址转换）技术产生的本地IP地址（内网IP），而不是互联网上的IP地址（公网IP）。如何区分一个IP是公网还是内网呢？IP在分配时已经作了规定，以下这些段的IP都用作内网使用，因此不会出现内网IP与公网IP冲突的情况。<br><img src=\"http://www.starydy.xyz/usr/uploads/2020/03/2629826971.png\" alt=\"zhuanyong.PNG\"><br>只要本地互联网上的其中一个路由器接入到了公网，也就是其中一个IP地址为公网IP，则这个本地网络都能够访问到互联网，方法就是不同的主机占用那个路由器公网IP的不同端口，远程主机就像是在与这个IP的不同端口通信一样。但由于没有公网IP只能使用端口，这些本地网络中的主机不能作为互联网上的服务器使用，因为互联网上的客户无法请求本地网络中的服务器提供服务。<br>VPN（虚拟专用网）开始并不是用来“科学上网”的，而是通过使用互联网将多个分布在各地而不互相连接（仅通过互联网连接）的局域网虚拟地连接起来，使得这几个局域网好像在同一个局域网下一样，并且通过加密手段使在互联网上传输的数据也很安全。<br><img src=\"http://www.starydy.xyz/usr/uploads/2020/03/2072343370.png\" alt=\"vpn.PNG\"></p>\n<h2 id=\"运输层\"><a href=\"#运输层\" class=\"headerlink\" title=\"运输层\"></a>运输层</h2><p>接着我们来谈运输层，运输层主要讲了两种传输方式，即无连接，尽最大努力交付的UDP与面向连接，可靠交付的TCP。<br>UDP就类似于我们在单片机通信中的协议，二者只管尽力发送，就算发送失败也不会做处理。而TCP则确保每一帧的完整接收，首先双方先建立连接，之后开始数据传送，每一帧数据发送后，接收方回复确认则表明收到，否则重新传送，传输完成后断开连接。由此可见，UDP快但不稳，TCP稳但不快，二者的应用方向不同！<br>运输层作为连接应用与网络的中介，引入了端口这一工具，通过端口，发送数据时IP地址得到了分用，接收数据时IP地址得到了复用，UDP与TCP都使用了端口，并且为了方便建立连接，TCP使用了套接字（socket）作为连接的端点，套接字就是IP+端口的组合。<br><img src=\"http://www.starydy.xyz/usr/uploads/2020/02/923726181.png\" alt=\"udp.PNG\"><br><img src=\"http://www.starydy.xyz/usr/uploads/2020/02/3787159546.png\" alt=\"tcp.PNG\"></p>\n<h2 id=\"应用层\"><a href=\"#应用层\" class=\"headerlink\" title=\"应用层\"></a>应用层</h2><p>最后到了应用层，有了前面几层的铺垫，应用层所需要完成的任务很简单，就单纯是建立与目标主机的连接（TCP），将数据封装成UDP或TCP帧，随后发送，就可以完成通信，其余完全是应用程序想干嘛干嘛。常见的应用层协议有FTP、TFTP、HTTP（用于万维网服务）、DHCP（自动配置IP，即插即用网络服务）等等等等。</p>\n"},{"title":"计算机网络基础","date":"2020-02-20T23:02:00.000Z","toc":true,"_content":"感谢林哥分享给我这本书（知道我被计算机网络困扰好久(✪▽✪)）计划在之后一周内读完，写一篇总结吧！\n文件存在我的另一个域名下：\nhttp://myblog.starydy.xyz/document/ComputerNet.pdf\n待会儿上传\n","source":"_posts/计算机网络基础.md","raw":"title: 计算机网络基础\ndate: 2020-02-21 07:02:00\ncategories: 网络\ntags: []\ntoc: true\n---\n感谢林哥分享给我这本书（知道我被计算机网络困扰好久(✪▽✪)）计划在之后一周内读完，写一篇总结吧！\n文件存在我的另一个域名下：\nhttp://myblog.starydy.xyz/document/ComputerNet.pdf\n待会儿上传\n","slug":"计算机网络基础","published":1,"updated":"2020-12-14T12:21:22.237Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0ck002m7p199w7n0mg3","content":"<p>感谢林哥分享给我这本书（知道我被计算机网络困扰好久(✪▽✪)）计划在之后一周内读完，写一篇总结吧！<br>文件存在我的另一个域名下：<br><a href=\"http://myblog.starydy.xyz/document/ComputerNet.pdf\">http://myblog.starydy.xyz/document/ComputerNet.pdf</a><br>待会儿上传</p>\n","site":{"data":{}},"excerpt":"","more":"<p>感谢林哥分享给我这本书（知道我被计算机网络困扰好久(✪▽✪)）计划在之后一周内读完，写一篇总结吧！<br>文件存在我的另一个域名下：<br><a href=\"http://myblog.starydy.xyz/document/ComputerNet.pdf\">http://myblog.starydy.xyz/document/ComputerNet.pdf</a><br>待会儿上传</p>\n"},{"title":"让编译不再麻烦——CMake使用","date":"2020-06-09T21:41:00.000Z","toc":true,"_content":"相信大家在进行C/C++开发时，经常会遇到项目管理的问题。如果你只有一个源文件，那么这将不是什么难事，一条gcc/g++指令，配合上合适的参数，就能够做得很好。但是对于像这样庞大的工程：\n![Snipaste_2020-06-10_13-40-06.jpg][1]\n每个源文件需要一行编译命令，之后还需要链接，才能编译成二进制可执行文件与库，想着想着，我人都傻了Σ(っ °Д °;)っ\n幸好有的IDE已经很智能地帮我们做了这一点，我们只需要用图形界面配置好工程中文件的组织形式，引用路径，库的位置，就能够一键编译了。（比如交叉编译IDE 我们熟知的Keil）\n但是IDE灵活性不足，并且有平台的局限性，不能做到轻量化，在使用VSCode这种不带编译器的编辑器的时候，想要更多地自己配置编译方式，就需要用到我们今天的主角Makefile与CMake了！\n\n## Makefile\n为了能够自动化地配置工程，完成编译，人们发明了Makefile这样的文件。在含有Makefile文件的目录下执行make命令就可以执行编译动作。使用设定好的编译器，系统会读取Makefile文件的内容进行编译。\nMakefile按照目标：依赖的结构组织工程，后面紧接着由依赖变化到目标的gcc（g++）命令。使用自动化变量加上自动寻找依赖的机制，Makefile的确使得编译更加方便，但是要写好Makefile，还是离不开gcc（g++）繁琐的语法，同时还要满足Makefile的语法格式。人们又发明了自动生成Makefile文件的工具CMake。\n##![Snipaste_2020-06-10_14-42-50.jpg][2]\nMakefile的语法\n\n## CMake ##\n想要使用Makefile，一般的Linux系统都会自带Makefile工具。但是CMake需要自行安装。CMake的设计初衷就是使用简单易懂的CMake语法生成晦涩难懂的Makefile语法，使得配置编译设置就像在IDE使用图形化配置一样方便（事实上确实有图形化的CMake——CMake GUI）。\n在工程目录创建一个CMakeLists.txt文件，并且创建子目录build，用于放置编译生成的中间文件，进入build，执行cmake ..（注意这个..，表示上一级目录），就会生成我们想要的Makefile文件了，相信这个步骤使用源码安装Linux软件的同学都不陌生。\n\nCMake语句：\n\n    project(main)\n    cmake_minimum_required(VERSION 2.8)\n新建一个CMake项目main，确定cmake需要的最低版本为2.8\n    set(CMAKE_BUILD_TYPE \"Release\")\n    set(CMAKE_CXX_FLAGS \"-O3\")\n    set(CMAKE_CXX_FLAGS \"-std=c++11\")\n确定编译发布版，优化-o3，C++标准为c++11，set就是进行变量的赋值\n    set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)\n    set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)\n确定输出可执行文件、库文件的位置\n    find_package(OpenCV REQUIRED)\n找到系统已经安装的库文件的路径，将其赋值给对应变量。一些比较大的库自己能够告知CMake自己的位置，但是有时就需要我们把FindXXlib.cmake文件告诉CMake（一般库中会提供的）：\n    list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)\n确定cmake文件的位置\n    include_directories(${OpenCV_INCLUDE_DIRS})\n添加头文件目录，相当于gcc（g++）命令中的-I\n    add_subdirectory(./src)\n添加一个子目录，需要保证子目录中有CMakeLists.txt文件，然后就会执行子目录中的CMake文件，用于多个目录的工程。一般在子目录中将源文件编译为库文件，再在根目录的CMake中链接这个库。\n    add_library(HELLO hello.cpp)\n    add_executable(main main.cpp)\n生成一个库、可执行文件，使用源文件（可以是多个），进行编译、链接，生成一个二进制文件，相当于gcc（g++）中的 -o\n    target_link_libraries(common ${OpenCV_LIBS})\n给可执行文件链接一个库，这个库可以是绝对路径，也可以是已经放在环境变量中的变量。\n\n总而言之这就是CMake的基本原理，确实是大大方便了工程项目配置，已经逐渐成为了主流。\n\n附上在学习高翔老师《视觉SLAM14讲》时使用的CMake文件，留做参考。\n\n./中的CMakeLists.txt\n    project(main)\n    cmake_minimum_required(VERSION 2.8)\n    \n    set(CMAKE_BUILD_TYPE \"Release\")\n    #set(CMAKE_BUILD_TYPE \"Debug\")\n    set(CMAKE_CXX_FLAGS \"-O3\")\n    set(CMAKE_CXX_FLAGS \"-std=c++11\")\n    set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)\n    set(CMAKE_CXX_FLAGS \"-std=c++11 -O2 ${SSE_FLAGS} -g -march=native\")\n    set(G2O_LIBS g2o_core g2o_stuff g2o_types_sba g2o_types_slam3d\n                 g2o_solver_csparse g2o_csparse_extension cholmod g2o_solver_cholmod cxsparse)\n    \n    list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)\n    \n    find_package(Sophus REQUIRED)\n    find_package(OpenCV REQUIRED)\n    find_package(Pangolin REQUIRED)\n    find_package(Ceres REQUIRED)\n    Find_Package(CSparse REQUIRED)\n    find_package(G2O REQUIRED)\n    \n    \n    include_directories(${G2O_INCLUDE_DIRS})\n    include_directories( ${CSPARSE_INCLUDE_DIR} )\n    include_directories(${OpenCV_INCLUDE_DIRS})\n    include_directories(${Sophus_INCLUDE_DIRS})\n    include_directories(${CERES_INCLUDE_DIRS})\n    include_directories(/usr/include/eigen3)\n    include_directories(./src)\n    include_directories(./include)\n    \n    \n    add_subdirectory(./src)\n    add_executable(main main.cpp)\n    target_link_libraries(main HELLO)\n    target_link_libraries(main common)\n    target_link_libraries(main ${Pangolin_LIBRARIES})\n    target_link_libraries(main ${OpenCV_LIBS})\n    target_link_libraries(main ${CERES_LIBRARIES})\n    target_link_libraries(main ${G2O_LIBS})\n\n./src中的CMakeLists.txt\n    cmake_minimum_required(VERSION 2.8)\n    \n    set(CMAKE_BUILD_TYPE \"Release\")\n    # set(CMAKE_CXX_FLAGS \"-O3\")\n    set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)\n    set(G2O_LIBS g2o_core g2o_stuff g2o_types_sba g2o_types_slam3d\n                 g2o_solver_csparse g2o_csparse_extension cholmod g2o_solver_cholmod cxsparse)\n    \n    list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)\n    \n    find_package(Sophus REQUIRED)\n    find_package(OpenCV REQUIRED)\n    find_package(Pangolin REQUIRED)\n    find_package(Ceres REQUIRED)\n    find_package(G2O REQUIRED)\n    \n    include_directories(${G2O_INCLUDE_DIRS})\n    include_directories(${OpenCV_INCLUDE_DIRS})\n    include_directories(${Sophus_INCLUDE_DIRS})\n    include_directories(${CERES_INCLUDE_DIRS})\n    include_directories(/usr/include/eigen3)\n    include_directories(../include)\n    \n    add_library(HELLO hello.cpp)\n    add_library(common common.cpp)\n    target_link_libraries(common ${Pangolin_LIBRARIES})\n    target_link_libraries(common ${OpenCV_LIBS})\n    target_link_libraries(common ${CERES_LIBRARIES})\n    target_link_libraries(common ${G2O_LIBS})\n\n  [1]: /old_images/2020/06/3640866494.jpg\n  [2]: /old_images/2020/06/2855613712.jpg\n","source":"_posts/让编译不再麻烦——CMake使用.md","raw":"title: 让编译不再麻烦——CMake使用\ndate: 2020-06-10 05:41:00\ncategories: 工具\ntags: []\ntoc: true\n---\n相信大家在进行C/C++开发时，经常会遇到项目管理的问题。如果你只有一个源文件，那么这将不是什么难事，一条gcc/g++指令，配合上合适的参数，就能够做得很好。但是对于像这样庞大的工程：\n![Snipaste_2020-06-10_13-40-06.jpg][1]\n每个源文件需要一行编译命令，之后还需要链接，才能编译成二进制可执行文件与库，想着想着，我人都傻了Σ(っ °Д °;)っ\n幸好有的IDE已经很智能地帮我们做了这一点，我们只需要用图形界面配置好工程中文件的组织形式，引用路径，库的位置，就能够一键编译了。（比如交叉编译IDE 我们熟知的Keil）\n但是IDE灵活性不足，并且有平台的局限性，不能做到轻量化，在使用VSCode这种不带编译器的编辑器的时候，想要更多地自己配置编译方式，就需要用到我们今天的主角Makefile与CMake了！\n\n## Makefile\n为了能够自动化地配置工程，完成编译，人们发明了Makefile这样的文件。在含有Makefile文件的目录下执行make命令就可以执行编译动作。使用设定好的编译器，系统会读取Makefile文件的内容进行编译。\nMakefile按照目标：依赖的结构组织工程，后面紧接着由依赖变化到目标的gcc（g++）命令。使用自动化变量加上自动寻找依赖的机制，Makefile的确使得编译更加方便，但是要写好Makefile，还是离不开gcc（g++）繁琐的语法，同时还要满足Makefile的语法格式。人们又发明了自动生成Makefile文件的工具CMake。\n##![Snipaste_2020-06-10_14-42-50.jpg][2]\nMakefile的语法\n\n## CMake ##\n想要使用Makefile，一般的Linux系统都会自带Makefile工具。但是CMake需要自行安装。CMake的设计初衷就是使用简单易懂的CMake语法生成晦涩难懂的Makefile语法，使得配置编译设置就像在IDE使用图形化配置一样方便（事实上确实有图形化的CMake——CMake GUI）。\n在工程目录创建一个CMakeLists.txt文件，并且创建子目录build，用于放置编译生成的中间文件，进入build，执行cmake ..（注意这个..，表示上一级目录），就会生成我们想要的Makefile文件了，相信这个步骤使用源码安装Linux软件的同学都不陌生。\n\nCMake语句：\n\n    project(main)\n    cmake_minimum_required(VERSION 2.8)\n新建一个CMake项目main，确定cmake需要的最低版本为2.8\n    set(CMAKE_BUILD_TYPE \"Release\")\n    set(CMAKE_CXX_FLAGS \"-O3\")\n    set(CMAKE_CXX_FLAGS \"-std=c++11\")\n确定编译发布版，优化-o3，C++标准为c++11，set就是进行变量的赋值\n    set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)\n    set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)\n确定输出可执行文件、库文件的位置\n    find_package(OpenCV REQUIRED)\n找到系统已经安装的库文件的路径，将其赋值给对应变量。一些比较大的库自己能够告知CMake自己的位置，但是有时就需要我们把FindXXlib.cmake文件告诉CMake（一般库中会提供的）：\n    list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)\n确定cmake文件的位置\n    include_directories(${OpenCV_INCLUDE_DIRS})\n添加头文件目录，相当于gcc（g++）命令中的-I\n    add_subdirectory(./src)\n添加一个子目录，需要保证子目录中有CMakeLists.txt文件，然后就会执行子目录中的CMake文件，用于多个目录的工程。一般在子目录中将源文件编译为库文件，再在根目录的CMake中链接这个库。\n    add_library(HELLO hello.cpp)\n    add_executable(main main.cpp)\n生成一个库、可执行文件，使用源文件（可以是多个），进行编译、链接，生成一个二进制文件，相当于gcc（g++）中的 -o\n    target_link_libraries(common ${OpenCV_LIBS})\n给可执行文件链接一个库，这个库可以是绝对路径，也可以是已经放在环境变量中的变量。\n\n总而言之这就是CMake的基本原理，确实是大大方便了工程项目配置，已经逐渐成为了主流。\n\n附上在学习高翔老师《视觉SLAM14讲》时使用的CMake文件，留做参考。\n\n./中的CMakeLists.txt\n    project(main)\n    cmake_minimum_required(VERSION 2.8)\n    \n    set(CMAKE_BUILD_TYPE \"Release\")\n    #set(CMAKE_BUILD_TYPE \"Debug\")\n    set(CMAKE_CXX_FLAGS \"-O3\")\n    set(CMAKE_CXX_FLAGS \"-std=c++11\")\n    set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)\n    set(CMAKE_CXX_FLAGS \"-std=c++11 -O2 ${SSE_FLAGS} -g -march=native\")\n    set(G2O_LIBS g2o_core g2o_stuff g2o_types_sba g2o_types_slam3d\n                 g2o_solver_csparse g2o_csparse_extension cholmod g2o_solver_cholmod cxsparse)\n    \n    list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)\n    \n    find_package(Sophus REQUIRED)\n    find_package(OpenCV REQUIRED)\n    find_package(Pangolin REQUIRED)\n    find_package(Ceres REQUIRED)\n    Find_Package(CSparse REQUIRED)\n    find_package(G2O REQUIRED)\n    \n    \n    include_directories(${G2O_INCLUDE_DIRS})\n    include_directories( ${CSPARSE_INCLUDE_DIR} )\n    include_directories(${OpenCV_INCLUDE_DIRS})\n    include_directories(${Sophus_INCLUDE_DIRS})\n    include_directories(${CERES_INCLUDE_DIRS})\n    include_directories(/usr/include/eigen3)\n    include_directories(./src)\n    include_directories(./include)\n    \n    \n    add_subdirectory(./src)\n    add_executable(main main.cpp)\n    target_link_libraries(main HELLO)\n    target_link_libraries(main common)\n    target_link_libraries(main ${Pangolin_LIBRARIES})\n    target_link_libraries(main ${OpenCV_LIBS})\n    target_link_libraries(main ${CERES_LIBRARIES})\n    target_link_libraries(main ${G2O_LIBS})\n\n./src中的CMakeLists.txt\n    cmake_minimum_required(VERSION 2.8)\n    \n    set(CMAKE_BUILD_TYPE \"Release\")\n    # set(CMAKE_CXX_FLAGS \"-O3\")\n    set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)\n    set(G2O_LIBS g2o_core g2o_stuff g2o_types_sba g2o_types_slam3d\n                 g2o_solver_csparse g2o_csparse_extension cholmod g2o_solver_cholmod cxsparse)\n    \n    list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)\n    \n    find_package(Sophus REQUIRED)\n    find_package(OpenCV REQUIRED)\n    find_package(Pangolin REQUIRED)\n    find_package(Ceres REQUIRED)\n    find_package(G2O REQUIRED)\n    \n    include_directories(${G2O_INCLUDE_DIRS})\n    include_directories(${OpenCV_INCLUDE_DIRS})\n    include_directories(${Sophus_INCLUDE_DIRS})\n    include_directories(${CERES_INCLUDE_DIRS})\n    include_directories(/usr/include/eigen3)\n    include_directories(../include)\n    \n    add_library(HELLO hello.cpp)\n    add_library(common common.cpp)\n    target_link_libraries(common ${Pangolin_LIBRARIES})\n    target_link_libraries(common ${OpenCV_LIBS})\n    target_link_libraries(common ${CERES_LIBRARIES})\n    target_link_libraries(common ${G2O_LIBS})\n\n  [1]: /old_images/2020/06/3640866494.jpg\n  [2]: /old_images/2020/06/2855613712.jpg\n","slug":"让编译不再麻烦——CMake使用","published":1,"updated":"2020-12-14T12:22:02.484Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0cl002o7p192g72gkwn","content":"<p>相信大家在进行C/C++开发时，经常会遇到项目管理的问题。如果你只有一个源文件，那么这将不是什么难事，一条gcc/g++指令，配合上合适的参数，就能够做得很好。但是对于像这样庞大的工程：<br><img src=\"/old_images/2020/06/3640866494.jpg\" alt=\"Snipaste_2020-06-10_13-40-06.jpg\"><br>每个源文件需要一行编译命令，之后还需要链接，才能编译成二进制可执行文件与库，想着想着，我人都傻了Σ(っ °Д °;)っ<br>幸好有的IDE已经很智能地帮我们做了这一点，我们只需要用图形界面配置好工程中文件的组织形式，引用路径，库的位置，就能够一键编译了。（比如交叉编译IDE 我们熟知的Keil）<br>但是IDE灵活性不足，并且有平台的局限性，不能做到轻量化，在使用VSCode这种不带编译器的编辑器的时候，想要更多地自己配置编译方式，就需要用到我们今天的主角Makefile与CMake了！</p>\n<h2 id=\"Makefile\"><a href=\"#Makefile\" class=\"headerlink\" title=\"Makefile\"></a>Makefile</h2><p>为了能够自动化地配置工程，完成编译，人们发明了Makefile这样的文件。在含有Makefile文件的目录下执行make命令就可以执行编译动作。使用设定好的编译器，系统会读取Makefile文件的内容进行编译。<br>Makefile按照目标：依赖的结构组织工程，后面紧接着由依赖变化到目标的gcc（g++）命令。使用自动化变量加上自动寻找依赖的机制，Makefile的确使得编译更加方便，但是要写好Makefile，还是离不开gcc（g++）繁琐的语法，同时还要满足Makefile的语法格式。人们又发明了自动生成Makefile文件的工具CMake。<br>##<img src=\"/old_images/2020/06/2855613712.jpg\" alt=\"Snipaste_2020-06-10_14-42-50.jpg\"><br>Makefile的语法</p>\n<h2 id=\"CMake\"><a href=\"#CMake\" class=\"headerlink\" title=\"CMake\"></a>CMake</h2><p>想要使用Makefile，一般的Linux系统都会自带Makefile工具。但是CMake需要自行安装。CMake的设计初衷就是使用简单易懂的CMake语法生成晦涩难懂的Makefile语法，使得配置编译设置就像在IDE使用图形化配置一样方便（事实上确实有图形化的CMake——CMake GUI）。<br>在工程目录创建一个CMakeLists.txt文件，并且创建子目录build，用于放置编译生成的中间文件，进入build，执行cmake ..（注意这个..，表示上一级目录），就会生成我们想要的Makefile文件了，相信这个步骤使用源码安装Linux软件的同学都不陌生。</p>\n<p>CMake语句：</p>\n<pre><code>project(main)\ncmake_minimum_required(VERSION 2.8)</code></pre>\n<p>新建一个CMake项目main，确定cmake需要的最低版本为2.8<br>    set(CMAKE_BUILD_TYPE “Release”)<br>    set(CMAKE_CXX_FLAGS “-O3”)<br>    set(CMAKE_CXX_FLAGS “-std=c++11”)<br>确定编译发布版，优化-o3，C++标准为c++11，set就是进行变量的赋值<br>    set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)<br>    set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)<br>确定输出可执行文件、库文件的位置<br>    find_package(OpenCV REQUIRED)<br>找到系统已经安装的库文件的路径，将其赋值给对应变量。一些比较大的库自己能够告知CMake自己的位置，但是有时就需要我们把FindXXlib.cmake文件告诉CMake（一般库中会提供的）：<br>    list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)<br>确定cmake文件的位置<br>    include_directories(${OpenCV_INCLUDE_DIRS})<br>添加头文件目录，相当于gcc（g++）命令中的-I<br>    add_subdirectory(./src)<br>添加一个子目录，需要保证子目录中有CMakeLists.txt文件，然后就会执行子目录中的CMake文件，用于多个目录的工程。一般在子目录中将源文件编译为库文件，再在根目录的CMake中链接这个库。<br>    add_library(HELLO hello.cpp)<br>    add_executable(main main.cpp)<br>生成一个库、可执行文件，使用源文件（可以是多个），进行编译、链接，生成一个二进制文件，相当于gcc（g++）中的 -o<br>    target_link_libraries(common ${OpenCV_LIBS})<br>给可执行文件链接一个库，这个库可以是绝对路径，也可以是已经放在环境变量中的变量。</p>\n<p>总而言之这就是CMake的基本原理，确实是大大方便了工程项目配置，已经逐渐成为了主流。</p>\n<p>附上在学习高翔老师《视觉SLAM14讲》时使用的CMake文件，留做参考。</p>\n<p>./中的CMakeLists.txt<br>    project(main)<br>    cmake_minimum_required(VERSION 2.8)</p>\n<pre><code>set(CMAKE_BUILD_TYPE &quot;Release&quot;)\n#set(CMAKE_BUILD_TYPE &quot;Debug&quot;)\nset(CMAKE_CXX_FLAGS &quot;-O3&quot;)\nset(CMAKE_CXX_FLAGS &quot;-std=c++11&quot;)\nset(EXECUTABLE_OUTPUT_PATH $&#123;PROJECT_SOURCE_DIR&#125;/bin)\nset(CMAKE_CXX_FLAGS &quot;-std=c++11 -O2 $&#123;SSE_FLAGS&#125; -g -march=native&quot;)\nset(G2O_LIBS g2o_core g2o_stuff g2o_types_sba g2o_types_slam3d\n             g2o_solver_csparse g2o_csparse_extension cholmod g2o_solver_cholmod cxsparse)\n\nlist(APPEND CMAKE_MODULE_PATH $&#123;PROJECT_SOURCE_DIR&#125;/cmake)\n\nfind_package(Sophus REQUIRED)\nfind_package(OpenCV REQUIRED)\nfind_package(Pangolin REQUIRED)\nfind_package(Ceres REQUIRED)\nFind_Package(CSparse REQUIRED)\nfind_package(G2O REQUIRED)\n\n\ninclude_directories($&#123;G2O_INCLUDE_DIRS&#125;)\ninclude_directories( $&#123;CSPARSE_INCLUDE_DIR&#125; )\ninclude_directories($&#123;OpenCV_INCLUDE_DIRS&#125;)\ninclude_directories($&#123;Sophus_INCLUDE_DIRS&#125;)\ninclude_directories($&#123;CERES_INCLUDE_DIRS&#125;)\ninclude_directories(/usr/include/eigen3)\ninclude_directories(./src)\ninclude_directories(./include)\n\n\nadd_subdirectory(./src)\nadd_executable(main main.cpp)\ntarget_link_libraries(main HELLO)\ntarget_link_libraries(main common)\ntarget_link_libraries(main $&#123;Pangolin_LIBRARIES&#125;)\ntarget_link_libraries(main $&#123;OpenCV_LIBS&#125;)\ntarget_link_libraries(main $&#123;CERES_LIBRARIES&#125;)\ntarget_link_libraries(main $&#123;G2O_LIBS&#125;)</code></pre>\n<p>./src中的CMakeLists.txt<br>    cmake_minimum_required(VERSION 2.8)</p>\n<pre><code>set(CMAKE_BUILD_TYPE &quot;Release&quot;)\n# set(CMAKE_CXX_FLAGS &quot;-O3&quot;)\nset(LIBRARY_OUTPUT_PATH $&#123;PROJECT_SOURCE_DIR&#125;/lib)\nset(G2O_LIBS g2o_core g2o_stuff g2o_types_sba g2o_types_slam3d\n             g2o_solver_csparse g2o_csparse_extension cholmod g2o_solver_cholmod cxsparse)\n\nlist(APPEND CMAKE_MODULE_PATH $&#123;PROJECT_SOURCE_DIR&#125;/cmake)\n\nfind_package(Sophus REQUIRED)\nfind_package(OpenCV REQUIRED)\nfind_package(Pangolin REQUIRED)\nfind_package(Ceres REQUIRED)\nfind_package(G2O REQUIRED)\n\ninclude_directories($&#123;G2O_INCLUDE_DIRS&#125;)\ninclude_directories($&#123;OpenCV_INCLUDE_DIRS&#125;)\ninclude_directories($&#123;Sophus_INCLUDE_DIRS&#125;)\ninclude_directories($&#123;CERES_INCLUDE_DIRS&#125;)\ninclude_directories(/usr/include/eigen3)\ninclude_directories(../include)\n\nadd_library(HELLO hello.cpp)\nadd_library(common common.cpp)\ntarget_link_libraries(common $&#123;Pangolin_LIBRARIES&#125;)\ntarget_link_libraries(common $&#123;OpenCV_LIBS&#125;)\ntarget_link_libraries(common $&#123;CERES_LIBRARIES&#125;)\ntarget_link_libraries(common $&#123;G2O_LIBS&#125;)</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>相信大家在进行C/C++开发时，经常会遇到项目管理的问题。如果你只有一个源文件，那么这将不是什么难事，一条gcc/g++指令，配合上合适的参数，就能够做得很好。但是对于像这样庞大的工程：<br><img src=\"/old_images/2020/06/3640866494.jpg\" alt=\"Snipaste_2020-06-10_13-40-06.jpg\"><br>每个源文件需要一行编译命令，之后还需要链接，才能编译成二进制可执行文件与库，想着想着，我人都傻了Σ(っ °Д °;)っ<br>幸好有的IDE已经很智能地帮我们做了这一点，我们只需要用图形界面配置好工程中文件的组织形式，引用路径，库的位置，就能够一键编译了。（比如交叉编译IDE 我们熟知的Keil）<br>但是IDE灵活性不足，并且有平台的局限性，不能做到轻量化，在使用VSCode这种不带编译器的编辑器的时候，想要更多地自己配置编译方式，就需要用到我们今天的主角Makefile与CMake了！</p>\n<h2 id=\"Makefile\"><a href=\"#Makefile\" class=\"headerlink\" title=\"Makefile\"></a>Makefile</h2><p>为了能够自动化地配置工程，完成编译，人们发明了Makefile这样的文件。在含有Makefile文件的目录下执行make命令就可以执行编译动作。使用设定好的编译器，系统会读取Makefile文件的内容进行编译。<br>Makefile按照目标：依赖的结构组织工程，后面紧接着由依赖变化到目标的gcc（g++）命令。使用自动化变量加上自动寻找依赖的机制，Makefile的确使得编译更加方便，但是要写好Makefile，还是离不开gcc（g++）繁琐的语法，同时还要满足Makefile的语法格式。人们又发明了自动生成Makefile文件的工具CMake。<br>##<img src=\"/old_images/2020/06/2855613712.jpg\" alt=\"Snipaste_2020-06-10_14-42-50.jpg\"><br>Makefile的语法</p>\n<h2 id=\"CMake\"><a href=\"#CMake\" class=\"headerlink\" title=\"CMake\"></a>CMake</h2><p>想要使用Makefile，一般的Linux系统都会自带Makefile工具。但是CMake需要自行安装。CMake的设计初衷就是使用简单易懂的CMake语法生成晦涩难懂的Makefile语法，使得配置编译设置就像在IDE使用图形化配置一样方便（事实上确实有图形化的CMake——CMake GUI）。<br>在工程目录创建一个CMakeLists.txt文件，并且创建子目录build，用于放置编译生成的中间文件，进入build，执行cmake ..（注意这个..，表示上一级目录），就会生成我们想要的Makefile文件了，相信这个步骤使用源码安装Linux软件的同学都不陌生。</p>\n<p>CMake语句：</p>\n<pre><code>project(main)\ncmake_minimum_required(VERSION 2.8)</code></pre>\n<p>新建一个CMake项目main，确定cmake需要的最低版本为2.8<br>    set(CMAKE_BUILD_TYPE “Release”)<br>    set(CMAKE_CXX_FLAGS “-O3”)<br>    set(CMAKE_CXX_FLAGS “-std=c++11”)<br>确定编译发布版，优化-o3，C++标准为c++11，set就是进行变量的赋值<br>    set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)<br>    set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)<br>确定输出可执行文件、库文件的位置<br>    find_package(OpenCV REQUIRED)<br>找到系统已经安装的库文件的路径，将其赋值给对应变量。一些比较大的库自己能够告知CMake自己的位置，但是有时就需要我们把FindXXlib.cmake文件告诉CMake（一般库中会提供的）：<br>    list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)<br>确定cmake文件的位置<br>    include_directories(${OpenCV_INCLUDE_DIRS})<br>添加头文件目录，相当于gcc（g++）命令中的-I<br>    add_subdirectory(./src)<br>添加一个子目录，需要保证子目录中有CMakeLists.txt文件，然后就会执行子目录中的CMake文件，用于多个目录的工程。一般在子目录中将源文件编译为库文件，再在根目录的CMake中链接这个库。<br>    add_library(HELLO hello.cpp)<br>    add_executable(main main.cpp)<br>生成一个库、可执行文件，使用源文件（可以是多个），进行编译、链接，生成一个二进制文件，相当于gcc（g++）中的 -o<br>    target_link_libraries(common ${OpenCV_LIBS})<br>给可执行文件链接一个库，这个库可以是绝对路径，也可以是已经放在环境变量中的变量。</p>\n<p>总而言之这就是CMake的基本原理，确实是大大方便了工程项目配置，已经逐渐成为了主流。</p>\n<p>附上在学习高翔老师《视觉SLAM14讲》时使用的CMake文件，留做参考。</p>\n<p>./中的CMakeLists.txt<br>    project(main)<br>    cmake_minimum_required(VERSION 2.8)</p>\n<pre><code>set(CMAKE_BUILD_TYPE &quot;Release&quot;)\n#set(CMAKE_BUILD_TYPE &quot;Debug&quot;)\nset(CMAKE_CXX_FLAGS &quot;-O3&quot;)\nset(CMAKE_CXX_FLAGS &quot;-std=c++11&quot;)\nset(EXECUTABLE_OUTPUT_PATH $&#123;PROJECT_SOURCE_DIR&#125;/bin)\nset(CMAKE_CXX_FLAGS &quot;-std=c++11 -O2 $&#123;SSE_FLAGS&#125; -g -march=native&quot;)\nset(G2O_LIBS g2o_core g2o_stuff g2o_types_sba g2o_types_slam3d\n             g2o_solver_csparse g2o_csparse_extension cholmod g2o_solver_cholmod cxsparse)\n\nlist(APPEND CMAKE_MODULE_PATH $&#123;PROJECT_SOURCE_DIR&#125;/cmake)\n\nfind_package(Sophus REQUIRED)\nfind_package(OpenCV REQUIRED)\nfind_package(Pangolin REQUIRED)\nfind_package(Ceres REQUIRED)\nFind_Package(CSparse REQUIRED)\nfind_package(G2O REQUIRED)\n\n\ninclude_directories($&#123;G2O_INCLUDE_DIRS&#125;)\ninclude_directories( $&#123;CSPARSE_INCLUDE_DIR&#125; )\ninclude_directories($&#123;OpenCV_INCLUDE_DIRS&#125;)\ninclude_directories($&#123;Sophus_INCLUDE_DIRS&#125;)\ninclude_directories($&#123;CERES_INCLUDE_DIRS&#125;)\ninclude_directories(/usr/include/eigen3)\ninclude_directories(./src)\ninclude_directories(./include)\n\n\nadd_subdirectory(./src)\nadd_executable(main main.cpp)\ntarget_link_libraries(main HELLO)\ntarget_link_libraries(main common)\ntarget_link_libraries(main $&#123;Pangolin_LIBRARIES&#125;)\ntarget_link_libraries(main $&#123;OpenCV_LIBS&#125;)\ntarget_link_libraries(main $&#123;CERES_LIBRARIES&#125;)\ntarget_link_libraries(main $&#123;G2O_LIBS&#125;)</code></pre>\n<p>./src中的CMakeLists.txt<br>    cmake_minimum_required(VERSION 2.8)</p>\n<pre><code>set(CMAKE_BUILD_TYPE &quot;Release&quot;)\n# set(CMAKE_CXX_FLAGS &quot;-O3&quot;)\nset(LIBRARY_OUTPUT_PATH $&#123;PROJECT_SOURCE_DIR&#125;/lib)\nset(G2O_LIBS g2o_core g2o_stuff g2o_types_sba g2o_types_slam3d\n             g2o_solver_csparse g2o_csparse_extension cholmod g2o_solver_cholmod cxsparse)\n\nlist(APPEND CMAKE_MODULE_PATH $&#123;PROJECT_SOURCE_DIR&#125;/cmake)\n\nfind_package(Sophus REQUIRED)\nfind_package(OpenCV REQUIRED)\nfind_package(Pangolin REQUIRED)\nfind_package(Ceres REQUIRED)\nfind_package(G2O REQUIRED)\n\ninclude_directories($&#123;G2O_INCLUDE_DIRS&#125;)\ninclude_directories($&#123;OpenCV_INCLUDE_DIRS&#125;)\ninclude_directories($&#123;Sophus_INCLUDE_DIRS&#125;)\ninclude_directories($&#123;CERES_INCLUDE_DIRS&#125;)\ninclude_directories(/usr/include/eigen3)\ninclude_directories(../include)\n\nadd_library(HELLO hello.cpp)\nadd_library(common common.cpp)\ntarget_link_libraries(common $&#123;Pangolin_LIBRARIES&#125;)\ntarget_link_libraries(common $&#123;OpenCV_LIBS&#125;)\ntarget_link_libraries(common $&#123;CERES_LIBRARIES&#125;)\ntarget_link_libraries(common $&#123;G2O_LIBS&#125;)</code></pre>\n"},{"title":"轨道交通领域的牛顿特斯拉之战和你坐地铁听到的“防空警报声”","date":"2020-06-30T09:21:11.000Z","toc":true,"_content":"好了，我不是鸽子，我只是最近突然开始考试了。再一个，闫栋宇这博客的影响力太低，划了半天才遇到这样一个问题。\n ![233.png][1]\n感谢这位同学，好样的。你的问题我在后面解答了，记得查收。\n今天考完了信号与系统，下午忽然看到中车长客下线了哈尔滨地铁2号线的第一列电客车，外形样子很有JR的味道，内部LCD很像港铁。挺帅的，可以期待一下。\n所以挺高兴的，忽然想起来自己应该看看这个博客里面也没有人提问题了，就点进来看了一下。遂琢磨写一篇推送，说点轨交的小东西。开始。\n提到轨道交通，大家想到的可能是和谐号，复兴号，白色车身，蓝色肩带的钢铁巨龙；或者是拉着汽笛咣啷啷前行的绿皮车。事实上我对轨道交通的兴趣，大概来自于我从小就住在铁路边上，绥满铁路哈尔滨段，也是中东铁路最靠近哈尔滨站的这一段。那时候也没有啥娱乐手段，每天最大的快乐就是看火车。我家门口的铁路桥往北走一点就是著名的滨洲铁路桥，现在已经是个景点了。高中想考同济轨交，没考上，现在换了个地方继续考，我就不信了我还治不了你了。\n扯远了，说回来。目前的轨道交通是以电气化发展为主的，你们看看自己城市的地铁，没有在用内燃机车或者蒸汽机车的吧，都是电客车。电客车，以电为能源的载客列车，字面意思即可。通常我们认为火车是车头带着一溜车厢走，动力来自于车头，也就是所谓的机车。机车通过电能驱动电机，或者内燃机燃烧燃料带动车轮（这里要注意，为了更好地控制运行速度，相当一部分内燃机车采用电传动，简单来说就是燃烧燃料是为了发电，，电能驱动列车前进，本质上还是电机带动车轮转动），机车通过车钩把力传给后面的车厢，再传给再后面的车厢，一节一节套娃即可。这种模式成为机辆模式，只有机车有动力，后面全是没有动力的拖车。这样的车坐起来的体验比较差。我们可以把一列火车想象成一个高中学动量定理时候常用的简单的物理模型，就是若干物块通过弹簧串联起来。列车停放时，弹簧是松弛的（有空的时候可以给你们讲讲制动的原理，制动靠的是空气，很有意思），机车带动第一节车厢从零加速，第一个弹簧绷直，第一节车厢有速度之后，第二个弹簧绷直，第二节车厢受力开始加速。落实到乘坐体验上，就会在启动的时候忽然觉得自己所在的车厢被一个很大的力撞了一下，车迷俗称“咣一声”。不同车型的体验是不一样的，减震缓冲做的越好这种感觉越微弱，但再微弱也会有。同理，制动的时候也一样。但如果你坐的火车在站内停车的时候忽然向运行反方向抖了一下，紧接着又向运行方向抖了一下，不要慌，这是在进行更换机车的机车连挂作业，也就是换车头。\n传统的机辆方式很传统，但会带来一些问题。刚才说的乘坐体验是一方面，另一方面就是运行方面的问题了。这样的方式限制了列车的加速性能，毕竟要一节一节地去把车厢从静止“拽”成有速度，且一节机车能提供的总功率有限，很难把运行速度进一步提升，目前普速列车最高的速度等级是Z，最高运行速度也就160左右，拉的越多速度还越慢。这倒也好解决，你一辆机车不够我就加一个呗，俩不够就来仨，是可以的。这样的运行模式下，负责总控制的机车称为本务，剩下那些来帮忙的都叫做补机。这样的方法行倒是行，但也仅仅是“凑合着用”。这里我们引入一个不是很严谨的概念，叫动拖比。为什么不严谨暂且不表，先说它是什么。动拖比，字面意思是动力车和拖车的数量比。比如ICE3，很经典的德国高速动车组，我国CRH3C和CRH380B系列都是以ICE3为原型车的。ICE3为8节编组，4动4拖，即4节车上有电机，其余4节轮子上没有驱动装置（但是制动装置是都有的，安全起见），动拖比就是50%，注意动力车本身也算在拖车总数里。一个数据告诉你德国货多牛逼，50%动拖比的ICE3的总牵引功率，比同样是8辆编组且动拖比75%的CRH2A（以新干线为原型车）要高出将近三分之一，这才叫真正的强劲动力。介绍完动拖比的概念，我们不难理解，对于相同水平的动力配置，动拖比越高的列车功率越高。这就为上述问题提供了一个思路，我能不能把动力单元分散到几个车厢中去，让更多的拖车变成动力车，这样起动性能会更好（因为打破了机辆模式），最高运行速度也会更高（动拖比增加，功率增加）。于是，动车组诞生了（这里暂且不谈动力集中型动车组，也就是垃圾桶，机破之王CR200J）。\n我们现在看到的动车组都觉得很常见，但这个分散动力单元的思想是很具有跨时代意义的。就像当年被魔改的波音737，把发动机从尾部挪到了大翼悬臂梁下面一样，开创了一个时代。按照这样的定义，其实我们平时坐的地铁也是动车吗？是的。举一个很简单的例子，哈尔滨地铁今天下线的2号线首列电客车，它的动力配置是4动2拖六节编组（1号线也一样，所以我才觉得他俩是一个模子扣的），两端是带控制室的拖车，符号是Tc，第二节和第五节是带受电弓的动车，符号是Mp（p代表受电弓pantograph），第三节第四节则是普通动车，符号是M。提到受电弓，大家可以理解为无轨电车的大辫子，跟它原理上没有任何区别。同理，有些地方可能有轻轨，重庆的单轨，还有一些有轨电车（北京的西郊线，车迷称西溜线，这个故事很有意思，以后可以单拿出来写一篇）等，都可以算是动车的范畴。\n**以下划重点，我来讨论一下图里的问题。先说交流直流。**\n我们知道输电的时候有两种形式，交流和直流。其实这两种电轨道交通都在用，只不过国铁（普速铁路或者高铁动车）用的是交流电（惭愧啊，忘了电压是多少了，好像是3000V吧），城市轨道交通一般用的是直流电。注意是一般，不是全部，这个和设计有关系。区别主要在于用的电机不同，国铁的电力机车或者电力动车组用的都是交流电机，感应电机或者永磁同步电机，而城市轨道交通一般用的是无刷直流电机。有人可能会说无刷直流电机和永磁同步电机本质上没有差别。是的，说的没错，但是用在这个场合里的区别在于，国铁主要承担的是大运量、远距离的运输，需要电机长时间稳定高速运行，而城市轨道交通的站间距相对较短，需要频繁的起动制动，所以在这个语境下把这个电机当成一个直流电机来控制，可以得到很好的快速启动、快速制动特性，加速度可以很大。这就是为什么地铁起动的时候，我们一定好扶好坐稳，因为加速度很大，而坐高铁动车的时候，列车起动可能都没什么感觉，加速很慢，但是加速过程很长。此外，发电厂发出来的电可是交流电，荒山野岭的地方隔几公里就要给高铁修个变电站，咱也得考虑成本啊，修个变压器就得了，再整个整流装置太费钱，干脆你就用交流电吧。但城市轨道交通不同，在城市里一条线路可能也就需要一两个主变电站，对于每公里3亿到7亿的成本，两个大容量整流装置应该用不了几个钱。这就是一种相克相生的关系，我需要长时间稳定高速，就用交流电，但起动性能就差；我需要快速起动快速制动，就用直流电，加速很快，但就麻烦点。这里说一下，这么大功率的电机基本没有用有刷电机的。要是用了我估计得天天换电刷。\n其实直流交流的区别，上述是业内主要考虑的方面。看到问题里的那个朋友说损耗问题，也有一定道理，确实国铁的线路比较长，高压的交流输电能减少不少损耗，但要知道3000V并不算很高（直接输给受电弓的电压可不是超高压或者特高压的），整个线路的电压都是这个数值，这个电压等级的长距离输电损耗应该也不小，毕竟电压低，所以我个人认为这不是一个主要方面。而且交流和直流相比，如果考虑电缆的集肤效应，同等电压等级的情况下是不是交流的损耗还要高一些？这也是个很有意思的问题，有空可以探讨一下。这个交直流的问题并没有定论，其实也是电客车运用的长期经验反馈给设计者的一种信息。就像舌尖上的中国里的大自然给人类的馈赠一样，倒逼着我们去改进设计，这可能也是工科特有的魅力。\n**好了，现在说说那个“防空警报声”。**\n其实我不说你可能觉得它很陌生，但我要是说“唱歌电机”，你可能就恍然大悟了。是的，就是VVVF，variable voltage variable frequency，变压变频调速，就是那个声音。电机嘛，启动过程中一定要调速控制的，我接触到的电力机车或者电力动车组都是VVVF调速。\n事实上，不同厂家生产的变流装置发出的声音是不一样的。说到这就不得不提一下三个龙头企业——西门子，阿尔斯通，庞巴迪。这三家企业生产的相关半导体器件制成的变流装置在进行VVVF调速的时候发出的声音是不一样的。防空警报一样的是西门子平台，阿尔斯通和庞巴迪的声音有独特的变化规律，这个区别很明显，每一家公司的产品都很独特，还有其他企业的（比如日立，南车等），但用语言不可描述，感兴趣的话可以来找我，我给你几个B站链接。\n车迷中有一个群体很喜欢听VVVF声音，有些人可能把它当成asmr了吧。我也喜欢，但我喜欢只是因为我是学电的。再一个，我觉得它很好听。也许工科生不懂浪漫，但工科也有自己的美吧，即使是一段并不具有太大欣赏价值的VVVF声音。\n今天就说到这吧，我还在等同济轨交院的短信和邮件，不知道我能不能进夏令营。**这篇文章放在这，感谢栋宇给我这个平台，也感谢提问题的这位兄弟，我真的是看见有人提了个问题才决定今天无论如何也要写一篇出来。**轨道交通是一个很冷门的行业，它融合了机械，车辆，空气动力学，能源动力，电气，控制，土木，材料等等很多学科。我自己预测至少30年内传统轮轨还有发展的余地，传统轮轨会向着智能化、自动化、无人化、绝对安全化、绿色节能化、高速和高效化发展。还有一个，就是磁悬浮，那就是另一个故事了。最近胡志强跟我说了有一些想法，觉得轨交这个行业也挺好的。如果可能的话，我也挺希望他能跟我一起去轨交领域开创一片天地出来。\n调研和问题招募长期有效，欢迎大家对轨道交通领域有什么问题都可以来栋宇的博客下面找我的文章留言，不定期给大家做点硬核科普。\n\n\n  [1]: /old_images/2020/07/1028634298.png\n","source":"_posts/轨道交通领域的牛顿特斯拉之战和你坐地铁听到的“防空警报声”.md","raw":"title: 轨道交通领域的牛顿特斯拉之战和你坐地铁听到的“防空警报声”\ndate: 2020-06-30 17:21:11\ncategories: 日常\ntags: []\ntoc: true\n---\n好了，我不是鸽子，我只是最近突然开始考试了。再一个，闫栋宇这博客的影响力太低，划了半天才遇到这样一个问题。\n ![233.png][1]\n感谢这位同学，好样的。你的问题我在后面解答了，记得查收。\n今天考完了信号与系统，下午忽然看到中车长客下线了哈尔滨地铁2号线的第一列电客车，外形样子很有JR的味道，内部LCD很像港铁。挺帅的，可以期待一下。\n所以挺高兴的，忽然想起来自己应该看看这个博客里面也没有人提问题了，就点进来看了一下。遂琢磨写一篇推送，说点轨交的小东西。开始。\n提到轨道交通，大家想到的可能是和谐号，复兴号，白色车身，蓝色肩带的钢铁巨龙；或者是拉着汽笛咣啷啷前行的绿皮车。事实上我对轨道交通的兴趣，大概来自于我从小就住在铁路边上，绥满铁路哈尔滨段，也是中东铁路最靠近哈尔滨站的这一段。那时候也没有啥娱乐手段，每天最大的快乐就是看火车。我家门口的铁路桥往北走一点就是著名的滨洲铁路桥，现在已经是个景点了。高中想考同济轨交，没考上，现在换了个地方继续考，我就不信了我还治不了你了。\n扯远了，说回来。目前的轨道交通是以电气化发展为主的，你们看看自己城市的地铁，没有在用内燃机车或者蒸汽机车的吧，都是电客车。电客车，以电为能源的载客列车，字面意思即可。通常我们认为火车是车头带着一溜车厢走，动力来自于车头，也就是所谓的机车。机车通过电能驱动电机，或者内燃机燃烧燃料带动车轮（这里要注意，为了更好地控制运行速度，相当一部分内燃机车采用电传动，简单来说就是燃烧燃料是为了发电，，电能驱动列车前进，本质上还是电机带动车轮转动），机车通过车钩把力传给后面的车厢，再传给再后面的车厢，一节一节套娃即可。这种模式成为机辆模式，只有机车有动力，后面全是没有动力的拖车。这样的车坐起来的体验比较差。我们可以把一列火车想象成一个高中学动量定理时候常用的简单的物理模型，就是若干物块通过弹簧串联起来。列车停放时，弹簧是松弛的（有空的时候可以给你们讲讲制动的原理，制动靠的是空气，很有意思），机车带动第一节车厢从零加速，第一个弹簧绷直，第一节车厢有速度之后，第二个弹簧绷直，第二节车厢受力开始加速。落实到乘坐体验上，就会在启动的时候忽然觉得自己所在的车厢被一个很大的力撞了一下，车迷俗称“咣一声”。不同车型的体验是不一样的，减震缓冲做的越好这种感觉越微弱，但再微弱也会有。同理，制动的时候也一样。但如果你坐的火车在站内停车的时候忽然向运行反方向抖了一下，紧接着又向运行方向抖了一下，不要慌，这是在进行更换机车的机车连挂作业，也就是换车头。\n传统的机辆方式很传统，但会带来一些问题。刚才说的乘坐体验是一方面，另一方面就是运行方面的问题了。这样的方式限制了列车的加速性能，毕竟要一节一节地去把车厢从静止“拽”成有速度，且一节机车能提供的总功率有限，很难把运行速度进一步提升，目前普速列车最高的速度等级是Z，最高运行速度也就160左右，拉的越多速度还越慢。这倒也好解决，你一辆机车不够我就加一个呗，俩不够就来仨，是可以的。这样的运行模式下，负责总控制的机车称为本务，剩下那些来帮忙的都叫做补机。这样的方法行倒是行，但也仅仅是“凑合着用”。这里我们引入一个不是很严谨的概念，叫动拖比。为什么不严谨暂且不表，先说它是什么。动拖比，字面意思是动力车和拖车的数量比。比如ICE3，很经典的德国高速动车组，我国CRH3C和CRH380B系列都是以ICE3为原型车的。ICE3为8节编组，4动4拖，即4节车上有电机，其余4节轮子上没有驱动装置（但是制动装置是都有的，安全起见），动拖比就是50%，注意动力车本身也算在拖车总数里。一个数据告诉你德国货多牛逼，50%动拖比的ICE3的总牵引功率，比同样是8辆编组且动拖比75%的CRH2A（以新干线为原型车）要高出将近三分之一，这才叫真正的强劲动力。介绍完动拖比的概念，我们不难理解，对于相同水平的动力配置，动拖比越高的列车功率越高。这就为上述问题提供了一个思路，我能不能把动力单元分散到几个车厢中去，让更多的拖车变成动力车，这样起动性能会更好（因为打破了机辆模式），最高运行速度也会更高（动拖比增加，功率增加）。于是，动车组诞生了（这里暂且不谈动力集中型动车组，也就是垃圾桶，机破之王CR200J）。\n我们现在看到的动车组都觉得很常见，但这个分散动力单元的思想是很具有跨时代意义的。就像当年被魔改的波音737，把发动机从尾部挪到了大翼悬臂梁下面一样，开创了一个时代。按照这样的定义，其实我们平时坐的地铁也是动车吗？是的。举一个很简单的例子，哈尔滨地铁今天下线的2号线首列电客车，它的动力配置是4动2拖六节编组（1号线也一样，所以我才觉得他俩是一个模子扣的），两端是带控制室的拖车，符号是Tc，第二节和第五节是带受电弓的动车，符号是Mp（p代表受电弓pantograph），第三节第四节则是普通动车，符号是M。提到受电弓，大家可以理解为无轨电车的大辫子，跟它原理上没有任何区别。同理，有些地方可能有轻轨，重庆的单轨，还有一些有轨电车（北京的西郊线，车迷称西溜线，这个故事很有意思，以后可以单拿出来写一篇）等，都可以算是动车的范畴。\n**以下划重点，我来讨论一下图里的问题。先说交流直流。**\n我们知道输电的时候有两种形式，交流和直流。其实这两种电轨道交通都在用，只不过国铁（普速铁路或者高铁动车）用的是交流电（惭愧啊，忘了电压是多少了，好像是3000V吧），城市轨道交通一般用的是直流电。注意是一般，不是全部，这个和设计有关系。区别主要在于用的电机不同，国铁的电力机车或者电力动车组用的都是交流电机，感应电机或者永磁同步电机，而城市轨道交通一般用的是无刷直流电机。有人可能会说无刷直流电机和永磁同步电机本质上没有差别。是的，说的没错，但是用在这个场合里的区别在于，国铁主要承担的是大运量、远距离的运输，需要电机长时间稳定高速运行，而城市轨道交通的站间距相对较短，需要频繁的起动制动，所以在这个语境下把这个电机当成一个直流电机来控制，可以得到很好的快速启动、快速制动特性，加速度可以很大。这就是为什么地铁起动的时候，我们一定好扶好坐稳，因为加速度很大，而坐高铁动车的时候，列车起动可能都没什么感觉，加速很慢，但是加速过程很长。此外，发电厂发出来的电可是交流电，荒山野岭的地方隔几公里就要给高铁修个变电站，咱也得考虑成本啊，修个变压器就得了，再整个整流装置太费钱，干脆你就用交流电吧。但城市轨道交通不同，在城市里一条线路可能也就需要一两个主变电站，对于每公里3亿到7亿的成本，两个大容量整流装置应该用不了几个钱。这就是一种相克相生的关系，我需要长时间稳定高速，就用交流电，但起动性能就差；我需要快速起动快速制动，就用直流电，加速很快，但就麻烦点。这里说一下，这么大功率的电机基本没有用有刷电机的。要是用了我估计得天天换电刷。\n其实直流交流的区别，上述是业内主要考虑的方面。看到问题里的那个朋友说损耗问题，也有一定道理，确实国铁的线路比较长，高压的交流输电能减少不少损耗，但要知道3000V并不算很高（直接输给受电弓的电压可不是超高压或者特高压的），整个线路的电压都是这个数值，这个电压等级的长距离输电损耗应该也不小，毕竟电压低，所以我个人认为这不是一个主要方面。而且交流和直流相比，如果考虑电缆的集肤效应，同等电压等级的情况下是不是交流的损耗还要高一些？这也是个很有意思的问题，有空可以探讨一下。这个交直流的问题并没有定论，其实也是电客车运用的长期经验反馈给设计者的一种信息。就像舌尖上的中国里的大自然给人类的馈赠一样，倒逼着我们去改进设计，这可能也是工科特有的魅力。\n**好了，现在说说那个“防空警报声”。**\n其实我不说你可能觉得它很陌生，但我要是说“唱歌电机”，你可能就恍然大悟了。是的，就是VVVF，variable voltage variable frequency，变压变频调速，就是那个声音。电机嘛，启动过程中一定要调速控制的，我接触到的电力机车或者电力动车组都是VVVF调速。\n事实上，不同厂家生产的变流装置发出的声音是不一样的。说到这就不得不提一下三个龙头企业——西门子，阿尔斯通，庞巴迪。这三家企业生产的相关半导体器件制成的变流装置在进行VVVF调速的时候发出的声音是不一样的。防空警报一样的是西门子平台，阿尔斯通和庞巴迪的声音有独特的变化规律，这个区别很明显，每一家公司的产品都很独特，还有其他企业的（比如日立，南车等），但用语言不可描述，感兴趣的话可以来找我，我给你几个B站链接。\n车迷中有一个群体很喜欢听VVVF声音，有些人可能把它当成asmr了吧。我也喜欢，但我喜欢只是因为我是学电的。再一个，我觉得它很好听。也许工科生不懂浪漫，但工科也有自己的美吧，即使是一段并不具有太大欣赏价值的VVVF声音。\n今天就说到这吧，我还在等同济轨交院的短信和邮件，不知道我能不能进夏令营。**这篇文章放在这，感谢栋宇给我这个平台，也感谢提问题的这位兄弟，我真的是看见有人提了个问题才决定今天无论如何也要写一篇出来。**轨道交通是一个很冷门的行业，它融合了机械，车辆，空气动力学，能源动力，电气，控制，土木，材料等等很多学科。我自己预测至少30年内传统轮轨还有发展的余地，传统轮轨会向着智能化、自动化、无人化、绝对安全化、绿色节能化、高速和高效化发展。还有一个，就是磁悬浮，那就是另一个故事了。最近胡志强跟我说了有一些想法，觉得轨交这个行业也挺好的。如果可能的话，我也挺希望他能跟我一起去轨交领域开创一片天地出来。\n调研和问题招募长期有效，欢迎大家对轨道交通领域有什么问题都可以来栋宇的博客下面找我的文章留言，不定期给大家做点硬核科普。\n\n\n  [1]: /old_images/2020/07/1028634298.png\n","slug":"轨道交通领域的牛顿特斯拉之战和你坐地铁听到的“防空警报声”","published":1,"updated":"2020-12-14T12:21:08.818Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0cm002s7p19gqn8e79s","content":"<p>好了，我不是鸽子，我只是最近突然开始考试了。再一个，闫栋宇这博客的影响力太低，划了半天才遇到这样一个问题。<br> <img src=\"/old_images/2020/07/1028634298.png\" alt=\"233.png\"><br>感谢这位同学，好样的。你的问题我在后面解答了，记得查收。<br>今天考完了信号与系统，下午忽然看到中车长客下线了哈尔滨地铁2号线的第一列电客车，外形样子很有JR的味道，内部LCD很像港铁。挺帅的，可以期待一下。<br>所以挺高兴的，忽然想起来自己应该看看这个博客里面也没有人提问题了，就点进来看了一下。遂琢磨写一篇推送，说点轨交的小东西。开始。<br>提到轨道交通，大家想到的可能是和谐号，复兴号，白色车身，蓝色肩带的钢铁巨龙；或者是拉着汽笛咣啷啷前行的绿皮车。事实上我对轨道交通的兴趣，大概来自于我从小就住在铁路边上，绥满铁路哈尔滨段，也是中东铁路最靠近哈尔滨站的这一段。那时候也没有啥娱乐手段，每天最大的快乐就是看火车。我家门口的铁路桥往北走一点就是著名的滨洲铁路桥，现在已经是个景点了。高中想考同济轨交，没考上，现在换了个地方继续考，我就不信了我还治不了你了。<br>扯远了，说回来。目前的轨道交通是以电气化发展为主的，你们看看自己城市的地铁，没有在用内燃机车或者蒸汽机车的吧，都是电客车。电客车，以电为能源的载客列车，字面意思即可。通常我们认为火车是车头带着一溜车厢走，动力来自于车头，也就是所谓的机车。机车通过电能驱动电机，或者内燃机燃烧燃料带动车轮（这里要注意，为了更好地控制运行速度，相当一部分内燃机车采用电传动，简单来说就是燃烧燃料是为了发电，，电能驱动列车前进，本质上还是电机带动车轮转动），机车通过车钩把力传给后面的车厢，再传给再后面的车厢，一节一节套娃即可。这种模式成为机辆模式，只有机车有动力，后面全是没有动力的拖车。这样的车坐起来的体验比较差。我们可以把一列火车想象成一个高中学动量定理时候常用的简单的物理模型，就是若干物块通过弹簧串联起来。列车停放时，弹簧是松弛的（有空的时候可以给你们讲讲制动的原理，制动靠的是空气，很有意思），机车带动第一节车厢从零加速，第一个弹簧绷直，第一节车厢有速度之后，第二个弹簧绷直，第二节车厢受力开始加速。落实到乘坐体验上，就会在启动的时候忽然觉得自己所在的车厢被一个很大的力撞了一下，车迷俗称“咣一声”。不同车型的体验是不一样的，减震缓冲做的越好这种感觉越微弱，但再微弱也会有。同理，制动的时候也一样。但如果你坐的火车在站内停车的时候忽然向运行反方向抖了一下，紧接着又向运行方向抖了一下，不要慌，这是在进行更换机车的机车连挂作业，也就是换车头。<br>传统的机辆方式很传统，但会带来一些问题。刚才说的乘坐体验是一方面，另一方面就是运行方面的问题了。这样的方式限制了列车的加速性能，毕竟要一节一节地去把车厢从静止“拽”成有速度，且一节机车能提供的总功率有限，很难把运行速度进一步提升，目前普速列车最高的速度等级是Z，最高运行速度也就160左右，拉的越多速度还越慢。这倒也好解决，你一辆机车不够我就加一个呗，俩不够就来仨，是可以的。这样的运行模式下，负责总控制的机车称为本务，剩下那些来帮忙的都叫做补机。这样的方法行倒是行，但也仅仅是“凑合着用”。这里我们引入一个不是很严谨的概念，叫动拖比。为什么不严谨暂且不表，先说它是什么。动拖比，字面意思是动力车和拖车的数量比。比如ICE3，很经典的德国高速动车组，我国CRH3C和CRH380B系列都是以ICE3为原型车的。ICE3为8节编组，4动4拖，即4节车上有电机，其余4节轮子上没有驱动装置（但是制动装置是都有的，安全起见），动拖比就是50%，注意动力车本身也算在拖车总数里。一个数据告诉你德国货多牛逼，50%动拖比的ICE3的总牵引功率，比同样是8辆编组且动拖比75%的CRH2A（以新干线为原型车）要高出将近三分之一，这才叫真正的强劲动力。介绍完动拖比的概念，我们不难理解，对于相同水平的动力配置，动拖比越高的列车功率越高。这就为上述问题提供了一个思路，我能不能把动力单元分散到几个车厢中去，让更多的拖车变成动力车，这样起动性能会更好（因为打破了机辆模式），最高运行速度也会更高（动拖比增加，功率增加）。于是，动车组诞生了（这里暂且不谈动力集中型动车组，也就是垃圾桶，机破之王CR200J）。<br>我们现在看到的动车组都觉得很常见，但这个分散动力单元的思想是很具有跨时代意义的。就像当年被魔改的波音737，把发动机从尾部挪到了大翼悬臂梁下面一样，开创了一个时代。按照这样的定义，其实我们平时坐的地铁也是动车吗？是的。举一个很简单的例子，哈尔滨地铁今天下线的2号线首列电客车，它的动力配置是4动2拖六节编组（1号线也一样，所以我才觉得他俩是一个模子扣的），两端是带控制室的拖车，符号是Tc，第二节和第五节是带受电弓的动车，符号是Mp（p代表受电弓pantograph），第三节第四节则是普通动车，符号是M。提到受电弓，大家可以理解为无轨电车的大辫子，跟它原理上没有任何区别。同理，有些地方可能有轻轨，重庆的单轨，还有一些有轨电车（北京的西郊线，车迷称西溜线，这个故事很有意思，以后可以单拿出来写一篇）等，都可以算是动车的范畴。<br><strong>以下划重点，我来讨论一下图里的问题。先说交流直流。</strong><br>我们知道输电的时候有两种形式，交流和直流。其实这两种电轨道交通都在用，只不过国铁（普速铁路或者高铁动车）用的是交流电（惭愧啊，忘了电压是多少了，好像是3000V吧），城市轨道交通一般用的是直流电。注意是一般，不是全部，这个和设计有关系。区别主要在于用的电机不同，国铁的电力机车或者电力动车组用的都是交流电机，感应电机或者永磁同步电机，而城市轨道交通一般用的是无刷直流电机。有人可能会说无刷直流电机和永磁同步电机本质上没有差别。是的，说的没错，但是用在这个场合里的区别在于，国铁主要承担的是大运量、远距离的运输，需要电机长时间稳定高速运行，而城市轨道交通的站间距相对较短，需要频繁的起动制动，所以在这个语境下把这个电机当成一个直流电机来控制，可以得到很好的快速启动、快速制动特性，加速度可以很大。这就是为什么地铁起动的时候，我们一定好扶好坐稳，因为加速度很大，而坐高铁动车的时候，列车起动可能都没什么感觉，加速很慢，但是加速过程很长。此外，发电厂发出来的电可是交流电，荒山野岭的地方隔几公里就要给高铁修个变电站，咱也得考虑成本啊，修个变压器就得了，再整个整流装置太费钱，干脆你就用交流电吧。但城市轨道交通不同，在城市里一条线路可能也就需要一两个主变电站，对于每公里3亿到7亿的成本，两个大容量整流装置应该用不了几个钱。这就是一种相克相生的关系，我需要长时间稳定高速，就用交流电，但起动性能就差；我需要快速起动快速制动，就用直流电，加速很快，但就麻烦点。这里说一下，这么大功率的电机基本没有用有刷电机的。要是用了我估计得天天换电刷。<br>其实直流交流的区别，上述是业内主要考虑的方面。看到问题里的那个朋友说损耗问题，也有一定道理，确实国铁的线路比较长，高压的交流输电能减少不少损耗，但要知道3000V并不算很高（直接输给受电弓的电压可不是超高压或者特高压的），整个线路的电压都是这个数值，这个电压等级的长距离输电损耗应该也不小，毕竟电压低，所以我个人认为这不是一个主要方面。而且交流和直流相比，如果考虑电缆的集肤效应，同等电压等级的情况下是不是交流的损耗还要高一些？这也是个很有意思的问题，有空可以探讨一下。这个交直流的问题并没有定论，其实也是电客车运用的长期经验反馈给设计者的一种信息。就像舌尖上的中国里的大自然给人类的馈赠一样，倒逼着我们去改进设计，这可能也是工科特有的魅力。<br><strong>好了，现在说说那个“防空警报声”。</strong><br>其实我不说你可能觉得它很陌生，但我要是说“唱歌电机”，你可能就恍然大悟了。是的，就是VVVF，variable voltage variable frequency，变压变频调速，就是那个声音。电机嘛，启动过程中一定要调速控制的，我接触到的电力机车或者电力动车组都是VVVF调速。<br>事实上，不同厂家生产的变流装置发出的声音是不一样的。说到这就不得不提一下三个龙头企业——西门子，阿尔斯通，庞巴迪。这三家企业生产的相关半导体器件制成的变流装置在进行VVVF调速的时候发出的声音是不一样的。防空警报一样的是西门子平台，阿尔斯通和庞巴迪的声音有独特的变化规律，这个区别很明显，每一家公司的产品都很独特，还有其他企业的（比如日立，南车等），但用语言不可描述，感兴趣的话可以来找我，我给你几个B站链接。<br>车迷中有一个群体很喜欢听VVVF声音，有些人可能把它当成asmr了吧。我也喜欢，但我喜欢只是因为我是学电的。再一个，我觉得它很好听。也许工科生不懂浪漫，但工科也有自己的美吧，即使是一段并不具有太大欣赏价值的VVVF声音。<br>今天就说到这吧，我还在等同济轨交院的短信和邮件，不知道我能不能进夏令营。<strong>这篇文章放在这，感谢栋宇给我这个平台，也感谢提问题的这位兄弟，我真的是看见有人提了个问题才决定今天无论如何也要写一篇出来。</strong>轨道交通是一个很冷门的行业，它融合了机械，车辆，空气动力学，能源动力，电气，控制，土木，材料等等很多学科。我自己预测至少30年内传统轮轨还有发展的余地，传统轮轨会向着智能化、自动化、无人化、绝对安全化、绿色节能化、高速和高效化发展。还有一个，就是磁悬浮，那就是另一个故事了。最近胡志强跟我说了有一些想法，觉得轨交这个行业也挺好的。如果可能的话，我也挺希望他能跟我一起去轨交领域开创一片天地出来。<br>调研和问题招募长期有效，欢迎大家对轨道交通领域有什么问题都可以来栋宇的博客下面找我的文章留言，不定期给大家做点硬核科普。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>好了，我不是鸽子，我只是最近突然开始考试了。再一个，闫栋宇这博客的影响力太低，划了半天才遇到这样一个问题。<br> <img src=\"/old_images/2020/07/1028634298.png\" alt=\"233.png\"><br>感谢这位同学，好样的。你的问题我在后面解答了，记得查收。<br>今天考完了信号与系统，下午忽然看到中车长客下线了哈尔滨地铁2号线的第一列电客车，外形样子很有JR的味道，内部LCD很像港铁。挺帅的，可以期待一下。<br>所以挺高兴的，忽然想起来自己应该看看这个博客里面也没有人提问题了，就点进来看了一下。遂琢磨写一篇推送，说点轨交的小东西。开始。<br>提到轨道交通，大家想到的可能是和谐号，复兴号，白色车身，蓝色肩带的钢铁巨龙；或者是拉着汽笛咣啷啷前行的绿皮车。事实上我对轨道交通的兴趣，大概来自于我从小就住在铁路边上，绥满铁路哈尔滨段，也是中东铁路最靠近哈尔滨站的这一段。那时候也没有啥娱乐手段，每天最大的快乐就是看火车。我家门口的铁路桥往北走一点就是著名的滨洲铁路桥，现在已经是个景点了。高中想考同济轨交，没考上，现在换了个地方继续考，我就不信了我还治不了你了。<br>扯远了，说回来。目前的轨道交通是以电气化发展为主的，你们看看自己城市的地铁，没有在用内燃机车或者蒸汽机车的吧，都是电客车。电客车，以电为能源的载客列车，字面意思即可。通常我们认为火车是车头带着一溜车厢走，动力来自于车头，也就是所谓的机车。机车通过电能驱动电机，或者内燃机燃烧燃料带动车轮（这里要注意，为了更好地控制运行速度，相当一部分内燃机车采用电传动，简单来说就是燃烧燃料是为了发电，，电能驱动列车前进，本质上还是电机带动车轮转动），机车通过车钩把力传给后面的车厢，再传给再后面的车厢，一节一节套娃即可。这种模式成为机辆模式，只有机车有动力，后面全是没有动力的拖车。这样的车坐起来的体验比较差。我们可以把一列火车想象成一个高中学动量定理时候常用的简单的物理模型，就是若干物块通过弹簧串联起来。列车停放时，弹簧是松弛的（有空的时候可以给你们讲讲制动的原理，制动靠的是空气，很有意思），机车带动第一节车厢从零加速，第一个弹簧绷直，第一节车厢有速度之后，第二个弹簧绷直，第二节车厢受力开始加速。落实到乘坐体验上，就会在启动的时候忽然觉得自己所在的车厢被一个很大的力撞了一下，车迷俗称“咣一声”。不同车型的体验是不一样的，减震缓冲做的越好这种感觉越微弱，但再微弱也会有。同理，制动的时候也一样。但如果你坐的火车在站内停车的时候忽然向运行反方向抖了一下，紧接着又向运行方向抖了一下，不要慌，这是在进行更换机车的机车连挂作业，也就是换车头。<br>传统的机辆方式很传统，但会带来一些问题。刚才说的乘坐体验是一方面，另一方面就是运行方面的问题了。这样的方式限制了列车的加速性能，毕竟要一节一节地去把车厢从静止“拽”成有速度，且一节机车能提供的总功率有限，很难把运行速度进一步提升，目前普速列车最高的速度等级是Z，最高运行速度也就160左右，拉的越多速度还越慢。这倒也好解决，你一辆机车不够我就加一个呗，俩不够就来仨，是可以的。这样的运行模式下，负责总控制的机车称为本务，剩下那些来帮忙的都叫做补机。这样的方法行倒是行，但也仅仅是“凑合着用”。这里我们引入一个不是很严谨的概念，叫动拖比。为什么不严谨暂且不表，先说它是什么。动拖比，字面意思是动力车和拖车的数量比。比如ICE3，很经典的德国高速动车组，我国CRH3C和CRH380B系列都是以ICE3为原型车的。ICE3为8节编组，4动4拖，即4节车上有电机，其余4节轮子上没有驱动装置（但是制动装置是都有的，安全起见），动拖比就是50%，注意动力车本身也算在拖车总数里。一个数据告诉你德国货多牛逼，50%动拖比的ICE3的总牵引功率，比同样是8辆编组且动拖比75%的CRH2A（以新干线为原型车）要高出将近三分之一，这才叫真正的强劲动力。介绍完动拖比的概念，我们不难理解，对于相同水平的动力配置，动拖比越高的列车功率越高。这就为上述问题提供了一个思路，我能不能把动力单元分散到几个车厢中去，让更多的拖车变成动力车，这样起动性能会更好（因为打破了机辆模式），最高运行速度也会更高（动拖比增加，功率增加）。于是，动车组诞生了（这里暂且不谈动力集中型动车组，也就是垃圾桶，机破之王CR200J）。<br>我们现在看到的动车组都觉得很常见，但这个分散动力单元的思想是很具有跨时代意义的。就像当年被魔改的波音737，把发动机从尾部挪到了大翼悬臂梁下面一样，开创了一个时代。按照这样的定义，其实我们平时坐的地铁也是动车吗？是的。举一个很简单的例子，哈尔滨地铁今天下线的2号线首列电客车，它的动力配置是4动2拖六节编组（1号线也一样，所以我才觉得他俩是一个模子扣的），两端是带控制室的拖车，符号是Tc，第二节和第五节是带受电弓的动车，符号是Mp（p代表受电弓pantograph），第三节第四节则是普通动车，符号是M。提到受电弓，大家可以理解为无轨电车的大辫子，跟它原理上没有任何区别。同理，有些地方可能有轻轨，重庆的单轨，还有一些有轨电车（北京的西郊线，车迷称西溜线，这个故事很有意思，以后可以单拿出来写一篇）等，都可以算是动车的范畴。<br><strong>以下划重点，我来讨论一下图里的问题。先说交流直流。</strong><br>我们知道输电的时候有两种形式，交流和直流。其实这两种电轨道交通都在用，只不过国铁（普速铁路或者高铁动车）用的是交流电（惭愧啊，忘了电压是多少了，好像是3000V吧），城市轨道交通一般用的是直流电。注意是一般，不是全部，这个和设计有关系。区别主要在于用的电机不同，国铁的电力机车或者电力动车组用的都是交流电机，感应电机或者永磁同步电机，而城市轨道交通一般用的是无刷直流电机。有人可能会说无刷直流电机和永磁同步电机本质上没有差别。是的，说的没错，但是用在这个场合里的区别在于，国铁主要承担的是大运量、远距离的运输，需要电机长时间稳定高速运行，而城市轨道交通的站间距相对较短，需要频繁的起动制动，所以在这个语境下把这个电机当成一个直流电机来控制，可以得到很好的快速启动、快速制动特性，加速度可以很大。这就是为什么地铁起动的时候，我们一定好扶好坐稳，因为加速度很大，而坐高铁动车的时候，列车起动可能都没什么感觉，加速很慢，但是加速过程很长。此外，发电厂发出来的电可是交流电，荒山野岭的地方隔几公里就要给高铁修个变电站，咱也得考虑成本啊，修个变压器就得了，再整个整流装置太费钱，干脆你就用交流电吧。但城市轨道交通不同，在城市里一条线路可能也就需要一两个主变电站，对于每公里3亿到7亿的成本，两个大容量整流装置应该用不了几个钱。这就是一种相克相生的关系，我需要长时间稳定高速，就用交流电，但起动性能就差；我需要快速起动快速制动，就用直流电，加速很快，但就麻烦点。这里说一下，这么大功率的电机基本没有用有刷电机的。要是用了我估计得天天换电刷。<br>其实直流交流的区别，上述是业内主要考虑的方面。看到问题里的那个朋友说损耗问题，也有一定道理，确实国铁的线路比较长，高压的交流输电能减少不少损耗，但要知道3000V并不算很高（直接输给受电弓的电压可不是超高压或者特高压的），整个线路的电压都是这个数值，这个电压等级的长距离输电损耗应该也不小，毕竟电压低，所以我个人认为这不是一个主要方面。而且交流和直流相比，如果考虑电缆的集肤效应，同等电压等级的情况下是不是交流的损耗还要高一些？这也是个很有意思的问题，有空可以探讨一下。这个交直流的问题并没有定论，其实也是电客车运用的长期经验反馈给设计者的一种信息。就像舌尖上的中国里的大自然给人类的馈赠一样，倒逼着我们去改进设计，这可能也是工科特有的魅力。<br><strong>好了，现在说说那个“防空警报声”。</strong><br>其实我不说你可能觉得它很陌生，但我要是说“唱歌电机”，你可能就恍然大悟了。是的，就是VVVF，variable voltage variable frequency，变压变频调速，就是那个声音。电机嘛，启动过程中一定要调速控制的，我接触到的电力机车或者电力动车组都是VVVF调速。<br>事实上，不同厂家生产的变流装置发出的声音是不一样的。说到这就不得不提一下三个龙头企业——西门子，阿尔斯通，庞巴迪。这三家企业生产的相关半导体器件制成的变流装置在进行VVVF调速的时候发出的声音是不一样的。防空警报一样的是西门子平台，阿尔斯通和庞巴迪的声音有独特的变化规律，这个区别很明显，每一家公司的产品都很独特，还有其他企业的（比如日立，南车等），但用语言不可描述，感兴趣的话可以来找我，我给你几个B站链接。<br>车迷中有一个群体很喜欢听VVVF声音，有些人可能把它当成asmr了吧。我也喜欢，但我喜欢只是因为我是学电的。再一个，我觉得它很好听。也许工科生不懂浪漫，但工科也有自己的美吧，即使是一段并不具有太大欣赏价值的VVVF声音。<br>今天就说到这吧，我还在等同济轨交院的短信和邮件，不知道我能不能进夏令营。<strong>这篇文章放在这，感谢栋宇给我这个平台，也感谢提问题的这位兄弟，我真的是看见有人提了个问题才决定今天无论如何也要写一篇出来。</strong>轨道交通是一个很冷门的行业，它融合了机械，车辆，空气动力学，能源动力，电气，控制，土木，材料等等很多学科。我自己预测至少30年内传统轮轨还有发展的余地，传统轮轨会向着智能化、自动化、无人化、绝对安全化、绿色节能化、高速和高效化发展。还有一个，就是磁悬浮，那就是另一个故事了。最近胡志强跟我说了有一些想法，觉得轨交这个行业也挺好的。如果可能的话，我也挺希望他能跟我一起去轨交领域开创一片天地出来。<br>调研和问题招募长期有效，欢迎大家对轨道交通领域有什么问题都可以来栋宇的博客下面找我的文章留言，不定期给大家做点硬核科普。</p>\n"},{"title":"重修线代的知识点总结","date":"2020-03-26T05:08:00.000Z","toc":true,"_content":"不知道从哪儿听说，作为一个机器人工程师，一辈子要学5次线代。\n记得大一学线代，真的是一头雾水，完全不知道学这些有什么用\n后来慢慢了解了一些应用场景之后，终于发现了线代的重要性（留下了泪水{哇5555555}）\n于是趁着最近比较闲，我又在B站“重修”了一遍线代，来自MIT的Strang教授为我带来了一场生动形象的线代教学，真的超级推荐\n[MIT线性代数2005][1]\n这次重修由于有了很多实际应用的经验，学得更有方向性，能把理论与实践联系起来，最终发现“哇！这不就是用在xxx的xxx嘛，原来是这么来的！”。这种感觉真的很舒服！\n这次我以知识点的形式一条一条地列举线代中最基础也最重要的内容，可能是定理，也可能是一些小Trick，纯粹就是为了第三次学的时候方便回忆，大家尽请期待！\n\n详情请见《线代笔记》Ⅰ~Ⅳ 作者：闫栋宇。(狗头保命)\n\n\n\n  [1]: https://www.bilibili.com/video/BV1zx411g7gq?from=search&seid=9314613598557854332\n","source":"_posts/重修线代的知识点总结.md","raw":"title: 重修线代的知识点总结\ndate: 2020-03-26 13:08:00\ncategories: 物数\ntags: []\ntoc: true\n---\n不知道从哪儿听说，作为一个机器人工程师，一辈子要学5次线代。\n记得大一学线代，真的是一头雾水，完全不知道学这些有什么用\n后来慢慢了解了一些应用场景之后，终于发现了线代的重要性（留下了泪水{哇5555555}）\n于是趁着最近比较闲，我又在B站“重修”了一遍线代，来自MIT的Strang教授为我带来了一场生动形象的线代教学，真的超级推荐\n[MIT线性代数2005][1]\n这次重修由于有了很多实际应用的经验，学得更有方向性，能把理论与实践联系起来，最终发现“哇！这不就是用在xxx的xxx嘛，原来是这么来的！”。这种感觉真的很舒服！\n这次我以知识点的形式一条一条地列举线代中最基础也最重要的内容，可能是定理，也可能是一些小Trick，纯粹就是为了第三次学的时候方便回忆，大家尽请期待！\n\n详情请见《线代笔记》Ⅰ~Ⅳ 作者：闫栋宇。(狗头保命)\n\n\n\n  [1]: https://www.bilibili.com/video/BV1zx411g7gq?from=search&seid=9314613598557854332\n","slug":"重修线代的知识点总结","published":1,"updated":"2020-12-14T12:22:33.919Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0cm002u7p1986jw642c","content":"<p>不知道从哪儿听说，作为一个机器人工程师，一辈子要学5次线代。<br>记得大一学线代，真的是一头雾水，完全不知道学这些有什么用<br>后来慢慢了解了一些应用场景之后，终于发现了线代的重要性（留下了泪水{哇5555555}）<br>于是趁着最近比较闲，我又在B站“重修”了一遍线代，来自MIT的Strang教授为我带来了一场生动形象的线代教学，真的超级推荐<br><a href=\"https://www.bilibili.com/video/BV1zx411g7gq?from=search&seid=9314613598557854332\">MIT线性代数2005</a><br>这次重修由于有了很多实际应用的经验，学得更有方向性，能把理论与实践联系起来，最终发现“哇！这不就是用在xxx的xxx嘛，原来是这么来的！”。这种感觉真的很舒服！<br>这次我以知识点的形式一条一条地列举线代中最基础也最重要的内容，可能是定理，也可能是一些小Trick，纯粹就是为了第三次学的时候方便回忆，大家尽请期待！</p>\n<p>详情请见《线代笔记》Ⅰ~Ⅳ 作者：闫栋宇。(狗头保命)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>不知道从哪儿听说，作为一个机器人工程师，一辈子要学5次线代。<br>记得大一学线代，真的是一头雾水，完全不知道学这些有什么用<br>后来慢慢了解了一些应用场景之后，终于发现了线代的重要性（留下了泪水{哇5555555}）<br>于是趁着最近比较闲，我又在B站“重修”了一遍线代，来自MIT的Strang教授为我带来了一场生动形象的线代教学，真的超级推荐<br><a href=\"https://www.bilibili.com/video/BV1zx411g7gq?from=search&seid=9314613598557854332\">MIT线性代数2005</a><br>这次重修由于有了很多实际应用的经验，学得更有方向性，能把理论与实践联系起来，最终发现“哇！这不就是用在xxx的xxx嘛，原来是这么来的！”。这种感觉真的很舒服！<br>这次我以知识点的形式一条一条地列举线代中最基础也最重要的内容，可能是定理，也可能是一些小Trick，纯粹就是为了第三次学的时候方便回忆，大家尽请期待！</p>\n<p>详情请见《线代笔记》Ⅰ~Ⅳ 作者：闫栋宇。(狗头保命)</p>\n"},{"title":"浅尝OpenGL","date":"2020-06-04T18:17:00.000Z","toc":true,"_content":"学习了OpenGL的一些基础知识，来分享一下!\n[Learn OpenGL][1]\n首先，OpenGL到底是什么？\nOpenGL是API，没错，但OpenGL更被认为是一种标准，然后每个显卡公司，会针对这种标准，编写自己的一套API函数。\n这就带来了一个麻烦，代码的可以执行问题。对于不同的一套显卡设备，API函数不同，让移植变得很困难。因此，在进行OpenGL开发之前，通常使用一种函数映射的库将硬件对应函数对应到一套公用的函数上，只要使用一套公用的函数API，就能够方便地进行移植（也方便了学习）。因此我们先将glad库（正是负责函数映射库）加入到工程中。配合使用的OpenGl库是glfw库，矩阵运算库选择的是glm库，图片操作库选择的是stb_image库，这些库都需要用户先安装。至此，我们的OpenGL开发环境就搭建完成了。\n\n## 坐标变换 ##\nOpenGL的最基础元素是顶点元素，三个顶点可以组成一个三角形，构成了最基础的图形，OpenGL的所有图形均是由三角形构成的，这点一定要明确！（即使我想要一个正方形，我也只能通过两个三角形来构建）\n![Snipaste_2020-06-10_16-55-32.jpg][2]\n首先我们通过某种方式（自己定义在内存中、导入各种格式的模型等）得到一个物体的顶点坐标，这个顶点坐标称为局部空间（Local Space），也就是最初物体的坐标，一般将物体坐标放在中央。我们通过坐标变换，对每个顶点进行变换（Model Matrix），让他出现在应该出现的世界坐标的位置，这个变换包括6个自由度，分别确定了物体在世界坐标下的三维位置与姿态（称之为位姿）。之后，需要将这些点再次变换到以摄像机为中心的坐标系下 （View Matrix），以实现摄像机的自由运动。但是这样直接显示在屏幕上，OpenGL会直接去掉这些点的Z坐标，会有一种不真实的感觉（总而言之就是没有近大远小的感觉），我们再使用投影变换，再将结果同时÷Z坐标，将每个平截头体内点变换到屏幕上，这样我们就得到了一个三维点在二维平面上的坐标了，OpenGL将其画出来就行了。（甚至你可以直接使用小孔模型进行变换）\n![Snipaste_2020-06-10_20-03-07.jpg][3]\n\n## 着色器Shader ##\n机器是如何把图像画出来的呢？学习OpenGL，其中重要的一点就是学习Shader的编程（GLSL语言）以及它的工作流程（渲染流水线）\n下面这张图展示了渲染流水线的工作流程：\n![Snipaste_2020-06-10_16-52-24.jpg][4]\n上图每一个着色器对应一个shader文件，但是大部分情况下我们只需要顶点着色器（VERTEX SHADER，简称为VS）和片段着色器（FRAGMENT SHADER，简称为FS）即可，顶点着色器用于绘制点，片段着色器用于绘制光栅化后三角形内每一个像素的颜色。\n我们在程序里使用API函数编译、链接这些SHADER文件，构成一个SHADER项目，供我们在渲染中使用（SHADER是跑在GPU中的！）。\nVS接受程序存在内存中的点的坐标（不只是位置，还可以包括颜色、法向量等其他属性），对其进行坐标变换，将结果送入FS，FS接受VS处理的结果，并在整个三角形中对接收数据进行插值，**相当于接收到的数据不再是三个顶点而是光栅化后的三角形内的许多像素**，再依据程序对这些像素进行运算（需要GPU并行加速），输出每个像素的颜色，进行渲染。\n\n## 光照与纹理 ##\n有了上面的基础，在OpenGL中实现光照效果就很简单了（因为我们已经知道如何操作每一个像素的颜色），重中之重在于找到合适的光照模型：\n在这里我们使用冯氏光照模型，一个物体的颜色由三个分量加权得到：\n![Snipaste_2020-06-10_20-32-35.jpg][5]\nambient：环境光\n占有分量最少，描述的是物体在完全黑暗处由于极少量反射呈现的颜色。颜色取决于物体颜色。\ndiffuse：漫反射\n占有分量最多，强度大小由光源向量与面的法向量的内积确定。颜色取决于物体颜色。\n![Snipaste_2020-06-10_20-37-22.jpg][6]\nspecular：镜面反射\n占有份量也比较多，强度大小取决于反射后的光线向量与**视角向量**的内积。颜色同时取决于光源颜色与物体颜色。\n![Snipaste_2020-06-10_20-37-13.jpg][7]\n\n由于FS中获得的是VS传来值的插值，也就能够获得每个像素点的坐标，因此在FS中进行光照计算能够使得光照更加真实，但是运算量也会更大。\n\n这样一来，每个像素经过渲染流水线就能够产生一个特定的颜色，显示在我们的屏幕上。\n\n最后我们就可以实现一些简单的渲染啦，不要说我技能点点歪了，学习渲染也可以图形化一些问题，也是解题的一大工具呢！\n\n\n\n\n\n\n将我的一个入门小项目源码放在这里供大家学习：\n\n    #include <glad/glad.h>\n    #include <GLFW/glfw3.h>\n    #include <iostream>\n    #include <math.h>\n    #include \"shader.h\"\n    \n    #include <glm/glm.hpp>\n    #include <glm/gtc/matrix_transform.hpp>\n    #include <glm/gtc/type_ptr.hpp>\n    \n    #define STB_IMAGE_IMPLEMENTATION\n    #include \"stb_image.h\"\n    \n    using namespace std;\n    \n    \n    void framebuffer_size_callback(GLFWwindow* window, int width, int height);\n    void processInput(GLFWwindow *window);\n    void mouse_callback(GLFWwindow* window, double xpos, double ypos);\n    void scroll_callback(GLFWwindow* window, double xoffset, double yoffset);\n    \n    \n    // settings\n    const unsigned int SCR_WIDTH = 800;\n    const unsigned int SCR_HEIGHT = 600;\n    \n    \n    float deltaTime = 0.0f; // 当前帧与上一帧的时间差\n    float lastFrame = 0.0f; // 上一帧的时间\n    \n    float vertices[] = {\n        -0.5f, -0.5f, -0.5f,  0.0f, 0.0f,\n         0.5f, -0.5f, -0.5f,  1.0f, 0.0f,\n         0.5f,  0.5f, -0.5f,  1.0f, 1.0f,\n         0.5f,  0.5f, -0.5f,  1.0f, 1.0f,\n        -0.5f,  0.5f, -0.5f,  0.0f, 1.0f,\n        -0.5f, -0.5f, -0.5f,  0.0f, 0.0f,\n    \n        -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,\n         0.5f, -0.5f,  0.5f,  1.0f, 0.0f,\n         0.5f,  0.5f,  0.5f,  1.0f, 1.0f,\n         0.5f,  0.5f,  0.5f,  1.0f, 1.0f,\n        -0.5f,  0.5f,  0.5f,  0.0f, 1.0f,\n        -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,\n    \n        -0.5f,  0.5f,  0.5f,  1.0f, 0.0f,\n        -0.5f,  0.5f, -0.5f,  1.0f, 1.0f,\n        -0.5f, -0.5f, -0.5f,  0.0f, 1.0f,\n        -0.5f, -0.5f, -0.5f,  0.0f, 1.0f,\n        -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,\n        -0.5f,  0.5f,  0.5f,  1.0f, 0.0f,\n    \n         0.5f,  0.5f,  0.5f,  1.0f, 0.0f,\n         0.5f,  0.5f, -0.5f,  1.0f, 1.0f,\n         0.5f, -0.5f, -0.5f,  0.0f, 1.0f,\n         0.5f, -0.5f, -0.5f,  0.0f, 1.0f,\n         0.5f, -0.5f,  0.5f,  0.0f, 0.0f,\n         0.5f,  0.5f,  0.5f,  1.0f, 0.0f,\n    \n        -0.5f, -0.5f, -0.5f,  0.0f, 1.0f,\n         0.5f, -0.5f, -0.5f,  1.0f, 1.0f,\n         0.5f, -0.5f,  0.5f,  1.0f, 0.0f,\n         0.5f, -0.5f,  0.5f,  1.0f, 0.0f,\n        -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,\n        -0.5f, -0.5f, -0.5f,  0.0f, 1.0f,\n    \n        -0.5f,  0.5f, -0.5f,  0.0f, 1.0f,\n         0.5f,  0.5f, -0.5f,  1.0f, 1.0f,\n         0.5f,  0.5f,  0.5f,  1.0f, 0.0f,\n         0.5f,  0.5f,  0.5f,  1.0f, 0.0f,\n        -0.5f,  0.5f,  0.5f,  0.0f, 0.0f,\n        -0.5f,  0.5f, -0.5f,  0.0f, 1.0f\n    };\n    \n    glm::vec3 cubePositions[] = {\n      glm::vec3( 0.0f,  0.0f,  0.0f), \n      glm::vec3( 2.0f,  5.0f, -15.0f), \n      glm::vec3(-1.5f, -2.2f, -2.5f),  \n      glm::vec3(-3.8f, -2.0f, -12.3f),  \n      glm::vec3( 2.4f, -0.4f, -3.5f),  \n      glm::vec3(-1.7f,  3.0f, -7.5f),  \n      glm::vec3( 1.3f, -2.0f, -2.5f),  \n      glm::vec3( 1.5f,  2.0f, -2.5f), \n      glm::vec3( 1.5f,  0.2f, -1.5f), \n      glm::vec3(-1.3f,  1.0f, -1.5f)  \n    };\n    \n    // unsigned int indices[] = {\n    //     0, 1, 3,\n    //     1, 2, 3\n    // };\n    \n    unsigned int VAO,lightVAO;\n    unsigned int VBO, EBO;\n    unsigned int texture0;\n    int vertexColorLocation;\n    int pic_width,pic_height,nrChannels;\n    \n    //camera\n    glm::vec3 cameraPos   = glm::vec3(0.0f, 0.0f,  3.0f);\n    glm::vec3 cameraFront = glm::vec3(0.0f, 0.0f, -1.0f);\n    glm::vec3 cameraUp    = glm::vec3(0.0f, 1.0f,  0.0f);\n    \n    glm::mat4 Up_rotate_p = glm::mat4(1.0f);\n    glm::mat4 Up_rotate_n = glm::mat4(1.0f);;\n    \n    float lastX = 400, lastY = 300;\n    float yaw,pitch,fov = 45.0f;\n    \n    int main()\n    {\n        // glfw: initialize and configure\n        // ------------------------------\n        glfwInit();\n        glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);\n        glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);\n        glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);\n        //glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);\n    \n        // glfw window creation\n        // --------------------\n        GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, \"LearnOpenGL\", NULL, NULL);\n        if (window == NULL)\n        {\n            std::cout << \"Failed to create GLFW window\" << std::endl;\n            glfwTerminate();\n            return -1;\n        }\n        glfwMakeContextCurrent(window);\n        glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);\n    \n        // glad: load all OpenGL function pointers\n        // ---------------------------------------\n        if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))\n        {\n            std::cout << \"Failed to initialize GLAD\" << std::endl;\n            return -1;\n        }\n    \n        //mouse\n        glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);\n        glfwSetCursorPosCallback(window, mouse_callback);\n        glfwSetScrollCallback(window, scroll_callback);\n    \n        //texture\n        glGenTextures(1, &texture0);\n        glBindTexture(GL_TEXTURE_2D, texture0);\n        \n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);           //x轴扩充方式\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);           //y轴扩充方式\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);       //缩小插值方法\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);       //放大插值方法\n        \n        stbi_set_flip_vertically_on_load(true);\n        unsigned char *data0 = stbi_load(\"girls.jpg\", &pic_width, &pic_height, &nrChannels, 0);\n        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, pic_width, pic_height, 0, GL_RGB, GL_UNSIGNED_BYTE, data0);\n        glGenerateMipmap(GL_TEXTURE_2D);                                        //自动多级渐远\n        stbi_image_free(data0);\n    \n    \n    \n        //shader compile to program\n        //using shader class\n        //不能是全局变量，由于构造时未初始化\n        Shader main_shader(\"./shaders/box.vs\",\"./shaders/box.fs\");\n    \n        //vertices\n        glGenVertexArrays(1, &VAO);             //generate VAO\n        glGenBuffers(1, &VBO);                  //generate VBO\n        //glGenBuffers(1, &EBO);                  //generate EBO\n    \n        glBindVertexArray(VAO);                 //bind VAO\n        glBindBuffer(GL_ARRAY_BUFFER, VBO);     //bind VBO\n        glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n        \n        // glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);\n        // glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);\n    \n        glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);\n        glEnableVertexAttribArray(0);\n        glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));\n        glEnableVertexAttribArray(1);\n    \n        //VBO -> VAO 之后只须绑定VAO即可\n        glBindBuffer(GL_ARRAY_BUFFER, 0);       //unbind VBO\n        glBindVertexArray(0);                   //unbind VAO\n    \n        //light\n        glGenVertexArrays(1, &lightVAO); \n        glBindVertexArray(lightVAO);\n        glBindBuffer(GL_ARRAY_BUFFER, VBO);\n        glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);\n        glEnableVertexAttribArray(0);\n    \n        // render loop\n        // -----------\n        while (!glfwWindowShouldClose(window))\n        {\n            float currentFrame = glfwGetTime();\n            deltaTime = currentFrame - lastFrame;\n            lastFrame = currentFrame;\n            // input\n            // -----\n            processInput(window);\n    \n            //预处理\n            glm::mat4 model = glm::mat4(1.0f);\n            model = glm::rotate(model, (float)glfwGetTime(), glm::vec3(1.0, 0.0, 0.5));\n            //清屏 清除Z缓冲\n            glClearColor(0.8f, 0.3f, 0.3f, 1.0f);\n            glClear(GL_COLOR_BUFFER_BIT);\n            glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n    \n    \n            //渲染\n            main_shader.use();\n            //main_shader.setVec4(\"ourColor\",0.3f,0.1f,0.7f,1.0f);\n            main_shader.setInt(\"texture0\", 0);\n            \n            glEnable(GL_DEPTH_TEST);                    //开启Z缓冲\n            glActiveTexture(GL_TEXTURE0);               //在绑定纹理之前先激活纹理单元\n            glBindTexture(GL_TEXTURE_2D, texture0);\n            glBindVertexArray(VAO);\n    \n            glm::vec3 front;\n            front.x = cos(glm::radians(pitch)) * cos(glm::radians(yaw));\n            front.y = sin(glm::radians(pitch));\n            front.z = cos(glm::radians(pitch)) * sin(glm::radians(yaw));\n            cameraFront = glm::normalize(front);\n    \n            //trans\n    \n            glm::mat4 view = glm::mat4(1.0f);;\n            view = glm::lookAt(cameraPos, cameraPos + cameraFront, cameraUp);\n            main_shader.setMat4(\"view\", view);\n            Up_rotate_p = glm::rotate(Up_rotate_p, glm::radians(0.2f*deltaTime),  cameraFront);\n            Up_rotate_n = glm::rotate(Up_rotate_n, glm::radians(-0.2f*deltaTime), cameraFront);\n    \n            glm::mat4 project = glm::mat4(1.0f);\n            project = glm::perspective<float>(glm::radians(fov), (SCR_WIDTH/SCR_HEIGHT), 0.1f, 100.0f);\n            main_shader.setMat4(\"project\", project);\n    \n            for (unsigned int i = 0; i < 10; i++)\n            {\n                // calculate the model matrix for each object and pass it to shader before drawing\n                glm::mat4 model = glm::mat4(1.0f);\n                model = glm::translate(model, cubePositions[i]);\n                float angle = 20.0f * i;\n                model = glm::rotate(model, glm::radians(angle+(float)(glfwGetTime()*60)), glm::vec3(1.0f, 0.3f, 0.5f));\n                main_shader.setMat4(\"model\", model);\n    \n                glDrawArrays(GL_TRIANGLES, 0, 36);\n            }\n    \n            glDrawArrays(GL_TRIANGLES, 0, 36);\n            glBindVertexArray(0);\n            // glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)\n            // -------------------------------------------------------------------------------\n            glfwSwapBuffers(window);\n            glfwPollEvents();\n        }\n    \n        // optional: de-allocate all resources once they've outlived their purpose:\n        // ------------------------------------------------------------------------\n        glDeleteVertexArrays(1, &VAO);\n        glDeleteBuffers(1, &VBO);\n        // glfw: terminate, clearing all previously allocated GLFW resources.\n        // ------------------------------------------------------------------\n        glfwTerminate();\n        return 0;\n    }\n    \n    // process all input: query GLFW whether relevant keys are pressed/released this frame and react accordingly\n    // ---------------------------------------------------------------------------------------------------------\n    void processInput(GLFWwindow *window)\n    {\n        float cameraSpeed = 3.0f * deltaTime;\n    \n        if(glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)\n            glfwSetWindowShouldClose(window, true);\n        if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS)\n            cameraPos += cameraSpeed * cameraFront;\n        if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS)\n            cameraPos -= cameraSpeed * cameraFront;\n        if (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS)\n            cameraPos -= glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;\n        if (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS)\n            cameraPos += glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;\n        if (glfwGetKey(window, GLFW_KEY_Q) == GLFW_PRESS)\n            {\n                glm::vec4 cameraUp4 = Up_rotate_p * glm::vec4(cameraUp,1.0f);\n                cameraUp = glm::vec3(cameraUp4.x,cameraUp4.y,cameraUp4.z);\n            }\n            \n        if (glfwGetKey(window, GLFW_KEY_E) == GLFW_PRESS)\n            {\n                glm::vec4 cameraUp4 = Up_rotate_n * glm::vec4(cameraUp,1.0f);\n                cameraUp = glm::vec3(cameraUp4.x,cameraUp4.y,cameraUp4.z);\n            }\n    \n    }\n    \n    // glfw: whenever the window size changed (by OS or user resize) this callback function executes\n    // ---------------------------------------------------------------------------------------------\n    void framebuffer_size_callback(GLFWwindow* window, int width, int height)\n    {\n        // make sure the viewport matches the new window dimensions; note that width and \n        // height will be significantly larger than specified on retina displays.\n        glViewport(0, 0, width, height);\n    }\n    \n    void mouse_callback(GLFWwindow* window, double xpos, double ypos)\n    {\n        float xoffset = xpos - lastX;\n        float yoffset = lastY - ypos; // 注意这里是相反的，因为y坐标是从底部往顶部依次增大的\n        lastX = xpos;\n        lastY = ypos;\n    \n        float sensitivity = 0.05f;\n        xoffset *= sensitivity;\n        yoffset *= sensitivity;\n    \n        yaw   += xoffset;\n        pitch += yoffset;\n    \n        if(pitch > 89.0f)\n            pitch =  89.0f;\n        if(pitch < -89.0f)\n            pitch = -89.0f;\n    \n    }\n    \n    void scroll_callback(GLFWwindow* window, double xoffset, double yoffset)\n    {\n      if(fov >= 1.0f && fov <= 45.0f)\n        fov -= yoffset;\n      if(fov <= 1.0f)\n        fov = 1.0f;\n      if(fov >= 45.0f)\n        fov = 45.0f;\n    }\n\n使用的Makefile：\n\n    INCLUDE_PATH = ./include\n    SOURCE_PATH = ./src\n    OBJECT = main.o glad.o\n    LIBS = -lglfw3 -lGL -lGLU -ldl -lX11 -lpthread\n    \n    ++ = g++\n    CC = gcc\n    \n    main:$(OBJECT)\n    \t$(++) -I$(INCLUDE_PATH) -o main $(OBJECT) $(LIBS)\n    \n    main.o:main.cpp\n    \t$(++) -I$(INCLUDE_PATH) -c main.cpp\n    \n    glad.o:$(SOURCE_PATH)/glad.c\n    \t$(CC) -I$(INCLUDE_PATH) -c $(SOURCE_PATH)/glad.c\n    \n    clean:\n    \trm *.o\n    \trm main\n\n\n![QQ图片20200914195150.png][8]\n![QQ图片20200914195155.png][9]\n\n\n  [1]: https://learnopengl-cn.github.io/\n  [2]: /old_images/2020/06/4288438894.jpg\n  [3]: /old_images/2020/06/890806100.jpg\n  [4]: /old_images/2020/06/1099674099.jpg\n  [5]: /old_images/2020/06/2875422330.jpg\n  [6]: /old_images/2020/06/1829637362.jpg\n  [7]: /old_images/2020/06/4103478537.jpg\n  [8]: /old_images/2020/09/3319805378.png\n  [9]: /old_images/2020/09/2082677778.png\n","source":"_posts/浅尝OpenGL.md","raw":"title: 浅尝OpenGL\ndate: 2020-06-05 02:17:00\ncategories: 工具\ntags: []\ntoc: true\n---\n学习了OpenGL的一些基础知识，来分享一下!\n[Learn OpenGL][1]\n首先，OpenGL到底是什么？\nOpenGL是API，没错，但OpenGL更被认为是一种标准，然后每个显卡公司，会针对这种标准，编写自己的一套API函数。\n这就带来了一个麻烦，代码的可以执行问题。对于不同的一套显卡设备，API函数不同，让移植变得很困难。因此，在进行OpenGL开发之前，通常使用一种函数映射的库将硬件对应函数对应到一套公用的函数上，只要使用一套公用的函数API，就能够方便地进行移植（也方便了学习）。因此我们先将glad库（正是负责函数映射库）加入到工程中。配合使用的OpenGl库是glfw库，矩阵运算库选择的是glm库，图片操作库选择的是stb_image库，这些库都需要用户先安装。至此，我们的OpenGL开发环境就搭建完成了。\n\n## 坐标变换 ##\nOpenGL的最基础元素是顶点元素，三个顶点可以组成一个三角形，构成了最基础的图形，OpenGL的所有图形均是由三角形构成的，这点一定要明确！（即使我想要一个正方形，我也只能通过两个三角形来构建）\n![Snipaste_2020-06-10_16-55-32.jpg][2]\n首先我们通过某种方式（自己定义在内存中、导入各种格式的模型等）得到一个物体的顶点坐标，这个顶点坐标称为局部空间（Local Space），也就是最初物体的坐标，一般将物体坐标放在中央。我们通过坐标变换，对每个顶点进行变换（Model Matrix），让他出现在应该出现的世界坐标的位置，这个变换包括6个自由度，分别确定了物体在世界坐标下的三维位置与姿态（称之为位姿）。之后，需要将这些点再次变换到以摄像机为中心的坐标系下 （View Matrix），以实现摄像机的自由运动。但是这样直接显示在屏幕上，OpenGL会直接去掉这些点的Z坐标，会有一种不真实的感觉（总而言之就是没有近大远小的感觉），我们再使用投影变换，再将结果同时÷Z坐标，将每个平截头体内点变换到屏幕上，这样我们就得到了一个三维点在二维平面上的坐标了，OpenGL将其画出来就行了。（甚至你可以直接使用小孔模型进行变换）\n![Snipaste_2020-06-10_20-03-07.jpg][3]\n\n## 着色器Shader ##\n机器是如何把图像画出来的呢？学习OpenGL，其中重要的一点就是学习Shader的编程（GLSL语言）以及它的工作流程（渲染流水线）\n下面这张图展示了渲染流水线的工作流程：\n![Snipaste_2020-06-10_16-52-24.jpg][4]\n上图每一个着色器对应一个shader文件，但是大部分情况下我们只需要顶点着色器（VERTEX SHADER，简称为VS）和片段着色器（FRAGMENT SHADER，简称为FS）即可，顶点着色器用于绘制点，片段着色器用于绘制光栅化后三角形内每一个像素的颜色。\n我们在程序里使用API函数编译、链接这些SHADER文件，构成一个SHADER项目，供我们在渲染中使用（SHADER是跑在GPU中的！）。\nVS接受程序存在内存中的点的坐标（不只是位置，还可以包括颜色、法向量等其他属性），对其进行坐标变换，将结果送入FS，FS接受VS处理的结果，并在整个三角形中对接收数据进行插值，**相当于接收到的数据不再是三个顶点而是光栅化后的三角形内的许多像素**，再依据程序对这些像素进行运算（需要GPU并行加速），输出每个像素的颜色，进行渲染。\n\n## 光照与纹理 ##\n有了上面的基础，在OpenGL中实现光照效果就很简单了（因为我们已经知道如何操作每一个像素的颜色），重中之重在于找到合适的光照模型：\n在这里我们使用冯氏光照模型，一个物体的颜色由三个分量加权得到：\n![Snipaste_2020-06-10_20-32-35.jpg][5]\nambient：环境光\n占有分量最少，描述的是物体在完全黑暗处由于极少量反射呈现的颜色。颜色取决于物体颜色。\ndiffuse：漫反射\n占有分量最多，强度大小由光源向量与面的法向量的内积确定。颜色取决于物体颜色。\n![Snipaste_2020-06-10_20-37-22.jpg][6]\nspecular：镜面反射\n占有份量也比较多，强度大小取决于反射后的光线向量与**视角向量**的内积。颜色同时取决于光源颜色与物体颜色。\n![Snipaste_2020-06-10_20-37-13.jpg][7]\n\n由于FS中获得的是VS传来值的插值，也就能够获得每个像素点的坐标，因此在FS中进行光照计算能够使得光照更加真实，但是运算量也会更大。\n\n这样一来，每个像素经过渲染流水线就能够产生一个特定的颜色，显示在我们的屏幕上。\n\n最后我们就可以实现一些简单的渲染啦，不要说我技能点点歪了，学习渲染也可以图形化一些问题，也是解题的一大工具呢！\n\n\n\n\n\n\n将我的一个入门小项目源码放在这里供大家学习：\n\n    #include <glad/glad.h>\n    #include <GLFW/glfw3.h>\n    #include <iostream>\n    #include <math.h>\n    #include \"shader.h\"\n    \n    #include <glm/glm.hpp>\n    #include <glm/gtc/matrix_transform.hpp>\n    #include <glm/gtc/type_ptr.hpp>\n    \n    #define STB_IMAGE_IMPLEMENTATION\n    #include \"stb_image.h\"\n    \n    using namespace std;\n    \n    \n    void framebuffer_size_callback(GLFWwindow* window, int width, int height);\n    void processInput(GLFWwindow *window);\n    void mouse_callback(GLFWwindow* window, double xpos, double ypos);\n    void scroll_callback(GLFWwindow* window, double xoffset, double yoffset);\n    \n    \n    // settings\n    const unsigned int SCR_WIDTH = 800;\n    const unsigned int SCR_HEIGHT = 600;\n    \n    \n    float deltaTime = 0.0f; // 当前帧与上一帧的时间差\n    float lastFrame = 0.0f; // 上一帧的时间\n    \n    float vertices[] = {\n        -0.5f, -0.5f, -0.5f,  0.0f, 0.0f,\n         0.5f, -0.5f, -0.5f,  1.0f, 0.0f,\n         0.5f,  0.5f, -0.5f,  1.0f, 1.0f,\n         0.5f,  0.5f, -0.5f,  1.0f, 1.0f,\n        -0.5f,  0.5f, -0.5f,  0.0f, 1.0f,\n        -0.5f, -0.5f, -0.5f,  0.0f, 0.0f,\n    \n        -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,\n         0.5f, -0.5f,  0.5f,  1.0f, 0.0f,\n         0.5f,  0.5f,  0.5f,  1.0f, 1.0f,\n         0.5f,  0.5f,  0.5f,  1.0f, 1.0f,\n        -0.5f,  0.5f,  0.5f,  0.0f, 1.0f,\n        -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,\n    \n        -0.5f,  0.5f,  0.5f,  1.0f, 0.0f,\n        -0.5f,  0.5f, -0.5f,  1.0f, 1.0f,\n        -0.5f, -0.5f, -0.5f,  0.0f, 1.0f,\n        -0.5f, -0.5f, -0.5f,  0.0f, 1.0f,\n        -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,\n        -0.5f,  0.5f,  0.5f,  1.0f, 0.0f,\n    \n         0.5f,  0.5f,  0.5f,  1.0f, 0.0f,\n         0.5f,  0.5f, -0.5f,  1.0f, 1.0f,\n         0.5f, -0.5f, -0.5f,  0.0f, 1.0f,\n         0.5f, -0.5f, -0.5f,  0.0f, 1.0f,\n         0.5f, -0.5f,  0.5f,  0.0f, 0.0f,\n         0.5f,  0.5f,  0.5f,  1.0f, 0.0f,\n    \n        -0.5f, -0.5f, -0.5f,  0.0f, 1.0f,\n         0.5f, -0.5f, -0.5f,  1.0f, 1.0f,\n         0.5f, -0.5f,  0.5f,  1.0f, 0.0f,\n         0.5f, -0.5f,  0.5f,  1.0f, 0.0f,\n        -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,\n        -0.5f, -0.5f, -0.5f,  0.0f, 1.0f,\n    \n        -0.5f,  0.5f, -0.5f,  0.0f, 1.0f,\n         0.5f,  0.5f, -0.5f,  1.0f, 1.0f,\n         0.5f,  0.5f,  0.5f,  1.0f, 0.0f,\n         0.5f,  0.5f,  0.5f,  1.0f, 0.0f,\n        -0.5f,  0.5f,  0.5f,  0.0f, 0.0f,\n        -0.5f,  0.5f, -0.5f,  0.0f, 1.0f\n    };\n    \n    glm::vec3 cubePositions[] = {\n      glm::vec3( 0.0f,  0.0f,  0.0f), \n      glm::vec3( 2.0f,  5.0f, -15.0f), \n      glm::vec3(-1.5f, -2.2f, -2.5f),  \n      glm::vec3(-3.8f, -2.0f, -12.3f),  \n      glm::vec3( 2.4f, -0.4f, -3.5f),  \n      glm::vec3(-1.7f,  3.0f, -7.5f),  \n      glm::vec3( 1.3f, -2.0f, -2.5f),  \n      glm::vec3( 1.5f,  2.0f, -2.5f), \n      glm::vec3( 1.5f,  0.2f, -1.5f), \n      glm::vec3(-1.3f,  1.0f, -1.5f)  \n    };\n    \n    // unsigned int indices[] = {\n    //     0, 1, 3,\n    //     1, 2, 3\n    // };\n    \n    unsigned int VAO,lightVAO;\n    unsigned int VBO, EBO;\n    unsigned int texture0;\n    int vertexColorLocation;\n    int pic_width,pic_height,nrChannels;\n    \n    //camera\n    glm::vec3 cameraPos   = glm::vec3(0.0f, 0.0f,  3.0f);\n    glm::vec3 cameraFront = glm::vec3(0.0f, 0.0f, -1.0f);\n    glm::vec3 cameraUp    = glm::vec3(0.0f, 1.0f,  0.0f);\n    \n    glm::mat4 Up_rotate_p = glm::mat4(1.0f);\n    glm::mat4 Up_rotate_n = glm::mat4(1.0f);;\n    \n    float lastX = 400, lastY = 300;\n    float yaw,pitch,fov = 45.0f;\n    \n    int main()\n    {\n        // glfw: initialize and configure\n        // ------------------------------\n        glfwInit();\n        glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);\n        glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);\n        glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);\n        //glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);\n    \n        // glfw window creation\n        // --------------------\n        GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, \"LearnOpenGL\", NULL, NULL);\n        if (window == NULL)\n        {\n            std::cout << \"Failed to create GLFW window\" << std::endl;\n            glfwTerminate();\n            return -1;\n        }\n        glfwMakeContextCurrent(window);\n        glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);\n    \n        // glad: load all OpenGL function pointers\n        // ---------------------------------------\n        if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))\n        {\n            std::cout << \"Failed to initialize GLAD\" << std::endl;\n            return -1;\n        }\n    \n        //mouse\n        glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);\n        glfwSetCursorPosCallback(window, mouse_callback);\n        glfwSetScrollCallback(window, scroll_callback);\n    \n        //texture\n        glGenTextures(1, &texture0);\n        glBindTexture(GL_TEXTURE_2D, texture0);\n        \n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);           //x轴扩充方式\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);           //y轴扩充方式\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);       //缩小插值方法\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);       //放大插值方法\n        \n        stbi_set_flip_vertically_on_load(true);\n        unsigned char *data0 = stbi_load(\"girls.jpg\", &pic_width, &pic_height, &nrChannels, 0);\n        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, pic_width, pic_height, 0, GL_RGB, GL_UNSIGNED_BYTE, data0);\n        glGenerateMipmap(GL_TEXTURE_2D);                                        //自动多级渐远\n        stbi_image_free(data0);\n    \n    \n    \n        //shader compile to program\n        //using shader class\n        //不能是全局变量，由于构造时未初始化\n        Shader main_shader(\"./shaders/box.vs\",\"./shaders/box.fs\");\n    \n        //vertices\n        glGenVertexArrays(1, &VAO);             //generate VAO\n        glGenBuffers(1, &VBO);                  //generate VBO\n        //glGenBuffers(1, &EBO);                  //generate EBO\n    \n        glBindVertexArray(VAO);                 //bind VAO\n        glBindBuffer(GL_ARRAY_BUFFER, VBO);     //bind VBO\n        glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n        \n        // glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);\n        // glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);\n    \n        glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);\n        glEnableVertexAttribArray(0);\n        glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));\n        glEnableVertexAttribArray(1);\n    \n        //VBO -> VAO 之后只须绑定VAO即可\n        glBindBuffer(GL_ARRAY_BUFFER, 0);       //unbind VBO\n        glBindVertexArray(0);                   //unbind VAO\n    \n        //light\n        glGenVertexArrays(1, &lightVAO); \n        glBindVertexArray(lightVAO);\n        glBindBuffer(GL_ARRAY_BUFFER, VBO);\n        glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);\n        glEnableVertexAttribArray(0);\n    \n        // render loop\n        // -----------\n        while (!glfwWindowShouldClose(window))\n        {\n            float currentFrame = glfwGetTime();\n            deltaTime = currentFrame - lastFrame;\n            lastFrame = currentFrame;\n            // input\n            // -----\n            processInput(window);\n    \n            //预处理\n            glm::mat4 model = glm::mat4(1.0f);\n            model = glm::rotate(model, (float)glfwGetTime(), glm::vec3(1.0, 0.0, 0.5));\n            //清屏 清除Z缓冲\n            glClearColor(0.8f, 0.3f, 0.3f, 1.0f);\n            glClear(GL_COLOR_BUFFER_BIT);\n            glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n    \n    \n            //渲染\n            main_shader.use();\n            //main_shader.setVec4(\"ourColor\",0.3f,0.1f,0.7f,1.0f);\n            main_shader.setInt(\"texture0\", 0);\n            \n            glEnable(GL_DEPTH_TEST);                    //开启Z缓冲\n            glActiveTexture(GL_TEXTURE0);               //在绑定纹理之前先激活纹理单元\n            glBindTexture(GL_TEXTURE_2D, texture0);\n            glBindVertexArray(VAO);\n    \n            glm::vec3 front;\n            front.x = cos(glm::radians(pitch)) * cos(glm::radians(yaw));\n            front.y = sin(glm::radians(pitch));\n            front.z = cos(glm::radians(pitch)) * sin(glm::radians(yaw));\n            cameraFront = glm::normalize(front);\n    \n            //trans\n    \n            glm::mat4 view = glm::mat4(1.0f);;\n            view = glm::lookAt(cameraPos, cameraPos + cameraFront, cameraUp);\n            main_shader.setMat4(\"view\", view);\n            Up_rotate_p = glm::rotate(Up_rotate_p, glm::radians(0.2f*deltaTime),  cameraFront);\n            Up_rotate_n = glm::rotate(Up_rotate_n, glm::radians(-0.2f*deltaTime), cameraFront);\n    \n            glm::mat4 project = glm::mat4(1.0f);\n            project = glm::perspective<float>(glm::radians(fov), (SCR_WIDTH/SCR_HEIGHT), 0.1f, 100.0f);\n            main_shader.setMat4(\"project\", project);\n    \n            for (unsigned int i = 0; i < 10; i++)\n            {\n                // calculate the model matrix for each object and pass it to shader before drawing\n                glm::mat4 model = glm::mat4(1.0f);\n                model = glm::translate(model, cubePositions[i]);\n                float angle = 20.0f * i;\n                model = glm::rotate(model, glm::radians(angle+(float)(glfwGetTime()*60)), glm::vec3(1.0f, 0.3f, 0.5f));\n                main_shader.setMat4(\"model\", model);\n    \n                glDrawArrays(GL_TRIANGLES, 0, 36);\n            }\n    \n            glDrawArrays(GL_TRIANGLES, 0, 36);\n            glBindVertexArray(0);\n            // glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)\n            // -------------------------------------------------------------------------------\n            glfwSwapBuffers(window);\n            glfwPollEvents();\n        }\n    \n        // optional: de-allocate all resources once they've outlived their purpose:\n        // ------------------------------------------------------------------------\n        glDeleteVertexArrays(1, &VAO);\n        glDeleteBuffers(1, &VBO);\n        // glfw: terminate, clearing all previously allocated GLFW resources.\n        // ------------------------------------------------------------------\n        glfwTerminate();\n        return 0;\n    }\n    \n    // process all input: query GLFW whether relevant keys are pressed/released this frame and react accordingly\n    // ---------------------------------------------------------------------------------------------------------\n    void processInput(GLFWwindow *window)\n    {\n        float cameraSpeed = 3.0f * deltaTime;\n    \n        if(glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)\n            glfwSetWindowShouldClose(window, true);\n        if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS)\n            cameraPos += cameraSpeed * cameraFront;\n        if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS)\n            cameraPos -= cameraSpeed * cameraFront;\n        if (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS)\n            cameraPos -= glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;\n        if (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS)\n            cameraPos += glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;\n        if (glfwGetKey(window, GLFW_KEY_Q) == GLFW_PRESS)\n            {\n                glm::vec4 cameraUp4 = Up_rotate_p * glm::vec4(cameraUp,1.0f);\n                cameraUp = glm::vec3(cameraUp4.x,cameraUp4.y,cameraUp4.z);\n            }\n            \n        if (glfwGetKey(window, GLFW_KEY_E) == GLFW_PRESS)\n            {\n                glm::vec4 cameraUp4 = Up_rotate_n * glm::vec4(cameraUp,1.0f);\n                cameraUp = glm::vec3(cameraUp4.x,cameraUp4.y,cameraUp4.z);\n            }\n    \n    }\n    \n    // glfw: whenever the window size changed (by OS or user resize) this callback function executes\n    // ---------------------------------------------------------------------------------------------\n    void framebuffer_size_callback(GLFWwindow* window, int width, int height)\n    {\n        // make sure the viewport matches the new window dimensions; note that width and \n        // height will be significantly larger than specified on retina displays.\n        glViewport(0, 0, width, height);\n    }\n    \n    void mouse_callback(GLFWwindow* window, double xpos, double ypos)\n    {\n        float xoffset = xpos - lastX;\n        float yoffset = lastY - ypos; // 注意这里是相反的，因为y坐标是从底部往顶部依次增大的\n        lastX = xpos;\n        lastY = ypos;\n    \n        float sensitivity = 0.05f;\n        xoffset *= sensitivity;\n        yoffset *= sensitivity;\n    \n        yaw   += xoffset;\n        pitch += yoffset;\n    \n        if(pitch > 89.0f)\n            pitch =  89.0f;\n        if(pitch < -89.0f)\n            pitch = -89.0f;\n    \n    }\n    \n    void scroll_callback(GLFWwindow* window, double xoffset, double yoffset)\n    {\n      if(fov >= 1.0f && fov <= 45.0f)\n        fov -= yoffset;\n      if(fov <= 1.0f)\n        fov = 1.0f;\n      if(fov >= 45.0f)\n        fov = 45.0f;\n    }\n\n使用的Makefile：\n\n    INCLUDE_PATH = ./include\n    SOURCE_PATH = ./src\n    OBJECT = main.o glad.o\n    LIBS = -lglfw3 -lGL -lGLU -ldl -lX11 -lpthread\n    \n    ++ = g++\n    CC = gcc\n    \n    main:$(OBJECT)\n    \t$(++) -I$(INCLUDE_PATH) -o main $(OBJECT) $(LIBS)\n    \n    main.o:main.cpp\n    \t$(++) -I$(INCLUDE_PATH) -c main.cpp\n    \n    glad.o:$(SOURCE_PATH)/glad.c\n    \t$(CC) -I$(INCLUDE_PATH) -c $(SOURCE_PATH)/glad.c\n    \n    clean:\n    \trm *.o\n    \trm main\n\n\n![QQ图片20200914195150.png][8]\n![QQ图片20200914195155.png][9]\n\n\n  [1]: https://learnopengl-cn.github.io/\n  [2]: /old_images/2020/06/4288438894.jpg\n  [3]: /old_images/2020/06/890806100.jpg\n  [4]: /old_images/2020/06/1099674099.jpg\n  [5]: /old_images/2020/06/2875422330.jpg\n  [6]: /old_images/2020/06/1829637362.jpg\n  [7]: /old_images/2020/06/4103478537.jpg\n  [8]: /old_images/2020/09/3319805378.png\n  [9]: /old_images/2020/09/2082677778.png\n","slug":"浅尝OpenGL","published":1,"updated":"2020-12-14T12:21:56.600Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0cp00347p19g8e3hiaz","content":"<p>学习了OpenGL的一些基础知识，来分享一下!<br><a href=\"https://learnopengl-cn.github.io/\">Learn OpenGL</a><br>首先，OpenGL到底是什么？<br>OpenGL是API，没错，但OpenGL更被认为是一种标准，然后每个显卡公司，会针对这种标准，编写自己的一套API函数。<br>这就带来了一个麻烦，代码的可以执行问题。对于不同的一套显卡设备，API函数不同，让移植变得很困难。因此，在进行OpenGL开发之前，通常使用一种函数映射的库将硬件对应函数对应到一套公用的函数上，只要使用一套公用的函数API，就能够方便地进行移植（也方便了学习）。因此我们先将glad库（正是负责函数映射库）加入到工程中。配合使用的OpenGl库是glfw库，矩阵运算库选择的是glm库，图片操作库选择的是stb_image库，这些库都需要用户先安装。至此，我们的OpenGL开发环境就搭建完成了。</p>\n<h2 id=\"坐标变换\"><a href=\"#坐标变换\" class=\"headerlink\" title=\"坐标变换\"></a>坐标变换</h2><p>OpenGL的最基础元素是顶点元素，三个顶点可以组成一个三角形，构成了最基础的图形，OpenGL的所有图形均是由三角形构成的，这点一定要明确！（即使我想要一个正方形，我也只能通过两个三角形来构建）<br><img src=\"/old_images/2020/06/4288438894.jpg\" alt=\"Snipaste_2020-06-10_16-55-32.jpg\"><br>首先我们通过某种方式（自己定义在内存中、导入各种格式的模型等）得到一个物体的顶点坐标，这个顶点坐标称为局部空间（Local Space），也就是最初物体的坐标，一般将物体坐标放在中央。我们通过坐标变换，对每个顶点进行变换（Model Matrix），让他出现在应该出现的世界坐标的位置，这个变换包括6个自由度，分别确定了物体在世界坐标下的三维位置与姿态（称之为位姿）。之后，需要将这些点再次变换到以摄像机为中心的坐标系下 （View Matrix），以实现摄像机的自由运动。但是这样直接显示在屏幕上，OpenGL会直接去掉这些点的Z坐标，会有一种不真实的感觉（总而言之就是没有近大远小的感觉），我们再使用投影变换，再将结果同时÷Z坐标，将每个平截头体内点变换到屏幕上，这样我们就得到了一个三维点在二维平面上的坐标了，OpenGL将其画出来就行了。（甚至你可以直接使用小孔模型进行变换）<br><img src=\"/old_images/2020/06/890806100.jpg\" alt=\"Snipaste_2020-06-10_20-03-07.jpg\"></p>\n<h2 id=\"着色器Shader\"><a href=\"#着色器Shader\" class=\"headerlink\" title=\"着色器Shader\"></a>着色器Shader</h2><p>机器是如何把图像画出来的呢？学习OpenGL，其中重要的一点就是学习Shader的编程（GLSL语言）以及它的工作流程（渲染流水线）<br>下面这张图展示了渲染流水线的工作流程：<br><img src=\"/old_images/2020/06/1099674099.jpg\" alt=\"Snipaste_2020-06-10_16-52-24.jpg\"><br>上图每一个着色器对应一个shader文件，但是大部分情况下我们只需要顶点着色器（VERTEX SHADER，简称为VS）和片段着色器（FRAGMENT SHADER，简称为FS）即可，顶点着色器用于绘制点，片段着色器用于绘制光栅化后三角形内每一个像素的颜色。<br>我们在程序里使用API函数编译、链接这些SHADER文件，构成一个SHADER项目，供我们在渲染中使用（SHADER是跑在GPU中的！）。<br>VS接受程序存在内存中的点的坐标（不只是位置，还可以包括颜色、法向量等其他属性），对其进行坐标变换，将结果送入FS，FS接受VS处理的结果，并在整个三角形中对接收数据进行插值，<strong>相当于接收到的数据不再是三个顶点而是光栅化后的三角形内的许多像素</strong>，再依据程序对这些像素进行运算（需要GPU并行加速），输出每个像素的颜色，进行渲染。</p>\n<h2 id=\"光照与纹理\"><a href=\"#光照与纹理\" class=\"headerlink\" title=\"光照与纹理\"></a>光照与纹理</h2><p>有了上面的基础，在OpenGL中实现光照效果就很简单了（因为我们已经知道如何操作每一个像素的颜色），重中之重在于找到合适的光照模型：<br>在这里我们使用冯氏光照模型，一个物体的颜色由三个分量加权得到：<br><img src=\"/old_images/2020/06/2875422330.jpg\" alt=\"Snipaste_2020-06-10_20-32-35.jpg\"><br>ambient：环境光<br>占有分量最少，描述的是物体在完全黑暗处由于极少量反射呈现的颜色。颜色取决于物体颜色。<br>diffuse：漫反射<br>占有分量最多，强度大小由光源向量与面的法向量的内积确定。颜色取决于物体颜色。<br><img src=\"/old_images/2020/06/1829637362.jpg\" alt=\"Snipaste_2020-06-10_20-37-22.jpg\"><br>specular：镜面反射<br>占有份量也比较多，强度大小取决于反射后的光线向量与<strong>视角向量</strong>的内积。颜色同时取决于光源颜色与物体颜色。<br><img src=\"/old_images/2020/06/4103478537.jpg\" alt=\"Snipaste_2020-06-10_20-37-13.jpg\"></p>\n<p>由于FS中获得的是VS传来值的插值，也就能够获得每个像素点的坐标，因此在FS中进行光照计算能够使得光照更加真实，但是运算量也会更大。</p>\n<p>这样一来，每个像素经过渲染流水线就能够产生一个特定的颜色，显示在我们的屏幕上。</p>\n<p>最后我们就可以实现一些简单的渲染啦，不要说我技能点点歪了，学习渲染也可以图形化一些问题，也是解题的一大工具呢！</p>\n<p>将我的一个入门小项目源码放在这里供大家学习：</p>\n<pre><code>#include &lt;glad/glad.h&gt;\n#include &lt;GLFW/glfw3.h&gt;\n#include &lt;iostream&gt;\n#include &lt;math.h&gt;\n#include &quot;shader.h&quot;\n\n#include &lt;glm/glm.hpp&gt;\n#include &lt;glm/gtc/matrix_transform.hpp&gt;\n#include &lt;glm/gtc/type_ptr.hpp&gt;\n\n#define STB_IMAGE_IMPLEMENTATION\n#include &quot;stb_image.h&quot;\n\nusing namespace std;\n\n\nvoid framebuffer_size_callback(GLFWwindow* window, int width, int height);\nvoid processInput(GLFWwindow *window);\nvoid mouse_callback(GLFWwindow* window, double xpos, double ypos);\nvoid scroll_callback(GLFWwindow* window, double xoffset, double yoffset);\n\n\n// settings\nconst unsigned int SCR_WIDTH = 800;\nconst unsigned int SCR_HEIGHT = 600;\n\n\nfloat deltaTime = 0.0f; // 当前帧与上一帧的时间差\nfloat lastFrame = 0.0f; // 上一帧的时间\n\nfloat vertices[] = &#123;\n    -0.5f, -0.5f, -0.5f,  0.0f, 0.0f,\n     0.5f, -0.5f, -0.5f,  1.0f, 0.0f,\n     0.5f,  0.5f, -0.5f,  1.0f, 1.0f,\n     0.5f,  0.5f, -0.5f,  1.0f, 1.0f,\n    -0.5f,  0.5f, -0.5f,  0.0f, 1.0f,\n    -0.5f, -0.5f, -0.5f,  0.0f, 0.0f,\n\n    -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,\n     0.5f, -0.5f,  0.5f,  1.0f, 0.0f,\n     0.5f,  0.5f,  0.5f,  1.0f, 1.0f,\n     0.5f,  0.5f,  0.5f,  1.0f, 1.0f,\n    -0.5f,  0.5f,  0.5f,  0.0f, 1.0f,\n    -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,\n\n    -0.5f,  0.5f,  0.5f,  1.0f, 0.0f,\n    -0.5f,  0.5f, -0.5f,  1.0f, 1.0f,\n    -0.5f, -0.5f, -0.5f,  0.0f, 1.0f,\n    -0.5f, -0.5f, -0.5f,  0.0f, 1.0f,\n    -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,\n    -0.5f,  0.5f,  0.5f,  1.0f, 0.0f,\n\n     0.5f,  0.5f,  0.5f,  1.0f, 0.0f,\n     0.5f,  0.5f, -0.5f,  1.0f, 1.0f,\n     0.5f, -0.5f, -0.5f,  0.0f, 1.0f,\n     0.5f, -0.5f, -0.5f,  0.0f, 1.0f,\n     0.5f, -0.5f,  0.5f,  0.0f, 0.0f,\n     0.5f,  0.5f,  0.5f,  1.0f, 0.0f,\n\n    -0.5f, -0.5f, -0.5f,  0.0f, 1.0f,\n     0.5f, -0.5f, -0.5f,  1.0f, 1.0f,\n     0.5f, -0.5f,  0.5f,  1.0f, 0.0f,\n     0.5f, -0.5f,  0.5f,  1.0f, 0.0f,\n    -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,\n    -0.5f, -0.5f, -0.5f,  0.0f, 1.0f,\n\n    -0.5f,  0.5f, -0.5f,  0.0f, 1.0f,\n     0.5f,  0.5f, -0.5f,  1.0f, 1.0f,\n     0.5f,  0.5f,  0.5f,  1.0f, 0.0f,\n     0.5f,  0.5f,  0.5f,  1.0f, 0.0f,\n    -0.5f,  0.5f,  0.5f,  0.0f, 0.0f,\n    -0.5f,  0.5f, -0.5f,  0.0f, 1.0f\n&#125;;\n\nglm::vec3 cubePositions[] = &#123;\n  glm::vec3( 0.0f,  0.0f,  0.0f), \n  glm::vec3( 2.0f,  5.0f, -15.0f), \n  glm::vec3(-1.5f, -2.2f, -2.5f),  \n  glm::vec3(-3.8f, -2.0f, -12.3f),  \n  glm::vec3( 2.4f, -0.4f, -3.5f),  \n  glm::vec3(-1.7f,  3.0f, -7.5f),  \n  glm::vec3( 1.3f, -2.0f, -2.5f),  \n  glm::vec3( 1.5f,  2.0f, -2.5f), \n  glm::vec3( 1.5f,  0.2f, -1.5f), \n  glm::vec3(-1.3f,  1.0f, -1.5f)  \n&#125;;\n\n// unsigned int indices[] = &#123;\n//     0, 1, 3,\n//     1, 2, 3\n// &#125;;\n\nunsigned int VAO,lightVAO;\nunsigned int VBO, EBO;\nunsigned int texture0;\nint vertexColorLocation;\nint pic_width,pic_height,nrChannels;\n\n//camera\nglm::vec3 cameraPos   = glm::vec3(0.0f, 0.0f,  3.0f);\nglm::vec3 cameraFront = glm::vec3(0.0f, 0.0f, -1.0f);\nglm::vec3 cameraUp    = glm::vec3(0.0f, 1.0f,  0.0f);\n\nglm::mat4 Up_rotate_p = glm::mat4(1.0f);\nglm::mat4 Up_rotate_n = glm::mat4(1.0f);;\n\nfloat lastX = 400, lastY = 300;\nfloat yaw,pitch,fov = 45.0f;\n\nint main()\n&#123;\n    // glfw: initialize and configure\n    // ------------------------------\n    glfwInit();\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);\n    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);\n    //glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);\n\n    // glfw window creation\n    // --------------------\n    GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, &quot;LearnOpenGL&quot;, NULL, NULL);\n    if (window == NULL)\n    &#123;\n        std::cout &lt;&lt; &quot;Failed to create GLFW window&quot; &lt;&lt; std::endl;\n        glfwTerminate();\n        return -1;\n    &#125;\n    glfwMakeContextCurrent(window);\n    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);\n\n    // glad: load all OpenGL function pointers\n    // ---------------------------------------\n    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))\n    &#123;\n        std::cout &lt;&lt; &quot;Failed to initialize GLAD&quot; &lt;&lt; std::endl;\n        return -1;\n    &#125;\n\n    //mouse\n    glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);\n    glfwSetCursorPosCallback(window, mouse_callback);\n    glfwSetScrollCallback(window, scroll_callback);\n\n    //texture\n    glGenTextures(1, &amp;texture0);\n    glBindTexture(GL_TEXTURE_2D, texture0);\n\n    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);           //x轴扩充方式\n    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);           //y轴扩充方式\n    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);       //缩小插值方法\n    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);       //放大插值方法\n\n    stbi_set_flip_vertically_on_load(true);\n    unsigned char *data0 = stbi_load(&quot;girls.jpg&quot;, &amp;pic_width, &amp;pic_height, &amp;nrChannels, 0);\n    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, pic_width, pic_height, 0, GL_RGB, GL_UNSIGNED_BYTE, data0);\n    glGenerateMipmap(GL_TEXTURE_2D);                                        //自动多级渐远\n    stbi_image_free(data0);\n\n\n\n    //shader compile to program\n    //using shader class\n    //不能是全局变量，由于构造时未初始化\n    Shader main_shader(&quot;./shaders/box.vs&quot;,&quot;./shaders/box.fs&quot;);\n\n    //vertices\n    glGenVertexArrays(1, &amp;VAO);             //generate VAO\n    glGenBuffers(1, &amp;VBO);                  //generate VBO\n    //glGenBuffers(1, &amp;EBO);                  //generate EBO\n\n    glBindVertexArray(VAO);                 //bind VAO\n    glBindBuffer(GL_ARRAY_BUFFER, VBO);     //bind VBO\n    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n\n    // glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);\n    // glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);\n\n    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);\n    glEnableVertexAttribArray(0);\n    glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));\n    glEnableVertexAttribArray(1);\n\n    //VBO -&gt; VAO 之后只须绑定VAO即可\n    glBindBuffer(GL_ARRAY_BUFFER, 0);       //unbind VBO\n    glBindVertexArray(0);                   //unbind VAO\n\n    //light\n    glGenVertexArrays(1, &amp;lightVAO); \n    glBindVertexArray(lightVAO);\n    glBindBuffer(GL_ARRAY_BUFFER, VBO);\n    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);\n    glEnableVertexAttribArray(0);\n\n    // render loop\n    // -----------\n    while (!glfwWindowShouldClose(window))\n    &#123;\n        float currentFrame = glfwGetTime();\n        deltaTime = currentFrame - lastFrame;\n        lastFrame = currentFrame;\n        // input\n        // -----\n        processInput(window);\n\n        //预处理\n        glm::mat4 model = glm::mat4(1.0f);\n        model = glm::rotate(model, (float)glfwGetTime(), glm::vec3(1.0, 0.0, 0.5));\n        //清屏 清除Z缓冲\n        glClearColor(0.8f, 0.3f, 0.3f, 1.0f);\n        glClear(GL_COLOR_BUFFER_BIT);\n        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n\n\n        //渲染\n        main_shader.use();\n        //main_shader.setVec4(&quot;ourColor&quot;,0.3f,0.1f,0.7f,1.0f);\n        main_shader.setInt(&quot;texture0&quot;, 0);\n\n        glEnable(GL_DEPTH_TEST);                    //开启Z缓冲\n        glActiveTexture(GL_TEXTURE0);               //在绑定纹理之前先激活纹理单元\n        glBindTexture(GL_TEXTURE_2D, texture0);\n        glBindVertexArray(VAO);\n\n        glm::vec3 front;\n        front.x = cos(glm::radians(pitch)) * cos(glm::radians(yaw));\n        front.y = sin(glm::radians(pitch));\n        front.z = cos(glm::radians(pitch)) * sin(glm::radians(yaw));\n        cameraFront = glm::normalize(front);\n\n        //trans\n\n        glm::mat4 view = glm::mat4(1.0f);;\n        view = glm::lookAt(cameraPos, cameraPos + cameraFront, cameraUp);\n        main_shader.setMat4(&quot;view&quot;, view);\n        Up_rotate_p = glm::rotate(Up_rotate_p, glm::radians(0.2f*deltaTime),  cameraFront);\n        Up_rotate_n = glm::rotate(Up_rotate_n, glm::radians(-0.2f*deltaTime), cameraFront);\n\n        glm::mat4 project = glm::mat4(1.0f);\n        project = glm::perspective&lt;float&gt;(glm::radians(fov), (SCR_WIDTH/SCR_HEIGHT), 0.1f, 100.0f);\n        main_shader.setMat4(&quot;project&quot;, project);\n\n        for (unsigned int i = 0; i &lt; 10; i++)\n        &#123;\n            // calculate the model matrix for each object and pass it to shader before drawing\n            glm::mat4 model = glm::mat4(1.0f);\n            model = glm::translate(model, cubePositions[i]);\n            float angle = 20.0f * i;\n            model = glm::rotate(model, glm::radians(angle+(float)(glfwGetTime()*60)), glm::vec3(1.0f, 0.3f, 0.5f));\n            main_shader.setMat4(&quot;model&quot;, model);\n\n            glDrawArrays(GL_TRIANGLES, 0, 36);\n        &#125;\n\n        glDrawArrays(GL_TRIANGLES, 0, 36);\n        glBindVertexArray(0);\n        // glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)\n        // -------------------------------------------------------------------------------\n        glfwSwapBuffers(window);\n        glfwPollEvents();\n    &#125;\n\n    // optional: de-allocate all resources once they&#39;ve outlived their purpose:\n    // ------------------------------------------------------------------------\n    glDeleteVertexArrays(1, &amp;VAO);\n    glDeleteBuffers(1, &amp;VBO);\n    // glfw: terminate, clearing all previously allocated GLFW resources.\n    // ------------------------------------------------------------------\n    glfwTerminate();\n    return 0;\n&#125;\n\n// process all input: query GLFW whether relevant keys are pressed/released this frame and react accordingly\n// ---------------------------------------------------------------------------------------------------------\nvoid processInput(GLFWwindow *window)\n&#123;\n    float cameraSpeed = 3.0f * deltaTime;\n\n    if(glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)\n        glfwSetWindowShouldClose(window, true);\n    if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS)\n        cameraPos += cameraSpeed * cameraFront;\n    if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS)\n        cameraPos -= cameraSpeed * cameraFront;\n    if (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS)\n        cameraPos -= glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;\n    if (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS)\n        cameraPos += glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;\n    if (glfwGetKey(window, GLFW_KEY_Q) == GLFW_PRESS)\n        &#123;\n            glm::vec4 cameraUp4 = Up_rotate_p * glm::vec4(cameraUp,1.0f);\n            cameraUp = glm::vec3(cameraUp4.x,cameraUp4.y,cameraUp4.z);\n        &#125;\n\n    if (glfwGetKey(window, GLFW_KEY_E) == GLFW_PRESS)\n        &#123;\n            glm::vec4 cameraUp4 = Up_rotate_n * glm::vec4(cameraUp,1.0f);\n            cameraUp = glm::vec3(cameraUp4.x,cameraUp4.y,cameraUp4.z);\n        &#125;\n\n&#125;\n\n// glfw: whenever the window size changed (by OS or user resize) this callback function executes\n// ---------------------------------------------------------------------------------------------\nvoid framebuffer_size_callback(GLFWwindow* window, int width, int height)\n&#123;\n    // make sure the viewport matches the new window dimensions; note that width and \n    // height will be significantly larger than specified on retina displays.\n    glViewport(0, 0, width, height);\n&#125;\n\nvoid mouse_callback(GLFWwindow* window, double xpos, double ypos)\n&#123;\n    float xoffset = xpos - lastX;\n    float yoffset = lastY - ypos; // 注意这里是相反的，因为y坐标是从底部往顶部依次增大的\n    lastX = xpos;\n    lastY = ypos;\n\n    float sensitivity = 0.05f;\n    xoffset *= sensitivity;\n    yoffset *= sensitivity;\n\n    yaw   += xoffset;\n    pitch += yoffset;\n\n    if(pitch &gt; 89.0f)\n        pitch =  89.0f;\n    if(pitch &lt; -89.0f)\n        pitch = -89.0f;\n\n&#125;\n\nvoid scroll_callback(GLFWwindow* window, double xoffset, double yoffset)\n&#123;\n  if(fov &gt;= 1.0f &amp;&amp; fov &lt;= 45.0f)\n    fov -= yoffset;\n  if(fov &lt;= 1.0f)\n    fov = 1.0f;\n  if(fov &gt;= 45.0f)\n    fov = 45.0f;\n&#125;</code></pre>\n<p>使用的Makefile：</p>\n<pre><code>INCLUDE_PATH = ./include\nSOURCE_PATH = ./src\nOBJECT = main.o glad.o\nLIBS = -lglfw3 -lGL -lGLU -ldl -lX11 -lpthread\n\n++ = g++\nCC = gcc\n\nmain:$(OBJECT)\n    $(++) -I$(INCLUDE_PATH) -o main $(OBJECT) $(LIBS)\n\nmain.o:main.cpp\n    $(++) -I$(INCLUDE_PATH) -c main.cpp\n\nglad.o:$(SOURCE_PATH)/glad.c\n    $(CC) -I$(INCLUDE_PATH) -c $(SOURCE_PATH)/glad.c\n\nclean:\n    rm *.o\n    rm main</code></pre>\n<p><img src=\"/old_images/2020/09/3319805378.png\" alt=\"QQ图片20200914195150.png\"><br><img src=\"/old_images/2020/09/2082677778.png\" alt=\"QQ图片20200914195155.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>学习了OpenGL的一些基础知识，来分享一下!<br><a href=\"https://learnopengl-cn.github.io/\">Learn OpenGL</a><br>首先，OpenGL到底是什么？<br>OpenGL是API，没错，但OpenGL更被认为是一种标准，然后每个显卡公司，会针对这种标准，编写自己的一套API函数。<br>这就带来了一个麻烦，代码的可以执行问题。对于不同的一套显卡设备，API函数不同，让移植变得很困难。因此，在进行OpenGL开发之前，通常使用一种函数映射的库将硬件对应函数对应到一套公用的函数上，只要使用一套公用的函数API，就能够方便地进行移植（也方便了学习）。因此我们先将glad库（正是负责函数映射库）加入到工程中。配合使用的OpenGl库是glfw库，矩阵运算库选择的是glm库，图片操作库选择的是stb_image库，这些库都需要用户先安装。至此，我们的OpenGL开发环境就搭建完成了。</p>\n<h2 id=\"坐标变换\"><a href=\"#坐标变换\" class=\"headerlink\" title=\"坐标变换\"></a>坐标变换</h2><p>OpenGL的最基础元素是顶点元素，三个顶点可以组成一个三角形，构成了最基础的图形，OpenGL的所有图形均是由三角形构成的，这点一定要明确！（即使我想要一个正方形，我也只能通过两个三角形来构建）<br><img src=\"/old_images/2020/06/4288438894.jpg\" alt=\"Snipaste_2020-06-10_16-55-32.jpg\"><br>首先我们通过某种方式（自己定义在内存中、导入各种格式的模型等）得到一个物体的顶点坐标，这个顶点坐标称为局部空间（Local Space），也就是最初物体的坐标，一般将物体坐标放在中央。我们通过坐标变换，对每个顶点进行变换（Model Matrix），让他出现在应该出现的世界坐标的位置，这个变换包括6个自由度，分别确定了物体在世界坐标下的三维位置与姿态（称之为位姿）。之后，需要将这些点再次变换到以摄像机为中心的坐标系下 （View Matrix），以实现摄像机的自由运动。但是这样直接显示在屏幕上，OpenGL会直接去掉这些点的Z坐标，会有一种不真实的感觉（总而言之就是没有近大远小的感觉），我们再使用投影变换，再将结果同时÷Z坐标，将每个平截头体内点变换到屏幕上，这样我们就得到了一个三维点在二维平面上的坐标了，OpenGL将其画出来就行了。（甚至你可以直接使用小孔模型进行变换）<br><img src=\"/old_images/2020/06/890806100.jpg\" alt=\"Snipaste_2020-06-10_20-03-07.jpg\"></p>\n<h2 id=\"着色器Shader\"><a href=\"#着色器Shader\" class=\"headerlink\" title=\"着色器Shader\"></a>着色器Shader</h2><p>机器是如何把图像画出来的呢？学习OpenGL，其中重要的一点就是学习Shader的编程（GLSL语言）以及它的工作流程（渲染流水线）<br>下面这张图展示了渲染流水线的工作流程：<br><img src=\"/old_images/2020/06/1099674099.jpg\" alt=\"Snipaste_2020-06-10_16-52-24.jpg\"><br>上图每一个着色器对应一个shader文件，但是大部分情况下我们只需要顶点着色器（VERTEX SHADER，简称为VS）和片段着色器（FRAGMENT SHADER，简称为FS）即可，顶点着色器用于绘制点，片段着色器用于绘制光栅化后三角形内每一个像素的颜色。<br>我们在程序里使用API函数编译、链接这些SHADER文件，构成一个SHADER项目，供我们在渲染中使用（SHADER是跑在GPU中的！）。<br>VS接受程序存在内存中的点的坐标（不只是位置，还可以包括颜色、法向量等其他属性），对其进行坐标变换，将结果送入FS，FS接受VS处理的结果，并在整个三角形中对接收数据进行插值，<strong>相当于接收到的数据不再是三个顶点而是光栅化后的三角形内的许多像素</strong>，再依据程序对这些像素进行运算（需要GPU并行加速），输出每个像素的颜色，进行渲染。</p>\n<h2 id=\"光照与纹理\"><a href=\"#光照与纹理\" class=\"headerlink\" title=\"光照与纹理\"></a>光照与纹理</h2><p>有了上面的基础，在OpenGL中实现光照效果就很简单了（因为我们已经知道如何操作每一个像素的颜色），重中之重在于找到合适的光照模型：<br>在这里我们使用冯氏光照模型，一个物体的颜色由三个分量加权得到：<br><img src=\"/old_images/2020/06/2875422330.jpg\" alt=\"Snipaste_2020-06-10_20-32-35.jpg\"><br>ambient：环境光<br>占有分量最少，描述的是物体在完全黑暗处由于极少量反射呈现的颜色。颜色取决于物体颜色。<br>diffuse：漫反射<br>占有分量最多，强度大小由光源向量与面的法向量的内积确定。颜色取决于物体颜色。<br><img src=\"/old_images/2020/06/1829637362.jpg\" alt=\"Snipaste_2020-06-10_20-37-22.jpg\"><br>specular：镜面反射<br>占有份量也比较多，强度大小取决于反射后的光线向量与<strong>视角向量</strong>的内积。颜色同时取决于光源颜色与物体颜色。<br><img src=\"/old_images/2020/06/4103478537.jpg\" alt=\"Snipaste_2020-06-10_20-37-13.jpg\"></p>\n<p>由于FS中获得的是VS传来值的插值，也就能够获得每个像素点的坐标，因此在FS中进行光照计算能够使得光照更加真实，但是运算量也会更大。</p>\n<p>这样一来，每个像素经过渲染流水线就能够产生一个特定的颜色，显示在我们的屏幕上。</p>\n<p>最后我们就可以实现一些简单的渲染啦，不要说我技能点点歪了，学习渲染也可以图形化一些问题，也是解题的一大工具呢！</p>\n<p>将我的一个入门小项目源码放在这里供大家学习：</p>\n<pre><code>#include &lt;glad/glad.h&gt;\n#include &lt;GLFW/glfw3.h&gt;\n#include &lt;iostream&gt;\n#include &lt;math.h&gt;\n#include &quot;shader.h&quot;\n\n#include &lt;glm/glm.hpp&gt;\n#include &lt;glm/gtc/matrix_transform.hpp&gt;\n#include &lt;glm/gtc/type_ptr.hpp&gt;\n\n#define STB_IMAGE_IMPLEMENTATION\n#include &quot;stb_image.h&quot;\n\nusing namespace std;\n\n\nvoid framebuffer_size_callback(GLFWwindow* window, int width, int height);\nvoid processInput(GLFWwindow *window);\nvoid mouse_callback(GLFWwindow* window, double xpos, double ypos);\nvoid scroll_callback(GLFWwindow* window, double xoffset, double yoffset);\n\n\n// settings\nconst unsigned int SCR_WIDTH = 800;\nconst unsigned int SCR_HEIGHT = 600;\n\n\nfloat deltaTime = 0.0f; // 当前帧与上一帧的时间差\nfloat lastFrame = 0.0f; // 上一帧的时间\n\nfloat vertices[] = &#123;\n    -0.5f, -0.5f, -0.5f,  0.0f, 0.0f,\n     0.5f, -0.5f, -0.5f,  1.0f, 0.0f,\n     0.5f,  0.5f, -0.5f,  1.0f, 1.0f,\n     0.5f,  0.5f, -0.5f,  1.0f, 1.0f,\n    -0.5f,  0.5f, -0.5f,  0.0f, 1.0f,\n    -0.5f, -0.5f, -0.5f,  0.0f, 0.0f,\n\n    -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,\n     0.5f, -0.5f,  0.5f,  1.0f, 0.0f,\n     0.5f,  0.5f,  0.5f,  1.0f, 1.0f,\n     0.5f,  0.5f,  0.5f,  1.0f, 1.0f,\n    -0.5f,  0.5f,  0.5f,  0.0f, 1.0f,\n    -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,\n\n    -0.5f,  0.5f,  0.5f,  1.0f, 0.0f,\n    -0.5f,  0.5f, -0.5f,  1.0f, 1.0f,\n    -0.5f, -0.5f, -0.5f,  0.0f, 1.0f,\n    -0.5f, -0.5f, -0.5f,  0.0f, 1.0f,\n    -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,\n    -0.5f,  0.5f,  0.5f,  1.0f, 0.0f,\n\n     0.5f,  0.5f,  0.5f,  1.0f, 0.0f,\n     0.5f,  0.5f, -0.5f,  1.0f, 1.0f,\n     0.5f, -0.5f, -0.5f,  0.0f, 1.0f,\n     0.5f, -0.5f, -0.5f,  0.0f, 1.0f,\n     0.5f, -0.5f,  0.5f,  0.0f, 0.0f,\n     0.5f,  0.5f,  0.5f,  1.0f, 0.0f,\n\n    -0.5f, -0.5f, -0.5f,  0.0f, 1.0f,\n     0.5f, -0.5f, -0.5f,  1.0f, 1.0f,\n     0.5f, -0.5f,  0.5f,  1.0f, 0.0f,\n     0.5f, -0.5f,  0.5f,  1.0f, 0.0f,\n    -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,\n    -0.5f, -0.5f, -0.5f,  0.0f, 1.0f,\n\n    -0.5f,  0.5f, -0.5f,  0.0f, 1.0f,\n     0.5f,  0.5f, -0.5f,  1.0f, 1.0f,\n     0.5f,  0.5f,  0.5f,  1.0f, 0.0f,\n     0.5f,  0.5f,  0.5f,  1.0f, 0.0f,\n    -0.5f,  0.5f,  0.5f,  0.0f, 0.0f,\n    -0.5f,  0.5f, -0.5f,  0.0f, 1.0f\n&#125;;\n\nglm::vec3 cubePositions[] = &#123;\n  glm::vec3( 0.0f,  0.0f,  0.0f), \n  glm::vec3( 2.0f,  5.0f, -15.0f), \n  glm::vec3(-1.5f, -2.2f, -2.5f),  \n  glm::vec3(-3.8f, -2.0f, -12.3f),  \n  glm::vec3( 2.4f, -0.4f, -3.5f),  \n  glm::vec3(-1.7f,  3.0f, -7.5f),  \n  glm::vec3( 1.3f, -2.0f, -2.5f),  \n  glm::vec3( 1.5f,  2.0f, -2.5f), \n  glm::vec3( 1.5f,  0.2f, -1.5f), \n  glm::vec3(-1.3f,  1.0f, -1.5f)  \n&#125;;\n\n// unsigned int indices[] = &#123;\n//     0, 1, 3,\n//     1, 2, 3\n// &#125;;\n\nunsigned int VAO,lightVAO;\nunsigned int VBO, EBO;\nunsigned int texture0;\nint vertexColorLocation;\nint pic_width,pic_height,nrChannels;\n\n//camera\nglm::vec3 cameraPos   = glm::vec3(0.0f, 0.0f,  3.0f);\nglm::vec3 cameraFront = glm::vec3(0.0f, 0.0f, -1.0f);\nglm::vec3 cameraUp    = glm::vec3(0.0f, 1.0f,  0.0f);\n\nglm::mat4 Up_rotate_p = glm::mat4(1.0f);\nglm::mat4 Up_rotate_n = glm::mat4(1.0f);;\n\nfloat lastX = 400, lastY = 300;\nfloat yaw,pitch,fov = 45.0f;\n\nint main()\n&#123;\n    // glfw: initialize and configure\n    // ------------------------------\n    glfwInit();\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);\n    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);\n    //glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);\n\n    // glfw window creation\n    // --------------------\n    GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, &quot;LearnOpenGL&quot;, NULL, NULL);\n    if (window == NULL)\n    &#123;\n        std::cout &lt;&lt; &quot;Failed to create GLFW window&quot; &lt;&lt; std::endl;\n        glfwTerminate();\n        return -1;\n    &#125;\n    glfwMakeContextCurrent(window);\n    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);\n\n    // glad: load all OpenGL function pointers\n    // ---------------------------------------\n    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))\n    &#123;\n        std::cout &lt;&lt; &quot;Failed to initialize GLAD&quot; &lt;&lt; std::endl;\n        return -1;\n    &#125;\n\n    //mouse\n    glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);\n    glfwSetCursorPosCallback(window, mouse_callback);\n    glfwSetScrollCallback(window, scroll_callback);\n\n    //texture\n    glGenTextures(1, &amp;texture0);\n    glBindTexture(GL_TEXTURE_2D, texture0);\n\n    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);           //x轴扩充方式\n    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);           //y轴扩充方式\n    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);       //缩小插值方法\n    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);       //放大插值方法\n\n    stbi_set_flip_vertically_on_load(true);\n    unsigned char *data0 = stbi_load(&quot;girls.jpg&quot;, &amp;pic_width, &amp;pic_height, &amp;nrChannels, 0);\n    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, pic_width, pic_height, 0, GL_RGB, GL_UNSIGNED_BYTE, data0);\n    glGenerateMipmap(GL_TEXTURE_2D);                                        //自动多级渐远\n    stbi_image_free(data0);\n\n\n\n    //shader compile to program\n    //using shader class\n    //不能是全局变量，由于构造时未初始化\n    Shader main_shader(&quot;./shaders/box.vs&quot;,&quot;./shaders/box.fs&quot;);\n\n    //vertices\n    glGenVertexArrays(1, &amp;VAO);             //generate VAO\n    glGenBuffers(1, &amp;VBO);                  //generate VBO\n    //glGenBuffers(1, &amp;EBO);                  //generate EBO\n\n    glBindVertexArray(VAO);                 //bind VAO\n    glBindBuffer(GL_ARRAY_BUFFER, VBO);     //bind VBO\n    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n\n    // glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);\n    // glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);\n\n    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);\n    glEnableVertexAttribArray(0);\n    glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));\n    glEnableVertexAttribArray(1);\n\n    //VBO -&gt; VAO 之后只须绑定VAO即可\n    glBindBuffer(GL_ARRAY_BUFFER, 0);       //unbind VBO\n    glBindVertexArray(0);                   //unbind VAO\n\n    //light\n    glGenVertexArrays(1, &amp;lightVAO); \n    glBindVertexArray(lightVAO);\n    glBindBuffer(GL_ARRAY_BUFFER, VBO);\n    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);\n    glEnableVertexAttribArray(0);\n\n    // render loop\n    // -----------\n    while (!glfwWindowShouldClose(window))\n    &#123;\n        float currentFrame = glfwGetTime();\n        deltaTime = currentFrame - lastFrame;\n        lastFrame = currentFrame;\n        // input\n        // -----\n        processInput(window);\n\n        //预处理\n        glm::mat4 model = glm::mat4(1.0f);\n        model = glm::rotate(model, (float)glfwGetTime(), glm::vec3(1.0, 0.0, 0.5));\n        //清屏 清除Z缓冲\n        glClearColor(0.8f, 0.3f, 0.3f, 1.0f);\n        glClear(GL_COLOR_BUFFER_BIT);\n        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n\n\n        //渲染\n        main_shader.use();\n        //main_shader.setVec4(&quot;ourColor&quot;,0.3f,0.1f,0.7f,1.0f);\n        main_shader.setInt(&quot;texture0&quot;, 0);\n\n        glEnable(GL_DEPTH_TEST);                    //开启Z缓冲\n        glActiveTexture(GL_TEXTURE0);               //在绑定纹理之前先激活纹理单元\n        glBindTexture(GL_TEXTURE_2D, texture0);\n        glBindVertexArray(VAO);\n\n        glm::vec3 front;\n        front.x = cos(glm::radians(pitch)) * cos(glm::radians(yaw));\n        front.y = sin(glm::radians(pitch));\n        front.z = cos(glm::radians(pitch)) * sin(glm::radians(yaw));\n        cameraFront = glm::normalize(front);\n\n        //trans\n\n        glm::mat4 view = glm::mat4(1.0f);;\n        view = glm::lookAt(cameraPos, cameraPos + cameraFront, cameraUp);\n        main_shader.setMat4(&quot;view&quot;, view);\n        Up_rotate_p = glm::rotate(Up_rotate_p, glm::radians(0.2f*deltaTime),  cameraFront);\n        Up_rotate_n = glm::rotate(Up_rotate_n, glm::radians(-0.2f*deltaTime), cameraFront);\n\n        glm::mat4 project = glm::mat4(1.0f);\n        project = glm::perspective&lt;float&gt;(glm::radians(fov), (SCR_WIDTH/SCR_HEIGHT), 0.1f, 100.0f);\n        main_shader.setMat4(&quot;project&quot;, project);\n\n        for (unsigned int i = 0; i &lt; 10; i++)\n        &#123;\n            // calculate the model matrix for each object and pass it to shader before drawing\n            glm::mat4 model = glm::mat4(1.0f);\n            model = glm::translate(model, cubePositions[i]);\n            float angle = 20.0f * i;\n            model = glm::rotate(model, glm::radians(angle+(float)(glfwGetTime()*60)), glm::vec3(1.0f, 0.3f, 0.5f));\n            main_shader.setMat4(&quot;model&quot;, model);\n\n            glDrawArrays(GL_TRIANGLES, 0, 36);\n        &#125;\n\n        glDrawArrays(GL_TRIANGLES, 0, 36);\n        glBindVertexArray(0);\n        // glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)\n        // -------------------------------------------------------------------------------\n        glfwSwapBuffers(window);\n        glfwPollEvents();\n    &#125;\n\n    // optional: de-allocate all resources once they&#39;ve outlived their purpose:\n    // ------------------------------------------------------------------------\n    glDeleteVertexArrays(1, &amp;VAO);\n    glDeleteBuffers(1, &amp;VBO);\n    // glfw: terminate, clearing all previously allocated GLFW resources.\n    // ------------------------------------------------------------------\n    glfwTerminate();\n    return 0;\n&#125;\n\n// process all input: query GLFW whether relevant keys are pressed/released this frame and react accordingly\n// ---------------------------------------------------------------------------------------------------------\nvoid processInput(GLFWwindow *window)\n&#123;\n    float cameraSpeed = 3.0f * deltaTime;\n\n    if(glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)\n        glfwSetWindowShouldClose(window, true);\n    if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS)\n        cameraPos += cameraSpeed * cameraFront;\n    if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS)\n        cameraPos -= cameraSpeed * cameraFront;\n    if (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS)\n        cameraPos -= glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;\n    if (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS)\n        cameraPos += glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;\n    if (glfwGetKey(window, GLFW_KEY_Q) == GLFW_PRESS)\n        &#123;\n            glm::vec4 cameraUp4 = Up_rotate_p * glm::vec4(cameraUp,1.0f);\n            cameraUp = glm::vec3(cameraUp4.x,cameraUp4.y,cameraUp4.z);\n        &#125;\n\n    if (glfwGetKey(window, GLFW_KEY_E) == GLFW_PRESS)\n        &#123;\n            glm::vec4 cameraUp4 = Up_rotate_n * glm::vec4(cameraUp,1.0f);\n            cameraUp = glm::vec3(cameraUp4.x,cameraUp4.y,cameraUp4.z);\n        &#125;\n\n&#125;\n\n// glfw: whenever the window size changed (by OS or user resize) this callback function executes\n// ---------------------------------------------------------------------------------------------\nvoid framebuffer_size_callback(GLFWwindow* window, int width, int height)\n&#123;\n    // make sure the viewport matches the new window dimensions; note that width and \n    // height will be significantly larger than specified on retina displays.\n    glViewport(0, 0, width, height);\n&#125;\n\nvoid mouse_callback(GLFWwindow* window, double xpos, double ypos)\n&#123;\n    float xoffset = xpos - lastX;\n    float yoffset = lastY - ypos; // 注意这里是相反的，因为y坐标是从底部往顶部依次增大的\n    lastX = xpos;\n    lastY = ypos;\n\n    float sensitivity = 0.05f;\n    xoffset *= sensitivity;\n    yoffset *= sensitivity;\n\n    yaw   += xoffset;\n    pitch += yoffset;\n\n    if(pitch &gt; 89.0f)\n        pitch =  89.0f;\n    if(pitch &lt; -89.0f)\n        pitch = -89.0f;\n\n&#125;\n\nvoid scroll_callback(GLFWwindow* window, double xoffset, double yoffset)\n&#123;\n  if(fov &gt;= 1.0f &amp;&amp; fov &lt;= 45.0f)\n    fov -= yoffset;\n  if(fov &lt;= 1.0f)\n    fov = 1.0f;\n  if(fov &gt;= 45.0f)\n    fov = 45.0f;\n&#125;</code></pre>\n<p>使用的Makefile：</p>\n<pre><code>INCLUDE_PATH = ./include\nSOURCE_PATH = ./src\nOBJECT = main.o glad.o\nLIBS = -lglfw3 -lGL -lGLU -ldl -lX11 -lpthread\n\n++ = g++\nCC = gcc\n\nmain:$(OBJECT)\n    $(++) -I$(INCLUDE_PATH) -o main $(OBJECT) $(LIBS)\n\nmain.o:main.cpp\n    $(++) -I$(INCLUDE_PATH) -c main.cpp\n\nglad.o:$(SOURCE_PATH)/glad.c\n    $(CC) -I$(INCLUDE_PATH) -c $(SOURCE_PATH)/glad.c\n\nclean:\n    rm *.o\n    rm main</code></pre>\n<p><img src=\"/old_images/2020/09/3319805378.png\" alt=\"QQ图片20200914195150.png\"><br><img src=\"/old_images/2020/09/2082677778.png\" alt=\"QQ图片20200914195155.png\"></p>\n"},{"title":"新人报到！虚拟样机在机器人领域的应用（入门篇）","date":"2020-07-13T05:33:00.000Z","toc":"trues","_content":"Hello！大家好呀，我是你们的新朋友，也是宇哥的搭档。先自我介绍一下子哈，我的名字是冯宸，跟栋宇一样是哈工大竞技机器人队的现役队员，大家可以叫我Albert，主要是从事机械方向的工作，当然嵌入式和视觉方面也有（cai）所（de）涉（yi）猎（pi）。前几天偶然发现了栋宇的Blog，就想着抛砖引玉写一篇科普小文章，奈何才疏学浅再加上这几天事情比较多，就搁置了下来，不过今天刚好有时间，就尝试把自己之前弄的一些基础的小东西来支持一下我宇哥。好啦！废话不多说上才艺！\n1. 虚拟样机技术简介\n虚拟样机技术一般在大型复杂系统的产品设计中应用，虚拟样机技术 (Virtual Prototyping Technology)是指在产品开发设计过程中，将分散的零部件设计和分析技术融合在一起,在计算机上建造出整体模型,并针对该产品在投入使用后的各种工况进行仿真分析，预测产品的整体性能，通过仿真结果指导改进设计、提高产品性能。\n一般流程是在仿真软件中搭建一个动力学模型来模拟系统工作时的工作状态,通过数据输出(位移、速度、加速度)或者仿真动画输出来观察和分析系统的可靠性，分析结果用来指导物理样机 的版本迭代。\n在RoboMaster 比赛中,如果能搭建正确的战车一些核心模块的虚拟样机,在方案试验阶段能节省很大一部分的人力成本资金成本和时间成本.并且能在分析问题时有一定说服力的依据而不是只停留在经验层面上,解决问题一针见血。\n2. 常用虚拟样机软件\n自然界广泛存在四种物理场：温度场、电磁场、结构(位移、应力、应变)场、流场 。\n不同的工程所分析的物理场不一样,不同的物理场所应用的公式理论和仿真软件也不一样.本文主要针对robomaster 比赛中机械仿真案例进行阐述.目前来看主要是运用结构场和流场 进行建模分析.其中涉及到多体动力学分析和静力学分析以及流体力学分析。一般涉及到软件Solidworks、Adams、Ansys workbench、Fluent... 等。\nSolidworks 主要进行三维建模设计也可进行关键零件的静力学分析(Simulition静力学模块)和动力学模型搭建(motion模块)。\nAdams 是多体动力学仿真计算中最常用的软件,也是本文的中点阐述对象.可以进行动力学模型搭建(View模块)仿真求解(Solver模块)以及数据处理模块(Postprocessor模块)\nAnsys 是有限元仿真中常用软件，可以进行静力学分析(Static Structural模块)也可以进行碰撞分析(LS-dyna模块)还有流场分析(Fluid Flow模块)，Workbench集成了很多有限元模块，可以共享各自的结果数据使Ansys的功能异常强大。\n结构场是最主要的分析场.本文是在结构场中以步兵拨弹模块 为例进行展开系统的虚拟样机搭建过程.研究Adams虚拟样机中17mm子弹在弹仓中的运动状态和拨轮受力情况，指导拨弹模块的改进，进而提高射频满足比赛要求。\n3. 搭建虚拟样机的动力学模型\n简单的机械系统可以搭建数学模型进行动力学分析,但是像拨弹这中多自由度的复杂系统很难或者无法直接搭建整个拨弹过程的数学模型,只能通过多体动力学软件搭间接搭建数学模型进行迭代计算和过程动画模拟来分析问题。\n虚拟样机其实包括建模、仿真、后处理.建模即创建样机添加工况,仿真即是求解方程,由计算机幕后完成,后处理主要是查看动画以及输出一些感兴趣的物理量,复杂的由专业后处理模块Adams/PostProcessor进行。\n在Solidworks中的motion模块和Adams View中均可搭建动力学模型。Solidworks中操作比较简单，对于大多数同学来讲上手比较快。可以把模型在SW中搭建好之后导入到Adams进行求解计算，这样可以在短时间内完成一个简单系统的仿真工作，不过如果需要更精确的求解计算建议还是使用Adams搭建模型比较好，求解更精确。\n\n4.在Solidworks中简化模型导入Adams计算和后处理\n（1）在solidworks中简化拨弹模块，压缩不影响本次研究问题的无关零件(发射模块、弹舱盖、其他保护壳等)。并添加上子弹,子弹是阵列生成,需要右键解散阵列 .所有零件应赋材料(子弹材料TPE,用PA代替)如图4-1到图4-2的简化。\n![1.PNG][1]\n\n\n图4-1简化前\t图4-2简化后\n（2）打开【motion】插件,进入motion模块(如没有在→插件中勾选motion),在左下角将页面切换至【运动算例1】 ,将下拉菜单【动画】切换到【motion分析】 ,依次添加各个实体间的接触力contact(球与球之间、球与拨轮之间、球与弹舱之间),检查弹舱为固定状态,最后设置重力 .到此为止,模型搭建完毕,驱动马达可以不添加,放在Adams 中操作.图4-3是各按钮位置。\n![2.PNG][2]\n\n\n图4-3 motion模块的操作界面\n在动力学模型中每个实体之间的接触是靠添加两个物体间的接触力实现的,在Adams和Solidworks中每个接触均有8个参数(图4-7中标出),四个碰撞参数:Stiffness(刚度系数)、Force Exponent(刚度指数)、Damping(阻尼系数)、Penetration Depth(最大穿透值),四个库仑摩擦参数:Static Coefficient(静摩擦系数)、Dynamic Coefficient(动摩擦系数)、Stiction Transition Vel(静摩擦过渡速度)、Friction Transition Vel(动摩擦过渡速度), 表3-1给出大致参数确定方法，也可参考附件data文件夹下《ADAMS中接触的定义及参数设置》.图4-4和图4-5方便理解各个参数的意义。\n![3.PNG][3]\n\n\n表3-1 Impact接触参数与Coulomb摩擦参数\n\n![4.PNG][4]\n\t\n图4-4 Impact接触参数参考图\t图4-5 Coulomb摩擦参数参考图\n\n![5.PNG][5]\t\n\n图4-6 各球之间接触\t图4-7各球之间的接触参数设置\n图4-6为添加球和球接触中实体选择操作,可以看出不勾选接触组时,添加的是所选择各实体间的接触,17颗球之间一共有136个接触.图4-7为球和球之间的接触参数设置(推荐)。\n\n![6.PNG][6]\n\n图4-8球和各个弹舱零件的接触\t图4-9 球与弹舱之间的接触参数设置\n图4-8使用【接触组】添加接触,球和拨轮以及球和弹舱的接触需要使用接触组,即球为一组与另外三个零件分别添加接触,各球之间接触不会被重复添加,在图中看出17个子弹与四个零件间分别添加接触,共68个接触. 图4-9为球和弹舱之间的接触参数设置(推荐)。\n另外拨轮和球之间的接触同样使用接触组,系数设置中将图4-9中【Stiffness】(刚度)系数改为400即可。\n使用Solidworks 方便交互式批量添加各实体间的接触力,Adams 中接触力的添加比较难操作.多个实体之间只有用脚本命令进行添加比较方便。\n最后添加上重力。\n（3）导入到Adams中,检查模型,稍作修改,一些复杂的约束用简单约束来替换,在Solidworks 中的互相固连的零件可以进行两种操作①两个零件用Fixed约束锁死②使用Boolean运算进行零件合并,给拨轮添加Revolute铰接约束,在铰接约束上添加motion驱动.打开求解器进行运算即可。\n\t\n![7.PNG][7]\n\n图4-10计算按钮\t图4-11 Solidworks与Adams的接口\n把模型按照第一第二步搭建完之后,点击【计算】按钮(图4-10),计算结果一般都会报错可以忽略,Solidworks中的求解器计算很容易失败,所以只用motion做模型搭建这种前处理工作.右键模型名称输出Adams(图4-11),输出英文命名的.adm文件和一些.xmt_bin以及.res文件均保存在英文路径下.附件中例程保存在 adams_file\\project\\model\\adams_1中。\n\t\n![8.PNG][8]\n\n图4-12导入.adm文件\t图4-13 MKS单位制设置\n打开Adams导入.adm文件,新建模型“loader_1”,设置单位制。\n\t\n![9.PNG][9]\n\n图4-14 Connectors约束\t图4-15 添加Fixed约束\n\n![10.PNG][10]\n\n图4-15 Fixed(固定)和Revolute(旋转)约束\n在Adams中删除【Connectors】中所有约束,将几个固定零件间添加Fixed约束(固定锁死)。\n\t\n![11.PNG][11]\n\n图4-16 右键→Appearance\t图4-17 Appearance→Color\n更改拨轮颜色为Red,方便观察和操作,如图4-16和图4-17.也可以根据需要更改其他零件颜色.图4-17中【Visibility】点选off即可隐藏该零件,该操作同样适用于其他类型信息,如Connectors、Motion、Force等。\n\t\n![12.PNG][12]\n\n图4-18添加Revolute(旋转)约束\t图4-19 Revolute(旋转)约束结果\n在拨轮和弹舱中间添加旋转副,操作如图4-18结果如图4-19。\n\n![13.PNG][13]\n\n图4-20 Rotational Joint motion(旋转驱动)\n\n![14.PNG][14]\t\n\n图4-20 motion结果\t图4-21 motion参数\n    将旋转驱动添加到拨轮的旋转副上。\n在joint_4上添加motion_1,参数设置如图4-21。\n17mm子弹材料为TPE,密度970 kg/m³弹性模量3.4GPa,泊松比0.32(近似)。\n\t\n![15.PNG][15]\n\n图4-22 新建材料\t图4-23 TPE材料参数\n【body】树下右键其中一个球单击【Modify】, 出现对话框如图4-22在【Define Mass By】下拉菜单选择【Geometry and Material Type】,在【Material Type】中右键出现图中对话框,依次选取【Material】→【Create】会跳出对话框如图4-23，按照TPE参数设置单击【Apply】→【ok】,然后单击图4-22中【Apply】即发现图中材料参数刷新至新建TPE材料.依次添加剩余球的材料和弹仓材料(【Material】→【Guesses】→【aluminum】)。模型搭建完毕,进入simulation进行求解计算。\n\n![16.PNG][16]\n\n图4-24仿真参数设置\n如图4-24仿真正在进行中,左上角为仿真计算过的模型时间,右下角为仿真进程百分比,在Simulation Control对话框中【End Time】为仿真总时长,【Step Size】为仿真步长根据模型复杂程度给定,合理的步长节省仿真时间、提高仿真精度.如果计算报错则检查模型有无物理干涉和严重死点,调整仿真时间继续进行仿真计算,多次仿真计算应勾选【Reset before running】保证每次仿真计算前参数重置.仿真时间由模型复杂度和电脑CPU以及内存而定,如果模型复杂则仿真时间会十几个小时甚至几天，电脑配置稍好些会加快运算效率.另外合理的模型化简和模型搭建也能影响仿真时间。\n关于充分利用电脑性能加快仿真速度,可以开从多线程运算和增大可调用内存两个方面入手。\n多线程运算途径>在Adams/View界面下通过“settings>solver>Executable”菜单打开设置窗口，并勾选More选项，在Thread Count位置输入参与计算的线程数(128).如图4-25。\n\n![17.PNG][17]\n\n图4-25\n增大调用内存途径>开始--程序--MSC.software--MSC.ADAMS--ADAMS settings分别打开Aview和Asolver中的Preference，在右侧memsize一栏中选择huge点击ok保存。重新运行ADAMS即可.如图4-26。\n\n![18.PNG][18]\n\n图4-26\n（4）进入后处理模块Postprocessor,观察动画可以看到子弹在拨轮中的运状态,进行子弹轨迹追踪和一些感兴趣物理量的测量.比如输出电机的驱动扭矩值,进行电机选型.通过仿真动画和数据指导版本迭代改进。\n5.Solidworks提供三维模型,Adams中进行模型搭建和计算及后处理\n（1）Solidworks简化模型,操作过程和流程和4.1中相同,最后将装配体另存成Parasolid(*.x_t)格式如图5-1,导入Adams做前处理.注意:Adams不支中文路径和中文文件名。\n  \n![19.PNG][19]\n\n图5-1导出x_t\n打开Adams View,新建模型导入.x_t文件.单击【New Model】输入自定义模型名称(英文),单击【ok】会新建一个空白模型,【主菜单】>【File】>【import】下拉菜单第一个【File Type】中选择Parasolid,在【File To Read】中右键>【Browse】浏览到目标.x_t文件,在【Model Name】右键选择新建的模型名称.单击【Ok】.模型导入完成.如图5-2。\n\n![20.PNG][20]\n\n图5-2 .x_t导入Adams\n（2）在Adams里面搭建动力学模型.在此之前应掌握Adams图形界面基本操作和工具栏的分布.模型需要用cmd脚本搭建,准确高效,所以要求能读懂简单的编程语言.本章节均用一些简单的命令语言来实现建模操作.这里的脚本编辑器使用的是VScode,桌面新建.txt英文命名后缀改为.cmd,用VScode打开编辑后保存即可。\n【主菜单】>【View】>【Command Window】打开命令窗口,每一步界面操作的命令都会在命令窗口中滚动.可以复制出来修改后使用。\nCmd脚本对拨弹部分建模流程如下①修改Bodies Name②布尔运算操作③定义材料④添加约束⑤添加驱动⑥定义接触力(部分步骤的先后顺序可调)。\n①基本设置\n设置单位制(MKS)和重力方向(-Z)。\n!-------------setting----------------------!\ndefault units length=mm mass=kg force=newton &\n time=Second angle=degrees frequency=hz!units_MKS!\n\nint dia disp dia=gravity_panel!打开对话框重力设置对话框!\nforce modify body gravitational gravity = ACCGRAV_1 &\n      x_comp = 0 &\n      y_comp = 0 &\n      z_comp = -9806.65!-Z轴gravity!\n!-----------------end------------------------!\n②修改Bodies Name\n在模型树中【Bodies】下可以查看各个实体.如果在Solidworks中是中文命名,导入后会重新命名,但是命名均有规律.现需要修改实体名字,方便查看和操作。\n图形界面操作按钮如图5-3,【模型树】>【Bodies】>【任意一组件右键】。\n\n![21.PNG][21]\n\n图5-3 Rename按钮\n   \n    图形界面操作按钮如图5-3,【模型树】>【Bodies】>【任意一组件右键】，根据模型树中的信息,编写modify_name命令如下,\n!-------------modify_part_name---------------!\nentity modify entity =____002    new = wheel_loader\nentity modify entity =____       new = magazin_1\nentity modify entity =_______2   new = sheet\nentity modify entity =______     new = magazin_2\n\nentity modify entity =_17mm____  new = _17mm_____1\nfor variable_name=ip  start_value=1  end_value=17 !for循环批量修改球的name,ip为变量名!\nentity modify entity =(eval(\"_17mm_____\"//rtoi(ip))) new =(eval(\"ball_\"//rtoi(ip)))\nend\n\nentity modify entity =________   new = _________1\nfor variable_name=ip  start_value=1  end_value=2\nentity modify entity =(eval(\"_________\"//rtoi(ip))) new = (eval(\"pipe_\"//rtoi(ip)))\nend\n!-------------------end----------------------!\n根据模型树中的信息,编写modify_name命令如下,通过【主菜单】>【File】>【import】导入.cmd实现对模型的操作如图5-4，\n\n![22.PNG][22]\n\n图5-4 .cmd导入Adams\n操作前后的对比如图5-5和图5-6\n\t\n![23.PNG][23]\n\n图5-5 Bodies Name修改前\t图5-6 Bodies Name修改后\n③布尔运算操作\n在三维模型为DFM(面向制造的设计),不影响功能情况下,使用布尔运算将多个零件合成一个。\n图形界面操作按钮如图5-7,【功能区】>【Bodies】>【Booleans】。\n\n![24.PNG][24]\n\n图5-7 Booleans操作按钮\n根据模型,编写Booleans命令操作如下,\n!-------------Booleans_parts-----------------!\npart merge rigid_body part_name=pipe_2 into_part=pipe_1!将pipe_2合并到pipe_1!\n!-------------------end----------------------!\n操作前和操作后的区别如图5-8和图5-9\n\n![25.PNG][25]\n\n图5-8 布尔合并前\n\n![26.PNG][26]\n\n图5-9 布尔合并后\n④定义材料\n图形界面操作按钮,【模型树】>【Bodies】>【任意一个构件右键】>【Modify】接下来的操作设置如图5-10和图5-11\n\t\n![27.PNG][27]\n\n图5-10 新建材料\t图5-11TPE材料参数\n材料参数:①密度(Density)②弹性模量(Youngs Modulus)③泊松比(Poissons Ratio)\n根据模型,编写Material命令操作如下,\n!-------------modify_material-----------------!\nmaterial create  &                !新建材料TPE!\n      material_name = .materials.TPE  &\n      density = 0.97e-6 &\n      youngs_modulus = 3400  &\n      poissons_ratio = 0.32 \nfor variable_name=ip start_value=1 end_value=17!for循环批量修改!\n part modify rigid mass_properties  &\n      part_name = (eval(\"ball_\"//rtoi(ip)))  &\n      material_type = .materials.TPE\nend\n\npart modify rigid mass_properties  &\n      part_name = pipe_1  &\n      material_type = .materials.aluminum\npart modify rigid mass_properties  &\n      part_name = magazin_1  &\n      material_type = .materials.aluminum\npart modify rigid mass_properties  &\n      part_name = sheet  &\n      material_type = .materials.aluminum\npart modify rigid mass_properties  &\n      part_name = wheel_loader  &\n      material_type = .materials.aluminum\n!-------------------end----------------------!\n修改前后对比如图5-12和图5-13\n\t\n![28.PNG][28]\n\n图5-12 新建材料\t图5-13 TPE材料参数\n⑤添加约束\n在此模型中每个子弹都有6个自由度,不存在约束,剩余零部件都有自己的固定方式.如图5-14中,wheel_loader和ground有个旋转约束,其余零件和ground都是固定约束。\n\n![29.PNG][29]\n\n图5-14 模型树中需要约束的零部件\n图形界面操作按钮如图5-15\n\n![30.PNG][30]\n\n图5-15 Fixed(固定)和Revolute(旋转)约束\n·固定约束(Fixed Joint)\n根据模型,编写Fixed_joint命令操作如下,\n!---------------Fixed_Joint------------------!\nmarker create marker=.ground.MAR_fixed_1 & !在ground上创建marker点命MAR_fixed_1!\nlocation=(LOC_RELATIVE_TO({0,0,0},ground.cm)) &!MAR_fixed_1和ground.cm位置重合!\norientation=0.0,0.0,0.0                          !MAR_fixed_1和ground.cm坐标重合!\nmarker create marker=.sheet.MAR_fixed_1 &!在ground上创建marker点命名MAR_fixed_1!\n  location=(LOC_RELATIVE_TO({0,0, 0},ground.cm)) &!MAR_fixed_1和ground.cm位置合!\n  orientation=0.0, 0.0, 0.0                       !MAR_fixed_1和点ground.cm坐标重合!\nconstraint create joint Fixed &           !在上述创建的两个marker间创建一个固定约束!\n    joint_name=fixed_1 &                   !Fixed约束的名称!\n    i_marker_name=.sheet.MAR_fixed_1 &\n    j_marker_name=.ground.MAR_fixed_1\n\nmarker create marker=.ground.MAR_fixed_1 &\n    location=(LOC_RELATIVE_TO({0,0, 0},ground.cm)) &\n    orientation=0.0, 0.0, 0.0\nmarker create marker=.magazin_1.MAR_fixed_1 &\n    location=(LOC_RELATIVE_TO({0,0, 0},ground.cm)) &\n    orientation=0.0, 0.0, 0.0\nconstraint create joint Fixed &                     !创建固定约束!\n    joint_name=fixed_2 &\n    i_marker_name=.magazin_1.MAR_fixed_1 &\n    j_marker_name=.ground.MAR_fixed_1\n\nmarker create marker=.ground.MAR_fixed_1 &\n    location=(LOC_RELATIVE_TO({0,0,0},ground.cm)) &\n    orientation=0.0, 0.0, 0.0\nmarker create marker=.pipe_1.MAR_fixed_1 &\n    location=(LOC_RELATIVE_TO({0,0,0},ground.cm)) &\n    orientation=0.0, 0.0, 0.0\nconstraint create joint Fixed &                     !创建固定约束!\n    joint_name=fixed_3 &\n    i_marker_name=.pipe_1.MAR_fixed_1 &\n    j_marker_name=.ground.MAR_fixed_1\n!-------------------end----------------------!\n创建Fixed后如图5-16\n\n![31.PNG][31]\n\n图5-16 固定约束的结果图\n·旋转约束(Revolute Joint)\n需要在拨盘(wheel_loader)和ground之间添加旋转约束，根据模型,编写Revolute_joint命令操作如下,\nvariable create variable_name=wheel_name string_value=\"wheel_loader\" !定义变量\"wheel_name\",string_value代表字符串类型!\nmarker create marker=.ground.run_MAR_1 &\n    location=(LOC_RELATIVE_TO({0,0,0},(eval(wheel_name//\".cm\")))) &!\n    orientation=(ORI_RELATIVE_TO({90,90,0},(eval(wheel_name//\".cm\"))))\nmarker create marker=.wheel_loader.run_MAR_2 &\n    location=(LOC_RELATIVE_TO({0,0,0},(eval(wheel_name//\".cm\")))) &\n    orientation=(ORI_RELATIVE_TO({90,90,0},(eval(wheel_name//\".cm\"))))\nconstraint create joint Revolute &              !创建Joint_Revolute!\n    joint_name=run_1 &            !约束名称!\n    i_marker_name=.ground.run_MAR_1 &\n    j_marker_name=.wheel_loader.run_MAR_2\nvariable delete variable_name=wheel_name                    !删除变量!\nAdams中建模命令均是对是通过对Marker点的操作来完成的,拿创建旋转副举例(固定约束同理),分为三步：\ni.创建一个坐标点run_MAR_1,该点在ground上,与wheel_loader.cm重合。\nii.创建另外一个坐标点run_MAR_2,该点在wheel_loader上,依旧与wheel_loader.cm重合。\niii.创建一个转动副,转动副名字为.loader_2.run_1,他是由于两个坐标点发生相对转动构成的,这两个坐标点分是上述两步创建的坐标。\n此外上述脚本开头定义了一个字符串变量wheel_name,在创建Joint中使用,结尾删除.使用变量可以方便代码移植。\n⑥添加驱动\nAdams中驱动一般添加在旋转副或者移动副上,拨弹模块只需添加拨盘旋转，图形界面操作按钮如图5-17\n\n![32.PNG][32]\n\n图5-17 Rotational Joint motion(旋转驱动)\n根据模型,编写Joint Motion命令操作如下，\n!-------------Revolute_Joint----------------!\nvariable creat variable_name=MC_run_1 string_value=\"step(time,0.1,0,0.3,-360d)\"!电机转速!\nconstraint create motion motion_name=.loader_2.motion_1 &\n           joint=.loader_2.run_1 &                 !motion添加在run_1上!\n           type=rotational &                       !类型是转动!\n           time_derivative=velocity &              !驱动类型为velocity(速度)!\n           function=(eval(MC_run_1))               !调用定义的变量MC_run_1!\n!-------------------end----------------------!\n使用step函数定义驱动,step函数：\nSTEP（time，1，0d，2，20d）+STEP（time，6，0d，12，-40）  \n意义：1秒到2秒：从0递增至20d；\n2秒到6秒：保持电机输出数值为20d不变；\n6秒到12秒：由20d递减40d，结果为-20d\n旋转约束和驱动添加之后的结果如图5-18\n\n![33.PNG][33]\n\n图5-18添加旋转约束和驱动\n⑦定义接触力\n在Adams中所有的碰撞接触的均应添加接触力。\n该模型中接触力的添加操作要稍微复杂,每个球都有6个自由度,所以每两个球之间都要有添加接触力,第四节中已经说明球之间需要添加136个接触力,需要使用命令批量添加，准确高效。\n图形界面操作按钮如图5-19【功能区】>【Forces】>【Special Forces】>【Create a contact】。\n\n![34.PNG][34]\n\n图5-19 添加实体间接触力按钮\n根据模型,编写Create contact命令操作如下\n!------------create_contact_between_solids--------------!\nvariable create variable_name=MODEL_name string_value=\"loader_2\"!模型名称!\nvariable create variable_name=part_box string_value=\"CSG_4\"!被接触对象!\n\nvariable create variable_name=add_1 integer_value=6!子弹Body名称和SOLID名称的序号差!\n  \nvariable create variable_name=MC_stiffness  real_value=164 !刚度系数,计算公式参考stiffness.m!\nvariable create variable_name=MC_damping    real_value=0.5 !阻尼系数!\nvariable create variable_name=MC_exponent   real_value=2 !指数!\nvariable create variable_name=MC_dmax       real_value=0.00005!最大实体入侵!\n\nvariable create variable_name=MC_mu_static  real_value=0.7 !静摩擦系数!\nvariable create variable_name=MC_mu_dynamic real_value=0.65!动摩擦系数!\nvariable create variable_name=MC_sti_tra_vel real_value=0.1!静摩擦过渡速度!\nvariable create variable_name=MC_fri_tra_vel real_value=10 !动摩擦过渡速度!\n\n!---------------sheet-------------!\n variable modify variable_name=part_box &\n      string=SOLID2                           !修改part_box为sheet的Solid!\nvariable modify variable_name=MC_stiffness  real_value=4.4e8\nvariable modify variable_name=MC_damping    real_value=5e4\nvariable modify variable_name=MC_exponent   real_value=1.5\nvariable modify variable_name=MC_dmax       real_value=0.01\nfor variable_name=ipp  start_value=1  end_value=17\ncontact create &\n  contact_name = .(eval(MODEL_name)).(eval(\"con_\"//rtoi(ipp+add_1)//\"_\"//(eval(part_box)))) &\n      i_geometry_name = (eval(\"SOLID\"//rtoi(ipp+add_1))) &\n      j_geometry_name = (eval(part_box))  &\n      stiffness = (eval(MC_stiffness))    &\n      damping =(eval(MC_damping))         &\n      exponent =(eval(MC_exponent))       &\n      dmax =(eval(MC_dmax))               &\n      coulomb_friction = on               &\n      mu_static =(eval(MC_mu_static))          &\n      mu_dynamic =(eval(MC_mu_dynamic))         &\n      stiction_transition_velocity =(MC_sti_tra_vel) &\n      friction_transition_velocity =(MC_fri_tra_vel)\nend  \n!---------------magazin_1-------------!\n variable modify variable_name=part_box &\n      string=SOLID1\nvariable modify variable_name=MC_stiffness  real_value=4.4e8\nvariable modify variable_name=MC_damping    real_value=5e4\nvariable modify variable_name=MC_exponent   real_value=1.3\nvariable modify variable_name=MC_dmax       real_value=0.01\nfor variable_name=ipp  start_value=1  end_value=17\ncontact create &\n  contact_name = .(eval(MODEL_name)).(eval(\"con_\"//rtoi(ipp+add_1)//\"_\"//(eval(part_box)))) &\n      i_geometry_name = (eval(\"SOLID\"//rtoi(ipp+add_1))) &\n      j_geometry_name = (eval(part_box))  &\n      stiffness = (eval(MC_stiffness))    &\n      damping =(eval(MC_damping))         &\n      exponent =(eval(MC_exponent))       &\n      dmax =(eval(MC_dmax))               &\n      coulomb_friction = on               &\n      mu_static =(eval(MC_mu_static))          &\n      mu_dynamic =(eval(MC_mu_dynamic))         &\n      stiction_transition_velocity =(MC_sti_tra_vel) &\n      friction_transition_velocity =(MC_fri_tra_vel)\nend  \nvariable modify variable_name=part_box &\n      string=SOLID3\nfor variable_name=ipp  start_value=1  end_value=17\ncontact create &\n  contact_name = .(eval(MODEL_name)).(eval(\"con_\"//rtoi(ipp+add_1)//\"_\"//(eval(part_box)))) &\n      i_geometry_name = (eval(\"SOLID\"//rtoi(ipp+add_1))) &\n      j_geometry_name = (eval(part_box))  &\n      stiffness = (eval(MC_stiffness)) &\n      damping =(eval(MC_damping)) &\n      exponent =(eval(MC_exponent))&\n      dmax =(eval(MC_dmax))  &\n      coulomb_friction = on  &\n      mu_static =(eval(MC_mu_static)) &\n      mu_dynamic =(eval(MC_mu_dynamic)) &\n      stiction_transition_velocity =(MC_sti_tra_vel) &\n      friction_transition_velocity =(MC_fri_tra_vel)\nend  \n!---------------pipe_1-------------!\n variable modify variable_name=part_box &\n      string=SOLID4\nvariable modify variable_name=MC_stiffness  real_value=4.4e8\nvariable modify variable_name=MC_damping    real_value=5e4\nvariable modify variable_name=MC_exponent   real_value=1.5\nvariable modify variable_name=MC_dmax       real_value=0.01\nfor variable_name=ipp  start_value=1  end_value=17\ncontact create &\n  contact_name = .(eval(MODEL_name)).(eval(\"con_\"//rtoi(ipp+add_1)//\"_\"//(eval(part_box)))) &\n      i_geometry_name = (eval(\"SOLID\"//rtoi(ipp+add_1))) &\n      j_geometry_name = (eval(part_box))  &\n      stiffness = (eval(MC_stiffness))    &\n      damping =(eval(MC_damping))         &\n      exponent =(eval(MC_exponent))       &\n      dmax =(eval(MC_dmax))               &\n      coulomb_friction = on               &\n      mu_static =(eval(MC_mu_static))          &\n      mu_dynamic =(eval(MC_mu_dynamic))         &\n      stiction_transition_velocity =(MC_sti_tra_vel) &\n      friction_transition_velocity =(MC_fri_tra_vel)\nend  \nvariable modify variable_name=part_box &\n      string=SOLID5\nfor variable_name=ipp  start_value=1  end_value=17\ncontact create &\n  contact_name = .(eval(MODEL_name)).(eval(\"con_\"//rtoi(ipp+add_1)//\"_\"//(eval(part_box)))) &\n      i_geometry_name = (eval(\"SOLID\"//rtoi(ipp+add_1))) &\n      j_geometry_name = (eval(part_box))  &\n      stiffness = (eval(MC_stiffness)) &\n      damping =(eval(MC_damping)) &\n      exponent =(eval(MC_exponent))&\n      dmax =(eval(MC_dmax))  &\n      coulomb_friction = on  &\n      mu_static =(eval(MC_mu_static)) &\n      mu_dynamic =(eval(MC_mu_dynamic)) &\n      stiction_transition_velocity =(MC_sti_tra_vel) &\n      friction_transition_velocity =(MC_fri_tra_vel)\nend  \n!---------------wheel_loader-------------!\n variable modify variable_name=part_box &\n      string=SOLID6\nvariable modify variable_name=MC_stiffness  real_value=4.4e8\nvariable modify variable_name=MC_damping    real_value=5e4\nvariable modify variable_name=MC_exponent   real_value=1.5\nvariable modify variable_name=MC_dmax       real_value=0.01\nfor variable_name=ipp  start_value=1  end_value=17\ncontact create &\n  contact_name = .(eval(MODEL_name)).(eval(\"con_\"//rtoi(ipp+add_1)//\"_\"//(eval(part_box)))) &\n      i_geometry_name = (eval(\"SOLID\"//rtoi(ipp+add_1))) &\n      j_geometry_name = (eval(part_box))  &\n      stiffness = (eval(MC_stiffness))    &\n      damping =(eval(MC_damping))         &\n      exponent =(eval(MC_exponent))       &\n      dmax =(eval(MC_dmax))               &\n      coulomb_friction = on               &\n      mu_static =(eval(MC_mu_static))          &\n      mu_dynamic =(eval(MC_mu_dynamic))         &\n      stiction_transition_velocity =(MC_sti_tra_vel) &\n      friction_transition_velocity =(MC_fri_tra_vel)\nend  \n!---------------contact_between_balls-------------------!\nvariable modify variable_name=MC_stiffness  real_value=1.64e8\nvariable modify variable_name=MC_damping    real_value=2e4 \nvariable modify variable_name=MC_exponent   real_value=2\nvariable modify variable_name=MC_dmax       real_value=0.1\nvariable modify variable_name=MC_mu_static  real_value=0.35 !静摩擦系数!\nvariable modify variable_name=MC_mu_dynamic real_value=0.3!动摩擦系数!\n!---------------------------------------!\nvariable create variable_name=ipp   integer_value=1\nvariable create variable_name=a      integer_value=1!第一颗子弹的序号!\nvariable create variable_name=b      integer_value=17!最后一颗子弹的序号!\nvariable create variable_name=add_2  integer_value=1\n\nfor variable_name=num_1 start_value=(eval(a)) end_value=(eval(b-1))!两个for循环,依次添加子弹之间的各约束!\n\nfor variable_name=num_2 start_value=(eval(a))  end_value=(eval(b-ipp))\ncontact create &\n  contact_name =.(eval(MODEL_name)).(eval(\"con_\"//rtoi(num_1)//\"_\"//rtoi(num_1+add_2))) &\n      i_geometry_name = (eval(\"SOLID\"//rtoi(num_1+add_1))) &\n      j_geometry_name = (eval(\"SOLID\"//rtoi(num_1+add_1+add_2)))  &\n      stiffness = (eval(MC_stiffness)) &\n      damping =(eval(MC_damping)) &\n      exponent =(eval(MC_exponent))&\n      dmax =(eval(MC_dmax))  &\n      coulomb_friction = on  &\n      mu_static =(eval(MC_mu_static)) &\n      mu_dynamic =(eval(MC_mu_dynamic)) &\n      stiction_transition_velocity =(MC_sti_tra_vel) &\n      friction_transition_velocity =(MC_fri_tra_vel)\nvariable modify variable_name=add_2  integer_value=(eval(add_2+1))\nend\nvariable modify variable_name=ipp integer_value=(eval(ipp+1))\nvariable modify variable_name=add_2 integer_value=1\nend\n\nvariable delete variable_name=ipp\nvariable delete variable_name=a\nvariable delete variable_name=b\n\nvariable delete variable_name=MODEL_name\nvariable delete variable_name=part_box\n\nvariable delete variable_name=add_1\nvariable delete variable_name=add_2\n!-----------------------end------------------------------!\n\n到此为止动力学模型已经搭建完毕,其中一些参数设置一般指接触力参数和仿真步长参数,尤其使接触力参数中的刚度系数和阻尼系数需要查询资料来确定,作者在这一块也没有太明确的方法,文献中显示stiffness标准值是在1.0*e+7~1.0*e+9(N/m)之间，阻尼系数一般取stiffness的0.01%。\n材料参数如表5-1\n\n![35.PNG][35]\n\n表5-1\n\n⑧设置仿真时长和步长开始仿真\n本模型中有17个子弹,200个接触,如果40个子弹,各部分接触达到1000个.仿真时长取决于具体物理场景，仿真步长取决于模型复杂度，步长越小，计算结果越容易收敛，模型越精确，步长过大结果发散后就会报错。但是步长过小计算就变慢，合适的步长有利于模型仿真计算。\n本案例中步长给0.0005~0.001比较合适，时长给2s既可以说明问题如图。\n\n![36.PNG][36]\n\n图5-21仿真细节参数\n⑨查看仿真结果输出物理量曲线或者动画,细化模型参数,模型正确即可指导方案迭代。\n⑩一般的搭建过程如图,徐要验证和迭代框图5-21。\n\n![37.PNG][37]\n\n    虚拟样机的需要按照上述的流程循环迭代,不能凭空搭建样机,要有实验数据做基础,有样机迭代使虚拟样机模型越来越精确,模型越精确越有利于实际工程的分析。当一个模型搭建正确之后,类似的机构搭建周期将会缩短。\n⑪查看仿真结果输出物理量曲线或者动画,细化模型参数,模型正确即可指导方案迭代。\n（3）后处理模块将样机的虚拟数据输出成曲线或者生成直观的动画来查看。\n后处理数据需要在模型中调用，采用measure命令即可调取其中的参数，本例中关心拨弹电机的扭矩是够用，故在【模型树】>【motions】>【右键motion_1】>【measure】按照如图5-22设置>【apply】。\n\n![38.PNG][38]\n\n图5-22 Measure按钮\n输出的扭矩图如5-23\n\n![39.PNG][39]\n\n另外可以通【功能区】>【Results】>【Postprocessor】进入后处理模块【空白页右键】>【Load Animation】进行动画输出如图5-33，红色框中是播放暂停好和录制按钮。\n\n![40.PNG][40]\n\n还有其他感兴趣的任意物理量均可输出，通过对数据和动画的分析寻找结构优化的突破点，事半功倍。\n6.结论\n所提到的Solidwoks搭建动力学模型导入Adams中进行计算,对于新手来讲比较容易上手,能在短时间内搭建出动力学模型,并且简单的机械系统的仿真计算结果是可信的.而一些复杂些的系统求解精度就很低,和实际情况不太相符.在做拨弹仿真中就出现实体实体间的互相侵入太多的情况,目前还没找到原因.故复杂模型建议使用以下叙述的模型搭建方法。\n虚拟样机需要在建立后，根据物理样机修改才能得到更精确的仿真结果。\n各种仿真软件都只是工具，建模的关键还在于正确的工况分析与合理的参数设置，这些都是在仿真过程中逐渐完成的。如何把建立正确的物理样机以及仿真后数据的分析与改进方向是需要人工分析完成的。\n7.写在最后的预告\n各位朋友们，如果大家觉得这部分比较有趣的话，下一次可以和大家分享机器人学的部分知识，先从运动学和动力学开始吧，比如D-H法，拉格朗日方程，牛顿-欧拉方程，以及这些数理知识是如何应用在机器人设计中的，有机会的话下次见啦！\n\n\n\n\n\n  [1]: /old_images/2020/07/1225674126.png\n  [2]: /old_images/2020/07/51341367.png\n  [3]: /old_images/2020/07/1260733011.png\n  [4]: /old_images/2020/07/4243678235.png\n  [5]: /old_images/2020/07/3134056928.png\n  [6]: /old_images/2020/07/3001651570.png\n  [7]: /old_images/2020/07/2541934723.png\n  [8]: /old_images/2020/07/723480778.png\n  [9]: /old_images/2020/07/962343059.png\n  [10]: /old_images/2020/07/2140554824.png\n  [11]: /old_images/2020/07/4097717059.png\n  [12]: /old_images/2020/07/551017501.png\n  [13]: /old_images/2020/07/3819593002.png\n  [14]: /old_images/2020/07/3351283967.png\n  [15]: /old_images/2020/07/1559317015.png\n  [16]: /old_images/2020/07/3888322204.png\n  [17]: /old_images/2020/07/2310258600.png\n  [18]: /old_images/2020/07/291067937.png\n  [19]: /old_images/2020/07/755844939.png\n  [20]: /old_images/2020/07/270229372.png\n  [21]: /old_images/2020/07/3548240241.png\n  [22]: /old_images/2020/07/2308466294.png\n  [23]: /old_images/2020/07/3991564688.png\n  [24]: /old_images/2020/07/162826487.png\n  [25]: /old_images/2020/07/995794732.png\n  [26]: /old_images/2020/07/1501298663.png\n  [27]: /old_images/2020/07/3087868713.png\n  [28]: /old_images/2020/07/2048957230.png\n  [29]: /old_images/2020/07/1700994165.png\n  [30]: /old_images/2020/07/2612196784.png\n  [31]: /old_images/2020/07/2817136246.png\n  [32]: /old_images/2020/07/3860621436.png\n  [33]: /old_images/2020/07/3240034142.png\n  [34]: /old_images/2020/07/2422714402.png\n  [35]: /old_images/2020/07/81368647.png\n  [36]: /old_images/2020/07/249903794.png\n  [37]: /old_images/2020/07/489071846.png\n  [38]: /old_images/2020/07/2066845163.png\n  [39]: /old_images/2020/07/1264423062.png\n  [40]: /old_images/2020/07/3794064227.png\n  [41]: /old_images/2020/07/4181754296.png\n","source":"_posts/新人报到！虚拟样机在机器人领域的应用（入门篇）.md","raw":"title: 新人报到！虚拟样机在机器人领域的应用（入门篇）\ndate: 2020-07-13 13:33:00\ncategories: 开发\ntags: []\ntoc: trues\n---\nHello！大家好呀，我是你们的新朋友，也是宇哥的搭档。先自我介绍一下子哈，我的名字是冯宸，跟栋宇一样是哈工大竞技机器人队的现役队员，大家可以叫我Albert，主要是从事机械方向的工作，当然嵌入式和视觉方面也有（cai）所（de）涉（yi）猎（pi）。前几天偶然发现了栋宇的Blog，就想着抛砖引玉写一篇科普小文章，奈何才疏学浅再加上这几天事情比较多，就搁置了下来，不过今天刚好有时间，就尝试把自己之前弄的一些基础的小东西来支持一下我宇哥。好啦！废话不多说上才艺！\n1. 虚拟样机技术简介\n虚拟样机技术一般在大型复杂系统的产品设计中应用，虚拟样机技术 (Virtual Prototyping Technology)是指在产品开发设计过程中，将分散的零部件设计和分析技术融合在一起,在计算机上建造出整体模型,并针对该产品在投入使用后的各种工况进行仿真分析，预测产品的整体性能，通过仿真结果指导改进设计、提高产品性能。\n一般流程是在仿真软件中搭建一个动力学模型来模拟系统工作时的工作状态,通过数据输出(位移、速度、加速度)或者仿真动画输出来观察和分析系统的可靠性，分析结果用来指导物理样机 的版本迭代。\n在RoboMaster 比赛中,如果能搭建正确的战车一些核心模块的虚拟样机,在方案试验阶段能节省很大一部分的人力成本资金成本和时间成本.并且能在分析问题时有一定说服力的依据而不是只停留在经验层面上,解决问题一针见血。\n2. 常用虚拟样机软件\n自然界广泛存在四种物理场：温度场、电磁场、结构(位移、应力、应变)场、流场 。\n不同的工程所分析的物理场不一样,不同的物理场所应用的公式理论和仿真软件也不一样.本文主要针对robomaster 比赛中机械仿真案例进行阐述.目前来看主要是运用结构场和流场 进行建模分析.其中涉及到多体动力学分析和静力学分析以及流体力学分析。一般涉及到软件Solidworks、Adams、Ansys workbench、Fluent... 等。\nSolidworks 主要进行三维建模设计也可进行关键零件的静力学分析(Simulition静力学模块)和动力学模型搭建(motion模块)。\nAdams 是多体动力学仿真计算中最常用的软件,也是本文的中点阐述对象.可以进行动力学模型搭建(View模块)仿真求解(Solver模块)以及数据处理模块(Postprocessor模块)\nAnsys 是有限元仿真中常用软件，可以进行静力学分析(Static Structural模块)也可以进行碰撞分析(LS-dyna模块)还有流场分析(Fluid Flow模块)，Workbench集成了很多有限元模块，可以共享各自的结果数据使Ansys的功能异常强大。\n结构场是最主要的分析场.本文是在结构场中以步兵拨弹模块 为例进行展开系统的虚拟样机搭建过程.研究Adams虚拟样机中17mm子弹在弹仓中的运动状态和拨轮受力情况，指导拨弹模块的改进，进而提高射频满足比赛要求。\n3. 搭建虚拟样机的动力学模型\n简单的机械系统可以搭建数学模型进行动力学分析,但是像拨弹这中多自由度的复杂系统很难或者无法直接搭建整个拨弹过程的数学模型,只能通过多体动力学软件搭间接搭建数学模型进行迭代计算和过程动画模拟来分析问题。\n虚拟样机其实包括建模、仿真、后处理.建模即创建样机添加工况,仿真即是求解方程,由计算机幕后完成,后处理主要是查看动画以及输出一些感兴趣的物理量,复杂的由专业后处理模块Adams/PostProcessor进行。\n在Solidworks中的motion模块和Adams View中均可搭建动力学模型。Solidworks中操作比较简单，对于大多数同学来讲上手比较快。可以把模型在SW中搭建好之后导入到Adams进行求解计算，这样可以在短时间内完成一个简单系统的仿真工作，不过如果需要更精确的求解计算建议还是使用Adams搭建模型比较好，求解更精确。\n\n4.在Solidworks中简化模型导入Adams计算和后处理\n（1）在solidworks中简化拨弹模块，压缩不影响本次研究问题的无关零件(发射模块、弹舱盖、其他保护壳等)。并添加上子弹,子弹是阵列生成,需要右键解散阵列 .所有零件应赋材料(子弹材料TPE,用PA代替)如图4-1到图4-2的简化。\n![1.PNG][1]\n\n\n图4-1简化前\t图4-2简化后\n（2）打开【motion】插件,进入motion模块(如没有在→插件中勾选motion),在左下角将页面切换至【运动算例1】 ,将下拉菜单【动画】切换到【motion分析】 ,依次添加各个实体间的接触力contact(球与球之间、球与拨轮之间、球与弹舱之间),检查弹舱为固定状态,最后设置重力 .到此为止,模型搭建完毕,驱动马达可以不添加,放在Adams 中操作.图4-3是各按钮位置。\n![2.PNG][2]\n\n\n图4-3 motion模块的操作界面\n在动力学模型中每个实体之间的接触是靠添加两个物体间的接触力实现的,在Adams和Solidworks中每个接触均有8个参数(图4-7中标出),四个碰撞参数:Stiffness(刚度系数)、Force Exponent(刚度指数)、Damping(阻尼系数)、Penetration Depth(最大穿透值),四个库仑摩擦参数:Static Coefficient(静摩擦系数)、Dynamic Coefficient(动摩擦系数)、Stiction Transition Vel(静摩擦过渡速度)、Friction Transition Vel(动摩擦过渡速度), 表3-1给出大致参数确定方法，也可参考附件data文件夹下《ADAMS中接触的定义及参数设置》.图4-4和图4-5方便理解各个参数的意义。\n![3.PNG][3]\n\n\n表3-1 Impact接触参数与Coulomb摩擦参数\n\n![4.PNG][4]\n\t\n图4-4 Impact接触参数参考图\t图4-5 Coulomb摩擦参数参考图\n\n![5.PNG][5]\t\n\n图4-6 各球之间接触\t图4-7各球之间的接触参数设置\n图4-6为添加球和球接触中实体选择操作,可以看出不勾选接触组时,添加的是所选择各实体间的接触,17颗球之间一共有136个接触.图4-7为球和球之间的接触参数设置(推荐)。\n\n![6.PNG][6]\n\n图4-8球和各个弹舱零件的接触\t图4-9 球与弹舱之间的接触参数设置\n图4-8使用【接触组】添加接触,球和拨轮以及球和弹舱的接触需要使用接触组,即球为一组与另外三个零件分别添加接触,各球之间接触不会被重复添加,在图中看出17个子弹与四个零件间分别添加接触,共68个接触. 图4-9为球和弹舱之间的接触参数设置(推荐)。\n另外拨轮和球之间的接触同样使用接触组,系数设置中将图4-9中【Stiffness】(刚度)系数改为400即可。\n使用Solidworks 方便交互式批量添加各实体间的接触力,Adams 中接触力的添加比较难操作.多个实体之间只有用脚本命令进行添加比较方便。\n最后添加上重力。\n（3）导入到Adams中,检查模型,稍作修改,一些复杂的约束用简单约束来替换,在Solidworks 中的互相固连的零件可以进行两种操作①两个零件用Fixed约束锁死②使用Boolean运算进行零件合并,给拨轮添加Revolute铰接约束,在铰接约束上添加motion驱动.打开求解器进行运算即可。\n\t\n![7.PNG][7]\n\n图4-10计算按钮\t图4-11 Solidworks与Adams的接口\n把模型按照第一第二步搭建完之后,点击【计算】按钮(图4-10),计算结果一般都会报错可以忽略,Solidworks中的求解器计算很容易失败,所以只用motion做模型搭建这种前处理工作.右键模型名称输出Adams(图4-11),输出英文命名的.adm文件和一些.xmt_bin以及.res文件均保存在英文路径下.附件中例程保存在 adams_file\\project\\model\\adams_1中。\n\t\n![8.PNG][8]\n\n图4-12导入.adm文件\t图4-13 MKS单位制设置\n打开Adams导入.adm文件,新建模型“loader_1”,设置单位制。\n\t\n![9.PNG][9]\n\n图4-14 Connectors约束\t图4-15 添加Fixed约束\n\n![10.PNG][10]\n\n图4-15 Fixed(固定)和Revolute(旋转)约束\n在Adams中删除【Connectors】中所有约束,将几个固定零件间添加Fixed约束(固定锁死)。\n\t\n![11.PNG][11]\n\n图4-16 右键→Appearance\t图4-17 Appearance→Color\n更改拨轮颜色为Red,方便观察和操作,如图4-16和图4-17.也可以根据需要更改其他零件颜色.图4-17中【Visibility】点选off即可隐藏该零件,该操作同样适用于其他类型信息,如Connectors、Motion、Force等。\n\t\n![12.PNG][12]\n\n图4-18添加Revolute(旋转)约束\t图4-19 Revolute(旋转)约束结果\n在拨轮和弹舱中间添加旋转副,操作如图4-18结果如图4-19。\n\n![13.PNG][13]\n\n图4-20 Rotational Joint motion(旋转驱动)\n\n![14.PNG][14]\t\n\n图4-20 motion结果\t图4-21 motion参数\n    将旋转驱动添加到拨轮的旋转副上。\n在joint_4上添加motion_1,参数设置如图4-21。\n17mm子弹材料为TPE,密度970 kg/m³弹性模量3.4GPa,泊松比0.32(近似)。\n\t\n![15.PNG][15]\n\n图4-22 新建材料\t图4-23 TPE材料参数\n【body】树下右键其中一个球单击【Modify】, 出现对话框如图4-22在【Define Mass By】下拉菜单选择【Geometry and Material Type】,在【Material Type】中右键出现图中对话框,依次选取【Material】→【Create】会跳出对话框如图4-23，按照TPE参数设置单击【Apply】→【ok】,然后单击图4-22中【Apply】即发现图中材料参数刷新至新建TPE材料.依次添加剩余球的材料和弹仓材料(【Material】→【Guesses】→【aluminum】)。模型搭建完毕,进入simulation进行求解计算。\n\n![16.PNG][16]\n\n图4-24仿真参数设置\n如图4-24仿真正在进行中,左上角为仿真计算过的模型时间,右下角为仿真进程百分比,在Simulation Control对话框中【End Time】为仿真总时长,【Step Size】为仿真步长根据模型复杂程度给定,合理的步长节省仿真时间、提高仿真精度.如果计算报错则检查模型有无物理干涉和严重死点,调整仿真时间继续进行仿真计算,多次仿真计算应勾选【Reset before running】保证每次仿真计算前参数重置.仿真时间由模型复杂度和电脑CPU以及内存而定,如果模型复杂则仿真时间会十几个小时甚至几天，电脑配置稍好些会加快运算效率.另外合理的模型化简和模型搭建也能影响仿真时间。\n关于充分利用电脑性能加快仿真速度,可以开从多线程运算和增大可调用内存两个方面入手。\n多线程运算途径>在Adams/View界面下通过“settings>solver>Executable”菜单打开设置窗口，并勾选More选项，在Thread Count位置输入参与计算的线程数(128).如图4-25。\n\n![17.PNG][17]\n\n图4-25\n增大调用内存途径>开始--程序--MSC.software--MSC.ADAMS--ADAMS settings分别打开Aview和Asolver中的Preference，在右侧memsize一栏中选择huge点击ok保存。重新运行ADAMS即可.如图4-26。\n\n![18.PNG][18]\n\n图4-26\n（4）进入后处理模块Postprocessor,观察动画可以看到子弹在拨轮中的运状态,进行子弹轨迹追踪和一些感兴趣物理量的测量.比如输出电机的驱动扭矩值,进行电机选型.通过仿真动画和数据指导版本迭代改进。\n5.Solidworks提供三维模型,Adams中进行模型搭建和计算及后处理\n（1）Solidworks简化模型,操作过程和流程和4.1中相同,最后将装配体另存成Parasolid(*.x_t)格式如图5-1,导入Adams做前处理.注意:Adams不支中文路径和中文文件名。\n  \n![19.PNG][19]\n\n图5-1导出x_t\n打开Adams View,新建模型导入.x_t文件.单击【New Model】输入自定义模型名称(英文),单击【ok】会新建一个空白模型,【主菜单】>【File】>【import】下拉菜单第一个【File Type】中选择Parasolid,在【File To Read】中右键>【Browse】浏览到目标.x_t文件,在【Model Name】右键选择新建的模型名称.单击【Ok】.模型导入完成.如图5-2。\n\n![20.PNG][20]\n\n图5-2 .x_t导入Adams\n（2）在Adams里面搭建动力学模型.在此之前应掌握Adams图形界面基本操作和工具栏的分布.模型需要用cmd脚本搭建,准确高效,所以要求能读懂简单的编程语言.本章节均用一些简单的命令语言来实现建模操作.这里的脚本编辑器使用的是VScode,桌面新建.txt英文命名后缀改为.cmd,用VScode打开编辑后保存即可。\n【主菜单】>【View】>【Command Window】打开命令窗口,每一步界面操作的命令都会在命令窗口中滚动.可以复制出来修改后使用。\nCmd脚本对拨弹部分建模流程如下①修改Bodies Name②布尔运算操作③定义材料④添加约束⑤添加驱动⑥定义接触力(部分步骤的先后顺序可调)。\n①基本设置\n设置单位制(MKS)和重力方向(-Z)。\n!-------------setting----------------------!\ndefault units length=mm mass=kg force=newton &\n time=Second angle=degrees frequency=hz!units_MKS!\n\nint dia disp dia=gravity_panel!打开对话框重力设置对话框!\nforce modify body gravitational gravity = ACCGRAV_1 &\n      x_comp = 0 &\n      y_comp = 0 &\n      z_comp = -9806.65!-Z轴gravity!\n!-----------------end------------------------!\n②修改Bodies Name\n在模型树中【Bodies】下可以查看各个实体.如果在Solidworks中是中文命名,导入后会重新命名,但是命名均有规律.现需要修改实体名字,方便查看和操作。\n图形界面操作按钮如图5-3,【模型树】>【Bodies】>【任意一组件右键】。\n\n![21.PNG][21]\n\n图5-3 Rename按钮\n   \n    图形界面操作按钮如图5-3,【模型树】>【Bodies】>【任意一组件右键】，根据模型树中的信息,编写modify_name命令如下,\n!-------------modify_part_name---------------!\nentity modify entity =____002    new = wheel_loader\nentity modify entity =____       new = magazin_1\nentity modify entity =_______2   new = sheet\nentity modify entity =______     new = magazin_2\n\nentity modify entity =_17mm____  new = _17mm_____1\nfor variable_name=ip  start_value=1  end_value=17 !for循环批量修改球的name,ip为变量名!\nentity modify entity =(eval(\"_17mm_____\"//rtoi(ip))) new =(eval(\"ball_\"//rtoi(ip)))\nend\n\nentity modify entity =________   new = _________1\nfor variable_name=ip  start_value=1  end_value=2\nentity modify entity =(eval(\"_________\"//rtoi(ip))) new = (eval(\"pipe_\"//rtoi(ip)))\nend\n!-------------------end----------------------!\n根据模型树中的信息,编写modify_name命令如下,通过【主菜单】>【File】>【import】导入.cmd实现对模型的操作如图5-4，\n\n![22.PNG][22]\n\n图5-4 .cmd导入Adams\n操作前后的对比如图5-5和图5-6\n\t\n![23.PNG][23]\n\n图5-5 Bodies Name修改前\t图5-6 Bodies Name修改后\n③布尔运算操作\n在三维模型为DFM(面向制造的设计),不影响功能情况下,使用布尔运算将多个零件合成一个。\n图形界面操作按钮如图5-7,【功能区】>【Bodies】>【Booleans】。\n\n![24.PNG][24]\n\n图5-7 Booleans操作按钮\n根据模型,编写Booleans命令操作如下,\n!-------------Booleans_parts-----------------!\npart merge rigid_body part_name=pipe_2 into_part=pipe_1!将pipe_2合并到pipe_1!\n!-------------------end----------------------!\n操作前和操作后的区别如图5-8和图5-9\n\n![25.PNG][25]\n\n图5-8 布尔合并前\n\n![26.PNG][26]\n\n图5-9 布尔合并后\n④定义材料\n图形界面操作按钮,【模型树】>【Bodies】>【任意一个构件右键】>【Modify】接下来的操作设置如图5-10和图5-11\n\t\n![27.PNG][27]\n\n图5-10 新建材料\t图5-11TPE材料参数\n材料参数:①密度(Density)②弹性模量(Youngs Modulus)③泊松比(Poissons Ratio)\n根据模型,编写Material命令操作如下,\n!-------------modify_material-----------------!\nmaterial create  &                !新建材料TPE!\n      material_name = .materials.TPE  &\n      density = 0.97e-6 &\n      youngs_modulus = 3400  &\n      poissons_ratio = 0.32 \nfor variable_name=ip start_value=1 end_value=17!for循环批量修改!\n part modify rigid mass_properties  &\n      part_name = (eval(\"ball_\"//rtoi(ip)))  &\n      material_type = .materials.TPE\nend\n\npart modify rigid mass_properties  &\n      part_name = pipe_1  &\n      material_type = .materials.aluminum\npart modify rigid mass_properties  &\n      part_name = magazin_1  &\n      material_type = .materials.aluminum\npart modify rigid mass_properties  &\n      part_name = sheet  &\n      material_type = .materials.aluminum\npart modify rigid mass_properties  &\n      part_name = wheel_loader  &\n      material_type = .materials.aluminum\n!-------------------end----------------------!\n修改前后对比如图5-12和图5-13\n\t\n![28.PNG][28]\n\n图5-12 新建材料\t图5-13 TPE材料参数\n⑤添加约束\n在此模型中每个子弹都有6个自由度,不存在约束,剩余零部件都有自己的固定方式.如图5-14中,wheel_loader和ground有个旋转约束,其余零件和ground都是固定约束。\n\n![29.PNG][29]\n\n图5-14 模型树中需要约束的零部件\n图形界面操作按钮如图5-15\n\n![30.PNG][30]\n\n图5-15 Fixed(固定)和Revolute(旋转)约束\n·固定约束(Fixed Joint)\n根据模型,编写Fixed_joint命令操作如下,\n!---------------Fixed_Joint------------------!\nmarker create marker=.ground.MAR_fixed_1 & !在ground上创建marker点命MAR_fixed_1!\nlocation=(LOC_RELATIVE_TO({0,0,0},ground.cm)) &!MAR_fixed_1和ground.cm位置重合!\norientation=0.0,0.0,0.0                          !MAR_fixed_1和ground.cm坐标重合!\nmarker create marker=.sheet.MAR_fixed_1 &!在ground上创建marker点命名MAR_fixed_1!\n  location=(LOC_RELATIVE_TO({0,0, 0},ground.cm)) &!MAR_fixed_1和ground.cm位置合!\n  orientation=0.0, 0.0, 0.0                       !MAR_fixed_1和点ground.cm坐标重合!\nconstraint create joint Fixed &           !在上述创建的两个marker间创建一个固定约束!\n    joint_name=fixed_1 &                   !Fixed约束的名称!\n    i_marker_name=.sheet.MAR_fixed_1 &\n    j_marker_name=.ground.MAR_fixed_1\n\nmarker create marker=.ground.MAR_fixed_1 &\n    location=(LOC_RELATIVE_TO({0,0, 0},ground.cm)) &\n    orientation=0.0, 0.0, 0.0\nmarker create marker=.magazin_1.MAR_fixed_1 &\n    location=(LOC_RELATIVE_TO({0,0, 0},ground.cm)) &\n    orientation=0.0, 0.0, 0.0\nconstraint create joint Fixed &                     !创建固定约束!\n    joint_name=fixed_2 &\n    i_marker_name=.magazin_1.MAR_fixed_1 &\n    j_marker_name=.ground.MAR_fixed_1\n\nmarker create marker=.ground.MAR_fixed_1 &\n    location=(LOC_RELATIVE_TO({0,0,0},ground.cm)) &\n    orientation=0.0, 0.0, 0.0\nmarker create marker=.pipe_1.MAR_fixed_1 &\n    location=(LOC_RELATIVE_TO({0,0,0},ground.cm)) &\n    orientation=0.0, 0.0, 0.0\nconstraint create joint Fixed &                     !创建固定约束!\n    joint_name=fixed_3 &\n    i_marker_name=.pipe_1.MAR_fixed_1 &\n    j_marker_name=.ground.MAR_fixed_1\n!-------------------end----------------------!\n创建Fixed后如图5-16\n\n![31.PNG][31]\n\n图5-16 固定约束的结果图\n·旋转约束(Revolute Joint)\n需要在拨盘(wheel_loader)和ground之间添加旋转约束，根据模型,编写Revolute_joint命令操作如下,\nvariable create variable_name=wheel_name string_value=\"wheel_loader\" !定义变量\"wheel_name\",string_value代表字符串类型!\nmarker create marker=.ground.run_MAR_1 &\n    location=(LOC_RELATIVE_TO({0,0,0},(eval(wheel_name//\".cm\")))) &!\n    orientation=(ORI_RELATIVE_TO({90,90,0},(eval(wheel_name//\".cm\"))))\nmarker create marker=.wheel_loader.run_MAR_2 &\n    location=(LOC_RELATIVE_TO({0,0,0},(eval(wheel_name//\".cm\")))) &\n    orientation=(ORI_RELATIVE_TO({90,90,0},(eval(wheel_name//\".cm\"))))\nconstraint create joint Revolute &              !创建Joint_Revolute!\n    joint_name=run_1 &            !约束名称!\n    i_marker_name=.ground.run_MAR_1 &\n    j_marker_name=.wheel_loader.run_MAR_2\nvariable delete variable_name=wheel_name                    !删除变量!\nAdams中建模命令均是对是通过对Marker点的操作来完成的,拿创建旋转副举例(固定约束同理),分为三步：\ni.创建一个坐标点run_MAR_1,该点在ground上,与wheel_loader.cm重合。\nii.创建另外一个坐标点run_MAR_2,该点在wheel_loader上,依旧与wheel_loader.cm重合。\niii.创建一个转动副,转动副名字为.loader_2.run_1,他是由于两个坐标点发生相对转动构成的,这两个坐标点分是上述两步创建的坐标。\n此外上述脚本开头定义了一个字符串变量wheel_name,在创建Joint中使用,结尾删除.使用变量可以方便代码移植。\n⑥添加驱动\nAdams中驱动一般添加在旋转副或者移动副上,拨弹模块只需添加拨盘旋转，图形界面操作按钮如图5-17\n\n![32.PNG][32]\n\n图5-17 Rotational Joint motion(旋转驱动)\n根据模型,编写Joint Motion命令操作如下，\n!-------------Revolute_Joint----------------!\nvariable creat variable_name=MC_run_1 string_value=\"step(time,0.1,0,0.3,-360d)\"!电机转速!\nconstraint create motion motion_name=.loader_2.motion_1 &\n           joint=.loader_2.run_1 &                 !motion添加在run_1上!\n           type=rotational &                       !类型是转动!\n           time_derivative=velocity &              !驱动类型为velocity(速度)!\n           function=(eval(MC_run_1))               !调用定义的变量MC_run_1!\n!-------------------end----------------------!\n使用step函数定义驱动,step函数：\nSTEP（time，1，0d，2，20d）+STEP（time，6，0d，12，-40）  \n意义：1秒到2秒：从0递增至20d；\n2秒到6秒：保持电机输出数值为20d不变；\n6秒到12秒：由20d递减40d，结果为-20d\n旋转约束和驱动添加之后的结果如图5-18\n\n![33.PNG][33]\n\n图5-18添加旋转约束和驱动\n⑦定义接触力\n在Adams中所有的碰撞接触的均应添加接触力。\n该模型中接触力的添加操作要稍微复杂,每个球都有6个自由度,所以每两个球之间都要有添加接触力,第四节中已经说明球之间需要添加136个接触力,需要使用命令批量添加，准确高效。\n图形界面操作按钮如图5-19【功能区】>【Forces】>【Special Forces】>【Create a contact】。\n\n![34.PNG][34]\n\n图5-19 添加实体间接触力按钮\n根据模型,编写Create contact命令操作如下\n!------------create_contact_between_solids--------------!\nvariable create variable_name=MODEL_name string_value=\"loader_2\"!模型名称!\nvariable create variable_name=part_box string_value=\"CSG_4\"!被接触对象!\n\nvariable create variable_name=add_1 integer_value=6!子弹Body名称和SOLID名称的序号差!\n  \nvariable create variable_name=MC_stiffness  real_value=164 !刚度系数,计算公式参考stiffness.m!\nvariable create variable_name=MC_damping    real_value=0.5 !阻尼系数!\nvariable create variable_name=MC_exponent   real_value=2 !指数!\nvariable create variable_name=MC_dmax       real_value=0.00005!最大实体入侵!\n\nvariable create variable_name=MC_mu_static  real_value=0.7 !静摩擦系数!\nvariable create variable_name=MC_mu_dynamic real_value=0.65!动摩擦系数!\nvariable create variable_name=MC_sti_tra_vel real_value=0.1!静摩擦过渡速度!\nvariable create variable_name=MC_fri_tra_vel real_value=10 !动摩擦过渡速度!\n\n!---------------sheet-------------!\n variable modify variable_name=part_box &\n      string=SOLID2                           !修改part_box为sheet的Solid!\nvariable modify variable_name=MC_stiffness  real_value=4.4e8\nvariable modify variable_name=MC_damping    real_value=5e4\nvariable modify variable_name=MC_exponent   real_value=1.5\nvariable modify variable_name=MC_dmax       real_value=0.01\nfor variable_name=ipp  start_value=1  end_value=17\ncontact create &\n  contact_name = .(eval(MODEL_name)).(eval(\"con_\"//rtoi(ipp+add_1)//\"_\"//(eval(part_box)))) &\n      i_geometry_name = (eval(\"SOLID\"//rtoi(ipp+add_1))) &\n      j_geometry_name = (eval(part_box))  &\n      stiffness = (eval(MC_stiffness))    &\n      damping =(eval(MC_damping))         &\n      exponent =(eval(MC_exponent))       &\n      dmax =(eval(MC_dmax))               &\n      coulomb_friction = on               &\n      mu_static =(eval(MC_mu_static))          &\n      mu_dynamic =(eval(MC_mu_dynamic))         &\n      stiction_transition_velocity =(MC_sti_tra_vel) &\n      friction_transition_velocity =(MC_fri_tra_vel)\nend  \n!---------------magazin_1-------------!\n variable modify variable_name=part_box &\n      string=SOLID1\nvariable modify variable_name=MC_stiffness  real_value=4.4e8\nvariable modify variable_name=MC_damping    real_value=5e4\nvariable modify variable_name=MC_exponent   real_value=1.3\nvariable modify variable_name=MC_dmax       real_value=0.01\nfor variable_name=ipp  start_value=1  end_value=17\ncontact create &\n  contact_name = .(eval(MODEL_name)).(eval(\"con_\"//rtoi(ipp+add_1)//\"_\"//(eval(part_box)))) &\n      i_geometry_name = (eval(\"SOLID\"//rtoi(ipp+add_1))) &\n      j_geometry_name = (eval(part_box))  &\n      stiffness = (eval(MC_stiffness))    &\n      damping =(eval(MC_damping))         &\n      exponent =(eval(MC_exponent))       &\n      dmax =(eval(MC_dmax))               &\n      coulomb_friction = on               &\n      mu_static =(eval(MC_mu_static))          &\n      mu_dynamic =(eval(MC_mu_dynamic))         &\n      stiction_transition_velocity =(MC_sti_tra_vel) &\n      friction_transition_velocity =(MC_fri_tra_vel)\nend  \nvariable modify variable_name=part_box &\n      string=SOLID3\nfor variable_name=ipp  start_value=1  end_value=17\ncontact create &\n  contact_name = .(eval(MODEL_name)).(eval(\"con_\"//rtoi(ipp+add_1)//\"_\"//(eval(part_box)))) &\n      i_geometry_name = (eval(\"SOLID\"//rtoi(ipp+add_1))) &\n      j_geometry_name = (eval(part_box))  &\n      stiffness = (eval(MC_stiffness)) &\n      damping =(eval(MC_damping)) &\n      exponent =(eval(MC_exponent))&\n      dmax =(eval(MC_dmax))  &\n      coulomb_friction = on  &\n      mu_static =(eval(MC_mu_static)) &\n      mu_dynamic =(eval(MC_mu_dynamic)) &\n      stiction_transition_velocity =(MC_sti_tra_vel) &\n      friction_transition_velocity =(MC_fri_tra_vel)\nend  \n!---------------pipe_1-------------!\n variable modify variable_name=part_box &\n      string=SOLID4\nvariable modify variable_name=MC_stiffness  real_value=4.4e8\nvariable modify variable_name=MC_damping    real_value=5e4\nvariable modify variable_name=MC_exponent   real_value=1.5\nvariable modify variable_name=MC_dmax       real_value=0.01\nfor variable_name=ipp  start_value=1  end_value=17\ncontact create &\n  contact_name = .(eval(MODEL_name)).(eval(\"con_\"//rtoi(ipp+add_1)//\"_\"//(eval(part_box)))) &\n      i_geometry_name = (eval(\"SOLID\"//rtoi(ipp+add_1))) &\n      j_geometry_name = (eval(part_box))  &\n      stiffness = (eval(MC_stiffness))    &\n      damping =(eval(MC_damping))         &\n      exponent =(eval(MC_exponent))       &\n      dmax =(eval(MC_dmax))               &\n      coulomb_friction = on               &\n      mu_static =(eval(MC_mu_static))          &\n      mu_dynamic =(eval(MC_mu_dynamic))         &\n      stiction_transition_velocity =(MC_sti_tra_vel) &\n      friction_transition_velocity =(MC_fri_tra_vel)\nend  \nvariable modify variable_name=part_box &\n      string=SOLID5\nfor variable_name=ipp  start_value=1  end_value=17\ncontact create &\n  contact_name = .(eval(MODEL_name)).(eval(\"con_\"//rtoi(ipp+add_1)//\"_\"//(eval(part_box)))) &\n      i_geometry_name = (eval(\"SOLID\"//rtoi(ipp+add_1))) &\n      j_geometry_name = (eval(part_box))  &\n      stiffness = (eval(MC_stiffness)) &\n      damping =(eval(MC_damping)) &\n      exponent =(eval(MC_exponent))&\n      dmax =(eval(MC_dmax))  &\n      coulomb_friction = on  &\n      mu_static =(eval(MC_mu_static)) &\n      mu_dynamic =(eval(MC_mu_dynamic)) &\n      stiction_transition_velocity =(MC_sti_tra_vel) &\n      friction_transition_velocity =(MC_fri_tra_vel)\nend  \n!---------------wheel_loader-------------!\n variable modify variable_name=part_box &\n      string=SOLID6\nvariable modify variable_name=MC_stiffness  real_value=4.4e8\nvariable modify variable_name=MC_damping    real_value=5e4\nvariable modify variable_name=MC_exponent   real_value=1.5\nvariable modify variable_name=MC_dmax       real_value=0.01\nfor variable_name=ipp  start_value=1  end_value=17\ncontact create &\n  contact_name = .(eval(MODEL_name)).(eval(\"con_\"//rtoi(ipp+add_1)//\"_\"//(eval(part_box)))) &\n      i_geometry_name = (eval(\"SOLID\"//rtoi(ipp+add_1))) &\n      j_geometry_name = (eval(part_box))  &\n      stiffness = (eval(MC_stiffness))    &\n      damping =(eval(MC_damping))         &\n      exponent =(eval(MC_exponent))       &\n      dmax =(eval(MC_dmax))               &\n      coulomb_friction = on               &\n      mu_static =(eval(MC_mu_static))          &\n      mu_dynamic =(eval(MC_mu_dynamic))         &\n      stiction_transition_velocity =(MC_sti_tra_vel) &\n      friction_transition_velocity =(MC_fri_tra_vel)\nend  \n!---------------contact_between_balls-------------------!\nvariable modify variable_name=MC_stiffness  real_value=1.64e8\nvariable modify variable_name=MC_damping    real_value=2e4 \nvariable modify variable_name=MC_exponent   real_value=2\nvariable modify variable_name=MC_dmax       real_value=0.1\nvariable modify variable_name=MC_mu_static  real_value=0.35 !静摩擦系数!\nvariable modify variable_name=MC_mu_dynamic real_value=0.3!动摩擦系数!\n!---------------------------------------!\nvariable create variable_name=ipp   integer_value=1\nvariable create variable_name=a      integer_value=1!第一颗子弹的序号!\nvariable create variable_name=b      integer_value=17!最后一颗子弹的序号!\nvariable create variable_name=add_2  integer_value=1\n\nfor variable_name=num_1 start_value=(eval(a)) end_value=(eval(b-1))!两个for循环,依次添加子弹之间的各约束!\n\nfor variable_name=num_2 start_value=(eval(a))  end_value=(eval(b-ipp))\ncontact create &\n  contact_name =.(eval(MODEL_name)).(eval(\"con_\"//rtoi(num_1)//\"_\"//rtoi(num_1+add_2))) &\n      i_geometry_name = (eval(\"SOLID\"//rtoi(num_1+add_1))) &\n      j_geometry_name = (eval(\"SOLID\"//rtoi(num_1+add_1+add_2)))  &\n      stiffness = (eval(MC_stiffness)) &\n      damping =(eval(MC_damping)) &\n      exponent =(eval(MC_exponent))&\n      dmax =(eval(MC_dmax))  &\n      coulomb_friction = on  &\n      mu_static =(eval(MC_mu_static)) &\n      mu_dynamic =(eval(MC_mu_dynamic)) &\n      stiction_transition_velocity =(MC_sti_tra_vel) &\n      friction_transition_velocity =(MC_fri_tra_vel)\nvariable modify variable_name=add_2  integer_value=(eval(add_2+1))\nend\nvariable modify variable_name=ipp integer_value=(eval(ipp+1))\nvariable modify variable_name=add_2 integer_value=1\nend\n\nvariable delete variable_name=ipp\nvariable delete variable_name=a\nvariable delete variable_name=b\n\nvariable delete variable_name=MODEL_name\nvariable delete variable_name=part_box\n\nvariable delete variable_name=add_1\nvariable delete variable_name=add_2\n!-----------------------end------------------------------!\n\n到此为止动力学模型已经搭建完毕,其中一些参数设置一般指接触力参数和仿真步长参数,尤其使接触力参数中的刚度系数和阻尼系数需要查询资料来确定,作者在这一块也没有太明确的方法,文献中显示stiffness标准值是在1.0*e+7~1.0*e+9(N/m)之间，阻尼系数一般取stiffness的0.01%。\n材料参数如表5-1\n\n![35.PNG][35]\n\n表5-1\n\n⑧设置仿真时长和步长开始仿真\n本模型中有17个子弹,200个接触,如果40个子弹,各部分接触达到1000个.仿真时长取决于具体物理场景，仿真步长取决于模型复杂度，步长越小，计算结果越容易收敛，模型越精确，步长过大结果发散后就会报错。但是步长过小计算就变慢，合适的步长有利于模型仿真计算。\n本案例中步长给0.0005~0.001比较合适，时长给2s既可以说明问题如图。\n\n![36.PNG][36]\n\n图5-21仿真细节参数\n⑨查看仿真结果输出物理量曲线或者动画,细化模型参数,模型正确即可指导方案迭代。\n⑩一般的搭建过程如图,徐要验证和迭代框图5-21。\n\n![37.PNG][37]\n\n    虚拟样机的需要按照上述的流程循环迭代,不能凭空搭建样机,要有实验数据做基础,有样机迭代使虚拟样机模型越来越精确,模型越精确越有利于实际工程的分析。当一个模型搭建正确之后,类似的机构搭建周期将会缩短。\n⑪查看仿真结果输出物理量曲线或者动画,细化模型参数,模型正确即可指导方案迭代。\n（3）后处理模块将样机的虚拟数据输出成曲线或者生成直观的动画来查看。\n后处理数据需要在模型中调用，采用measure命令即可调取其中的参数，本例中关心拨弹电机的扭矩是够用，故在【模型树】>【motions】>【右键motion_1】>【measure】按照如图5-22设置>【apply】。\n\n![38.PNG][38]\n\n图5-22 Measure按钮\n输出的扭矩图如5-23\n\n![39.PNG][39]\n\n另外可以通【功能区】>【Results】>【Postprocessor】进入后处理模块【空白页右键】>【Load Animation】进行动画输出如图5-33，红色框中是播放暂停好和录制按钮。\n\n![40.PNG][40]\n\n还有其他感兴趣的任意物理量均可输出，通过对数据和动画的分析寻找结构优化的突破点，事半功倍。\n6.结论\n所提到的Solidwoks搭建动力学模型导入Adams中进行计算,对于新手来讲比较容易上手,能在短时间内搭建出动力学模型,并且简单的机械系统的仿真计算结果是可信的.而一些复杂些的系统求解精度就很低,和实际情况不太相符.在做拨弹仿真中就出现实体实体间的互相侵入太多的情况,目前还没找到原因.故复杂模型建议使用以下叙述的模型搭建方法。\n虚拟样机需要在建立后，根据物理样机修改才能得到更精确的仿真结果。\n各种仿真软件都只是工具，建模的关键还在于正确的工况分析与合理的参数设置，这些都是在仿真过程中逐渐完成的。如何把建立正确的物理样机以及仿真后数据的分析与改进方向是需要人工分析完成的。\n7.写在最后的预告\n各位朋友们，如果大家觉得这部分比较有趣的话，下一次可以和大家分享机器人学的部分知识，先从运动学和动力学开始吧，比如D-H法，拉格朗日方程，牛顿-欧拉方程，以及这些数理知识是如何应用在机器人设计中的，有机会的话下次见啦！\n\n\n\n\n\n  [1]: /old_images/2020/07/1225674126.png\n  [2]: /old_images/2020/07/51341367.png\n  [3]: /old_images/2020/07/1260733011.png\n  [4]: /old_images/2020/07/4243678235.png\n  [5]: /old_images/2020/07/3134056928.png\n  [6]: /old_images/2020/07/3001651570.png\n  [7]: /old_images/2020/07/2541934723.png\n  [8]: /old_images/2020/07/723480778.png\n  [9]: /old_images/2020/07/962343059.png\n  [10]: /old_images/2020/07/2140554824.png\n  [11]: /old_images/2020/07/4097717059.png\n  [12]: /old_images/2020/07/551017501.png\n  [13]: /old_images/2020/07/3819593002.png\n  [14]: /old_images/2020/07/3351283967.png\n  [15]: /old_images/2020/07/1559317015.png\n  [16]: /old_images/2020/07/3888322204.png\n  [17]: /old_images/2020/07/2310258600.png\n  [18]: /old_images/2020/07/291067937.png\n  [19]: /old_images/2020/07/755844939.png\n  [20]: /old_images/2020/07/270229372.png\n  [21]: /old_images/2020/07/3548240241.png\n  [22]: /old_images/2020/07/2308466294.png\n  [23]: /old_images/2020/07/3991564688.png\n  [24]: /old_images/2020/07/162826487.png\n  [25]: /old_images/2020/07/995794732.png\n  [26]: /old_images/2020/07/1501298663.png\n  [27]: /old_images/2020/07/3087868713.png\n  [28]: /old_images/2020/07/2048957230.png\n  [29]: /old_images/2020/07/1700994165.png\n  [30]: /old_images/2020/07/2612196784.png\n  [31]: /old_images/2020/07/2817136246.png\n  [32]: /old_images/2020/07/3860621436.png\n  [33]: /old_images/2020/07/3240034142.png\n  [34]: /old_images/2020/07/2422714402.png\n  [35]: /old_images/2020/07/81368647.png\n  [36]: /old_images/2020/07/249903794.png\n  [37]: /old_images/2020/07/489071846.png\n  [38]: /old_images/2020/07/2066845163.png\n  [39]: /old_images/2020/07/1264423062.png\n  [40]: /old_images/2020/07/3794064227.png\n  [41]: /old_images/2020/07/4181754296.png\n","slug":"新人报到！虚拟样机在机器人领域的应用（入门篇）","published":1,"updated":"2020-12-14T12:22:25.068Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipmw0cq00367p19d4u0hr56","content":"<p>Hello！大家好呀，我是你们的新朋友，也是宇哥的搭档。先自我介绍一下子哈，我的名字是冯宸，跟栋宇一样是哈工大竞技机器人队的现役队员，大家可以叫我Albert，主要是从事机械方向的工作，当然嵌入式和视觉方面也有（cai）所（de）涉（yi）猎（pi）。前几天偶然发现了栋宇的Blog，就想着抛砖引玉写一篇科普小文章，奈何才疏学浅再加上这几天事情比较多，就搁置了下来，不过今天刚好有时间，就尝试把自己之前弄的一些基础的小东西来支持一下我宇哥。好啦！废话不多说上才艺！</p>\n<ol>\n<li>虚拟样机技术简介<br>虚拟样机技术一般在大型复杂系统的产品设计中应用，虚拟样机技术 (Virtual Prototyping Technology)是指在产品开发设计过程中，将分散的零部件设计和分析技术融合在一起,在计算机上建造出整体模型,并针对该产品在投入使用后的各种工况进行仿真分析，预测产品的整体性能，通过仿真结果指导改进设计、提高产品性能。<br>一般流程是在仿真软件中搭建一个动力学模型来模拟系统工作时的工作状态,通过数据输出(位移、速度、加速度)或者仿真动画输出来观察和分析系统的可靠性，分析结果用来指导物理样机 的版本迭代。<br>在RoboMaster 比赛中,如果能搭建正确的战车一些核心模块的虚拟样机,在方案试验阶段能节省很大一部分的人力成本资金成本和时间成本.并且能在分析问题时有一定说服力的依据而不是只停留在经验层面上,解决问题一针见血。</li>\n<li>常用虚拟样机软件<br>自然界广泛存在四种物理场：温度场、电磁场、结构(位移、应力、应变)场、流场 。<br>不同的工程所分析的物理场不一样,不同的物理场所应用的公式理论和仿真软件也不一样.本文主要针对robomaster 比赛中机械仿真案例进行阐述.目前来看主要是运用结构场和流场 进行建模分析.其中涉及到多体动力学分析和静力学分析以及流体力学分析。一般涉及到软件Solidworks、Adams、Ansys workbench、Fluent… 等。<br>Solidworks 主要进行三维建模设计也可进行关键零件的静力学分析(Simulition静力学模块)和动力学模型搭建(motion模块)。<br>Adams 是多体动力学仿真计算中最常用的软件,也是本文的中点阐述对象.可以进行动力学模型搭建(View模块)仿真求解(Solver模块)以及数据处理模块(Postprocessor模块)<br>Ansys 是有限元仿真中常用软件，可以进行静力学分析(Static Structural模块)也可以进行碰撞分析(LS-dyna模块)还有流场分析(Fluid Flow模块)，Workbench集成了很多有限元模块，可以共享各自的结果数据使Ansys的功能异常强大。<br>结构场是最主要的分析场.本文是在结构场中以步兵拨弹模块 为例进行展开系统的虚拟样机搭建过程.研究Adams虚拟样机中17mm子弹在弹仓中的运动状态和拨轮受力情况，指导拨弹模块的改进，进而提高射频满足比赛要求。</li>\n<li>搭建虚拟样机的动力学模型<br>简单的机械系统可以搭建数学模型进行动力学分析,但是像拨弹这中多自由度的复杂系统很难或者无法直接搭建整个拨弹过程的数学模型,只能通过多体动力学软件搭间接搭建数学模型进行迭代计算和过程动画模拟来分析问题。<br>虚拟样机其实包括建模、仿真、后处理.建模即创建样机添加工况,仿真即是求解方程,由计算机幕后完成,后处理主要是查看动画以及输出一些感兴趣的物理量,复杂的由专业后处理模块Adams/PostProcessor进行。<br>在Solidworks中的motion模块和Adams View中均可搭建动力学模型。Solidworks中操作比较简单，对于大多数同学来讲上手比较快。可以把模型在SW中搭建好之后导入到Adams进行求解计算，这样可以在短时间内完成一个简单系统的仿真工作，不过如果需要更精确的求解计算建议还是使用Adams搭建模型比较好，求解更精确。</li>\n</ol>\n<p>4.在Solidworks中简化模型导入Adams计算和后处理<br>（1）在solidworks中简化拨弹模块，压缩不影响本次研究问题的无关零件(发射模块、弹舱盖、其他保护壳等)。并添加上子弹,子弹是阵列生成,需要右键解散阵列 .所有零件应赋材料(子弹材料TPE,用PA代替)如图4-1到图4-2的简化。<br><img src=\"/old_images/2020/07/1225674126.png\" alt=\"1.PNG\"></p>\n<p>图4-1简化前    图4-2简化后<br>（2）打开【motion】插件,进入motion模块(如没有在→插件中勾选motion),在左下角将页面切换至【运动算例1】 ,将下拉菜单【动画】切换到【motion分析】 ,依次添加各个实体间的接触力contact(球与球之间、球与拨轮之间、球与弹舱之间),检查弹舱为固定状态,最后设置重力 .到此为止,模型搭建完毕,驱动马达可以不添加,放在Adams 中操作.图4-3是各按钮位置。<br><img src=\"/old_images/2020/07/51341367.png\" alt=\"2.PNG\"></p>\n<p>图4-3 motion模块的操作界面<br>在动力学模型中每个实体之间的接触是靠添加两个物体间的接触力实现的,在Adams和Solidworks中每个接触均有8个参数(图4-7中标出),四个碰撞参数:Stiffness(刚度系数)、Force Exponent(刚度指数)、Damping(阻尼系数)、Penetration Depth(最大穿透值),四个库仑摩擦参数:Static Coefficient(静摩擦系数)、Dynamic Coefficient(动摩擦系数)、Stiction Transition Vel(静摩擦过渡速度)、Friction Transition Vel(动摩擦过渡速度), 表3-1给出大致参数确定方法，也可参考附件data文件夹下《ADAMS中接触的定义及参数设置》.图4-4和图4-5方便理解各个参数的意义。<br><img src=\"/old_images/2020/07/1260733011.png\" alt=\"3.PNG\"></p>\n<p>表3-1 Impact接触参数与Coulomb摩擦参数</p>\n<p><img src=\"/old_images/2020/07/4243678235.png\" alt=\"4.PNG\"></p>\n<p>图4-4 Impact接触参数参考图    图4-5 Coulomb摩擦参数参考图</p>\n<p><img src=\"/old_images/2020/07/3134056928.png\" alt=\"5.PNG\">    </p>\n<p>图4-6 各球之间接触    图4-7各球之间的接触参数设置<br>图4-6为添加球和球接触中实体选择操作,可以看出不勾选接触组时,添加的是所选择各实体间的接触,17颗球之间一共有136个接触.图4-7为球和球之间的接触参数设置(推荐)。</p>\n<p><img src=\"/old_images/2020/07/3001651570.png\" alt=\"6.PNG\"></p>\n<p>图4-8球和各个弹舱零件的接触    图4-9 球与弹舱之间的接触参数设置<br>图4-8使用【接触组】添加接触,球和拨轮以及球和弹舱的接触需要使用接触组,即球为一组与另外三个零件分别添加接触,各球之间接触不会被重复添加,在图中看出17个子弹与四个零件间分别添加接触,共68个接触. 图4-9为球和弹舱之间的接触参数设置(推荐)。<br>另外拨轮和球之间的接触同样使用接触组,系数设置中将图4-9中【Stiffness】(刚度)系数改为400即可。<br>使用Solidworks 方便交互式批量添加各实体间的接触力,Adams 中接触力的添加比较难操作.多个实体之间只有用脚本命令进行添加比较方便。<br>最后添加上重力。<br>（3）导入到Adams中,检查模型,稍作修改,一些复杂的约束用简单约束来替换,在Solidworks 中的互相固连的零件可以进行两种操作①两个零件用Fixed约束锁死②使用Boolean运算进行零件合并,给拨轮添加Revolute铰接约束,在铰接约束上添加motion驱动.打开求解器进行运算即可。</p>\n<p><img src=\"/old_images/2020/07/2541934723.png\" alt=\"7.PNG\"></p>\n<p>图4-10计算按钮    图4-11 Solidworks与Adams的接口<br>把模型按照第一第二步搭建完之后,点击【计算】按钮(图4-10),计算结果一般都会报错可以忽略,Solidworks中的求解器计算很容易失败,所以只用motion做模型搭建这种前处理工作.右键模型名称输出Adams(图4-11),输出英文命名的.adm文件和一些.xmt_bin以及.res文件均保存在英文路径下.附件中例程保存在 adams_file\\project\\model\\adams_1中。</p>\n<p><img src=\"/old_images/2020/07/723480778.png\" alt=\"8.PNG\"></p>\n<p>图4-12导入.adm文件    图4-13 MKS单位制设置<br>打开Adams导入.adm文件,新建模型“loader_1”,设置单位制。</p>\n<p><img src=\"/old_images/2020/07/962343059.png\" alt=\"9.PNG\"></p>\n<p>图4-14 Connectors约束    图4-15 添加Fixed约束</p>\n<p><img src=\"/old_images/2020/07/2140554824.png\" alt=\"10.PNG\"></p>\n<p>图4-15 Fixed(固定)和Revolute(旋转)约束<br>在Adams中删除【Connectors】中所有约束,将几个固定零件间添加Fixed约束(固定锁死)。</p>\n<p><img src=\"/old_images/2020/07/4097717059.png\" alt=\"11.PNG\"></p>\n<p>图4-16 右键→Appearance    图4-17 Appearance→Color<br>更改拨轮颜色为Red,方便观察和操作,如图4-16和图4-17.也可以根据需要更改其他零件颜色.图4-17中【Visibility】点选off即可隐藏该零件,该操作同样适用于其他类型信息,如Connectors、Motion、Force等。</p>\n<p><img src=\"/old_images/2020/07/551017501.png\" alt=\"12.PNG\"></p>\n<p>图4-18添加Revolute(旋转)约束    图4-19 Revolute(旋转)约束结果<br>在拨轮和弹舱中间添加旋转副,操作如图4-18结果如图4-19。</p>\n<p><img src=\"/old_images/2020/07/3819593002.png\" alt=\"13.PNG\"></p>\n<p>图4-20 Rotational Joint motion(旋转驱动)</p>\n<p><img src=\"/old_images/2020/07/3351283967.png\" alt=\"14.PNG\">    </p>\n<p>图4-20 motion结果    图4-21 motion参数<br>    将旋转驱动添加到拨轮的旋转副上。<br>在joint_4上添加motion_1,参数设置如图4-21。<br>17mm子弹材料为TPE,密度970 kg/m³弹性模量3.4GPa,泊松比0.32(近似)。</p>\n<p><img src=\"/old_images/2020/07/1559317015.png\" alt=\"15.PNG\"></p>\n<p>图4-22 新建材料    图4-23 TPE材料参数<br>【body】树下右键其中一个球单击【Modify】, 出现对话框如图4-22在【Define Mass By】下拉菜单选择【Geometry and Material Type】,在【Material Type】中右键出现图中对话框,依次选取【Material】→【Create】会跳出对话框如图4-23，按照TPE参数设置单击【Apply】→【ok】,然后单击图4-22中【Apply】即发现图中材料参数刷新至新建TPE材料.依次添加剩余球的材料和弹仓材料(【Material】→【Guesses】→【aluminum】)。模型搭建完毕,进入simulation进行求解计算。</p>\n<p><img src=\"/old_images/2020/07/3888322204.png\" alt=\"16.PNG\"></p>\n<p>图4-24仿真参数设置<br>如图4-24仿真正在进行中,左上角为仿真计算过的模型时间,右下角为仿真进程百分比,在Simulation Control对话框中【End Time】为仿真总时长,【Step Size】为仿真步长根据模型复杂程度给定,合理的步长节省仿真时间、提高仿真精度.如果计算报错则检查模型有无物理干涉和严重死点,调整仿真时间继续进行仿真计算,多次仿真计算应勾选【Reset before running】保证每次仿真计算前参数重置.仿真时间由模型复杂度和电脑CPU以及内存而定,如果模型复杂则仿真时间会十几个小时甚至几天，电脑配置稍好些会加快运算效率.另外合理的模型化简和模型搭建也能影响仿真时间。<br>关于充分利用电脑性能加快仿真速度,可以开从多线程运算和增大可调用内存两个方面入手。<br>多线程运算途径&gt;在Adams/View界面下通过“settings&gt;solver&gt;Executable”菜单打开设置窗口，并勾选More选项，在Thread Count位置输入参与计算的线程数(128).如图4-25。</p>\n<p><img src=\"/old_images/2020/07/2310258600.png\" alt=\"17.PNG\"></p>\n<p>图4-25<br>增大调用内存途径&gt;开始–程序–MSC.software–MSC.ADAMS–ADAMS settings分别打开Aview和Asolver中的Preference，在右侧memsize一栏中选择huge点击ok保存。重新运行ADAMS即可.如图4-26。</p>\n<p><img src=\"/old_images/2020/07/291067937.png\" alt=\"18.PNG\"></p>\n<p>图4-26<br>（4）进入后处理模块Postprocessor,观察动画可以看到子弹在拨轮中的运状态,进行子弹轨迹追踪和一些感兴趣物理量的测量.比如输出电机的驱动扭矩值,进行电机选型.通过仿真动画和数据指导版本迭代改进。<br>5.Solidworks提供三维模型,Adams中进行模型搭建和计算及后处理<br>（1）Solidworks简化模型,操作过程和流程和4.1中相同,最后将装配体另存成Parasolid(*.x_t)格式如图5-1,导入Adams做前处理.注意:Adams不支中文路径和中文文件名。</p>\n<p><img src=\"/old_images/2020/07/755844939.png\" alt=\"19.PNG\"></p>\n<p>图5-1导出x_t<br>打开Adams View,新建模型导入.x_t文件.单击【New Model】输入自定义模型名称(英文),单击【ok】会新建一个空白模型,【主菜单】&gt;【File】&gt;【import】下拉菜单第一个【File Type】中选择Parasolid,在【File To Read】中右键&gt;【Browse】浏览到目标.x_t文件,在【Model Name】右键选择新建的模型名称.单击【Ok】.模型导入完成.如图5-2。</p>\n<p><img src=\"/old_images/2020/07/270229372.png\" alt=\"20.PNG\"></p>\n<p>图5-2 .x_t导入Adams<br>（2）在Adams里面搭建动力学模型.在此之前应掌握Adams图形界面基本操作和工具栏的分布.模型需要用cmd脚本搭建,准确高效,所以要求能读懂简单的编程语言.本章节均用一些简单的命令语言来实现建模操作.这里的脚本编辑器使用的是VScode,桌面新建.txt英文命名后缀改为.cmd,用VScode打开编辑后保存即可。<br>【主菜单】&gt;【View】&gt;【Command Window】打开命令窗口,每一步界面操作的命令都会在命令窗口中滚动.可以复制出来修改后使用。<br>Cmd脚本对拨弹部分建模流程如下①修改Bodies Name②布尔运算操作③定义材料④添加约束⑤添加驱动⑥定义接触力(部分步骤的先后顺序可调)。<br>①基本设置<br>设置单位制(MKS)和重力方向(-Z)。<br>!————-setting———————-!<br>default units length=mm mass=kg force=newton &amp;<br> time=Second angle=degrees frequency=hz!units_MKS!</p>\n<p>int dia disp dia=gravity_panel!打开对话框重力设置对话框!<br>force modify body gravitational gravity = ACCGRAV_1 &amp;<br>      x_comp = 0 &amp;<br>      y_comp = 0 &amp;<br>      z_comp = -9806.65!-Z轴gravity!<br>!—————–end————————!<br>②修改Bodies Name<br>在模型树中【Bodies】下可以查看各个实体.如果在Solidworks中是中文命名,导入后会重新命名,但是命名均有规律.现需要修改实体名字,方便查看和操作。<br>图形界面操作按钮如图5-3,【模型树】&gt;【Bodies】&gt;【任意一组件右键】。</p>\n<p><img src=\"/old_images/2020/07/3548240241.png\" alt=\"21.PNG\"></p>\n<p>图5-3 Rename按钮</p>\n<pre><code>图形界面操作按钮如图5-3,【模型树】&gt;【Bodies】&gt;【任意一组件右键】，根据模型树中的信息,编写modify_name命令如下,</code></pre>\n<p>!————-modify_part_name—————!<br>entity modify entity =____002    new = wheel_loader<br>entity modify entity =<strong>__       new = magazin_1<br>entity modify entity =_______2   new = sheet<br>entity modify entity =____</strong>     new = magazin_2</p>\n<p>entity modify entity =<em>17mm____  new = <em>17mm_____1<br>for variable_name=ip  start_value=1  end_value=17 !for循环批量修改球的name,ip为变量名!<br>entity modify entity =(eval(“<em>17mm__</em></em></em>“//rtoi(ip))) new =(eval(“ball_”//rtoi(ip)))<br>end</p>\n<p>entity modify entity =<strong>____</strong>   new = _________1<br>for variable_name=ip  start_value=1  end_value=2<br>entity modify entity =(eval(“_________”//rtoi(ip))) new = (eval(“pipe_”//rtoi(ip)))<br>end<br>!——————-end———————-!<br>根据模型树中的信息,编写modify_name命令如下,通过【主菜单】&gt;【File】&gt;【import】导入.cmd实现对模型的操作如图5-4，</p>\n<p><img src=\"/old_images/2020/07/2308466294.png\" alt=\"22.PNG\"></p>\n<p>图5-4 .cmd导入Adams<br>操作前后的对比如图5-5和图5-6</p>\n<p><img src=\"/old_images/2020/07/3991564688.png\" alt=\"23.PNG\"></p>\n<p>图5-5 Bodies Name修改前    图5-6 Bodies Name修改后<br>③布尔运算操作<br>在三维模型为DFM(面向制造的设计),不影响功能情况下,使用布尔运算将多个零件合成一个。<br>图形界面操作按钮如图5-7,【功能区】&gt;【Bodies】&gt;【Booleans】。</p>\n<p><img src=\"/old_images/2020/07/162826487.png\" alt=\"24.PNG\"></p>\n<p>图5-7 Booleans操作按钮<br>根据模型,编写Booleans命令操作如下,<br>!————-Booleans_parts—————–!<br>part merge rigid_body part_name=pipe_2 into_part=pipe_1!将pipe_2合并到pipe_1!<br>!——————-end———————-!<br>操作前和操作后的区别如图5-8和图5-9</p>\n<p><img src=\"/old_images/2020/07/995794732.png\" alt=\"25.PNG\"></p>\n<p>图5-8 布尔合并前</p>\n<p><img src=\"/old_images/2020/07/1501298663.png\" alt=\"26.PNG\"></p>\n<p>图5-9 布尔合并后<br>④定义材料<br>图形界面操作按钮,【模型树】&gt;【Bodies】&gt;【任意一个构件右键】&gt;【Modify】接下来的操作设置如图5-10和图5-11</p>\n<p><img src=\"/old_images/2020/07/3087868713.png\" alt=\"27.PNG\"></p>\n<p>图5-10 新建材料    图5-11TPE材料参数<br>材料参数:①密度(Density)②弹性模量(Youngs Modulus)③泊松比(Poissons Ratio)<br>根据模型,编写Material命令操作如下,<br>!————-modify_material—————–!<br>material create  &amp;                !新建材料TPE!<br>      material_name = .materials.TPE  &amp;<br>      density = 0.97e-6 &amp;<br>      youngs_modulus = 3400  &amp;<br>      poissons_ratio = 0.32<br>for variable_name=ip start_value=1 end_value=17!for循环批量修改!<br> part modify rigid mass_properties  &amp;<br>      part_name = (eval(“ball_”//rtoi(ip)))  &amp;<br>      material_type = .materials.TPE<br>end</p>\n<p>part modify rigid mass_properties  &amp;<br>      part_name = pipe_1  &amp;<br>      material_type = .materials.aluminum<br>part modify rigid mass_properties  &amp;<br>      part_name = magazin_1  &amp;<br>      material_type = .materials.aluminum<br>part modify rigid mass_properties  &amp;<br>      part_name = sheet  &amp;<br>      material_type = .materials.aluminum<br>part modify rigid mass_properties  &amp;<br>      part_name = wheel_loader  &amp;<br>      material_type = .materials.aluminum<br>!——————-end———————-!<br>修改前后对比如图5-12和图5-13</p>\n<p><img src=\"/old_images/2020/07/2048957230.png\" alt=\"28.PNG\"></p>\n<p>图5-12 新建材料    图5-13 TPE材料参数<br>⑤添加约束<br>在此模型中每个子弹都有6个自由度,不存在约束,剩余零部件都有自己的固定方式.如图5-14中,wheel_loader和ground有个旋转约束,其余零件和ground都是固定约束。</p>\n<p><img src=\"/old_images/2020/07/1700994165.png\" alt=\"29.PNG\"></p>\n<p>图5-14 模型树中需要约束的零部件<br>图形界面操作按钮如图5-15</p>\n<p><img src=\"/old_images/2020/07/2612196784.png\" alt=\"30.PNG\"></p>\n<p>图5-15 Fixed(固定)和Revolute(旋转)约束<br>·固定约束(Fixed Joint)<br>根据模型,编写Fixed_joint命令操作如下,<br>!—————Fixed_Joint——————!<br>marker create marker=.ground.MAR_fixed_1 &amp; !在ground上创建marker点命MAR_fixed_1!<br>location=(LOC_RELATIVE_TO({0,0,0},ground.cm)) &amp;!MAR_fixed_1和ground.cm位置重合!<br>orientation=0.0,0.0,0.0                          !MAR_fixed_1和ground.cm坐标重合!<br>marker create marker=.sheet.MAR_fixed_1 &amp;!在ground上创建marker点命名MAR_fixed_1!<br>  location=(LOC_RELATIVE_TO({0,0, 0},ground.cm)) &amp;!MAR_fixed_1和ground.cm位置合!<br>  orientation=0.0, 0.0, 0.0                       !MAR_fixed_1和点ground.cm坐标重合!<br>constraint create joint Fixed &amp;           !在上述创建的两个marker间创建一个固定约束!<br>    joint_name=fixed_1 &amp;                   !Fixed约束的名称!<br>    i_marker_name=.sheet.MAR_fixed_1 &amp;<br>    j_marker_name=.ground.MAR_fixed_1</p>\n<p>marker create marker=.ground.MAR_fixed_1 &amp;<br>    location=(LOC_RELATIVE_TO({0,0, 0},ground.cm)) &amp;<br>    orientation=0.0, 0.0, 0.0<br>marker create marker=.magazin_1.MAR_fixed_1 &amp;<br>    location=(LOC_RELATIVE_TO({0,0, 0},ground.cm)) &amp;<br>    orientation=0.0, 0.0, 0.0<br>constraint create joint Fixed &amp;                     !创建固定约束!<br>    joint_name=fixed_2 &amp;<br>    i_marker_name=.magazin_1.MAR_fixed_1 &amp;<br>    j_marker_name=.ground.MAR_fixed_1</p>\n<p>marker create marker=.ground.MAR_fixed_1 &amp;<br>    location=(LOC_RELATIVE_TO({0,0,0},ground.cm)) &amp;<br>    orientation=0.0, 0.0, 0.0<br>marker create marker=.pipe_1.MAR_fixed_1 &amp;<br>    location=(LOC_RELATIVE_TO({0,0,0},ground.cm)) &amp;<br>    orientation=0.0, 0.0, 0.0<br>constraint create joint Fixed &amp;                     !创建固定约束!<br>    joint_name=fixed_3 &amp;<br>    i_marker_name=.pipe_1.MAR_fixed_1 &amp;<br>    j_marker_name=.ground.MAR_fixed_1<br>!——————-end———————-!<br>创建Fixed后如图5-16</p>\n<p><img src=\"/old_images/2020/07/2817136246.png\" alt=\"31.PNG\"></p>\n<p>图5-16 固定约束的结果图<br>·旋转约束(Revolute Joint)<br>需要在拨盘(wheel_loader)和ground之间添加旋转约束，根据模型,编写Revolute_joint命令操作如下,<br>variable create variable_name=wheel_name string_value=”wheel_loader” !定义变量”wheel_name”,string_value代表字符串类型!<br>marker create marker=.ground.run_MAR_1 &amp;<br>    location=(LOC_RELATIVE_TO({0,0,0},(eval(wheel_name//“.cm”)))) &amp;!<br>    orientation=(ORI_RELATIVE_TO({90,90,0},(eval(wheel_name//“.cm”))))<br>marker create marker=.wheel_loader.run_MAR_2 &amp;<br>    location=(LOC_RELATIVE_TO({0,0,0},(eval(wheel_name//“.cm”)))) &amp;<br>    orientation=(ORI_RELATIVE_TO({90,90,0},(eval(wheel_name//“.cm”))))<br>constraint create joint Revolute &amp;              !创建Joint_Revolute!<br>    joint_name=run_1 &amp;            !约束名称!<br>    i_marker_name=.ground.run_MAR_1 &amp;<br>    j_marker_name=.wheel_loader.run_MAR_2<br>variable delete variable_name=wheel_name                    !删除变量!<br>Adams中建模命令均是对是通过对Marker点的操作来完成的,拿创建旋转副举例(固定约束同理),分为三步：<br>i.创建一个坐标点run_MAR_1,该点在ground上,与wheel_loader.cm重合。<br>ii.创建另外一个坐标点run_MAR_2,该点在wheel_loader上,依旧与wheel_loader.cm重合。<br>iii.创建一个转动副,转动副名字为.loader_2.run_1,他是由于两个坐标点发生相对转动构成的,这两个坐标点分是上述两步创建的坐标。<br>此外上述脚本开头定义了一个字符串变量wheel_name,在创建Joint中使用,结尾删除.使用变量可以方便代码移植。<br>⑥添加驱动<br>Adams中驱动一般添加在旋转副或者移动副上,拨弹模块只需添加拨盘旋转，图形界面操作按钮如图5-17</p>\n<p><img src=\"/old_images/2020/07/3860621436.png\" alt=\"32.PNG\"></p>\n<p>图5-17 Rotational Joint motion(旋转驱动)<br>根据模型,编写Joint Motion命令操作如下，<br>!————-Revolute_Joint—————-!<br>variable creat variable_name=MC_run_1 string_value=”step(time,0.1,0,0.3,-360d)”!电机转速!<br>constraint create motion motion_name=.loader_2.motion_1 &amp;<br>           joint=.loader_2.run_1 &amp;                 !motion添加在run_1上!<br>           type=rotational &amp;                       !类型是转动!<br>           time_derivative=velocity &amp;              !驱动类型为velocity(速度)!<br>           function=(eval(MC_run_1))               !调用定义的变量MC_run_1!<br>!——————-end———————-!<br>使用step函数定义驱动,step函数：<br>STEP（time，1，0d，2，20d）+STEP（time，6，0d，12，-40）<br>意义：1秒到2秒：从0递增至20d；<br>2秒到6秒：保持电机输出数值为20d不变；<br>6秒到12秒：由20d递减40d，结果为-20d<br>旋转约束和驱动添加之后的结果如图5-18</p>\n<p><img src=\"/old_images/2020/07/3240034142.png\" alt=\"33.PNG\"></p>\n<p>图5-18添加旋转约束和驱动<br>⑦定义接触力<br>在Adams中所有的碰撞接触的均应添加接触力。<br>该模型中接触力的添加操作要稍微复杂,每个球都有6个自由度,所以每两个球之间都要有添加接触力,第四节中已经说明球之间需要添加136个接触力,需要使用命令批量添加，准确高效。<br>图形界面操作按钮如图5-19【功能区】&gt;【Forces】&gt;【Special Forces】&gt;【Create a contact】。</p>\n<p><img src=\"/old_images/2020/07/2422714402.png\" alt=\"34.PNG\"></p>\n<p>图5-19 添加实体间接触力按钮<br>根据模型,编写Create contact命令操作如下<br>!————create_contact_between_solids————–!<br>variable create variable_name=MODEL_name string_value=”loader_2”!模型名称!<br>variable create variable_name=part_box string_value=”CSG_4”!被接触对象!</p>\n<p>variable create variable_name=add_1 integer_value=6!子弹Body名称和SOLID名称的序号差!</p>\n<p>variable create variable_name=MC_stiffness  real_value=164 !刚度系数,计算公式参考stiffness.m!<br>variable create variable_name=MC_damping    real_value=0.5 !阻尼系数!<br>variable create variable_name=MC_exponent   real_value=2 !指数!<br>variable create variable_name=MC_dmax       real_value=0.00005!最大实体入侵!</p>\n<p>variable create variable_name=MC_mu_static  real_value=0.7 !静摩擦系数!<br>variable create variable_name=MC_mu_dynamic real_value=0.65!动摩擦系数!<br>variable create variable_name=MC_sti_tra_vel real_value=0.1!静摩擦过渡速度!<br>variable create variable_name=MC_fri_tra_vel real_value=10 !动摩擦过渡速度!</p>\n<p>!—————sheet————-!<br> variable modify variable_name=part_box &amp;<br>      string=SOLID2                           !修改part_box为sheet的Solid!<br>variable modify variable_name=MC_stiffness  real_value=4.4e8<br>variable modify variable_name=MC_damping    real_value=5e4<br>variable modify variable_name=MC_exponent   real_value=1.5<br>variable modify variable_name=MC_dmax       real_value=0.01<br>for variable_name=ipp  start_value=1  end_value=17<br>contact create &amp;<br>  contact_name = .(eval(MODEL_name)).(eval(“con_”//rtoi(ipp+add_1)//“<em>“//(eval(part_box)))) &amp;<br>      i_geometry_name = (eval(“SOLID”//rtoi(ipp+add_1))) &amp;<br>      j_geometry_name = (eval(part_box))  &amp;<br>      stiffness = (eval(MC_stiffness))    &amp;<br>      damping =(eval(MC_damping))         &amp;<br>      exponent =(eval(MC_exponent))       &amp;<br>      dmax =(eval(MC_dmax))               &amp;<br>      coulomb_friction = on               &amp;<br>      mu_static =(eval(MC_mu_static))          &amp;<br>      mu_dynamic =(eval(MC_mu_dynamic))         &amp;<br>      stiction_transition_velocity =(MC_sti_tra_vel) &amp;<br>      friction_transition_velocity =(MC_fri_tra_vel)<br>end<br>!—————magazin_1————-!<br> variable modify variable_name=part_box &amp;<br>      string=SOLID1<br>variable modify variable_name=MC_stiffness  real_value=4.4e8<br>variable modify variable_name=MC_damping    real_value=5e4<br>variable modify variable_name=MC_exponent   real_value=1.3<br>variable modify variable_name=MC_dmax       real_value=0.01<br>for variable_name=ipp  start_value=1  end_value=17<br>contact create &amp;<br>  contact_name = .(eval(MODEL_name)).(eval(“con</em>“//rtoi(ipp+add_1)//“<em>“//(eval(part_box)))) &amp;<br>      i_geometry_name = (eval(“SOLID”//rtoi(ipp+add_1))) &amp;<br>      j_geometry_name = (eval(part_box))  &amp;<br>      stiffness = (eval(MC_stiffness))    &amp;<br>      damping =(eval(MC_damping))         &amp;<br>      exponent =(eval(MC_exponent))       &amp;<br>      dmax =(eval(MC_dmax))               &amp;<br>      coulomb_friction = on               &amp;<br>      mu_static =(eval(MC_mu_static))          &amp;<br>      mu_dynamic =(eval(MC_mu_dynamic))         &amp;<br>      stiction_transition_velocity =(MC_sti_tra_vel) &amp;<br>      friction_transition_velocity =(MC_fri_tra_vel)<br>end<br>variable modify variable_name=part_box &amp;<br>      string=SOLID3<br>for variable_name=ipp  start_value=1  end_value=17<br>contact create &amp;<br>  contact_name = .(eval(MODEL_name)).(eval(“con_”//rtoi(ipp+add_1)//“_”//(eval(part_box)))) &amp;<br>      i_geometry_name = (eval(“SOLID”//rtoi(ipp+add_1))) &amp;<br>      j_geometry_name = (eval(part_box))  &amp;<br>      stiffness = (eval(MC_stiffness)) &amp;<br>      damping =(eval(MC_damping)) &amp;<br>      exponent =(eval(MC_exponent))&amp;<br>      dmax =(eval(MC_dmax))  &amp;<br>      coulomb_friction = on  &amp;<br>      mu_static =(eval(MC_mu_static)) &amp;<br>      mu_dynamic =(eval(MC_mu_dynamic)) &amp;<br>      stiction_transition_velocity =(MC_sti_tra_vel) &amp;<br>      friction_transition_velocity =(MC_fri_tra_vel)<br>end<br>!—————pipe_1————-!<br> variable modify variable_name=part_box &amp;<br>      string=SOLID4<br>variable modify variable_name=MC_stiffness  real_value=4.4e8<br>variable modify variable_name=MC_damping    real_value=5e4<br>variable modify variable_name=MC_exponent   real_value=1.5<br>variable modify variable_name=MC_dmax       real_value=0.01<br>for variable_name=ipp  start_value=1  end_value=17<br>contact create &amp;<br>  contact_name = .(eval(MODEL_name)).(eval(“con</em>“//rtoi(ipp+add_1)//“<em>“//(eval(part_box)))) &amp;<br>      i_geometry_name = (eval(“SOLID”//rtoi(ipp+add_1))) &amp;<br>      j_geometry_name = (eval(part_box))  &amp;<br>      stiffness = (eval(MC_stiffness))    &amp;<br>      damping =(eval(MC_damping))         &amp;<br>      exponent =(eval(MC_exponent))       &amp;<br>      dmax =(eval(MC_dmax))               &amp;<br>      coulomb_friction = on               &amp;<br>      mu_static =(eval(MC_mu_static))          &amp;<br>      mu_dynamic =(eval(MC_mu_dynamic))         &amp;<br>      stiction_transition_velocity =(MC_sti_tra_vel) &amp;<br>      friction_transition_velocity =(MC_fri_tra_vel)<br>end<br>variable modify variable_name=part_box &amp;<br>      string=SOLID5<br>for variable_name=ipp  start_value=1  end_value=17<br>contact create &amp;<br>  contact_name = .(eval(MODEL_name)).(eval(“con_”//rtoi(ipp+add_1)//“_”//(eval(part_box)))) &amp;<br>      i_geometry_name = (eval(“SOLID”//rtoi(ipp+add_1))) &amp;<br>      j_geometry_name = (eval(part_box))  &amp;<br>      stiffness = (eval(MC_stiffness)) &amp;<br>      damping =(eval(MC_damping)) &amp;<br>      exponent =(eval(MC_exponent))&amp;<br>      dmax =(eval(MC_dmax))  &amp;<br>      coulomb_friction = on  &amp;<br>      mu_static =(eval(MC_mu_static)) &amp;<br>      mu_dynamic =(eval(MC_mu_dynamic)) &amp;<br>      stiction_transition_velocity =(MC_sti_tra_vel) &amp;<br>      friction_transition_velocity =(MC_fri_tra_vel)<br>end<br>!—————wheel_loader————-!<br> variable modify variable_name=part_box &amp;<br>      string=SOLID6<br>variable modify variable_name=MC_stiffness  real_value=4.4e8<br>variable modify variable_name=MC_damping    real_value=5e4<br>variable modify variable_name=MC_exponent   real_value=1.5<br>variable modify variable_name=MC_dmax       real_value=0.01<br>for variable_name=ipp  start_value=1  end_value=17<br>contact create &amp;<br>  contact_name = .(eval(MODEL_name)).(eval(“con</em>“//rtoi(ipp+add_1)//“_”//(eval(part_box)))) &amp;<br>      i_geometry_name = (eval(“SOLID”//rtoi(ipp+add_1))) &amp;<br>      j_geometry_name = (eval(part_box))  &amp;<br>      stiffness = (eval(MC_stiffness))    &amp;<br>      damping =(eval(MC_damping))         &amp;<br>      exponent =(eval(MC_exponent))       &amp;<br>      dmax =(eval(MC_dmax))               &amp;<br>      coulomb_friction = on               &amp;<br>      mu_static =(eval(MC_mu_static))          &amp;<br>      mu_dynamic =(eval(MC_mu_dynamic))         &amp;<br>      stiction_transition_velocity =(MC_sti_tra_vel) &amp;<br>      friction_transition_velocity =(MC_fri_tra_vel)<br>end<br>!—————contact_between_balls——————-!<br>variable modify variable_name=MC_stiffness  real_value=1.64e8<br>variable modify variable_name=MC_damping    real_value=2e4<br>variable modify variable_name=MC_exponent   real_value=2<br>variable modify variable_name=MC_dmax       real_value=0.1<br>variable modify variable_name=MC_mu_static  real_value=0.35 !静摩擦系数!<br>variable modify variable_name=MC_mu_dynamic real_value=0.3!动摩擦系数!<br>!—————————————!<br>variable create variable_name=ipp   integer_value=1<br>variable create variable_name=a      integer_value=1!第一颗子弹的序号!<br>variable create variable_name=b      integer_value=17!最后一颗子弹的序号!<br>variable create variable_name=add_2  integer_value=1</p>\n<p>for variable_name=num_1 start_value=(eval(a)) end_value=(eval(b-1))!两个for循环,依次添加子弹之间的各约束!</p>\n<p>for variable_name=num_2 start_value=(eval(a))  end_value=(eval(b-ipp))<br>contact create &amp;<br>  contact_name =.(eval(MODEL_name)).(eval(“con_”//rtoi(num_1)//“_”//rtoi(num_1+add_2))) &amp;<br>      i_geometry_name = (eval(“SOLID”//rtoi(num_1+add_1))) &amp;<br>      j_geometry_name = (eval(“SOLID”//rtoi(num_1+add_1+add_2)))  &amp;<br>      stiffness = (eval(MC_stiffness)) &amp;<br>      damping =(eval(MC_damping)) &amp;<br>      exponent =(eval(MC_exponent))&amp;<br>      dmax =(eval(MC_dmax))  &amp;<br>      coulomb_friction = on  &amp;<br>      mu_static =(eval(MC_mu_static)) &amp;<br>      mu_dynamic =(eval(MC_mu_dynamic)) &amp;<br>      stiction_transition_velocity =(MC_sti_tra_vel) &amp;<br>      friction_transition_velocity =(MC_fri_tra_vel)<br>variable modify variable_name=add_2  integer_value=(eval(add_2+1))<br>end<br>variable modify variable_name=ipp integer_value=(eval(ipp+1))<br>variable modify variable_name=add_2 integer_value=1<br>end</p>\n<p>variable delete variable_name=ipp<br>variable delete variable_name=a<br>variable delete variable_name=b</p>\n<p>variable delete variable_name=MODEL_name<br>variable delete variable_name=part_box</p>\n<p>variable delete variable_name=add_1<br>variable delete variable_name=add_2<br>!———————–end——————————!</p>\n<p>到此为止动力学模型已经搭建完毕,其中一些参数设置一般指接触力参数和仿真步长参数,尤其使接触力参数中的刚度系数和阻尼系数需要查询资料来确定,作者在这一块也没有太明确的方法,文献中显示stiffness标准值是在1.0<em>e+7~1.0</em>e+9(N/m)之间，阻尼系数一般取stiffness的0.01%。<br>材料参数如表5-1</p>\n<p><img src=\"/old_images/2020/07/81368647.png\" alt=\"35.PNG\"></p>\n<p>表5-1</p>\n<p>⑧设置仿真时长和步长开始仿真<br>本模型中有17个子弹,200个接触,如果40个子弹,各部分接触达到1000个.仿真时长取决于具体物理场景，仿真步长取决于模型复杂度，步长越小，计算结果越容易收敛，模型越精确，步长过大结果发散后就会报错。但是步长过小计算就变慢，合适的步长有利于模型仿真计算。<br>本案例中步长给0.0005~0.001比较合适，时长给2s既可以说明问题如图。</p>\n<p><img src=\"/old_images/2020/07/249903794.png\" alt=\"36.PNG\"></p>\n<p>图5-21仿真细节参数<br>⑨查看仿真结果输出物理量曲线或者动画,细化模型参数,模型正确即可指导方案迭代。<br>⑩一般的搭建过程如图,徐要验证和迭代框图5-21。</p>\n<p><img src=\"/old_images/2020/07/489071846.png\" alt=\"37.PNG\"></p>\n<pre><code>虚拟样机的需要按照上述的流程循环迭代,不能凭空搭建样机,要有实验数据做基础,有样机迭代使虚拟样机模型越来越精确,模型越精确越有利于实际工程的分析。当一个模型搭建正确之后,类似的机构搭建周期将会缩短。</code></pre>\n<p>⑪查看仿真结果输出物理量曲线或者动画,细化模型参数,模型正确即可指导方案迭代。<br>（3）后处理模块将样机的虚拟数据输出成曲线或者生成直观的动画来查看。<br>后处理数据需要在模型中调用，采用measure命令即可调取其中的参数，本例中关心拨弹电机的扭矩是够用，故在【模型树】&gt;【motions】&gt;【右键motion_1】&gt;【measure】按照如图5-22设置&gt;【apply】。</p>\n<p><img src=\"/old_images/2020/07/2066845163.png\" alt=\"38.PNG\"></p>\n<p>图5-22 Measure按钮<br>输出的扭矩图如5-23</p>\n<p><img src=\"/old_images/2020/07/1264423062.png\" alt=\"39.PNG\"></p>\n<p>另外可以通【功能区】&gt;【Results】&gt;【Postprocessor】进入后处理模块【空白页右键】&gt;【Load Animation】进行动画输出如图5-33，红色框中是播放暂停好和录制按钮。</p>\n<p><img src=\"/old_images/2020/07/3794064227.png\" alt=\"40.PNG\"></p>\n<p>还有其他感兴趣的任意物理量均可输出，通过对数据和动画的分析寻找结构优化的突破点，事半功倍。<br>6.结论<br>所提到的Solidwoks搭建动力学模型导入Adams中进行计算,对于新手来讲比较容易上手,能在短时间内搭建出动力学模型,并且简单的机械系统的仿真计算结果是可信的.而一些复杂些的系统求解精度就很低,和实际情况不太相符.在做拨弹仿真中就出现实体实体间的互相侵入太多的情况,目前还没找到原因.故复杂模型建议使用以下叙述的模型搭建方法。<br>虚拟样机需要在建立后，根据物理样机修改才能得到更精确的仿真结果。<br>各种仿真软件都只是工具，建模的关键还在于正确的工况分析与合理的参数设置，这些都是在仿真过程中逐渐完成的。如何把建立正确的物理样机以及仿真后数据的分析与改进方向是需要人工分析完成的。<br>7.写在最后的预告<br>各位朋友们，如果大家觉得这部分比较有趣的话，下一次可以和大家分享机器人学的部分知识，先从运动学和动力学开始吧，比如D-H法，拉格朗日方程，牛顿-欧拉方程，以及这些数理知识是如何应用在机器人设计中的，有机会的话下次见啦！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Hello！大家好呀，我是你们的新朋友，也是宇哥的搭档。先自我介绍一下子哈，我的名字是冯宸，跟栋宇一样是哈工大竞技机器人队的现役队员，大家可以叫我Albert，主要是从事机械方向的工作，当然嵌入式和视觉方面也有（cai）所（de）涉（yi）猎（pi）。前几天偶然发现了栋宇的Blog，就想着抛砖引玉写一篇科普小文章，奈何才疏学浅再加上这几天事情比较多，就搁置了下来，不过今天刚好有时间，就尝试把自己之前弄的一些基础的小东西来支持一下我宇哥。好啦！废话不多说上才艺！</p>\n<ol>\n<li>虚拟样机技术简介<br>虚拟样机技术一般在大型复杂系统的产品设计中应用，虚拟样机技术 (Virtual Prototyping Technology)是指在产品开发设计过程中，将分散的零部件设计和分析技术融合在一起,在计算机上建造出整体模型,并针对该产品在投入使用后的各种工况进行仿真分析，预测产品的整体性能，通过仿真结果指导改进设计、提高产品性能。<br>一般流程是在仿真软件中搭建一个动力学模型来模拟系统工作时的工作状态,通过数据输出(位移、速度、加速度)或者仿真动画输出来观察和分析系统的可靠性，分析结果用来指导物理样机 的版本迭代。<br>在RoboMaster 比赛中,如果能搭建正确的战车一些核心模块的虚拟样机,在方案试验阶段能节省很大一部分的人力成本资金成本和时间成本.并且能在分析问题时有一定说服力的依据而不是只停留在经验层面上,解决问题一针见血。</li>\n<li>常用虚拟样机软件<br>自然界广泛存在四种物理场：温度场、电磁场、结构(位移、应力、应变)场、流场 。<br>不同的工程所分析的物理场不一样,不同的物理场所应用的公式理论和仿真软件也不一样.本文主要针对robomaster 比赛中机械仿真案例进行阐述.目前来看主要是运用结构场和流场 进行建模分析.其中涉及到多体动力学分析和静力学分析以及流体力学分析。一般涉及到软件Solidworks、Adams、Ansys workbench、Fluent… 等。<br>Solidworks 主要进行三维建模设计也可进行关键零件的静力学分析(Simulition静力学模块)和动力学模型搭建(motion模块)。<br>Adams 是多体动力学仿真计算中最常用的软件,也是本文的中点阐述对象.可以进行动力学模型搭建(View模块)仿真求解(Solver模块)以及数据处理模块(Postprocessor模块)<br>Ansys 是有限元仿真中常用软件，可以进行静力学分析(Static Structural模块)也可以进行碰撞分析(LS-dyna模块)还有流场分析(Fluid Flow模块)，Workbench集成了很多有限元模块，可以共享各自的结果数据使Ansys的功能异常强大。<br>结构场是最主要的分析场.本文是在结构场中以步兵拨弹模块 为例进行展开系统的虚拟样机搭建过程.研究Adams虚拟样机中17mm子弹在弹仓中的运动状态和拨轮受力情况，指导拨弹模块的改进，进而提高射频满足比赛要求。</li>\n<li>搭建虚拟样机的动力学模型<br>简单的机械系统可以搭建数学模型进行动力学分析,但是像拨弹这中多自由度的复杂系统很难或者无法直接搭建整个拨弹过程的数学模型,只能通过多体动力学软件搭间接搭建数学模型进行迭代计算和过程动画模拟来分析问题。<br>虚拟样机其实包括建模、仿真、后处理.建模即创建样机添加工况,仿真即是求解方程,由计算机幕后完成,后处理主要是查看动画以及输出一些感兴趣的物理量,复杂的由专业后处理模块Adams/PostProcessor进行。<br>在Solidworks中的motion模块和Adams View中均可搭建动力学模型。Solidworks中操作比较简单，对于大多数同学来讲上手比较快。可以把模型在SW中搭建好之后导入到Adams进行求解计算，这样可以在短时间内完成一个简单系统的仿真工作，不过如果需要更精确的求解计算建议还是使用Adams搭建模型比较好，求解更精确。</li>\n</ol>\n<p>4.在Solidworks中简化模型导入Adams计算和后处理<br>（1）在solidworks中简化拨弹模块，压缩不影响本次研究问题的无关零件(发射模块、弹舱盖、其他保护壳等)。并添加上子弹,子弹是阵列生成,需要右键解散阵列 .所有零件应赋材料(子弹材料TPE,用PA代替)如图4-1到图4-2的简化。<br><img src=\"/old_images/2020/07/1225674126.png\" alt=\"1.PNG\"></p>\n<p>图4-1简化前    图4-2简化后<br>（2）打开【motion】插件,进入motion模块(如没有在→插件中勾选motion),在左下角将页面切换至【运动算例1】 ,将下拉菜单【动画】切换到【motion分析】 ,依次添加各个实体间的接触力contact(球与球之间、球与拨轮之间、球与弹舱之间),检查弹舱为固定状态,最后设置重力 .到此为止,模型搭建完毕,驱动马达可以不添加,放在Adams 中操作.图4-3是各按钮位置。<br><img src=\"/old_images/2020/07/51341367.png\" alt=\"2.PNG\"></p>\n<p>图4-3 motion模块的操作界面<br>在动力学模型中每个实体之间的接触是靠添加两个物体间的接触力实现的,在Adams和Solidworks中每个接触均有8个参数(图4-7中标出),四个碰撞参数:Stiffness(刚度系数)、Force Exponent(刚度指数)、Damping(阻尼系数)、Penetration Depth(最大穿透值),四个库仑摩擦参数:Static Coefficient(静摩擦系数)、Dynamic Coefficient(动摩擦系数)、Stiction Transition Vel(静摩擦过渡速度)、Friction Transition Vel(动摩擦过渡速度), 表3-1给出大致参数确定方法，也可参考附件data文件夹下《ADAMS中接触的定义及参数设置》.图4-4和图4-5方便理解各个参数的意义。<br><img src=\"/old_images/2020/07/1260733011.png\" alt=\"3.PNG\"></p>\n<p>表3-1 Impact接触参数与Coulomb摩擦参数</p>\n<p><img src=\"/old_images/2020/07/4243678235.png\" alt=\"4.PNG\"></p>\n<p>图4-4 Impact接触参数参考图    图4-5 Coulomb摩擦参数参考图</p>\n<p><img src=\"/old_images/2020/07/3134056928.png\" alt=\"5.PNG\">    </p>\n<p>图4-6 各球之间接触    图4-7各球之间的接触参数设置<br>图4-6为添加球和球接触中实体选择操作,可以看出不勾选接触组时,添加的是所选择各实体间的接触,17颗球之间一共有136个接触.图4-7为球和球之间的接触参数设置(推荐)。</p>\n<p><img src=\"/old_images/2020/07/3001651570.png\" alt=\"6.PNG\"></p>\n<p>图4-8球和各个弹舱零件的接触    图4-9 球与弹舱之间的接触参数设置<br>图4-8使用【接触组】添加接触,球和拨轮以及球和弹舱的接触需要使用接触组,即球为一组与另外三个零件分别添加接触,各球之间接触不会被重复添加,在图中看出17个子弹与四个零件间分别添加接触,共68个接触. 图4-9为球和弹舱之间的接触参数设置(推荐)。<br>另外拨轮和球之间的接触同样使用接触组,系数设置中将图4-9中【Stiffness】(刚度)系数改为400即可。<br>使用Solidworks 方便交互式批量添加各实体间的接触力,Adams 中接触力的添加比较难操作.多个实体之间只有用脚本命令进行添加比较方便。<br>最后添加上重力。<br>（3）导入到Adams中,检查模型,稍作修改,一些复杂的约束用简单约束来替换,在Solidworks 中的互相固连的零件可以进行两种操作①两个零件用Fixed约束锁死②使用Boolean运算进行零件合并,给拨轮添加Revolute铰接约束,在铰接约束上添加motion驱动.打开求解器进行运算即可。</p>\n<p><img src=\"/old_images/2020/07/2541934723.png\" alt=\"7.PNG\"></p>\n<p>图4-10计算按钮    图4-11 Solidworks与Adams的接口<br>把模型按照第一第二步搭建完之后,点击【计算】按钮(图4-10),计算结果一般都会报错可以忽略,Solidworks中的求解器计算很容易失败,所以只用motion做模型搭建这种前处理工作.右键模型名称输出Adams(图4-11),输出英文命名的.adm文件和一些.xmt_bin以及.res文件均保存在英文路径下.附件中例程保存在 adams_file\\project\\model\\adams_1中。</p>\n<p><img src=\"/old_images/2020/07/723480778.png\" alt=\"8.PNG\"></p>\n<p>图4-12导入.adm文件    图4-13 MKS单位制设置<br>打开Adams导入.adm文件,新建模型“loader_1”,设置单位制。</p>\n<p><img src=\"/old_images/2020/07/962343059.png\" alt=\"9.PNG\"></p>\n<p>图4-14 Connectors约束    图4-15 添加Fixed约束</p>\n<p><img src=\"/old_images/2020/07/2140554824.png\" alt=\"10.PNG\"></p>\n<p>图4-15 Fixed(固定)和Revolute(旋转)约束<br>在Adams中删除【Connectors】中所有约束,将几个固定零件间添加Fixed约束(固定锁死)。</p>\n<p><img src=\"/old_images/2020/07/4097717059.png\" alt=\"11.PNG\"></p>\n<p>图4-16 右键→Appearance    图4-17 Appearance→Color<br>更改拨轮颜色为Red,方便观察和操作,如图4-16和图4-17.也可以根据需要更改其他零件颜色.图4-17中【Visibility】点选off即可隐藏该零件,该操作同样适用于其他类型信息,如Connectors、Motion、Force等。</p>\n<p><img src=\"/old_images/2020/07/551017501.png\" alt=\"12.PNG\"></p>\n<p>图4-18添加Revolute(旋转)约束    图4-19 Revolute(旋转)约束结果<br>在拨轮和弹舱中间添加旋转副,操作如图4-18结果如图4-19。</p>\n<p><img src=\"/old_images/2020/07/3819593002.png\" alt=\"13.PNG\"></p>\n<p>图4-20 Rotational Joint motion(旋转驱动)</p>\n<p><img src=\"/old_images/2020/07/3351283967.png\" alt=\"14.PNG\">    </p>\n<p>图4-20 motion结果    图4-21 motion参数<br>    将旋转驱动添加到拨轮的旋转副上。<br>在joint_4上添加motion_1,参数设置如图4-21。<br>17mm子弹材料为TPE,密度970 kg/m³弹性模量3.4GPa,泊松比0.32(近似)。</p>\n<p><img src=\"/old_images/2020/07/1559317015.png\" alt=\"15.PNG\"></p>\n<p>图4-22 新建材料    图4-23 TPE材料参数<br>【body】树下右键其中一个球单击【Modify】, 出现对话框如图4-22在【Define Mass By】下拉菜单选择【Geometry and Material Type】,在【Material Type】中右键出现图中对话框,依次选取【Material】→【Create】会跳出对话框如图4-23，按照TPE参数设置单击【Apply】→【ok】,然后单击图4-22中【Apply】即发现图中材料参数刷新至新建TPE材料.依次添加剩余球的材料和弹仓材料(【Material】→【Guesses】→【aluminum】)。模型搭建完毕,进入simulation进行求解计算。</p>\n<p><img src=\"/old_images/2020/07/3888322204.png\" alt=\"16.PNG\"></p>\n<p>图4-24仿真参数设置<br>如图4-24仿真正在进行中,左上角为仿真计算过的模型时间,右下角为仿真进程百分比,在Simulation Control对话框中【End Time】为仿真总时长,【Step Size】为仿真步长根据模型复杂程度给定,合理的步长节省仿真时间、提高仿真精度.如果计算报错则检查模型有无物理干涉和严重死点,调整仿真时间继续进行仿真计算,多次仿真计算应勾选【Reset before running】保证每次仿真计算前参数重置.仿真时间由模型复杂度和电脑CPU以及内存而定,如果模型复杂则仿真时间会十几个小时甚至几天，电脑配置稍好些会加快运算效率.另外合理的模型化简和模型搭建也能影响仿真时间。<br>关于充分利用电脑性能加快仿真速度,可以开从多线程运算和增大可调用内存两个方面入手。<br>多线程运算途径&gt;在Adams/View界面下通过“settings&gt;solver&gt;Executable”菜单打开设置窗口，并勾选More选项，在Thread Count位置输入参与计算的线程数(128).如图4-25。</p>\n<p><img src=\"/old_images/2020/07/2310258600.png\" alt=\"17.PNG\"></p>\n<p>图4-25<br>增大调用内存途径&gt;开始–程序–MSC.software–MSC.ADAMS–ADAMS settings分别打开Aview和Asolver中的Preference，在右侧memsize一栏中选择huge点击ok保存。重新运行ADAMS即可.如图4-26。</p>\n<p><img src=\"/old_images/2020/07/291067937.png\" alt=\"18.PNG\"></p>\n<p>图4-26<br>（4）进入后处理模块Postprocessor,观察动画可以看到子弹在拨轮中的运状态,进行子弹轨迹追踪和一些感兴趣物理量的测量.比如输出电机的驱动扭矩值,进行电机选型.通过仿真动画和数据指导版本迭代改进。<br>5.Solidworks提供三维模型,Adams中进行模型搭建和计算及后处理<br>（1）Solidworks简化模型,操作过程和流程和4.1中相同,最后将装配体另存成Parasolid(*.x_t)格式如图5-1,导入Adams做前处理.注意:Adams不支中文路径和中文文件名。</p>\n<p><img src=\"/old_images/2020/07/755844939.png\" alt=\"19.PNG\"></p>\n<p>图5-1导出x_t<br>打开Adams View,新建模型导入.x_t文件.单击【New Model】输入自定义模型名称(英文),单击【ok】会新建一个空白模型,【主菜单】&gt;【File】&gt;【import】下拉菜单第一个【File Type】中选择Parasolid,在【File To Read】中右键&gt;【Browse】浏览到目标.x_t文件,在【Model Name】右键选择新建的模型名称.单击【Ok】.模型导入完成.如图5-2。</p>\n<p><img src=\"/old_images/2020/07/270229372.png\" alt=\"20.PNG\"></p>\n<p>图5-2 .x_t导入Adams<br>（2）在Adams里面搭建动力学模型.在此之前应掌握Adams图形界面基本操作和工具栏的分布.模型需要用cmd脚本搭建,准确高效,所以要求能读懂简单的编程语言.本章节均用一些简单的命令语言来实现建模操作.这里的脚本编辑器使用的是VScode,桌面新建.txt英文命名后缀改为.cmd,用VScode打开编辑后保存即可。<br>【主菜单】&gt;【View】&gt;【Command Window】打开命令窗口,每一步界面操作的命令都会在命令窗口中滚动.可以复制出来修改后使用。<br>Cmd脚本对拨弹部分建模流程如下①修改Bodies Name②布尔运算操作③定义材料④添加约束⑤添加驱动⑥定义接触力(部分步骤的先后顺序可调)。<br>①基本设置<br>设置单位制(MKS)和重力方向(-Z)。<br>!————-setting———————-!<br>default units length=mm mass=kg force=newton &amp;<br> time=Second angle=degrees frequency=hz!units_MKS!</p>\n<p>int dia disp dia=gravity_panel!打开对话框重力设置对话框!<br>force modify body gravitational gravity = ACCGRAV_1 &amp;<br>      x_comp = 0 &amp;<br>      y_comp = 0 &amp;<br>      z_comp = -9806.65!-Z轴gravity!<br>!—————–end————————!<br>②修改Bodies Name<br>在模型树中【Bodies】下可以查看各个实体.如果在Solidworks中是中文命名,导入后会重新命名,但是命名均有规律.现需要修改实体名字,方便查看和操作。<br>图形界面操作按钮如图5-3,【模型树】&gt;【Bodies】&gt;【任意一组件右键】。</p>\n<p><img src=\"/old_images/2020/07/3548240241.png\" alt=\"21.PNG\"></p>\n<p>图5-3 Rename按钮</p>\n<pre><code>图形界面操作按钮如图5-3,【模型树】&gt;【Bodies】&gt;【任意一组件右键】，根据模型树中的信息,编写modify_name命令如下,</code></pre>\n<p>!————-modify_part_name—————!<br>entity modify entity =____002    new = wheel_loader<br>entity modify entity =<strong>__       new = magazin_1<br>entity modify entity =_______2   new = sheet<br>entity modify entity =____</strong>     new = magazin_2</p>\n<p>entity modify entity =<em>17mm____  new = <em>17mm_____1<br>for variable_name=ip  start_value=1  end_value=17 !for循环批量修改球的name,ip为变量名!<br>entity modify entity =(eval(“<em>17mm__</em></em></em>“//rtoi(ip))) new =(eval(“ball_”//rtoi(ip)))<br>end</p>\n<p>entity modify entity =<strong>____</strong>   new = _________1<br>for variable_name=ip  start_value=1  end_value=2<br>entity modify entity =(eval(“_________”//rtoi(ip))) new = (eval(“pipe_”//rtoi(ip)))<br>end<br>!——————-end———————-!<br>根据模型树中的信息,编写modify_name命令如下,通过【主菜单】&gt;【File】&gt;【import】导入.cmd实现对模型的操作如图5-4，</p>\n<p><img src=\"/old_images/2020/07/2308466294.png\" alt=\"22.PNG\"></p>\n<p>图5-4 .cmd导入Adams<br>操作前后的对比如图5-5和图5-6</p>\n<p><img src=\"/old_images/2020/07/3991564688.png\" alt=\"23.PNG\"></p>\n<p>图5-5 Bodies Name修改前    图5-6 Bodies Name修改后<br>③布尔运算操作<br>在三维模型为DFM(面向制造的设计),不影响功能情况下,使用布尔运算将多个零件合成一个。<br>图形界面操作按钮如图5-7,【功能区】&gt;【Bodies】&gt;【Booleans】。</p>\n<p><img src=\"/old_images/2020/07/162826487.png\" alt=\"24.PNG\"></p>\n<p>图5-7 Booleans操作按钮<br>根据模型,编写Booleans命令操作如下,<br>!————-Booleans_parts—————–!<br>part merge rigid_body part_name=pipe_2 into_part=pipe_1!将pipe_2合并到pipe_1!<br>!——————-end———————-!<br>操作前和操作后的区别如图5-8和图5-9</p>\n<p><img src=\"/old_images/2020/07/995794732.png\" alt=\"25.PNG\"></p>\n<p>图5-8 布尔合并前</p>\n<p><img src=\"/old_images/2020/07/1501298663.png\" alt=\"26.PNG\"></p>\n<p>图5-9 布尔合并后<br>④定义材料<br>图形界面操作按钮,【模型树】&gt;【Bodies】&gt;【任意一个构件右键】&gt;【Modify】接下来的操作设置如图5-10和图5-11</p>\n<p><img src=\"/old_images/2020/07/3087868713.png\" alt=\"27.PNG\"></p>\n<p>图5-10 新建材料    图5-11TPE材料参数<br>材料参数:①密度(Density)②弹性模量(Youngs Modulus)③泊松比(Poissons Ratio)<br>根据模型,编写Material命令操作如下,<br>!————-modify_material—————–!<br>material create  &amp;                !新建材料TPE!<br>      material_name = .materials.TPE  &amp;<br>      density = 0.97e-6 &amp;<br>      youngs_modulus = 3400  &amp;<br>      poissons_ratio = 0.32<br>for variable_name=ip start_value=1 end_value=17!for循环批量修改!<br> part modify rigid mass_properties  &amp;<br>      part_name = (eval(“ball_”//rtoi(ip)))  &amp;<br>      material_type = .materials.TPE<br>end</p>\n<p>part modify rigid mass_properties  &amp;<br>      part_name = pipe_1  &amp;<br>      material_type = .materials.aluminum<br>part modify rigid mass_properties  &amp;<br>      part_name = magazin_1  &amp;<br>      material_type = .materials.aluminum<br>part modify rigid mass_properties  &amp;<br>      part_name = sheet  &amp;<br>      material_type = .materials.aluminum<br>part modify rigid mass_properties  &amp;<br>      part_name = wheel_loader  &amp;<br>      material_type = .materials.aluminum<br>!——————-end———————-!<br>修改前后对比如图5-12和图5-13</p>\n<p><img src=\"/old_images/2020/07/2048957230.png\" alt=\"28.PNG\"></p>\n<p>图5-12 新建材料    图5-13 TPE材料参数<br>⑤添加约束<br>在此模型中每个子弹都有6个自由度,不存在约束,剩余零部件都有自己的固定方式.如图5-14中,wheel_loader和ground有个旋转约束,其余零件和ground都是固定约束。</p>\n<p><img src=\"/old_images/2020/07/1700994165.png\" alt=\"29.PNG\"></p>\n<p>图5-14 模型树中需要约束的零部件<br>图形界面操作按钮如图5-15</p>\n<p><img src=\"/old_images/2020/07/2612196784.png\" alt=\"30.PNG\"></p>\n<p>图5-15 Fixed(固定)和Revolute(旋转)约束<br>·固定约束(Fixed Joint)<br>根据模型,编写Fixed_joint命令操作如下,<br>!—————Fixed_Joint——————!<br>marker create marker=.ground.MAR_fixed_1 &amp; !在ground上创建marker点命MAR_fixed_1!<br>location=(LOC_RELATIVE_TO({0,0,0},ground.cm)) &amp;!MAR_fixed_1和ground.cm位置重合!<br>orientation=0.0,0.0,0.0                          !MAR_fixed_1和ground.cm坐标重合!<br>marker create marker=.sheet.MAR_fixed_1 &amp;!在ground上创建marker点命名MAR_fixed_1!<br>  location=(LOC_RELATIVE_TO({0,0, 0},ground.cm)) &amp;!MAR_fixed_1和ground.cm位置合!<br>  orientation=0.0, 0.0, 0.0                       !MAR_fixed_1和点ground.cm坐标重合!<br>constraint create joint Fixed &amp;           !在上述创建的两个marker间创建一个固定约束!<br>    joint_name=fixed_1 &amp;                   !Fixed约束的名称!<br>    i_marker_name=.sheet.MAR_fixed_1 &amp;<br>    j_marker_name=.ground.MAR_fixed_1</p>\n<p>marker create marker=.ground.MAR_fixed_1 &amp;<br>    location=(LOC_RELATIVE_TO({0,0, 0},ground.cm)) &amp;<br>    orientation=0.0, 0.0, 0.0<br>marker create marker=.magazin_1.MAR_fixed_1 &amp;<br>    location=(LOC_RELATIVE_TO({0,0, 0},ground.cm)) &amp;<br>    orientation=0.0, 0.0, 0.0<br>constraint create joint Fixed &amp;                     !创建固定约束!<br>    joint_name=fixed_2 &amp;<br>    i_marker_name=.magazin_1.MAR_fixed_1 &amp;<br>    j_marker_name=.ground.MAR_fixed_1</p>\n<p>marker create marker=.ground.MAR_fixed_1 &amp;<br>    location=(LOC_RELATIVE_TO({0,0,0},ground.cm)) &amp;<br>    orientation=0.0, 0.0, 0.0<br>marker create marker=.pipe_1.MAR_fixed_1 &amp;<br>    location=(LOC_RELATIVE_TO({0,0,0},ground.cm)) &amp;<br>    orientation=0.0, 0.0, 0.0<br>constraint create joint Fixed &amp;                     !创建固定约束!<br>    joint_name=fixed_3 &amp;<br>    i_marker_name=.pipe_1.MAR_fixed_1 &amp;<br>    j_marker_name=.ground.MAR_fixed_1<br>!——————-end———————-!<br>创建Fixed后如图5-16</p>\n<p><img src=\"/old_images/2020/07/2817136246.png\" alt=\"31.PNG\"></p>\n<p>图5-16 固定约束的结果图<br>·旋转约束(Revolute Joint)<br>需要在拨盘(wheel_loader)和ground之间添加旋转约束，根据模型,编写Revolute_joint命令操作如下,<br>variable create variable_name=wheel_name string_value=”wheel_loader” !定义变量”wheel_name”,string_value代表字符串类型!<br>marker create marker=.ground.run_MAR_1 &amp;<br>    location=(LOC_RELATIVE_TO({0,0,0},(eval(wheel_name//“.cm”)))) &amp;!<br>    orientation=(ORI_RELATIVE_TO({90,90,0},(eval(wheel_name//“.cm”))))<br>marker create marker=.wheel_loader.run_MAR_2 &amp;<br>    location=(LOC_RELATIVE_TO({0,0,0},(eval(wheel_name//“.cm”)))) &amp;<br>    orientation=(ORI_RELATIVE_TO({90,90,0},(eval(wheel_name//“.cm”))))<br>constraint create joint Revolute &amp;              !创建Joint_Revolute!<br>    joint_name=run_1 &amp;            !约束名称!<br>    i_marker_name=.ground.run_MAR_1 &amp;<br>    j_marker_name=.wheel_loader.run_MAR_2<br>variable delete variable_name=wheel_name                    !删除变量!<br>Adams中建模命令均是对是通过对Marker点的操作来完成的,拿创建旋转副举例(固定约束同理),分为三步：<br>i.创建一个坐标点run_MAR_1,该点在ground上,与wheel_loader.cm重合。<br>ii.创建另外一个坐标点run_MAR_2,该点在wheel_loader上,依旧与wheel_loader.cm重合。<br>iii.创建一个转动副,转动副名字为.loader_2.run_1,他是由于两个坐标点发生相对转动构成的,这两个坐标点分是上述两步创建的坐标。<br>此外上述脚本开头定义了一个字符串变量wheel_name,在创建Joint中使用,结尾删除.使用变量可以方便代码移植。<br>⑥添加驱动<br>Adams中驱动一般添加在旋转副或者移动副上,拨弹模块只需添加拨盘旋转，图形界面操作按钮如图5-17</p>\n<p><img src=\"/old_images/2020/07/3860621436.png\" alt=\"32.PNG\"></p>\n<p>图5-17 Rotational Joint motion(旋转驱动)<br>根据模型,编写Joint Motion命令操作如下，<br>!————-Revolute_Joint—————-!<br>variable creat variable_name=MC_run_1 string_value=”step(time,0.1,0,0.3,-360d)”!电机转速!<br>constraint create motion motion_name=.loader_2.motion_1 &amp;<br>           joint=.loader_2.run_1 &amp;                 !motion添加在run_1上!<br>           type=rotational &amp;                       !类型是转动!<br>           time_derivative=velocity &amp;              !驱动类型为velocity(速度)!<br>           function=(eval(MC_run_1))               !调用定义的变量MC_run_1!<br>!——————-end———————-!<br>使用step函数定义驱动,step函数：<br>STEP（time，1，0d，2，20d）+STEP（time，6，0d，12，-40）<br>意义：1秒到2秒：从0递增至20d；<br>2秒到6秒：保持电机输出数值为20d不变；<br>6秒到12秒：由20d递减40d，结果为-20d<br>旋转约束和驱动添加之后的结果如图5-18</p>\n<p><img src=\"/old_images/2020/07/3240034142.png\" alt=\"33.PNG\"></p>\n<p>图5-18添加旋转约束和驱动<br>⑦定义接触力<br>在Adams中所有的碰撞接触的均应添加接触力。<br>该模型中接触力的添加操作要稍微复杂,每个球都有6个自由度,所以每两个球之间都要有添加接触力,第四节中已经说明球之间需要添加136个接触力,需要使用命令批量添加，准确高效。<br>图形界面操作按钮如图5-19【功能区】&gt;【Forces】&gt;【Special Forces】&gt;【Create a contact】。</p>\n<p><img src=\"/old_images/2020/07/2422714402.png\" alt=\"34.PNG\"></p>\n<p>图5-19 添加实体间接触力按钮<br>根据模型,编写Create contact命令操作如下<br>!————create_contact_between_solids————–!<br>variable create variable_name=MODEL_name string_value=”loader_2”!模型名称!<br>variable create variable_name=part_box string_value=”CSG_4”!被接触对象!</p>\n<p>variable create variable_name=add_1 integer_value=6!子弹Body名称和SOLID名称的序号差!</p>\n<p>variable create variable_name=MC_stiffness  real_value=164 !刚度系数,计算公式参考stiffness.m!<br>variable create variable_name=MC_damping    real_value=0.5 !阻尼系数!<br>variable create variable_name=MC_exponent   real_value=2 !指数!<br>variable create variable_name=MC_dmax       real_value=0.00005!最大实体入侵!</p>\n<p>variable create variable_name=MC_mu_static  real_value=0.7 !静摩擦系数!<br>variable create variable_name=MC_mu_dynamic real_value=0.65!动摩擦系数!<br>variable create variable_name=MC_sti_tra_vel real_value=0.1!静摩擦过渡速度!<br>variable create variable_name=MC_fri_tra_vel real_value=10 !动摩擦过渡速度!</p>\n<p>!—————sheet————-!<br> variable modify variable_name=part_box &amp;<br>      string=SOLID2                           !修改part_box为sheet的Solid!<br>variable modify variable_name=MC_stiffness  real_value=4.4e8<br>variable modify variable_name=MC_damping    real_value=5e4<br>variable modify variable_name=MC_exponent   real_value=1.5<br>variable modify variable_name=MC_dmax       real_value=0.01<br>for variable_name=ipp  start_value=1  end_value=17<br>contact create &amp;<br>  contact_name = .(eval(MODEL_name)).(eval(“con_”//rtoi(ipp+add_1)//“<em>“//(eval(part_box)))) &amp;<br>      i_geometry_name = (eval(“SOLID”//rtoi(ipp+add_1))) &amp;<br>      j_geometry_name = (eval(part_box))  &amp;<br>      stiffness = (eval(MC_stiffness))    &amp;<br>      damping =(eval(MC_damping))         &amp;<br>      exponent =(eval(MC_exponent))       &amp;<br>      dmax =(eval(MC_dmax))               &amp;<br>      coulomb_friction = on               &amp;<br>      mu_static =(eval(MC_mu_static))          &amp;<br>      mu_dynamic =(eval(MC_mu_dynamic))         &amp;<br>      stiction_transition_velocity =(MC_sti_tra_vel) &amp;<br>      friction_transition_velocity =(MC_fri_tra_vel)<br>end<br>!—————magazin_1————-!<br> variable modify variable_name=part_box &amp;<br>      string=SOLID1<br>variable modify variable_name=MC_stiffness  real_value=4.4e8<br>variable modify variable_name=MC_damping    real_value=5e4<br>variable modify variable_name=MC_exponent   real_value=1.3<br>variable modify variable_name=MC_dmax       real_value=0.01<br>for variable_name=ipp  start_value=1  end_value=17<br>contact create &amp;<br>  contact_name = .(eval(MODEL_name)).(eval(“con</em>“//rtoi(ipp+add_1)//“<em>“//(eval(part_box)))) &amp;<br>      i_geometry_name = (eval(“SOLID”//rtoi(ipp+add_1))) &amp;<br>      j_geometry_name = (eval(part_box))  &amp;<br>      stiffness = (eval(MC_stiffness))    &amp;<br>      damping =(eval(MC_damping))         &amp;<br>      exponent =(eval(MC_exponent))       &amp;<br>      dmax =(eval(MC_dmax))               &amp;<br>      coulomb_friction = on               &amp;<br>      mu_static =(eval(MC_mu_static))          &amp;<br>      mu_dynamic =(eval(MC_mu_dynamic))         &amp;<br>      stiction_transition_velocity =(MC_sti_tra_vel) &amp;<br>      friction_transition_velocity =(MC_fri_tra_vel)<br>end<br>variable modify variable_name=part_box &amp;<br>      string=SOLID3<br>for variable_name=ipp  start_value=1  end_value=17<br>contact create &amp;<br>  contact_name = .(eval(MODEL_name)).(eval(“con_”//rtoi(ipp+add_1)//“_”//(eval(part_box)))) &amp;<br>      i_geometry_name = (eval(“SOLID”//rtoi(ipp+add_1))) &amp;<br>      j_geometry_name = (eval(part_box))  &amp;<br>      stiffness = (eval(MC_stiffness)) &amp;<br>      damping =(eval(MC_damping)) &amp;<br>      exponent =(eval(MC_exponent))&amp;<br>      dmax =(eval(MC_dmax))  &amp;<br>      coulomb_friction = on  &amp;<br>      mu_static =(eval(MC_mu_static)) &amp;<br>      mu_dynamic =(eval(MC_mu_dynamic)) &amp;<br>      stiction_transition_velocity =(MC_sti_tra_vel) &amp;<br>      friction_transition_velocity =(MC_fri_tra_vel)<br>end<br>!—————pipe_1————-!<br> variable modify variable_name=part_box &amp;<br>      string=SOLID4<br>variable modify variable_name=MC_stiffness  real_value=4.4e8<br>variable modify variable_name=MC_damping    real_value=5e4<br>variable modify variable_name=MC_exponent   real_value=1.5<br>variable modify variable_name=MC_dmax       real_value=0.01<br>for variable_name=ipp  start_value=1  end_value=17<br>contact create &amp;<br>  contact_name = .(eval(MODEL_name)).(eval(“con</em>“//rtoi(ipp+add_1)//“<em>“//(eval(part_box)))) &amp;<br>      i_geometry_name = (eval(“SOLID”//rtoi(ipp+add_1))) &amp;<br>      j_geometry_name = (eval(part_box))  &amp;<br>      stiffness = (eval(MC_stiffness))    &amp;<br>      damping =(eval(MC_damping))         &amp;<br>      exponent =(eval(MC_exponent))       &amp;<br>      dmax =(eval(MC_dmax))               &amp;<br>      coulomb_friction = on               &amp;<br>      mu_static =(eval(MC_mu_static))          &amp;<br>      mu_dynamic =(eval(MC_mu_dynamic))         &amp;<br>      stiction_transition_velocity =(MC_sti_tra_vel) &amp;<br>      friction_transition_velocity =(MC_fri_tra_vel)<br>end<br>variable modify variable_name=part_box &amp;<br>      string=SOLID5<br>for variable_name=ipp  start_value=1  end_value=17<br>contact create &amp;<br>  contact_name = .(eval(MODEL_name)).(eval(“con_”//rtoi(ipp+add_1)//“_”//(eval(part_box)))) &amp;<br>      i_geometry_name = (eval(“SOLID”//rtoi(ipp+add_1))) &amp;<br>      j_geometry_name = (eval(part_box))  &amp;<br>      stiffness = (eval(MC_stiffness)) &amp;<br>      damping =(eval(MC_damping)) &amp;<br>      exponent =(eval(MC_exponent))&amp;<br>      dmax =(eval(MC_dmax))  &amp;<br>      coulomb_friction = on  &amp;<br>      mu_static =(eval(MC_mu_static)) &amp;<br>      mu_dynamic =(eval(MC_mu_dynamic)) &amp;<br>      stiction_transition_velocity =(MC_sti_tra_vel) &amp;<br>      friction_transition_velocity =(MC_fri_tra_vel)<br>end<br>!—————wheel_loader————-!<br> variable modify variable_name=part_box &amp;<br>      string=SOLID6<br>variable modify variable_name=MC_stiffness  real_value=4.4e8<br>variable modify variable_name=MC_damping    real_value=5e4<br>variable modify variable_name=MC_exponent   real_value=1.5<br>variable modify variable_name=MC_dmax       real_value=0.01<br>for variable_name=ipp  start_value=1  end_value=17<br>contact create &amp;<br>  contact_name = .(eval(MODEL_name)).(eval(“con</em>“//rtoi(ipp+add_1)//“_”//(eval(part_box)))) &amp;<br>      i_geometry_name = (eval(“SOLID”//rtoi(ipp+add_1))) &amp;<br>      j_geometry_name = (eval(part_box))  &amp;<br>      stiffness = (eval(MC_stiffness))    &amp;<br>      damping =(eval(MC_damping))         &amp;<br>      exponent =(eval(MC_exponent))       &amp;<br>      dmax =(eval(MC_dmax))               &amp;<br>      coulomb_friction = on               &amp;<br>      mu_static =(eval(MC_mu_static))          &amp;<br>      mu_dynamic =(eval(MC_mu_dynamic))         &amp;<br>      stiction_transition_velocity =(MC_sti_tra_vel) &amp;<br>      friction_transition_velocity =(MC_fri_tra_vel)<br>end<br>!—————contact_between_balls——————-!<br>variable modify variable_name=MC_stiffness  real_value=1.64e8<br>variable modify variable_name=MC_damping    real_value=2e4<br>variable modify variable_name=MC_exponent   real_value=2<br>variable modify variable_name=MC_dmax       real_value=0.1<br>variable modify variable_name=MC_mu_static  real_value=0.35 !静摩擦系数!<br>variable modify variable_name=MC_mu_dynamic real_value=0.3!动摩擦系数!<br>!—————————————!<br>variable create variable_name=ipp   integer_value=1<br>variable create variable_name=a      integer_value=1!第一颗子弹的序号!<br>variable create variable_name=b      integer_value=17!最后一颗子弹的序号!<br>variable create variable_name=add_2  integer_value=1</p>\n<p>for variable_name=num_1 start_value=(eval(a)) end_value=(eval(b-1))!两个for循环,依次添加子弹之间的各约束!</p>\n<p>for variable_name=num_2 start_value=(eval(a))  end_value=(eval(b-ipp))<br>contact create &amp;<br>  contact_name =.(eval(MODEL_name)).(eval(“con_”//rtoi(num_1)//“_”//rtoi(num_1+add_2))) &amp;<br>      i_geometry_name = (eval(“SOLID”//rtoi(num_1+add_1))) &amp;<br>      j_geometry_name = (eval(“SOLID”//rtoi(num_1+add_1+add_2)))  &amp;<br>      stiffness = (eval(MC_stiffness)) &amp;<br>      damping =(eval(MC_damping)) &amp;<br>      exponent =(eval(MC_exponent))&amp;<br>      dmax =(eval(MC_dmax))  &amp;<br>      coulomb_friction = on  &amp;<br>      mu_static =(eval(MC_mu_static)) &amp;<br>      mu_dynamic =(eval(MC_mu_dynamic)) &amp;<br>      stiction_transition_velocity =(MC_sti_tra_vel) &amp;<br>      friction_transition_velocity =(MC_fri_tra_vel)<br>variable modify variable_name=add_2  integer_value=(eval(add_2+1))<br>end<br>variable modify variable_name=ipp integer_value=(eval(ipp+1))<br>variable modify variable_name=add_2 integer_value=1<br>end</p>\n<p>variable delete variable_name=ipp<br>variable delete variable_name=a<br>variable delete variable_name=b</p>\n<p>variable delete variable_name=MODEL_name<br>variable delete variable_name=part_box</p>\n<p>variable delete variable_name=add_1<br>variable delete variable_name=add_2<br>!———————–end——————————!</p>\n<p>到此为止动力学模型已经搭建完毕,其中一些参数设置一般指接触力参数和仿真步长参数,尤其使接触力参数中的刚度系数和阻尼系数需要查询资料来确定,作者在这一块也没有太明确的方法,文献中显示stiffness标准值是在1.0<em>e+7~1.0</em>e+9(N/m)之间，阻尼系数一般取stiffness的0.01%。<br>材料参数如表5-1</p>\n<p><img src=\"/old_images/2020/07/81368647.png\" alt=\"35.PNG\"></p>\n<p>表5-1</p>\n<p>⑧设置仿真时长和步长开始仿真<br>本模型中有17个子弹,200个接触,如果40个子弹,各部分接触达到1000个.仿真时长取决于具体物理场景，仿真步长取决于模型复杂度，步长越小，计算结果越容易收敛，模型越精确，步长过大结果发散后就会报错。但是步长过小计算就变慢，合适的步长有利于模型仿真计算。<br>本案例中步长给0.0005~0.001比较合适，时长给2s既可以说明问题如图。</p>\n<p><img src=\"/old_images/2020/07/249903794.png\" alt=\"36.PNG\"></p>\n<p>图5-21仿真细节参数<br>⑨查看仿真结果输出物理量曲线或者动画,细化模型参数,模型正确即可指导方案迭代。<br>⑩一般的搭建过程如图,徐要验证和迭代框图5-21。</p>\n<p><img src=\"/old_images/2020/07/489071846.png\" alt=\"37.PNG\"></p>\n<pre><code>虚拟样机的需要按照上述的流程循环迭代,不能凭空搭建样机,要有实验数据做基础,有样机迭代使虚拟样机模型越来越精确,模型越精确越有利于实际工程的分析。当一个模型搭建正确之后,类似的机构搭建周期将会缩短。</code></pre>\n<p>⑪查看仿真结果输出物理量曲线或者动画,细化模型参数,模型正确即可指导方案迭代。<br>（3）后处理模块将样机的虚拟数据输出成曲线或者生成直观的动画来查看。<br>后处理数据需要在模型中调用，采用measure命令即可调取其中的参数，本例中关心拨弹电机的扭矩是够用，故在【模型树】&gt;【motions】&gt;【右键motion_1】&gt;【measure】按照如图5-22设置&gt;【apply】。</p>\n<p><img src=\"/old_images/2020/07/2066845163.png\" alt=\"38.PNG\"></p>\n<p>图5-22 Measure按钮<br>输出的扭矩图如5-23</p>\n<p><img src=\"/old_images/2020/07/1264423062.png\" alt=\"39.PNG\"></p>\n<p>另外可以通【功能区】&gt;【Results】&gt;【Postprocessor】进入后处理模块【空白页右键】&gt;【Load Animation】进行动画输出如图5-33，红色框中是播放暂停好和录制按钮。</p>\n<p><img src=\"/old_images/2020/07/3794064227.png\" alt=\"40.PNG\"></p>\n<p>还有其他感兴趣的任意物理量均可输出，通过对数据和动画的分析寻找结构优化的突破点，事半功倍。<br>6.结论<br>所提到的Solidwoks搭建动力学模型导入Adams中进行计算,对于新手来讲比较容易上手,能在短时间内搭建出动力学模型,并且简单的机械系统的仿真计算结果是可信的.而一些复杂些的系统求解精度就很低,和实际情况不太相符.在做拨弹仿真中就出现实体实体间的互相侵入太多的情况,目前还没找到原因.故复杂模型建议使用以下叙述的模型搭建方法。<br>虚拟样机需要在建立后，根据物理样机修改才能得到更精确的仿真结果。<br>各种仿真软件都只是工具，建模的关键还在于正确的工况分析与合理的参数设置，这些都是在仿真过程中逐渐完成的。如何把建立正确的物理样机以及仿真后数据的分析与改进方向是需要人工分析完成的。<br>7.写在最后的预告<br>各位朋友们，如果大家觉得这部分比较有趣的话，下一次可以和大家分享机器人学的部分知识，先从运动学和动力学开始吧，比如D-H法，拉格朗日方程，牛顿-欧拉方程，以及这些数理知识是如何应用在机器人设计中的，有机会的话下次见啦！</p>\n"},{"title":"轨道交通领域的差速问题&amp;我与轨交","date":"2020-07-16T08:07:40.000Z","toc":true,"_content":"大家好，我是那个喜欢火车的Captain。\n有人说，一个男人不成熟的标志是可以为了一项事业英勇地死去，而一个男人成熟的标志是可以为了一项事业卑贱地活着。我可能是成熟了。在上个周末，从7月10号到13号的四天时间里，我经历了两场专业课考试，一个夏令营，外加一篇恶心的硕士毕业设计级别的论文（我正在和这个课的老师对线，祝我成功）。可喜的是，夏令营的结果还不错，优营在手，只可惜没有推免资格，不能很有底气地去跟想考的导师聊，虽然现在也有别的方向的导师要我。可能不满足和缺陷才是人生的真正形态吧。\n今天拿到了结果其实挺高兴的，听栋宇说明天考完试打算给这个blog做个宣传，我说那我不如今晚出一篇文章，开始。\n我是学电气的，或者说我本科是学电机的，就是那个会动的大铁疙瘩，但我今天想跟大家聊聊偏机械方面的内容。\n我们日常生活中最常见的交通工具应该就是汽车了。无论以什么能源方式驱动，汽车在行驶过程中都会遵循相同的规律，我转动方向盘，前轮的方向就会变化带动汽车曲线运动。对于轨道交通（传统轮轨）而言，这样的过程发生在铁轨与走行部之间。**走行部，理解字面即可，用于列车在铁轨上走行的部分。**通俗一点讲，就是转向架。如果你不知道转向架是什么，没关系，你可以理解为是火车的车轮以及和它配套的一系列起到固定、缓冲减震、传动作用的机械系统。\n可能很多人大概知道转向架是什么，但并没有真正地去研究过。的确，很惭愧地讲，在准备这个夏令营之前我也没有好好研究过，我关注的往往是与电有关的内容，机械部分的我一般都会很礼貌地跳过。转向架就是铁路车辆转弯的作动装置，它的上部与车厢相连接，并可以以垂直道面的方向为轴做小角度转动。**注意，这里说的是“垂直道面的方向”，而不是竖直方向或者重力方向，**一会儿会说为什么。一个转向架大概长这样。\n![装箱架.jpg][1]\n我们可以看到它有两对车轮。同轴的一对车轮我们称之为一个“轮对”，有几个轮对就称几轴。例如，我们最常见的25系列客车，也是现在普铁最广泛使用的列车，每节车厢有两个二轴转向架，车辆本身是四轴车。有兴趣的小伙伴可以去B站等平台搜一下C64K，神华十二轴电力机车，那可是机车届的扛把子，全世界功率最大的机车，单机功率达到了14400kW。14400是什么概念呢，这么说吧，感兴趣的朋友可以去看我的上一篇投稿，CRH2A非统型两列加一起差不多也就这配置。\n我们来简单了解一下转向架的构造。传统的转向架有一类叫做“三大件式转向架”，三大件指的是两个侧架和一个摇枕。摇枕指的就是转向架中央与车体接触的条状或盘状或长条形的机械结构，承担车体重量，同时能够像刚才说的那样转动。摇枕本身是和车体相对静止的，转动时是二者共同相对于转向架其他机构轴向转动。转向架的另一个比较重要的点就是悬挂系统，分为一系悬挂（轴箱和轮对之间）和二系悬挂（摇枕或车体与构架之间）。要命的是，我买的两本教材其中一本把一二系悬挂的定义写反了，我还先看的写错的这一本，导致我现在依旧分不清一二系悬挂，每次提到都要翻书看一眼。随着技术发展，更多的转向架也慢慢出现，在转向、减震缓冲等方面的性能有着很大的提升，像摆式列车这样的转向架也更为复杂，那就是另一回事了。\n怎么样，听迷糊了没，如果没有咱就继续。刚才提到汽车转弯的过程。转弯势必会带来一个问题，那就是两个轮子如果保证角速度相同，则线速度也应该相同，但转弯时相同时间内外侧轮子滚过的距离显然是比内侧轮子长的，这个差不可以忽视。我们知道汽车是通过差速器解决的这个矛盾，那么火车也没有差速器或者类似差速器的装置呢？没有。道理很简单，第一，轮对两侧的轮子是同轴的，能保证绝对的角速度相同，不存在差速的条件；第二，从操作的角度讲，我个人认为差速器是一个主动作动部件，你给方向盘一个转动信号差速器才会发挥作用，而你给出转向信号是因为你希望人为地使车辆转弯。但火车不是这样，火车的导向是靠轨道对轮缘的限制实现的。如果问我轮缘是什么，这里放一张图大家自己看吧，我懒得讲。看的时候顺便也了解一下踏面是什么。\n![TIM图片20200716235932.jpg][2]\n好了，我们来讲火车转弯时发生了什么。可能大家高中学物理的时候做过这样类型的题，说火车转弯，转弯半径给你了，车辆质量给你了，速度给你了，轨道面倾角也给你了，让你求对内侧轨道的压力。当时做这题我就觉得这是纯扯，你把火车当质点系？闹呢？不过话说回来，这个模型其实很大程度上真实还原了火车过弯时候的情况。如果大家有兴趣，可以下次坐高铁动车的时候体验一下，看看过弯的时候火车是不是倾斜的（普速列车也存在这个现象，但设计速度越快的线路越明显，所以动车是最优解）。这其实是为了保护铁轨和车轮，在转弯时人为将外侧铁轨垫高，使重力的一个分量先行充当向心力（效果力），尽量不让轮缘和轨道之间发生摩擦。实际上，新建的铁路大多是无砟铁路（有砟铁路就是底下是石头子儿的铁路），对于这个垫高的高度会有很精确的控制，但既有线等有砟铁路还依赖人工修正，工人师傅会定期到转弯处，测量垫高是否符合技术手册的标准，如果不够，就用工具往外侧铁路地下推石子儿，强行垫高。很有趣其实。\n扯远了，说回到转弯过程。这里各位应该就明白上文中我提到的并不是竖直方向而是垂直于道面了吧。到这里，还是没解决差速的问题，火车的解决思路就很巧妙，真的。如果你们仔细看上面那个图，你会发现其实踏面不是柱面，而是**锥型面**（不知道柱面和锥型面的小伙伴自己去补高数和线代去），越靠近轮缘半径越大。这就好办了。当火车进入弯道，铁轨开始倾斜，于是车厢向一侧倾斜，重力分量充当向心力带着车厢开始画圆。由于离心效果，车辆整体会有向外侧移动的趋势，也就是车辆本身会往外侧（垫高一侧）甩，就像你家的洗衣机或者你那热爱蹦迪的男朋友/女朋友一样。甩完之后的结果是，车辆的中轴线和轨道的中心线不再在竖直面内平行，而是错开一定的距离，此时接触轨道的踏面也会向外移，那么**实际接触到外侧轨道的踏面滚转半径就要比内侧大了。**在严格的角速度相等的时候，两侧的线速度就会不相等，外侧比内侧大，也就不存在差速的问题了。多巧妙，是不是，这就是轨道交通的魅力。\n本来想继续讲讲轨道和道岔的，内容都想好了，忽然有些感慨想说点别的，那这部分内容就留到下一篇吧。有人说能让一群男人为止奋斗的从来不是金钱而实梦想，我觉得同济轨交就是我的梦想。我在哈工大电气，也不错，但我能学到的终究还是电气的东西，即便是与轨道交通有关，也仅仅是“有关”罢了。要想真正走入这个行业，还是要跟着专业的人学专业的东西，坐专业的事情。中国铁路，无论是国铁还是地方铁路、城市轨道交通，其实一直在风口浪尖上。有人说中国的高铁技术都是国外引进的，中国技术不行，有人说中国修铁路太浪费钱。实际上真的是这样吗？我还没有走入这个行业里。我的前脚已经搭在门槛上了，等我进去看看便知分晓。但我想说，任何一种技术都是从无到有从零到一的，十几年前我们没有技术的时候引进了国外的技术，也是花了大价钱的，后来我们慢慢在发展，到今天我们有了自己标准的动车组，我们开始向国外出口中国生产的轨道交通车辆，作为一名向往轨道交通的人，我是很自豪的。我们的第一艘航母也是买的前苏联的，后面经过我们的研究还是造出了自己的航母。一样的，我们的C919是以A320为模板的，阿娇（ARJ21）也是从模仿开始一步一步提升的。中国的技术现在行不行，我们去看看中车的海外订单就知道了。那天我看了一个纪录片，超级工程第一季，其中一集讲到了北京地铁网络的建设，有一个片段让我热泪盈眶，我截了下来，放在这里。\n![TIM图片20200717000541.gif][3]\n![TIM图片20200717000707.gif][4]\n写这篇文章的时候，脑海里多次会想起这个画面，每当我看到这个动图我都忍不住落泪。可能这就是热爱，可能这就是我热爱一项事业的方式。我希望自己能够进入到这个行业中去真正做一些事情。我们没有西门子那样将近两百年的发展历程，我们真的要做很多努力去超越和创新。对于轨道交通，我很自豪地讲我是有自己的想法的，也希望有朝一日我也能够再次热泪盈眶地说一句：\n“为了搞我们国家自己的轨道交通事业，我们那代轨交人，可以说是付出了辛苦的，很自豪。” \n谢谢。\n\n\n  [1]: /old_images/2020/07/623017393.jpg\n  [2]: /old_images/2020/07/2822560807.jpg\n  [3]: /old_images/2020/07/1405371260.gif\n  [4]: /old_images/2020/07/3520035333.gif\n","source":"_posts/轨道交通领域的差速问题and我与轨交.md","raw":"title: 轨道交通领域的差速问题&amp;我与轨交\ndate: 2020-07-16 16:07:40\ncategories: 日常\ntags: []\ntoc: true\n---\n大家好，我是那个喜欢火车的Captain。\n有人说，一个男人不成熟的标志是可以为了一项事业英勇地死去，而一个男人成熟的标志是可以为了一项事业卑贱地活着。我可能是成熟了。在上个周末，从7月10号到13号的四天时间里，我经历了两场专业课考试，一个夏令营，外加一篇恶心的硕士毕业设计级别的论文（我正在和这个课的老师对线，祝我成功）。可喜的是，夏令营的结果还不错，优营在手，只可惜没有推免资格，不能很有底气地去跟想考的导师聊，虽然现在也有别的方向的导师要我。可能不满足和缺陷才是人生的真正形态吧。\n今天拿到了结果其实挺高兴的，听栋宇说明天考完试打算给这个blog做个宣传，我说那我不如今晚出一篇文章，开始。\n我是学电气的，或者说我本科是学电机的，就是那个会动的大铁疙瘩，但我今天想跟大家聊聊偏机械方面的内容。\n我们日常生活中最常见的交通工具应该就是汽车了。无论以什么能源方式驱动，汽车在行驶过程中都会遵循相同的规律，我转动方向盘，前轮的方向就会变化带动汽车曲线运动。对于轨道交通（传统轮轨）而言，这样的过程发生在铁轨与走行部之间。**走行部，理解字面即可，用于列车在铁轨上走行的部分。**通俗一点讲，就是转向架。如果你不知道转向架是什么，没关系，你可以理解为是火车的车轮以及和它配套的一系列起到固定、缓冲减震、传动作用的机械系统。\n可能很多人大概知道转向架是什么，但并没有真正地去研究过。的确，很惭愧地讲，在准备这个夏令营之前我也没有好好研究过，我关注的往往是与电有关的内容，机械部分的我一般都会很礼貌地跳过。转向架就是铁路车辆转弯的作动装置，它的上部与车厢相连接，并可以以垂直道面的方向为轴做小角度转动。**注意，这里说的是“垂直道面的方向”，而不是竖直方向或者重力方向，**一会儿会说为什么。一个转向架大概长这样。\n![装箱架.jpg][1]\n我们可以看到它有两对车轮。同轴的一对车轮我们称之为一个“轮对”，有几个轮对就称几轴。例如，我们最常见的25系列客车，也是现在普铁最广泛使用的列车，每节车厢有两个二轴转向架，车辆本身是四轴车。有兴趣的小伙伴可以去B站等平台搜一下C64K，神华十二轴电力机车，那可是机车届的扛把子，全世界功率最大的机车，单机功率达到了14400kW。14400是什么概念呢，这么说吧，感兴趣的朋友可以去看我的上一篇投稿，CRH2A非统型两列加一起差不多也就这配置。\n我们来简单了解一下转向架的构造。传统的转向架有一类叫做“三大件式转向架”，三大件指的是两个侧架和一个摇枕。摇枕指的就是转向架中央与车体接触的条状或盘状或长条形的机械结构，承担车体重量，同时能够像刚才说的那样转动。摇枕本身是和车体相对静止的，转动时是二者共同相对于转向架其他机构轴向转动。转向架的另一个比较重要的点就是悬挂系统，分为一系悬挂（轴箱和轮对之间）和二系悬挂（摇枕或车体与构架之间）。要命的是，我买的两本教材其中一本把一二系悬挂的定义写反了，我还先看的写错的这一本，导致我现在依旧分不清一二系悬挂，每次提到都要翻书看一眼。随着技术发展，更多的转向架也慢慢出现，在转向、减震缓冲等方面的性能有着很大的提升，像摆式列车这样的转向架也更为复杂，那就是另一回事了。\n怎么样，听迷糊了没，如果没有咱就继续。刚才提到汽车转弯的过程。转弯势必会带来一个问题，那就是两个轮子如果保证角速度相同，则线速度也应该相同，但转弯时相同时间内外侧轮子滚过的距离显然是比内侧轮子长的，这个差不可以忽视。我们知道汽车是通过差速器解决的这个矛盾，那么火车也没有差速器或者类似差速器的装置呢？没有。道理很简单，第一，轮对两侧的轮子是同轴的，能保证绝对的角速度相同，不存在差速的条件；第二，从操作的角度讲，我个人认为差速器是一个主动作动部件，你给方向盘一个转动信号差速器才会发挥作用，而你给出转向信号是因为你希望人为地使车辆转弯。但火车不是这样，火车的导向是靠轨道对轮缘的限制实现的。如果问我轮缘是什么，这里放一张图大家自己看吧，我懒得讲。看的时候顺便也了解一下踏面是什么。\n![TIM图片20200716235932.jpg][2]\n好了，我们来讲火车转弯时发生了什么。可能大家高中学物理的时候做过这样类型的题，说火车转弯，转弯半径给你了，车辆质量给你了，速度给你了，轨道面倾角也给你了，让你求对内侧轨道的压力。当时做这题我就觉得这是纯扯，你把火车当质点系？闹呢？不过话说回来，这个模型其实很大程度上真实还原了火车过弯时候的情况。如果大家有兴趣，可以下次坐高铁动车的时候体验一下，看看过弯的时候火车是不是倾斜的（普速列车也存在这个现象，但设计速度越快的线路越明显，所以动车是最优解）。这其实是为了保护铁轨和车轮，在转弯时人为将外侧铁轨垫高，使重力的一个分量先行充当向心力（效果力），尽量不让轮缘和轨道之间发生摩擦。实际上，新建的铁路大多是无砟铁路（有砟铁路就是底下是石头子儿的铁路），对于这个垫高的高度会有很精确的控制，但既有线等有砟铁路还依赖人工修正，工人师傅会定期到转弯处，测量垫高是否符合技术手册的标准，如果不够，就用工具往外侧铁路地下推石子儿，强行垫高。很有趣其实。\n扯远了，说回到转弯过程。这里各位应该就明白上文中我提到的并不是竖直方向而是垂直于道面了吧。到这里，还是没解决差速的问题，火车的解决思路就很巧妙，真的。如果你们仔细看上面那个图，你会发现其实踏面不是柱面，而是**锥型面**（不知道柱面和锥型面的小伙伴自己去补高数和线代去），越靠近轮缘半径越大。这就好办了。当火车进入弯道，铁轨开始倾斜，于是车厢向一侧倾斜，重力分量充当向心力带着车厢开始画圆。由于离心效果，车辆整体会有向外侧移动的趋势，也就是车辆本身会往外侧（垫高一侧）甩，就像你家的洗衣机或者你那热爱蹦迪的男朋友/女朋友一样。甩完之后的结果是，车辆的中轴线和轨道的中心线不再在竖直面内平行，而是错开一定的距离，此时接触轨道的踏面也会向外移，那么**实际接触到外侧轨道的踏面滚转半径就要比内侧大了。**在严格的角速度相等的时候，两侧的线速度就会不相等，外侧比内侧大，也就不存在差速的问题了。多巧妙，是不是，这就是轨道交通的魅力。\n本来想继续讲讲轨道和道岔的，内容都想好了，忽然有些感慨想说点别的，那这部分内容就留到下一篇吧。有人说能让一群男人为止奋斗的从来不是金钱而实梦想，我觉得同济轨交就是我的梦想。我在哈工大电气，也不错，但我能学到的终究还是电气的东西，即便是与轨道交通有关，也仅仅是“有关”罢了。要想真正走入这个行业，还是要跟着专业的人学专业的东西，坐专业的事情。中国铁路，无论是国铁还是地方铁路、城市轨道交通，其实一直在风口浪尖上。有人说中国的高铁技术都是国外引进的，中国技术不行，有人说中国修铁路太浪费钱。实际上真的是这样吗？我还没有走入这个行业里。我的前脚已经搭在门槛上了，等我进去看看便知分晓。但我想说，任何一种技术都是从无到有从零到一的，十几年前我们没有技术的时候引进了国外的技术，也是花了大价钱的，后来我们慢慢在发展，到今天我们有了自己标准的动车组，我们开始向国外出口中国生产的轨道交通车辆，作为一名向往轨道交通的人，我是很自豪的。我们的第一艘航母也是买的前苏联的，后面经过我们的研究还是造出了自己的航母。一样的，我们的C919是以A320为模板的，阿娇（ARJ21）也是从模仿开始一步一步提升的。中国的技术现在行不行，我们去看看中车的海外订单就知道了。那天我看了一个纪录片，超级工程第一季，其中一集讲到了北京地铁网络的建设，有一个片段让我热泪盈眶，我截了下来，放在这里。\n![TIM图片20200717000541.gif][3]\n![TIM图片20200717000707.gif][4]\n写这篇文章的时候，脑海里多次会想起这个画面，每当我看到这个动图我都忍不住落泪。可能这就是热爱，可能这就是我热爱一项事业的方式。我希望自己能够进入到这个行业中去真正做一些事情。我们没有西门子那样将近两百年的发展历程，我们真的要做很多努力去超越和创新。对于轨道交通，我很自豪地讲我是有自己的想法的，也希望有朝一日我也能够再次热泪盈眶地说一句：\n“为了搞我们国家自己的轨道交通事业，我们那代轨交人，可以说是付出了辛苦的，很自豪。” \n谢谢。\n\n\n  [1]: /old_images/2020/07/623017393.jpg\n  [2]: /old_images/2020/07/2822560807.jpg\n  [3]: /old_images/2020/07/1405371260.gif\n  [4]: /old_images/2020/07/3520035333.gif\n","slug":"轨道交通领域的差速问题and我与轨交","published":1,"updated":"2020-12-14T12:21:06.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckipokukz0000k1199xi68ehe","content":"<p>大家好，我是那个喜欢火车的Captain。<br>有人说，一个男人不成熟的标志是可以为了一项事业英勇地死去，而一个男人成熟的标志是可以为了一项事业卑贱地活着。我可能是成熟了。在上个周末，从7月10号到13号的四天时间里，我经历了两场专业课考试，一个夏令营，外加一篇恶心的硕士毕业设计级别的论文（我正在和这个课的老师对线，祝我成功）。可喜的是，夏令营的结果还不错，优营在手，只可惜没有推免资格，不能很有底气地去跟想考的导师聊，虽然现在也有别的方向的导师要我。可能不满足和缺陷才是人生的真正形态吧。<br>今天拿到了结果其实挺高兴的，听栋宇说明天考完试打算给这个blog做个宣传，我说那我不如今晚出一篇文章，开始。<br>我是学电气的，或者说我本科是学电机的，就是那个会动的大铁疙瘩，但我今天想跟大家聊聊偏机械方面的内容。<br>我们日常生活中最常见的交通工具应该就是汽车了。无论以什么能源方式驱动，汽车在行驶过程中都会遵循相同的规律，我转动方向盘，前轮的方向就会变化带动汽车曲线运动。对于轨道交通（传统轮轨）而言，这样的过程发生在铁轨与走行部之间。<strong>走行部，理解字面即可，用于列车在铁轨上走行的部分。</strong>通俗一点讲，就是转向架。如果你不知道转向架是什么，没关系，你可以理解为是火车的车轮以及和它配套的一系列起到固定、缓冲减震、传动作用的机械系统。<br>可能很多人大概知道转向架是什么，但并没有真正地去研究过。的确，很惭愧地讲，在准备这个夏令营之前我也没有好好研究过，我关注的往往是与电有关的内容，机械部分的我一般都会很礼貌地跳过。转向架就是铁路车辆转弯的作动装置，它的上部与车厢相连接，并可以以垂直道面的方向为轴做小角度转动。<strong>注意，这里说的是“垂直道面的方向”，而不是竖直方向或者重力方向，</strong>一会儿会说为什么。一个转向架大概长这样。<br><img src=\"/old_images/2020/07/623017393.jpg\" alt=\"装箱架.jpg\"><br>我们可以看到它有两对车轮。同轴的一对车轮我们称之为一个“轮对”，有几个轮对就称几轴。例如，我们最常见的25系列客车，也是现在普铁最广泛使用的列车，每节车厢有两个二轴转向架，车辆本身是四轴车。有兴趣的小伙伴可以去B站等平台搜一下C64K，神华十二轴电力机车，那可是机车届的扛把子，全世界功率最大的机车，单机功率达到了14400kW。14400是什么概念呢，这么说吧，感兴趣的朋友可以去看我的上一篇投稿，CRH2A非统型两列加一起差不多也就这配置。<br>我们来简单了解一下转向架的构造。传统的转向架有一类叫做“三大件式转向架”，三大件指的是两个侧架和一个摇枕。摇枕指的就是转向架中央与车体接触的条状或盘状或长条形的机械结构，承担车体重量，同时能够像刚才说的那样转动。摇枕本身是和车体相对静止的，转动时是二者共同相对于转向架其他机构轴向转动。转向架的另一个比较重要的点就是悬挂系统，分为一系悬挂（轴箱和轮对之间）和二系悬挂（摇枕或车体与构架之间）。要命的是，我买的两本教材其中一本把一二系悬挂的定义写反了，我还先看的写错的这一本，导致我现在依旧分不清一二系悬挂，每次提到都要翻书看一眼。随着技术发展，更多的转向架也慢慢出现，在转向、减震缓冲等方面的性能有着很大的提升，像摆式列车这样的转向架也更为复杂，那就是另一回事了。<br>怎么样，听迷糊了没，如果没有咱就继续。刚才提到汽车转弯的过程。转弯势必会带来一个问题，那就是两个轮子如果保证角速度相同，则线速度也应该相同，但转弯时相同时间内外侧轮子滚过的距离显然是比内侧轮子长的，这个差不可以忽视。我们知道汽车是通过差速器解决的这个矛盾，那么火车也没有差速器或者类似差速器的装置呢？没有。道理很简单，第一，轮对两侧的轮子是同轴的，能保证绝对的角速度相同，不存在差速的条件；第二，从操作的角度讲，我个人认为差速器是一个主动作动部件，你给方向盘一个转动信号差速器才会发挥作用，而你给出转向信号是因为你希望人为地使车辆转弯。但火车不是这样，火车的导向是靠轨道对轮缘的限制实现的。如果问我轮缘是什么，这里放一张图大家自己看吧，我懒得讲。看的时候顺便也了解一下踏面是什么。<br><img src=\"/old_images/2020/07/2822560807.jpg\" alt=\"TIM图片20200716235932.jpg\"><br>好了，我们来讲火车转弯时发生了什么。可能大家高中学物理的时候做过这样类型的题，说火车转弯，转弯半径给你了，车辆质量给你了，速度给你了，轨道面倾角也给你了，让你求对内侧轨道的压力。当时做这题我就觉得这是纯扯，你把火车当质点系？闹呢？不过话说回来，这个模型其实很大程度上真实还原了火车过弯时候的情况。如果大家有兴趣，可以下次坐高铁动车的时候体验一下，看看过弯的时候火车是不是倾斜的（普速列车也存在这个现象，但设计速度越快的线路越明显，所以动车是最优解）。这其实是为了保护铁轨和车轮，在转弯时人为将外侧铁轨垫高，使重力的一个分量先行充当向心力（效果力），尽量不让轮缘和轨道之间发生摩擦。实际上，新建的铁路大多是无砟铁路（有砟铁路就是底下是石头子儿的铁路），对于这个垫高的高度会有很精确的控制，但既有线等有砟铁路还依赖人工修正，工人师傅会定期到转弯处，测量垫高是否符合技术手册的标准，如果不够，就用工具往外侧铁路地下推石子儿，强行垫高。很有趣其实。<br>扯远了，说回到转弯过程。这里各位应该就明白上文中我提到的并不是竖直方向而是垂直于道面了吧。到这里，还是没解决差速的问题，火车的解决思路就很巧妙，真的。如果你们仔细看上面那个图，你会发现其实踏面不是柱面，而是<strong>锥型面</strong>（不知道柱面和锥型面的小伙伴自己去补高数和线代去），越靠近轮缘半径越大。这就好办了。当火车进入弯道，铁轨开始倾斜，于是车厢向一侧倾斜，重力分量充当向心力带着车厢开始画圆。由于离心效果，车辆整体会有向外侧移动的趋势，也就是车辆本身会往外侧（垫高一侧）甩，就像你家的洗衣机或者你那热爱蹦迪的男朋友/女朋友一样。甩完之后的结果是，车辆的中轴线和轨道的中心线不再在竖直面内平行，而是错开一定的距离，此时接触轨道的踏面也会向外移，那么<strong>实际接触到外侧轨道的踏面滚转半径就要比内侧大了。</strong>在严格的角速度相等的时候，两侧的线速度就会不相等，外侧比内侧大，也就不存在差速的问题了。多巧妙，是不是，这就是轨道交通的魅力。<br>本来想继续讲讲轨道和道岔的，内容都想好了，忽然有些感慨想说点别的，那这部分内容就留到下一篇吧。有人说能让一群男人为止奋斗的从来不是金钱而实梦想，我觉得同济轨交就是我的梦想。我在哈工大电气，也不错，但我能学到的终究还是电气的东西，即便是与轨道交通有关，也仅仅是“有关”罢了。要想真正走入这个行业，还是要跟着专业的人学专业的东西，坐专业的事情。中国铁路，无论是国铁还是地方铁路、城市轨道交通，其实一直在风口浪尖上。有人说中国的高铁技术都是国外引进的，中国技术不行，有人说中国修铁路太浪费钱。实际上真的是这样吗？我还没有走入这个行业里。我的前脚已经搭在门槛上了，等我进去看看便知分晓。但我想说，任何一种技术都是从无到有从零到一的，十几年前我们没有技术的时候引进了国外的技术，也是花了大价钱的，后来我们慢慢在发展，到今天我们有了自己标准的动车组，我们开始向国外出口中国生产的轨道交通车辆，作为一名向往轨道交通的人，我是很自豪的。我们的第一艘航母也是买的前苏联的，后面经过我们的研究还是造出了自己的航母。一样的，我们的C919是以A320为模板的，阿娇（ARJ21）也是从模仿开始一步一步提升的。中国的技术现在行不行，我们去看看中车的海外订单就知道了。那天我看了一个纪录片，超级工程第一季，其中一集讲到了北京地铁网络的建设，有一个片段让我热泪盈眶，我截了下来，放在这里。<br><img src=\"/old_images/2020/07/1405371260.gif\" alt=\"TIM图片20200717000541.gif\"><br><img src=\"/old_images/2020/07/3520035333.gif\" alt=\"TIM图片20200717000707.gif\"><br>写这篇文章的时候，脑海里多次会想起这个画面，每当我看到这个动图我都忍不住落泪。可能这就是热爱，可能这就是我热爱一项事业的方式。我希望自己能够进入到这个行业中去真正做一些事情。我们没有西门子那样将近两百年的发展历程，我们真的要做很多努力去超越和创新。对于轨道交通，我很自豪地讲我是有自己的想法的，也希望有朝一日我也能够再次热泪盈眶地说一句：<br>“为了搞我们国家自己的轨道交通事业，我们那代轨交人，可以说是付出了辛苦的，很自豪。”<br>谢谢。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>大家好，我是那个喜欢火车的Captain。<br>有人说，一个男人不成熟的标志是可以为了一项事业英勇地死去，而一个男人成熟的标志是可以为了一项事业卑贱地活着。我可能是成熟了。在上个周末，从7月10号到13号的四天时间里，我经历了两场专业课考试，一个夏令营，外加一篇恶心的硕士毕业设计级别的论文（我正在和这个课的老师对线，祝我成功）。可喜的是，夏令营的结果还不错，优营在手，只可惜没有推免资格，不能很有底气地去跟想考的导师聊，虽然现在也有别的方向的导师要我。可能不满足和缺陷才是人生的真正形态吧。<br>今天拿到了结果其实挺高兴的，听栋宇说明天考完试打算给这个blog做个宣传，我说那我不如今晚出一篇文章，开始。<br>我是学电气的，或者说我本科是学电机的，就是那个会动的大铁疙瘩，但我今天想跟大家聊聊偏机械方面的内容。<br>我们日常生活中最常见的交通工具应该就是汽车了。无论以什么能源方式驱动，汽车在行驶过程中都会遵循相同的规律，我转动方向盘，前轮的方向就会变化带动汽车曲线运动。对于轨道交通（传统轮轨）而言，这样的过程发生在铁轨与走行部之间。<strong>走行部，理解字面即可，用于列车在铁轨上走行的部分。</strong>通俗一点讲，就是转向架。如果你不知道转向架是什么，没关系，你可以理解为是火车的车轮以及和它配套的一系列起到固定、缓冲减震、传动作用的机械系统。<br>可能很多人大概知道转向架是什么，但并没有真正地去研究过。的确，很惭愧地讲，在准备这个夏令营之前我也没有好好研究过，我关注的往往是与电有关的内容，机械部分的我一般都会很礼貌地跳过。转向架就是铁路车辆转弯的作动装置，它的上部与车厢相连接，并可以以垂直道面的方向为轴做小角度转动。<strong>注意，这里说的是“垂直道面的方向”，而不是竖直方向或者重力方向，</strong>一会儿会说为什么。一个转向架大概长这样。<br><img src=\"/old_images/2020/07/623017393.jpg\" alt=\"装箱架.jpg\"><br>我们可以看到它有两对车轮。同轴的一对车轮我们称之为一个“轮对”，有几个轮对就称几轴。例如，我们最常见的25系列客车，也是现在普铁最广泛使用的列车，每节车厢有两个二轴转向架，车辆本身是四轴车。有兴趣的小伙伴可以去B站等平台搜一下C64K，神华十二轴电力机车，那可是机车届的扛把子，全世界功率最大的机车，单机功率达到了14400kW。14400是什么概念呢，这么说吧，感兴趣的朋友可以去看我的上一篇投稿，CRH2A非统型两列加一起差不多也就这配置。<br>我们来简单了解一下转向架的构造。传统的转向架有一类叫做“三大件式转向架”，三大件指的是两个侧架和一个摇枕。摇枕指的就是转向架中央与车体接触的条状或盘状或长条形的机械结构，承担车体重量，同时能够像刚才说的那样转动。摇枕本身是和车体相对静止的，转动时是二者共同相对于转向架其他机构轴向转动。转向架的另一个比较重要的点就是悬挂系统，分为一系悬挂（轴箱和轮对之间）和二系悬挂（摇枕或车体与构架之间）。要命的是，我买的两本教材其中一本把一二系悬挂的定义写反了，我还先看的写错的这一本，导致我现在依旧分不清一二系悬挂，每次提到都要翻书看一眼。随着技术发展，更多的转向架也慢慢出现，在转向、减震缓冲等方面的性能有着很大的提升，像摆式列车这样的转向架也更为复杂，那就是另一回事了。<br>怎么样，听迷糊了没，如果没有咱就继续。刚才提到汽车转弯的过程。转弯势必会带来一个问题，那就是两个轮子如果保证角速度相同，则线速度也应该相同，但转弯时相同时间内外侧轮子滚过的距离显然是比内侧轮子长的，这个差不可以忽视。我们知道汽车是通过差速器解决的这个矛盾，那么火车也没有差速器或者类似差速器的装置呢？没有。道理很简单，第一，轮对两侧的轮子是同轴的，能保证绝对的角速度相同，不存在差速的条件；第二，从操作的角度讲，我个人认为差速器是一个主动作动部件，你给方向盘一个转动信号差速器才会发挥作用，而你给出转向信号是因为你希望人为地使车辆转弯。但火车不是这样，火车的导向是靠轨道对轮缘的限制实现的。如果问我轮缘是什么，这里放一张图大家自己看吧，我懒得讲。看的时候顺便也了解一下踏面是什么。<br><img src=\"/old_images/2020/07/2822560807.jpg\" alt=\"TIM图片20200716235932.jpg\"><br>好了，我们来讲火车转弯时发生了什么。可能大家高中学物理的时候做过这样类型的题，说火车转弯，转弯半径给你了，车辆质量给你了，速度给你了，轨道面倾角也给你了，让你求对内侧轨道的压力。当时做这题我就觉得这是纯扯，你把火车当质点系？闹呢？不过话说回来，这个模型其实很大程度上真实还原了火车过弯时候的情况。如果大家有兴趣，可以下次坐高铁动车的时候体验一下，看看过弯的时候火车是不是倾斜的（普速列车也存在这个现象，但设计速度越快的线路越明显，所以动车是最优解）。这其实是为了保护铁轨和车轮，在转弯时人为将外侧铁轨垫高，使重力的一个分量先行充当向心力（效果力），尽量不让轮缘和轨道之间发生摩擦。实际上，新建的铁路大多是无砟铁路（有砟铁路就是底下是石头子儿的铁路），对于这个垫高的高度会有很精确的控制，但既有线等有砟铁路还依赖人工修正，工人师傅会定期到转弯处，测量垫高是否符合技术手册的标准，如果不够，就用工具往外侧铁路地下推石子儿，强行垫高。很有趣其实。<br>扯远了，说回到转弯过程。这里各位应该就明白上文中我提到的并不是竖直方向而是垂直于道面了吧。到这里，还是没解决差速的问题，火车的解决思路就很巧妙，真的。如果你们仔细看上面那个图，你会发现其实踏面不是柱面，而是<strong>锥型面</strong>（不知道柱面和锥型面的小伙伴自己去补高数和线代去），越靠近轮缘半径越大。这就好办了。当火车进入弯道，铁轨开始倾斜，于是车厢向一侧倾斜，重力分量充当向心力带着车厢开始画圆。由于离心效果，车辆整体会有向外侧移动的趋势，也就是车辆本身会往外侧（垫高一侧）甩，就像你家的洗衣机或者你那热爱蹦迪的男朋友/女朋友一样。甩完之后的结果是，车辆的中轴线和轨道的中心线不再在竖直面内平行，而是错开一定的距离，此时接触轨道的踏面也会向外移，那么<strong>实际接触到外侧轨道的踏面滚转半径就要比内侧大了。</strong>在严格的角速度相等的时候，两侧的线速度就会不相等，外侧比内侧大，也就不存在差速的问题了。多巧妙，是不是，这就是轨道交通的魅力。<br>本来想继续讲讲轨道和道岔的，内容都想好了，忽然有些感慨想说点别的，那这部分内容就留到下一篇吧。有人说能让一群男人为止奋斗的从来不是金钱而实梦想，我觉得同济轨交就是我的梦想。我在哈工大电气，也不错，但我能学到的终究还是电气的东西，即便是与轨道交通有关，也仅仅是“有关”罢了。要想真正走入这个行业，还是要跟着专业的人学专业的东西，坐专业的事情。中国铁路，无论是国铁还是地方铁路、城市轨道交通，其实一直在风口浪尖上。有人说中国的高铁技术都是国外引进的，中国技术不行，有人说中国修铁路太浪费钱。实际上真的是这样吗？我还没有走入这个行业里。我的前脚已经搭在门槛上了，等我进去看看便知分晓。但我想说，任何一种技术都是从无到有从零到一的，十几年前我们没有技术的时候引进了国外的技术，也是花了大价钱的，后来我们慢慢在发展，到今天我们有了自己标准的动车组，我们开始向国外出口中国生产的轨道交通车辆，作为一名向往轨道交通的人，我是很自豪的。我们的第一艘航母也是买的前苏联的，后面经过我们的研究还是造出了自己的航母。一样的，我们的C919是以A320为模板的，阿娇（ARJ21）也是从模仿开始一步一步提升的。中国的技术现在行不行，我们去看看中车的海外订单就知道了。那天我看了一个纪录片，超级工程第一季，其中一集讲到了北京地铁网络的建设，有一个片段让我热泪盈眶，我截了下来，放在这里。<br><img src=\"/old_images/2020/07/1405371260.gif\" alt=\"TIM图片20200717000541.gif\"><br><img src=\"/old_images/2020/07/3520035333.gif\" alt=\"TIM图片20200717000707.gif\"><br>写这篇文章的时候，脑海里多次会想起这个画面，每当我看到这个动图我都忍不住落泪。可能这就是热爱，可能这就是我热爱一项事业的方式。我希望自己能够进入到这个行业中去真正做一些事情。我们没有西门子那样将近两百年的发展历程，我们真的要做很多努力去超越和创新。对于轨道交通，我很自豪地讲我是有自己的想法的，也希望有朝一日我也能够再次热泪盈眶地说一句：<br>“为了搞我们国家自己的轨道交通事业，我们那代轨交人，可以说是付出了辛苦的，很自豪。”<br>谢谢。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckipmw0bi00017p190uirfoy7","category_id":"ckipmw0bl00047p199bs74xz7","_id":"ckipmw0br000g7p194tmh5gta"},{"post_id":"ckipmw0bk00037p197gel87xx","category_id":"ckipmw0bp000b7p19dpcj63pv","_id":"ckipmw0bu000n7p19gb0cd62r"},{"post_id":"ckipmw0br000f7p190pml3233","category_id":"ckipmw0bl00047p199bs74xz7","_id":"ckipmw0bv000p7p19h40o25gf"},{"post_id":"ckipmw0bn00067p1990qcau2m","category_id":"ckipmw0bp000b7p19dpcj63pv","_id":"ckipmw0bw000r7p19cgwg9t1s"},{"post_id":"ckipmw0bv000o7p19djvn6xw1","category_id":"ckipmw0bl00047p199bs74xz7","_id":"ckipmw0bx000v7p19dzod9yx1"},{"post_id":"ckipmw0bo00087p193y5xfqtu","category_id":"ckipmw0bu000m7p199qfnfv61","_id":"ckipmw0by000y7p196swm1xuz"},{"post_id":"ckipmw0bv000q7p19bnsu3mck","category_id":"ckipmw0bl00047p199bs74xz7","_id":"ckipmw0bz00107p19gnqzfpuc"},{"post_id":"ckipmw0bw000t7p191rrlhawc","category_id":"ckipmw0bp000b7p19dpcj63pv","_id":"ckipmw0bz00127p19gcrl6sgf"},{"post_id":"ckipmw0bp000a7p1942vk0zri","category_id":"ckipmw0bw000s7p199u6j63df","_id":"ckipmw0c000157p1947g74y4k"},{"post_id":"ckipmw0by000x7p19hqp8c8ot","category_id":"ckipmw0bw000s7p199u6j63df","_id":"ckipmw0c100177p191rdr00ef"},{"post_id":"ckipmw0by000z7p19beaocgdd","category_id":"ckipmw0bp000b7p19dpcj63pv","_id":"ckipmw0c2001a7p19asacfs3g"},{"post_id":"ckipmw0bq000d7p19fl9p7ln6","category_id":"ckipmw0bx000w7p198ditf1f0","_id":"ckipmw0c2001c7p19707gbngp"},{"post_id":"ckipmw0bz00117p19hakh1dls","category_id":"ckipmw0bl00047p199bs74xz7","_id":"ckipmw0c3001f7p199ymddt83"},{"post_id":"ckipmw0c000147p19d5gogt4a","category_id":"ckipmw0bp000b7p19dpcj63pv","_id":"ckipmw0c4001h7p195znc2vpf"},{"post_id":"ckipmw0bt000j7p192zadfcor","category_id":"ckipmw0bu000m7p199qfnfv61","_id":"ckipmw0c4001j7p1991bfg9ks"},{"post_id":"ckipmw0c000167p1900fh3w7h","category_id":"ckipmw0bl00047p199bs74xz7","_id":"ckipmw0c5001l7p190osrhq6m"},{"post_id":"ckipmw0c100197p19ccpmhyru","category_id":"ckipmw0bw000s7p199u6j63df","_id":"ckipmw0c5001n7p19enn71kzg"},{"post_id":"ckipmw0bu000l7p191gtodkcy","category_id":"ckipmw0c100187p19fzxy8da0","_id":"ckipmw0c6001p7p198ifab5fd"},{"post_id":"ckipmw0c2001b7p19dg6513cl","category_id":"ckipmw0bu000m7p199qfnfv61","_id":"ckipmw0c7001r7p19215wfuwb"},{"post_id":"ckipmw0c3001e7p197fam6oqk","category_id":"ckipmw0bw000s7p199u6j63df","_id":"ckipmw0c7001t7p196i1q5e7r"},{"post_id":"ckipmw0bx000u7p19dvv422k8","category_id":"ckipmw0bx000w7p198ditf1f0","_id":"ckipmw0c8001v7p194mus5y7c"},{"post_id":"ckipmw0c3001g7p19a1zefph0","category_id":"ckipmw0c100187p19fzxy8da0","_id":"ckipmw0c8001x7p19fbxvgsqu"},{"post_id":"ckipmw0c4001i7p19b5vpf1pe","category_id":"ckipmw0bl00047p199bs74xz7","_id":"ckipmw0c9001z7p198i0fe9b8"},{"post_id":"ckipmw0c4001k7p19enmj9ci1","category_id":"ckipmw0bu000m7p199qfnfv61","_id":"ckipmw0c900217p193zy867rk"},{"post_id":"ckipmw0c5001m7p197x34h05t","category_id":"ckipmw0bl00047p199bs74xz7","_id":"ckipmw0ca00237p195yha2d1l"},{"post_id":"ckipmw0c6001o7p19daib5vrj","category_id":"ckipmw0bw000s7p199u6j63df","_id":"ckipmw0cb00257p19gqvq0nhb"},{"post_id":"ckipmw0c6001q7p19hl9w1eda","category_id":"ckipmw0bw000s7p199u6j63df","_id":"ckipmw0cc00277p193ln4azzc"},{"post_id":"ckipmw0c7001s7p19bc4g1294","category_id":"ckipmw0bw000s7p199u6j63df","_id":"ckipmw0cf00297p19ca5r3h2b"},{"post_id":"ckipmw0c7001u7p195dxn1j57","category_id":"ckipmw0bp000b7p19dpcj63pv","_id":"ckipmw0cf002b7p191ncfckja"},{"post_id":"ckipmw0c8001w7p19cgf66d65","category_id":"ckipmw0bw000s7p199u6j63df","_id":"ckipmw0cg002d7p19gqwi7e4r"},{"post_id":"ckipmw0c8001y7p19b3ez5k4b","category_id":"ckipmw0bl00047p199bs74xz7","_id":"ckipmw0ch002f7p193o078te7"},{"post_id":"ckipmw0c900207p19h9vthrsh","category_id":"ckipmw0bl00047p199bs74xz7","_id":"ckipmw0cj002h7p190gfu0svw"},{"post_id":"ckipmw0ca00227p199rleb1h5","category_id":"ckipmw0bp000b7p19dpcj63pv","_id":"ckipmw0cj002j7p19f5eoh1kd"},{"post_id":"ckipmw0ca00247p19c7g07nis","category_id":"ckipmw0bw000s7p199u6j63df","_id":"ckipmw0ck002l7p192uq8atbm"},{"post_id":"ckipmw0cb00267p1953u42o98","category_id":"ckipmw0bw000s7p199u6j63df","_id":"ckipmw0ck002n7p19hr4c7y4c"},{"post_id":"ckipmw0cc00287p195ud20drz","category_id":"ckipmw0bp000b7p19dpcj63pv","_id":"ckipmw0cl002p7p198u8yff77"},{"post_id":"ckipmw0cf002a7p196irzeeb3","category_id":"ckipmw0bp000b7p19dpcj63pv","_id":"ckipmw0cm002r7p190opi1795"},{"post_id":"ckipmw0cg002c7p19hvmb5106","category_id":"ckipmw0bp000b7p19dpcj63pv","_id":"ckipmw0cm002t7p192ewng99d"},{"post_id":"ckipmw0cg002e7p19eeev0qb5","category_id":"ckipmw0bl00047p199bs74xz7","_id":"ckipmw0cn002v7p197atyas19"},{"post_id":"ckipmw0ch002g7p19fw8w0ni7","category_id":"ckipmw0bu000m7p199qfnfv61","_id":"ckipmw0cn002w7p194ifpesej"},{"post_id":"ckipmw0cj002i7p19aqlf7ozx","category_id":"ckipmw0bw000s7p199u6j63df","_id":"ckipmw0cn002x7p195uvz4d71"},{"post_id":"ckipmw0ck002k7p192vad9rtb","category_id":"ckipmw0bx000w7p198ditf1f0","_id":"ckipmw0cn002y7p192yvo18jz"},{"post_id":"ckipmw0ck002m7p199w7n0mg3","category_id":"ckipmw0bx000w7p198ditf1f0","_id":"ckipmw0cn002z7p19abx219mj"},{"post_id":"ckipmw0cl002o7p192g72gkwn","category_id":"ckipmw0c100187p19fzxy8da0","_id":"ckipmw0cn00307p197lf10il7"},{"post_id":"ckipmw0cm002s7p19gqn8e79s","category_id":"ckipmw0bl00047p199bs74xz7","_id":"ckipmw0cn00327p190kbt9dyb"},{"post_id":"ckipmw0cm002u7p1986jw642c","category_id":"ckipmw0bp000b7p19dpcj63pv","_id":"ckipmw0cn00337p196t2v2zce"},{"post_id":"ckipmw0cp00347p19g8e3hiaz","category_id":"ckipmw0c100187p19fzxy8da0","_id":"ckipmw0cq00357p1943vh0rjw"},{"post_id":"ckipmw0cq00367p19d4u0hr56","category_id":"ckipmw0bu000m7p199qfnfv61","_id":"ckipmw0cr00377p196aurhrhx"},{"post_id":"ckipokukz0000k1199xi68ehe","category_id":"ckipmw0bl00047p199bs74xz7","_id":"ckipokul20001k11991b894ef"}],"PostTag":[],"Tag":[]}}